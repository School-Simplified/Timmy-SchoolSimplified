{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Python",
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "No module named 'discord'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 14,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 12,
        "length": 7,
        "offset": 18,
        "surroundingCode": "import re\n\nimport discord\nfrom discord.ext import commands\nfrom core import database\nfrom core.common import MKT_ID"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "6255304559986297359"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Python",
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'discord'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 15,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 13,
        "length": 7,
        "offset": 21,
        "surroundingCode": "\nimport discord\nfrom discord.ext import commands\nfrom core import database\nfrom core.common import MKT_ID"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "2393725366649142559"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Python",
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'commands'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 15,
      "offset": 24,
      "length": 8,
      "code": {
        "startLine": 13,
        "length": 8,
        "offset": 40,
        "surroundingCode": "\nimport discord\nfrom discord.ext import commands\nfrom core import database\nfrom core.common import MKT_ID\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "631510640421760453"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Python",
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "No module named 'boto3'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 17,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 15,
        "length": 5,
        "offset": 37,
        "surroundingCode": "from threading import Thread\n\nimport boto3\nimport chat_exporter\nimport configcatclient\nimport discord"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "-8242326471984707156"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Python",
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "No module named 'chat_exporter'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 18,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 16,
        "length": 13,
        "offset": 21,
        "surroundingCode": "\nimport boto3\nimport chat_exporter\nimport configcatclient\nimport discord\nimport requests"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "3891730011087838723"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Python",
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "No module named 'configcatclient'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 19,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 17,
        "length": 15,
        "offset": 41,
        "surroundingCode": "import boto3\nimport chat_exporter\nimport configcatclient\nimport discord\nimport requests\nimport sentry_sdk"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "-7380950011693981105"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Python",
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "No module named 'discord'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 20,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 18,
        "length": 7,
        "offset": 51,
        "surroundingCode": "import chat_exporter\nimport configcatclient\nimport discord\nimport requests\nimport sentry_sdk\nfrom botocore.exceptions import ClientError"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "3842327154365446919"
}]}