{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "The default argument is mutable",
  "severity": "High",
  "comment": "Default argument value is mutable",
  "detailsInfo": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for\nan argument.   \n\nDefault argument values are evaluated only once at function definition time,\nwhich means that modifying the\ndefault value of the argument will affect all subsequent calls of that function.\n\n**Example:**\n\n```\ndef func(s, cache={}):\n    cache[s] = None\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef func(s, cache=None):\n    if cache is None:\n        cache = {}\n    cache[s] = None\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 137,
      "offset": 80,
      "length": 2,
      "code": {
        "startLine": 135,
        "length": 2,
        "offset": 105,
        "surroundingCode": "    )\n    async def info(\n            self, ctx: commands.Context, user: commands.Greedy[discord.User] = []\n    ):\n        for user in user:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyDefaultArgumentInspection"
  },
  "hash": "2085ed6da720f2cf9c22655e671e1915a21e0b746ba7522f6c3140e47cb1a7d0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'creds' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 230,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 228,
        "length": 5,
        "offset": 33,
        "surroundingCode": "            pass\n\n        return creds\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "495ce38780ae1be9e36358e2090d2c414d194d5a45057f6e551d6471f0b7576b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'authorrank_len' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1780,
      "offset": 49,
      "length": 14,
      "code": {
        "startLine": 1778,
        "length": 14,
        "offset": 105,
        "surroundingCode": "\n                if f'{menu.ctx.author.id}' in listkeys:\n                    authorrank = f\"Your rank: #{authorrank_len}\"\n\n                else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "2fedc6b10c3cf632df89e5f4ae84e966c2d58bd35de4882f280f1b4f2ac63437"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'value' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 32,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 30,
        "length": 5,
        "offset": 45,
        "surroundingCode": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "2187dac9eeb0fcf2d8d8bccde334aca113b7ea985418fba53b04588c97437be4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 767,
      "offset": 42,
      "length": 5,
      "code": {
        "startLine": 765,
        "length": 5,
        "offset": 88,
        "surroundingCode": "                    )\n                finally:\n                    await ctx.send(embed=embed)\n        else:\n            embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "c32ffbf8c40f6e03eea4bad2f5761b6e9156dfa7051992db68b6993fb96830a1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 980,
      "offset": 46,
      "length": 5,
      "code": {
        "startLine": 978,
        "length": 5,
        "offset": 100,
        "surroundingCode": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "988b9abd238118e0781f371f8acb5b60445512e2e10300f2b566da2095f42e8d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1168,
      "offset": 46,
      "length": 5,
      "code": {
        "startLine": 1166,
        "length": 5,
        "offset": 100,
        "surroundingCode": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n\n            else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "8de570fdc0ef77afd9e3e918b844686b2e1401fd504c7c56f3b3aa707a5995db"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1343,
      "offset": 46,
      "length": 5,
      "code": {
        "startLine": 1341,
        "length": 5,
        "offset": 100,
        "surroundingCode": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "e412963a9cd225f0036af8bcafa422b13c1fa3bdbbc1cd8b339ccaa997d40c21"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1463,
      "offset": 46,
      "length": 5,
      "code": {
        "startLine": 1461,
        "length": 5,
        "offset": 100,
        "surroundingCode": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "b1b8c39cc7ddaa0ebff2e84121e783e596f367d1b5a9c2a8265d36ec827fa3a3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1543,
      "offset": 46,
      "length": 5,
      "code": {
        "startLine": 1541,
        "length": 5,
        "offset": 100,
        "surroundingCode": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "cecf31fbe1d51e43051e774d860c3b695957df13e1d7bd045b7842c760cd04f5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'value' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 21,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 19,
        "length": 5,
        "offset": 45,
        "surroundingCode": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "9d9fb06ba1811986c1f507b15b60da8d9623508fc340f06268235192988bdb60"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'value' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 39,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 37,
        "length": 5,
        "offset": 45,
        "surroundingCode": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "f613d680061e2f92932eb4b8d677dc8ed2635f5d5957da5aefd175957b900c74"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Name 'roleStr' can be undefined",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 390,
      "offset": 24,
      "length": 7,
      "code": {
        "startLine": 388,
        "length": 7,
        "offset": 114,
        "surroundingCode": "\n            dmMSG = f\"{member.mention}, you've reached level **{newLvl}** in Study VC!\" \\\n                    f\"{roleStr}\"\n            try:\n                await member.send(dmMSG)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "cac0ee1b22d45bf91a95c8e7db036fcf5a120d60a904d7cfdb558a223911c77d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'query' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 76,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 74,
        "length": 5,
        "offset": 40,
        "surroundingCode": "        )\n        if renew:\n            query.delete_instance()\n\n        await member.move_to(None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "80ed2ac6d65c5dcb41dcffbfec13000f8d68b7d580e9469bdbcf9ef1acd73d2b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'query' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 91,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 89,
        "length": 5,
        "offset": 54,
        "surroundingCode": "        await addLeaderboardProgress(member)\n\n        query.goal = goal\n        query.RenewalTime = renewal\n        query.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "15b1b1d32e3127c482ba22212bac1bbe7e7648b9e962f5bac1a536fec95c4952"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'query' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 76,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 74,
        "length": 5,
        "offset": 40,
        "surroundingCode": "        )\n        if renew:\n            query.delete_instance()\n\n        await member.move_to(None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "ee2dedb3ec5d33b0d095eec366993e1b1d1131bb5afff02d5d921ce16994f24a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'query' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 91,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 89,
        "length": 5,
        "offset": 54,
        "surroundingCode": "        await addLeaderboardProgress(member)\n\n        query.goal = goal\n        query.RenewalTime = renewal\n        query.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "fd223405169559ff93d2bfb416f7a9165fb02e1598492a664534c36449555db2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'msg' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 156,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 154,
        "length": 3,
        "offset": 57,
        "surroundingCode": "    if response == None:\n        msg = S3_URL\n    return msg, transcript_file, S3_URL\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "47f913d53f5be1e1ab4f0e2affd8060af48d1055038b83165f67bf38944e9c20"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 3856,
      "code": {
        "startLine": 1,
        "length": 3856,
        "offset": 0,
        "surroundingCode": "\"\"\"\nSETUP:\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "c2a589219eb4a6e3a24b6bd23a503d0f43805ec6b5189218e3c5595a0fb87662"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 71568,
      "code": {
        "startLine": 1,
        "length": 71568,
        "offset": 0,
        "surroundingCode": "# TODO: Testing Feedback Modal, Testing TicketLockButton\n\nimport asyncio"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "3cfe63709664d51a02f70f99b4b6e1bf75727d57f32d75ca2b93618bf3e881c3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "core/docsapi.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 3843,
      "code": {
        "startLine": 1,
        "length": 3843,
        "offset": 0,
        "surroundingCode": "from __future__ import print_function\n\nimport os.path"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "0b4a1a0ece7bfcd55020b0803fd5bc61f19447f58f9e95f3d73a1dbd1ec20952"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 17376,
      "code": {
        "startLine": 1,
        "length": 17376,
        "offset": 0,
        "surroundingCode": "import collections\nimport os\nimport sys"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "647ef40920bb91c25f17163b79480bcf8d73cf7848322f0760fa87f89400006e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 6325,
      "code": {
        "startLine": 1,
        "length": 6325,
        "offset": 0,
        "surroundingCode": "from typing import List\nfrom datetime import datetime\nimport pprint"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "813d822b80b0aba1d59b5bfea7ebacaa17cdb1763a68aea071a3da05a9cd963f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 17320,
      "code": {
        "startLine": 1,
        "length": 17320,
        "offset": 0,
        "surroundingCode": "import collections\nimport json\nimport os"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "56fbd456ac4aee80c7c437be29fe277ef93a4fe3b202d300241c759d154bd531"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 8041,
      "code": {
        "startLine": 1,
        "length": 8041,
        "offset": 0,
        "surroundingCode": "import math\n\nimport peewee"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "155bd8d3e8f45c494eed1f0008413922c2b62626951dd8d2d0760cf38114a88c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 4004,
      "code": {
        "startLine": 1,
        "length": 4004,
        "offset": 0,
        "surroundingCode": "import asyncio\nimport json\nimport os"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "d2874b9f4bd181fce21c37ac6fe9287785af09ba4f85c290bf27a766c58b3227"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/CommandsOnly.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1596,
      "code": {
        "startLine": 1,
        "length": 1596,
        "offset": 0,
        "surroundingCode": "import discord\nfrom core import database\nfrom core.common import rulesDict"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "798a9d77480a3d034221b0b91eda654a628b3ae317cfa34e548649dbd3e8f749"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 27593,
      "code": {
        "startLine": 1,
        "length": 27593,
        "offset": 0,
        "surroundingCode": "# Copyright (c) 2015-2021 Rapptz\n# Copyright (c) 2022-present School Simplified\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "5e6dd131cab727031f453980fc6a68a546b3a98c9a6b5d2565f66903c4a13617"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 28740,
      "code": {
        "startLine": 1,
        "length": 28740,
        "offset": 0,
        "surroundingCode": "import asyncio\nimport datetime, pytz\nimport random"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "c9c3ec30512fc9eb5fdb2b9395e1ff82482f62b54aecb9aba0b2cd7af4fdc1ad"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/Blacklist.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2789,
      "code": {
        "startLine": 1,
        "length": 2789,
        "offset": 0,
        "surroundingCode": "import discord\nfrom core import database\nfrom core.checks import slash_is_bot_admin_4, slash_is_bot_admin_3"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "3e8eb96c81eb9e647781b9af4c354491b9248bf6a1926148decf3992b0d2bfe7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 29914,
      "code": {
        "startLine": 1,
        "length": 29914,
        "offset": 0,
        "surroundingCode": "import asyncio\nimport random\nimport subprocess"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "894f4ae309f43f270853edb8efaf1966bf886771dc0e43ce26d20b61ce184a07"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/todocommands.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 3217,
      "code": {
        "startLine": 1,
        "length": 3217,
        "offset": 0,
        "surroundingCode": "import discord\nfrom core import database\nfrom discord.ext import commands"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "17b27af7dd3d81e82180f1459d948a8f72e48152ecc0a3c2146fa7f9d4b5fe7c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 18265,
      "code": {
        "startLine": 1,
        "length": 18265,
        "offset": 0,
        "surroundingCode": "import subprocess\nimport sys\nfrom pathlib import Path"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "ada52c10c1d28ecb54331423bc52e91bc4fa99e6dae9dbb9878092ec1beb5d48"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 4136,
      "code": {
        "startLine": 1,
        "length": 4136,
        "offset": 0,
        "surroundingCode": "from __future__ import print_function\n\nimport random"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "79fd1cc1ecb8a8e124147056df82311bb8b8be4238e2d05059b7bd659cbca74e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/RedirectService.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1939,
      "code": {
        "startLine": 1,
        "length": 1939,
        "offset": 0,
        "surroundingCode": "import os\nimport aiohttp\nimport discord"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "c5073ebe71896dc55f5148f82cb914c0b61b2ead4b60296b48a6ddc6b3134ca7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 6349,
      "code": {
        "startLine": 1,
        "length": 6349,
        "offset": 0,
        "surroundingCode": "import discord\nfrom discord import ui\nfrom discord.ext import commands, tasks"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "2d6a5674a763a1fb64958ddcf59ff6e285f21efb0dfab0db807e6710fe8b8581"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 68805,
      "code": {
        "startLine": 1,
        "length": 68805,
        "offset": 0,
        "surroundingCode": "import datetime\nfrom datetime import datetime, timedelta\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "7d2d92fadd2cc2bc1491410afa3adb8452e66bbfe2295b443d2b2686d252f0c0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 30537,
      "code": {
        "startLine": 1,
        "length": 30537,
        "offset": 0,
        "surroundingCode": "import asyncio\nimport datetime\nfrom datetime import datetime, timedelta"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "cef4da0b87cc834c8a566f996c91d5d0ffc9cbeee49e97ce2fc684fdc48deae0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1382,
      "code": {
        "startLine": 1,
        "length": 1382,
        "offset": 0,
        "surroundingCode": "import pytz\nimport datetime\nfrom dateutil import parser"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "4ee034fc1845ffcae8da5961702c992a12c0594585af97e436cc5e6bb96cf2de"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 15915,
      "code": {
        "startLine": 1,
        "length": 15915,
        "offset": 0,
        "surroundingCode": "from datetime import datetime, timedelta\n\nimport discord"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "6613ec7aeda7cd00261851e822d3cad31af83b62d070015b8c9114ca58771fb5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 8319,
      "code": {
        "startLine": 1,
        "length": 8319,
        "offset": 0,
        "surroundingCode": "import asyncio\nimport datetime\nfrom datetime import datetime, timedelta"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "01152ad26eb553671cb52246f98c74055a84b25c4117e4af2d4b12bd608a6045"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 8336,
      "code": {
        "startLine": 1,
        "length": 8336,
        "offset": 0,
        "surroundingCode": "import asyncio\nimport datetime\nfrom datetime import datetime, timedelta"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "a3d4afd8f6a9ea3efd6e525beac14227f0d3ce8b5cc589111bacfd58ff9aa50d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 20741,
      "code": {
        "startLine": 1,
        "length": 20741,
        "offset": 0,
        "surroundingCode": "import random\nimport string\nfrom datetime import datetime, timedelta"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "47691d1b79cf8df0a1c5c1d073a568e5d908bbf6d47ead8d79d126246353cef8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 5446,
      "code": {
        "startLine": 1,
        "length": 5446,
        "offset": 0,
        "surroundingCode": "from datetime import datetime, timedelta\n\nimport discord"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "dcedd6b3b0f36f49051f90441f7cf9b256e3ffaad66565b9bca7ae38e567967e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 5974,
      "code": {
        "startLine": 1,
        "length": 5974,
        "offset": 0,
        "surroundingCode": "import discord\nfrom core import database\nfrom core.common import TECH_ID, SandboxConfig, get_extensions"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "f895e6a37477f0ac15ec4bd1c0afea03bbb0da3b2da3b8f61261b8381bed1947"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/set.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 16351,
      "code": {
        "startLine": 1,
        "length": 16351,
        "offset": 0,
        "surroundingCode": "from typing import Dict, List, Literal, Union\n\nfrom discord.ext import commands"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "14fcf1f6d72adc9f8fcd00bab1f7ffd2a444e3e44190a886dfd7ad48dac1cc40"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/guess.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1460,
      "code": {
        "startLine": 1,
        "length": 1460,
        "offset": 0,
        "surroundingCode": "import discord\nfrom discord import slash_command\nfrom discord.ext import commands"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "07546cb59ed99658bd1e2042ef7e321bedb8522f698d4da9ad3ba69ac0e86558"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/guild_check.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1189,
      "code": {
        "startLine": 1,
        "length": 1189,
        "offset": 0,
        "surroundingCode": "from discord.ext import commands\nimport discord\nfrom core import database"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "58a84628289aed2330bd9bf51a1c0de9e0d7a7ea8b1edd991628284af44ebd15"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 47008,
      "code": {
        "startLine": 1,
        "length": 47008,
        "offset": 0,
        "surroundingCode": "import asyncio\nimport io\nimport os"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "a7e52b6bf02bebf3009d319119fd9138a400b5654583637ddab23033babd8efb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/messagelogs.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2427,
      "code": {
        "startLine": 1,
        "length": 2427,
        "offset": 0,
        "surroundingCode": "import datetime\nfrom datetime import datetime\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "f72435757047f820a5b094e3fbab8c3e8ed44de1ba4c6438fd3d150d89e6ddf3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 8128,
      "code": {
        "startLine": 1,
        "length": 8128,
        "offset": 0,
        "surroundingCode": "import asyncio\nfrom datetime import datetime\nimport os"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "46f74e361eb473c8ae223de3e0c4d4f184999779268866a424a77b8f1cc874c3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 9787,
      "code": {
        "startLine": 1,
        "length": 9787,
        "offset": 0,
        "surroundingCode": "import discord\nfrom core.common import (\n    CH_ID,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "a5b8364dfea0a9ff9c8b20b3c9de39c4d00ee21981ca472544f641c101b18f5b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 10452,
      "code": {
        "startLine": 1,
        "length": 10452,
        "offset": 0,
        "surroundingCode": "\"\"\"\nCopyright (C) School Simplified - All Rights Reserved\n * Permission is granted to use this application as a code reference for educational purposes."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "52b54b8e50920f45ba4eb857d308868320c90a1b03f6c27d066f3c577266a071"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "cog_tests.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 936,
      "code": {
        "startLine": 1,
        "length": 936,
        "offset": 0,
        "surroundingCode": "import os\nimport sys\nfrom pathlib import Path"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "ba9c8f8c26768312ff5789dd64aa92a1e81a7ceea075f1002ab0db9f7a94c60a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "requirements.txt",
      "language": "TEXT",
      "line": 1,
      "offset": 1,
      "length": 2260,
      "code": {
        "startLine": 1,
        "length": 2260,
        "offset": 0,
        "surroundingCode": "aiohttp==3.8.1\naiosignal==1.2.0\nanyio==3.5.0"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "df7ecff867e4b5005d13dbed3faa90bd2c0734c7e1bed592bd3cb1ac2f531fd9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Missing parameter r_id in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 103,
      "offset": 30,
      "length": 9,
      "code": {
        "startLine": 101,
        "length": 9,
        "offset": 54,
        "surroundingCode": "        return ListData\n\n    def fetch_redirect(self, r_id: str) -> RedirectPizza:\n        \"\"\"Fetches a redirect.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "7c540045d85522766746c949e9a5261efd023dacebdd4914b71ce152c48ca0f7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Unexpected parameter url_code in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 107,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 105,
        "length": 8,
        "offset": 27,
        "surroundingCode": "\n        Args:\n            url_code (str): The URL code to fetch.\n            domain (str, optional): The domain to use. Defaults to None.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "7d581e9081f0f36734fea24c3f63c6b04ceb0e38ac4c8793aa9a247bf7864bff"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Unexpected parameter domain in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 108,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 106,
        "length": 6,
        "offset": 77,
        "surroundingCode": "        Args:\n            url_code (str): The URL code to fetch.\n            domain (str, optional): The domain to use. Defaults to None.\n\n        Raises:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "d304b43cdf8c4609b3368f98473928da2e76dc5965cf16ffe059c6ec55ebc45b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Missing parameter r_id in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 191,
      "offset": 28,
      "length": 9,
      "code": {
        "startLine": 189,
        "length": 9,
        "offset": 38,
        "surroundingCode": "        )\n\n    def del_redirect(self, r_id: str) -> typing.Union[dict, int]:\n        \"\"\"Deletes a redirect.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "d24c12d4c796efaf055b1b8ee1977d0fe50a47e4128f2f53194ecfc1578bb2b4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Unexpected parameter redirect_url in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 195,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 193,
        "length": 12,
        "offset": 27,
        "surroundingCode": "\n        Args:\n            redirect_url (str): The URL to delete.\n            domain (str, optional): The domain to use. Defaults to None.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "e3504cd22faf998e142dc0c11672e98df2582af3d223366a4d20d87a65a3a589"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Unexpected parameter domain in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 196,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 194,
        "length": 6,
        "offset": 77,
        "surroundingCode": "        Args:\n            redirect_url (str): The URL to delete.\n            domain (str, optional): The domain to use. Defaults to None.\n\n        Raises:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "97c35f31ffdf109259bf585aff0fbd4f4f1940e4f74c4eb2e499ee27fea30e6c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Missing parameter self in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 159,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 157,
        "length": 4,
        "offset": 17,
        "surroundingCode": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "74e36bf6345c76c1a38f025fe3d8ede589ae4c9857f5f37d1fa89911328f3a4b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Missing parameter sandbox in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 159,
      "offset": 34,
      "length": 21,
      "code": {
        "startLine": 157,
        "length": 21,
        "offset": 35,
        "surroundingCode": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "c02864f3b091392a75caf96607b2a6555dd087f3896d5e2c8545db9c9f56d7c7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Missing parameter sandbox in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 277,
      "offset": 59,
      "length": 21,
      "code": {
        "startLine": 275,
        "length": 21,
        "offset": 72,
        "surroundingCode": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "86f802b1d16f35d904b042f123a8e48789dca679dd081417a3f8d457a4baee2b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Using equality operators to compare with None",
  "severity": "Moderate",
  "comment": "Comparison with None performed with equality operators",
  "detailsInfo": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 128,
      "offset": 12,
      "length": 18,
      "code": {
        "startLine": 126,
        "length": 18,
        "offset": 145,
        "surroundingCode": "        print(self.LobbyStartIDs[member.guild.id])\n        lobbyStart = member.guild.get_channel(self.LobbyStartIDs[member.guild.id])\n        if lobbyStart == None:\n            try:\n                lobbyStart = self.bot.get_channel("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyComparisonWithNoneInspection"
  },
  "hash": "a560279693087a6ac7bff2fad39ca93746275bcfdbe60404f628edbb0082f197"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Using equality operators to compare with None",
  "severity": "Moderate",
  "comment": "Comparison with None performed with equality operators",
  "detailsInfo": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 136,
      "offset": 8,
      "length": 16,
      "code": {
        "startLine": 134,
        "length": 16,
        "offset": 66,
        "surroundingCode": "    embed.add_field(name=\"Transcript Link\", value=S3_URL)\n\n    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyComparisonWithNoneInspection"
  },
  "hash": "5cccda372efdc6358e7cc905a4e302b47ed6773dd37a7ca48b0829305e4a6b69"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Using equality operators to compare with None",
  "severity": "Moderate",
  "comment": "Comparison with None performed with equality operators",
  "detailsInfo": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 138,
      "offset": 8,
      "length": 23,
      "code": {
        "startLine": 136,
        "length": 23,
        "offset": 79,
        "surroundingCode": "    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:\n        for UAuthor in responsesauthor:\n            try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyComparisonWithNoneInspection"
  },
  "hash": "2e8b4859df97eb8d4df94b60f022fd37e4ee10194aa6de3bc212918afe5bd45b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Using equality operators to compare with None",
  "severity": "Moderate",
  "comment": "Comparison with None performed with equality operators",
  "detailsInfo": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 154,
      "offset": 8,
      "length": 16,
      "code": {
        "startLine": 152,
        "length": 16,
        "offset": 21,
        "surroundingCode": "        pass\n\n    if response == None:\n        msg = S3_URL\n    return msg, transcript_file, S3_URL"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyComparisonWithNoneInspection"
  },
  "hash": "2617a89bcfc2c03a002d25013b9debe1841bd6bab857cb2fc19a9b86c423ae9e"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "severity": "High",
  "comment": "Redundant character escape `\\]` in RegExp",
  "detailsInfo": "Reports character escapes that are replaceable with the unescaped character without a change in meaning. Note that inside the square brackets of a character class, many escapes are unnecessary that would be necessary outside of a character class.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "RegExp",
      "line": 71,
      "offset": 58,
      "length": 2,
      "code": {
        "startLine": 69,
        "length": 2,
        "offset": 80,
        "surroundingCode": "\n                else:\n                    banReason = re.match(r\"[^[]*\\[([^]]*)\\]\", banReasonAUDIT).groups()[\n                        0\n                    ]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape"
  },
  "hash": "443056e4c246dc29c2a17dde12084338f742ad76cb33ce4ddeaa41ca1147812d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `on_error` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 130,
      "offset": 15,
      "length": 8,
      "code": {
        "startLine": 128,
        "length": 8,
        "offset": 62,
        "surroundingCode": "            await self.message.edit(view=None)\n\n    async def on_error(self, error: Exception, item: discord.ui.Item, interaction: discord.Interaction) -> None:\n        if interaction.response.is_done():\n            await interaction.followup.send(f'An unknown error occurred, sorry {error}', ephemeral=True)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "12d58ebe975516ea7144e85aec107fceaffe264d097a0875b7fac269fcd52224"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `is_paginating` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 359,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 357,
        "length": 13,
        "offset": 50,
        "surroundingCode": "\nclass FrontPageSource(menus.PageSource):\n    def is_paginating(self) -> bool:\n        # This forces the buttons to appear even in the front page\n        return True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "5f5c7392da36b60aed9f5ca7eba721d504df29f61fddbcf483f7de4684b6540e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `get_max_pages` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 363,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 361,
        "length": 13,
        "offset": 29,
        "surroundingCode": "        return True\n\n    def get_max_pages(self) -> Optional[int]:\n        # There's only one actual page in the front page\n        # However we need at least 2 to show all the buttons"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "a9573e39592b4582ecc66308d4c99d36087711924d3db9e9b295131f4904007d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `interaction_check` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/set.py",
      "language": "Python",
      "line": 33,
      "offset": 15,
      "length": 17,
      "code": {
        "startLine": 31,
        "length": 17,
        "offset": 38,
        "surroundingCode": "        self.bot = bot\n\n    async def interaction_check(self, interaction: discord.Interaction) -> bool:\n        return interaction.user.id == 752984497259151370\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "3cfef395e727c65c398ca7b4523fbae929d52f217975f6dac83ad694f11ab49d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `cog_load` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/set.py",
      "language": "Python",
      "line": 404,
      "offset": 15,
      "length": 8,
      "code": {
        "startLine": 402,
        "length": 8,
        "offset": 48,
        "surroundingCode": "        return Emoji.turtlesmirk\n\n    async def cog_load(self) -> None:\n        for user_id in database.ResponseSpamBlacklist:\n            blacklist.append(user_id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "3c7a49a1dda2f3e1e04c08c26da98a6037e9f90cc35b1f273d6b1ebda8130afe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `before_invoke` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 99,
      "offset": 15,
      "length": 13,
      "code": {
        "startLine": 97,
        "length": 13,
        "offset": 72,
        "surroundingCode": "        return await on_command_error_(self, ctx, error)\n\n    async def before_invoke(self, ctx: commands.Context):\n        return await before_invoke_(ctx)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "c2088def4258f2780b4f4ec17fe5e37d2b9a61112a337b641d7734cd8333de17"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `check` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 102,
      "offset": 15,
      "length": 5,
      "code": {
        "startLine": 100,
        "length": 5,
        "offset": 56,
        "surroundingCode": "        return await before_invoke_(ctx)\n\n    async def check(self, ctx: commands.Context):\n        return await main_mode_check_(ctx)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "7e7c2982a2102600b2e7570b030567a5468a78507bac18741b744a543ccb5851"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect call arguments",
  "severity": "High",
  "comment": "Parameter 'name' unfilled",
  "detailsInfo": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 153,
      "offset": 39,
      "length": 1,
      "code": {
        "startLine": 151,
        "length": 1,
        "offset": 68,
        "surroundingCode": "\ndef prompt_config(msg, key):\n    config, config_file = load_config()\n    if key not in config:\n        config[key] = input(msg)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyArgumentListInspection"
  },
  "hash": "b3c7a21c42df068369247d7efc03232e4630c3f052ed8b9c9cd1868e7db67fc9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect call arguments",
  "severity": "High",
  "comment": "Parameter 'name' unfilled",
  "detailsInfo": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 161,
      "offset": 39,
      "length": 1,
      "code": {
        "startLine": 159,
        "length": 1,
        "offset": 69,
        "surroundingCode": "\ndef prompt_config2(msg, key):\n    config, config_file = load_config()\n    config[key] = msg\n    with config_file.open(\"w+\") as f:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyArgumentListInspection"
  },
  "hash": "2b7ce94866c30182c44466c9ce886e10d8133da2d7186a814ef02fa3c7651975"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Redeclared names without usages",
  "severity": "High",
  "comment": "Redeclared 'ch_mktAnnouncements' defined above without usage",
  "detailsInfo": "Reports unconditional redeclarations of names without being used in between.\n\n**Example:**\n\n```\ndef x(): pass\n\n\nx = 2\n```\n\nIt applies to function and class declarations, and top-level assignments.\n\nWhen the warning is shown, you can try a recommended action, for example, you might be prompted to\nrename the variable.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 940,
      "offset": 5,
      "length": 19,
      "code": {
        "startLine": 938,
        "length": 19,
        "offset": 130,
        "surroundingCode": "    # *** Channels ***\n    ch_announcements = int(ConfigcatClient.HR_ID_CC.get_value(\"ch_announcements\", 816507730557796362))\n    ch_mktAnnouncements = int(ConfigcatClient.HR_ID_CC.get_value(\"ch_mktannouncements\", 816733579660754944))\n    ch_acadAnnouncements = int(ConfigcatClient.HR_ID_CC.get_value(\"ch_acadannouncements\", 816733725244522557))\n    ch_techAnnouncements = int(ConfigcatClient.HR_ID_CC.get_value(\"ch_techannouncements\", 816733303629414421))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyRedeclarationInspection"
  },
  "hash": "3a6f22ee78b29c30b961ec1fffd56cb5f4c5c43b6a92a5a59bdec9f36f06f517"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Redeclared names without usages",
  "severity": "High",
  "comment": "Redeclared 'LEADER_ID' defined above without usage",
  "detailsInfo": "Reports unconditional redeclarations of names without being used in between.\n\n**Example:**\n\n```\ndef x(): pass\n\n\nx = 2\n```\n\nIt applies to function and class declarations, and top-level assignments.\n\nWhen the warning is shown, you can try a recommended action, for example, you might be prompted to\nrename the variable.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 975,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 973,
        "length": 9,
        "offset": 8,
        "surroundingCode": "\n\nclass LEADER_ID:\n    \"\"\"\n    IDs of the SSD SET SERVER"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyRedeclarationInspection"
  },
  "hash": "4c73853d047a64066d8612d221a252a6b6c3db4707785ec3e6afdc080c3e1677"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'ctx' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 155,
      "offset": 19,
      "length": 3,
      "code": {
        "startLine": 153,
        "length": 3,
        "offset": 20,
        "surroundingCode": "\n\ndef TimmyBetaHost(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c1faf3649a960e545e30f0f5054bee41f41bc2991b37b1f2776005271a38a3d9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'response' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 252,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 250,
        "length": 8,
        "offset": 23,
        "surroundingCode": "    )\n    try:\n        response = s3_client.upload_file(\n            file_name,\n            bucket,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "06e1e51448c3e23a78a7947f4d9ce8c59b17e96ee6afff36508dd78cc734e489"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'view_response' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1354,
      "offset": 13,
      "length": 18,
      "code": {
        "startLine": 1352,
        "length": 18,
        "offset": 93,
        "surroundingCode": "            ephemeral: bool = True,\n            coroutine: coroutineType = None,\n            view_response=None,\n    ):\n        \"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "472c84e5319206afda07ab580e010eb676f0fe79a48cc67b4c59dddc3b82e1a0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1541,
      "offset": 19,
      "length": 25,
      "code": {
        "startLine": 1539,
        "length": 25,
        "offset": 47,
        "surroundingCode": "    )\n    async def confirm(\n            self, button: discord.ui.Button, interaction: discord.Interaction\n    ):\n        TranscriptLOG = self.bot.get_channel(TECH_ID.ch_ticketLog)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "82f22785b7b64cd6cb8d876939335a6ca095e61ad456183da72470f6622081a3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1550,
      "offset": 62,
      "length": 25,
      "code": {
        "startLine": 1548,
        "length": 25,
        "offset": 143,
        "surroundingCode": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.message.delete()\n        await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c424d7a961260d2711f2b2274368230cd04231dab044ca44d97ee82e6aa0e3bd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1571,
      "offset": 60,
      "length": 25,
      "code": {
        "startLine": 1569,
        "length": 25,
        "offset": 85,
        "surroundingCode": "        emoji=\"🔒\",\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        ch = await self.bot.get_channel(interaction.channel_id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "6d20f15227066bb9563869df809ffe4a6d5ea43834fb178d094830ebf8c3a071"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'msg' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1576,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 1574,
        "length": 3,
        "offset": 76,
        "surroundingCode": "        TempConfirmInstance = TechnicalCommissionConfirm(self.bot)\n\n        msg = await ch.send(\n            \"Are you sure you want to close this ticket?\", view=TempConfirmInstance\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "111981e93b0026bc48a3af848cf82854cf64ec4fde249545cafaa7efcd4b6453"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1592,
      "offset": 26,
      "length": 32,
      "code": {
        "startLine": 1590,
        "length": 32,
        "offset": 63,
        "surroundingCode": "        emoji=Emoji.gsuitelogo,\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "6ff7dab10c13d46b36ce3a3d495d309024ebcba2d4f6034577dc6bae2d3eb8b2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1592,
      "offset": 60,
      "length": 25,
      "code": {
        "startLine": 1590,
        "length": 25,
        "offset": 97,
        "surroundingCode": "        emoji=Emoji.gsuitelogo,\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "b0f9363cc2f9375f3c0da749d9552642eb9a0db64de3e535bf97ded6ad599536"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1608,
      "offset": 19,
      "length": 25,
      "code": {
        "startLine": 1606,
        "length": 25,
        "offset": 47,
        "surroundingCode": "    )\n    async def confirm(\n            self, button: discord.ui.Button, interaction: discord.Interaction\n    ):\n        self.value = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "244a24defe3993e6c5b1b425a3277c9f7bf5dffdb845c91658b1297b0e17aea2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1608,
      "offset": 46,
      "length": 32,
      "code": {
        "startLine": 1606,
        "length": 32,
        "offset": 74,
        "surroundingCode": "    )\n    async def confirm(\n            self, button: discord.ui.Button, interaction: discord.Interaction\n    ):\n        self.value = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "7df21c244777c56dae8f9a2f7ccab5aab5b36e38f32871ab78cf80c8d45f0d89"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1614,
      "offset": 62,
      "length": 25,
      "code": {
        "startLine": 1612,
        "length": 25,
        "offset": 143,
        "surroundingCode": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.send_message(\"Cancelling\", ephemeral=True)\n        self.value = False"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "1abf96af9fcf50ab9423741934442719d4e0101018f25a98e75a0de86e2982c3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1630,
      "offset": 61,
      "length": 25,
      "code": {
        "startLine": 1628,
        "length": 25,
        "offset": 113,
        "surroundingCode": "        custom_id=\"persistent_view:nitrofake\",\n    )\n    async def claim(self, interaction: discord.Interaction, button: discord.ui.Button):\n        try:\n            await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "95f308de600af43c82dd0adefd3db5d1efd1a80cff234e42defb1755deee704c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1656,
      "offset": 60,
      "length": 25,
      "code": {
        "startLine": 1654,
        "length": 25,
        "offset": 85,
        "surroundingCode": "        emoji=\"🔒\",\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        ch = await self.bot.get_channel(interaction.channel_id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f4f055c1ce718adcff10acafac507b7d87421023c80aaa7df76dde115e74ad99"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'msg' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1661,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 1659,
        "length": 3,
        "offset": 59,
        "surroundingCode": "        TempConfirmInstance = TicketTempConfirm()\n\n        msg = await ch.send(\n            \"Are you sure you want to close this ticket?\", view=TempConfirmInstance\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "0913147c1a83e7c53a54eb388aeb4409a51ef0692e2a6a3ba0c12e4596236fe7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1678,
      "offset": 19,
      "length": 25,
      "code": {
        "startLine": 1676,
        "length": 25,
        "offset": 47,
        "surroundingCode": "    )\n    async def confirm(\n            self, button: discord.ui.Button, interaction: discord.Interaction\n    ):\n        self.value = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c5adcfe6c8157a4ee4ec78df24395a54e612133ff9f11e8129d57539491a74c1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1678,
      "offset": 46,
      "length": 32,
      "code": {
        "startLine": 1676,
        "length": 32,
        "offset": 74,
        "surroundingCode": "    )\n    async def confirm(\n            self, button: discord.ui.Button, interaction: discord.Interaction\n    ):\n        self.value = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "769974f907ac9c376aa5e75e09fda4adb86d60d58f1e14fac5d1b8ee6e65eefe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1684,
      "offset": 62,
      "length": 25,
      "code": {
        "startLine": 1682,
        "length": 25,
        "offset": 143,
        "surroundingCode": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.send_message(\"Cancelling\", ephemeral=True)\n        self.value = False"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "4ae496960a033184a4e921caf47149996682b1c6739ecad4e76d16b1fbbcfd42"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'response' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1737,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 1735,
        "length": 8,
        "offset": 19,
        "surroundingCode": "        }\n\n        response = requests.post(url, headers=headers, data=str(data))\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "ea7fc063e8d8240bdf5cf326c451b5780f107779408b35be3e1b826b479b8b54"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1752,
      "offset": 19,
      "length": 25,
      "code": {
        "startLine": 1750,
        "length": 25,
        "offset": 55,
        "surroundingCode": "    )\n    async def feedback_button(\n            self, button: discord.ui.Button, interaction: discord.Interaction\n    ):\n        modal = FeedbackModel()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "4679a643c6a1f577beb38ad9533bc2b597f99ad1c2a9e3f8a83a41e39b4b25b3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'authorrank' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1770,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 1768,
        "length": 10,
        "offset": 47,
        "surroundingCode": "\n                listkeys = []\n                authorrank = ''\n                for key, value in sorted(checkrew[f'{menu.ctx.guild.id}'].items(), key=lambda pair: pair[1]['total'], reverse=True):\n                    if menu.ctx.guild.get_member(int(key)):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "d025ac2859bfbbd787e569f44910c998be40509330cafbf1ef62059f523cd744"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'result' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1825,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 1823,
        "length": 6,
        "offset": 18,
        "surroundingCode": "    try:\n\n        result = subprocess.run(\n            f\"cd && cd {main_or_beta}\",\n            shell=True,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "cd5ff42856aefeb5d72d1c757543914058402c5b2d13bf6e45cf66905a90bd1a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'request_id' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/docsapi.py",
      "language": "Python",
      "line": 21,
      "offset": 14,
      "length": 10,
      "code": {
        "startLine": 19,
        "length": 10,
        "offset": 15,
        "surroundingCode": "\n\ndef callback(request_id, response, exception):\n    if exception:\n        print(exception)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f1e4ab1f1cbf0572a077bc4847180a02a5b256c213b0e4ccdb48faa143c4b68a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'result' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/docsapi.py",
      "language": "Python",
      "line": 120,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 118,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    ]\n\n    result = (\n        drive_service.documents()\n        .batchUpdate(documentId=document_copy_id, body={\"requests\": requests})"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "0d3b8d2282ea39cf659f8fdbff2d45a3c17422e61ea5290887f2587730189dea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'exc' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 724,
      "offset": 15,
      "length": 3,
      "code": {
        "startLine": 722,
        "length": 3,
        "offset": 37,
        "surroundingCode": "\n@app.teardown_request\ndef _db_close(exc):\n    \"\"\"\n    This hook ensures that the connection is closed when we've finished"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "7827b1dd18a342079d0f38962e1596906869f2180ac2b599909f8e0c691aa3b3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'object' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 123,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 121,
        "length": 6,
        "offset": 86,
        "surroundingCode": "        if r.status_code == 422:\n            raise InvalidAuth(r.status_code)\n        object = range(len(r.json()))\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "9fcfb700f19601b9845883a6a9a114b5bd555b1667e9fa69d73085320fc30257"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'object' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 175,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 173,
        "length": 6,
        "offset": 82,
        "surroundingCode": "            raise InvalidAuth(r.status_code)\n        print(r.status_code)\n        object = range(len(r.json()[\"data\"]))\n        pprint.pprint(r.json())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "a0ac9289f08aa09564a2033199a27d2e6a320c5c45f65f5c6c0f44da652a5119"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 42,
      "offset": 28,
      "length": 32,
      "code": {
        "startLine": 40,
        "length": 32,
        "offset": 52,
        "surroundingCode": "        emoji=\"✅\",\n    )\n    async def verify(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "60c8e5dae1c3eeabb57014f8679347a351bc45cf289c301c7f2634db4a3a32c3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 42,
      "offset": 62,
      "length": 25,
      "code": {
        "startLine": 40,
        "length": 25,
        "offset": 86,
        "surroundingCode": "        emoji=\"✅\",\n    )\n    async def verify(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "4acb5adb21d39987e68717e973bead9fdac5970b85ab16f15589e9cffbd1e3c0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'page_size' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 109,
      "offset": 21,
      "length": 14,
      "code": {
        "startLine": 107,
        "length": 14,
        "offset": 65,
        "surroundingCode": "        \"\"\"List all tags in the database\"\"\"\n\n        def get_end(page_size: int):\n            database.db.connect(reuse_if_open=True)\n            tags: int = database.PunishmentTag.select().count()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "89d64d64b00a4e45c9157286c8b1abbd3aacbcc2e7f87a2cced5bb635cf6ffce"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'embed' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 128,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 126,
        "length": 5,
        "offset": 57,
        "surroundingCode": "\n        embed = discord.Embed(title=\"Tag List\")\n        embed = await common.paginate_embed(\n            self.bot, ctx, embed, populate_embed, get_end(10), page=page\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "9addfc782b5b0b65166d3ddc8de684bfba4e2e2d5470f58880d246bbc830f249"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'value' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 142,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 140,
        "length": 5,
        "offset": 51,
        "surroundingCode": "            user: discord.User = user\n\n            value = None\n            typeval = None\n            banreason = None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f9b63b4ebd3e75524b3e9d74336d40f9b1dbcde4037bd4902aa17dbe8c9d7b95"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'typeval' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 143,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 141,
        "length": 7,
        "offset": 38,
        "surroundingCode": "\n            value = None\n            typeval = None\n            banreason = None\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "81dc3a2706fcc4824ed210baed7cd6255681db63f7b7b5a661f599f0ee905a43"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'user' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 40,
      "offset": 42,
      "length": 4,
      "code": {
        "startLine": 38,
        "length": 4,
        "offset": 71,
        "surroundingCode": "\n    @commands.Cog.listener()\n    async def on_member_ban(self, guild, user):\n        \"\"\"\n        Pycord doesn't give us the information we need so we need to dig deeper and query the audit logs"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "55d471749eb4a1a174d8ff14ef73595b7673607080224083974ddb2692032a40"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'item' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 130,
      "offset": 48,
      "length": 21,
      "code": {
        "startLine": 128,
        "length": 21,
        "offset": 95,
        "surroundingCode": "            await self.message.edit(view=None)\n\n    async def on_error(self, error: Exception, item: discord.ui.Item, interaction: discord.Interaction) -> None:\n        if interaction.response.is_done():\n            await interaction.followup.send(f'An unknown error occurred, sorry {error}', ephemeral=True)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "20c21330719c9656eb1c650388da45e24f0ae382e295c1fdf0c03f3222e66300"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 150,
      "offset": 72,
      "length": 25,
      "code": {
        "startLine": 148,
        "length": 25,
        "offset": 138,
        "surroundingCode": "\n    @discord.ui.button(label='≪', style=discord.ButtonStyle.grey)\n    async def go_to_first_page(self, interaction: discord.Interaction, button: discord.ui.Button, ):\n        \"\"\"go to the first page\"\"\"\n        await self.show_page(interaction, 0)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "64d2b1852ee499baada7fc42bee3d73d7823f914ec7d693de60aa3885addb57c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 155,
      "offset": 75,
      "length": 25,
      "code": {
        "startLine": 153,
        "length": 25,
        "offset": 147,
        "surroundingCode": "\n    @discord.ui.button(label='Back', style=discord.ButtonStyle.blurple)\n    async def go_to_previous_page(self, interaction: discord.Interaction, button: discord.ui.Button):\n        \"\"\"go to the previous page\"\"\"\n        await self.show_checked_page(interaction, self.current_page - 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "679f82106038db38b1101ca27c201e97e0e22c2a055485ce3ffead78ad903438"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 164,
      "offset": 71,
      "length": 25,
      "code": {
        "startLine": 162,
        "length": 25,
        "offset": 143,
        "surroundingCode": "\n    @discord.ui.button(label='Next', style=discord.ButtonStyle.blurple)\n    async def go_to_next_page(self, interaction: discord.Interaction, button: discord.ui.Button, ):\n        \"\"\"go to the next page\"\"\"\n        await self.show_checked_page(interaction, self.current_page + 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "114ef6505a59a844fd67030b44c5987ddc3bebcd475d20597aa6da281170df76"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 169,
      "offset": 71,
      "length": 25,
      "code": {
        "startLine": 167,
        "length": 25,
        "offset": 137,
        "surroundingCode": "\n    @discord.ui.button(label='≫', style=discord.ButtonStyle.grey)\n    async def go_to_last_page(self, interaction: discord.Interaction, button: discord.ui.Button, ):\n        \"\"\"go to the last page\"\"\"\n        # The call here is safe because it's guarded by skip_if"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "8c75752c6c5863f3cf829921a1b5e325ad991596a1ddd3bbde83987151826268"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 175,
      "offset": 69,
      "length": 25,
      "code": {
        "startLine": 173,
        "length": 25,
        "offset": 149,
        "surroundingCode": "\n    @discord.ui.button(label='Skip to page...', style=discord.ButtonStyle.grey)\n    async def numbered_page(self, interaction: discord.Interaction, button: discord.ui.Button, ):\n        \"\"\"lets you type a page number to go to\"\"\"\n        if self.input_lock.locked():"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "b90380cfbdfda335cfebdb69f2c3dd42c75db6cec3da0088540096fafabf887a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 203,
      "offset": 66,
      "length": 25,
      "code": {
        "startLine": 201,
        "length": 25,
        "offset": 134,
        "surroundingCode": "\n    @discord.ui.button(label='Quit', style=discord.ButtonStyle.red)\n    async def stop_pages(self, interaction: discord.Interaction, button: discord.ui.Button, ):\n        \"\"\"stops the pagination session.\"\"\"\n        await interaction.response.defer()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "0a3ea64ac7ab0b1ac42ac5689a8ecc5b7e8d311d39ddbc840d481e0678df3ec1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'menu' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 373,
      "offset": 27,
      "length": 14,
      "code": {
        "startLine": 371,
        "length": 14,
        "offset": 47,
        "surroundingCode": "        return self\n\n    def format_page(self, menu: HelpMenu, page):\n        embed = discord.Embed(title='Bot Help', colour=discord.Colour.blurple())\n        embed.description = inspect.cleandoc("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "d214623b76344cda0d99bf20bebd1bcaac5e23e5f0406cb12d38fc998391b228"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'page' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 373,
      "offset": 43,
      "length": 4,
      "code": {
        "startLine": 371,
        "length": 4,
        "offset": 63,
        "surroundingCode": "        return self\n\n    def format_page(self, menu: HelpMenu, page):\n        embed = discord.Embed(title='Bot Help', colour=discord.Colour.blurple())\n        embed.description = inspect.cleandoc("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "9515548ed3bb2fb9ec70257d4d01e1d612a0c571d9d63671a7be6fe8c01890c4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'CheckDB' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 89,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 87,
        "length": 7,
        "offset": 62,
        "surroundingCode": "    @filters.command()\n    async def list(self, ctx):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "8b1d895d1c6b5a05e73f5c3e1e2ac76bf10600abd9bf48a0bd9edc592893a414"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'result' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 521,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 519,
        "length": 6,
        "offset": 26,
        "surroundingCode": "        try:\n\n            result = subprocess.run(\n                f\"cd && cd {main_or_beta}\",\n                shell=True,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "8b096ce152a055d84b3cc65c12b31d5295541625a52b919c2a4ad6e3295fe228"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'i' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 21,
      "offset": 42,
      "length": 1,
      "code": {
        "startLine": 19,
        "length": 1,
        "offset": 74,
        "surroundingCode": "\n    rnd = random.SystemRandom()\n    return \"\".join(rnd.choice(chars) for i in range(length))\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "151f43711a9d970f6e11777977f224f588cf58cb6dc697cb260cf700d0672bd4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 92,
      "offset": 62,
      "length": 25,
      "code": {
        "startLine": 90,
        "length": 25,
        "offset": 87,
        "surroundingCode": "        emoji=\"📝\",\n    )\n    async def verify(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        modal = BotRequestModal(self.bot)\n        return await interaction.response.send_modal(modal)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "0f4eb2f75df68b9956267f763bb61895b088741dd668daf2148eabba62250fc0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 171,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 169,
        "length": 7,
        "offset": 60,
        "surroundingCode": "\n        guild = self.bot.get_guild(TECH_ID.g_tech)\n        channel: discord.TextChannel = self.bot.get_channel(TECH_ID.ch_botreq)\n\n        thread = ...  # type: discord.Thread"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "b82082c4e010700c03f0426b41cdec14dfde93714218fe795fe8051bbd6a0bab"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'thread' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 173,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 171,
        "length": 6,
        "offset": 88,
        "surroundingCode": "        channel: discord.TextChannel = self.bot.get_channel(TECH_ID.ch_botreq)\n\n        thread = ...  # type: discord.Thread\n\n        for thread in guild.threads:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "7e0a61514c29828af94cfd5701601979115b1bbe3fca1269d1ec7e8c2fc532c6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 216,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 214,
        "length": 7,
        "offset": 61,
        "surroundingCode": "                    .get()\n                )\n                channel: discord.VoiceChannel = self.bot.get_channel(\n                    int(query.ChannelID)\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "9339b652ecdece81985cc39d3d88174471c78a9e6a7d5d761183d262bcbb2213"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 276,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 274,
        "length": 7,
        "offset": 61,
        "surroundingCode": "                    .get()\n                )\n                channel: discord.VoiceChannel = self.bot.get_channel(\n                    q.ChannelID\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "9d38d961d65e19dd1b5a1e542f7c8e5af24f53fb4585701d5a011023f606319c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'team' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 542,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 540,
        "length": 4,
        "offset": 86,
        "surroundingCode": "    async def end(self, ctx):\n        database.db.connect(reuse_if_open=True)\n        team = discord.utils.get(ctx.guild.roles, name=self.AT)\n        member = ctx.guild.get_member(ctx.author.id)\n        timestamp2 = datetime.now(EST)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "33310fcffec2cd6cd5018f5e07c953c5848a5ebd9096252b91a9ea4ee110b966"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'timestamp2' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 544,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 542,
        "length": 10,
        "offset": 125,
        "surroundingCode": "        team = discord.utils.get(ctx.guild.roles, name=self.AT)\n        member = ctx.guild.get_member(ctx.author.id)\n        timestamp2 = datetime.now(EST)\n\n        voice_state = member.voice"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "83360bbb1f1c5a01c987324b2bba78b7c378a04e5ca1ae4681d070d1bdf78cf4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'BOT' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 873,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 871,
        "length": 3,
        "offset": 62,
        "surroundingCode": "        member = ctx.guild.get_member(ctx.author.id)\n\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "29e5e24bb0353ca58e9d5361c92056b80085e40fa5059003715be1858f070d59"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'TMOD' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 875,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 873,
        "length": 4,
        "offset": 112,
        "surroundingCode": "        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "24d55144b73ed60fb6a89f4eca3862167e9e6ee4a2ebb16f30643c2eb4eb4327"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'MOD' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 876,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 874,
        "length": 3,
        "offset": 125,
        "surroundingCode": "        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "b5a0dbb2b87622825268689dc4b8661bd19385ecd39bfada4b78f76d169155f0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'SMOD' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 877,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 875,
        "length": 4,
        "offset": 138,
        "surroundingCode": "        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f8b4ef4020bc95e213165b45c105edc05871cdd2ae4e0a2acdac75be3add2632"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'CO' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 878,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 876,
        "length": 2,
        "offset": 138,
        "surroundingCode": "        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "82012263f45cf1cdfff497154ed3961553a6cb1f6b439961e0317d600bb32950"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'VP' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 879,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 877,
        "length": 2,
        "offset": 136,
        "surroundingCode": "        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "bcb413abe4478dceea8270df8d42326a2590607e5590fc835a34d76f15585110"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'ST' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 880,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 878,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "250e4cac8279b03f5a3f53b2197dacf284b49dd54b0250f16ce89e91cea4e426"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'query' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1119,
      "offset": 21,
      "length": 5,
      "code": {
        "startLine": 1117,
        "length": 5,
        "offset": 53,
        "surroundingCode": "                    LOCK.save()\n\n                    query = (\n                        database.VCChannelInfo.select()\n                        .where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "210f0cd9fea29983801023a2c8e1edbfc485739ac75fd39168057c073eff4516"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'embed' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1465,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 1463,
        "length": 5,
        "offset": 86,
        "surroundingCode": "                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed(\n                    title=f\"{Emoji.warn} Unknown Channel\",\n                    description=\"You are not the owner of this voice channel nor is this a valid channel. \""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "7a14b55909ea76c83d016bad702c92362d5143b1959d4ff65b6b48c6a2092f23"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local function 'check' is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 413,
      "offset": 21,
      "length": 5,
      "code": {
        "startLine": 411,
        "length": 5,
        "offset": 39,
        "surroundingCode": "            else:\n\n                def check(m):\n                    return (\n                        m.content is not None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "dfd34bd453345a03b7ff13e59bd66611221798f244ecb0b08917440df5838c90"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'lastReset' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 33,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 31,
        "length": 9,
        "offset": 127,
        "surroundingCode": "\n        if weekdayNow == 1 and (now - self.lastReset >= datetime.timedelta(days=7)) and timeNow >= self.midnight:\n            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(StudyVCLeaderboard.id == entry)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "540ee43691fd15b781dc4b1b00f8af4886e0b7a0bffdd8541eb7c4e83d24dd0c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'numberStr' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 95,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 93,
        "length": 9,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    numberStr = ...     # type: str\n\n    if number < 1000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "caa34c24c4b2c47405cf4313a8b0d7dd27fccf698bcdb9e9890a4452f82e7e89"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'newLvl' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 331,
      "offset": 14,
      "length": 6,
      "code": {
        "startLine": 329,
        "length": 6,
        "offset": 30,
        "surroundingCode": "    return True\n\n        elif newLvl < 40:\n            role = None  # TODO: get lvl 30 role and add to user\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "1db564caf0faeae94c0018a83aa16d1c9a569c927090ecd55db091f2059b0560"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'roleStr' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 335,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 333,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 30:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "164fd3449721c72273d5e2a48c01a18ec314ca18be8caa2a1504ac2779552d62"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'signature' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 445,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 443,
        "length": 9,
        "offset": 108,
        "surroundingCode": "                sorted(subcommand.name for subcommand in self.studytodo.commands)\n            )\n            signature = f\"{ctx.prefix}{ctx.command.qualified_name} <{subcommands}>\"\n\n    @property"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "d171e09498e0f0c251c2218e9a2beb568e1defd7cb2d58a9bff57a67558ce49b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'now' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 85,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 83,
        "length": 3,
        "offset": 27,
        "surroundingCode": "\n    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "0567ab6580c0b12c9aac84e25f26cdb724d697c0329485b7e279310f48cb2d8e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'goal' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 168,
      "offset": 17,
      "length": 4,
      "code": {
        "startLine": 166,
        "length": 4,
        "offset": 148,
        "surroundingCode": "            query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "2980d55255c4adf4aacaa1e2fc705baab2d8edab1066ddd908d25c8466bea577"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'renewal' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 168,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 166,
        "length": 7,
        "offset": 154,
        "surroundingCode": "            query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "9a2e7fd9b9c097b5b3089fa94f9ea532a2a7794bb91b3b7a670fd2b5b08f097e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'val' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 176,
      "offset": 17,
      "length": 3,
      "code": {
        "startLine": 174,
        "length": 3,
        "offset": 105,
        "surroundingCode": "\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n\n                if datetime.now(EST) >= dateObj:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "3c0b9a6e4e23ed819f2af0c0a6380acdbb476de0dbb8112e14b94ea288f239c8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'now' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 85,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 83,
        "length": 3,
        "offset": 27,
        "surroundingCode": "\n    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "21bb8413f46b62336aa0f5d218f7aee27e2bb0a29d1824501f58bb66a192fd83"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'goal' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 165,
      "offset": 17,
      "length": 4,
      "code": {
        "startLine": 163,
        "length": 4,
        "offset": 148,
        "surroundingCode": "            query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "599da909b7f48a776af79770b1387f03ce7624f8982ffb3907366abe44e4ae5a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'renewal' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 165,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 163,
        "length": 7,
        "offset": 154,
        "surroundingCode": "            query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c4d6a1c38528fe2408933247934e6250b24b884cf743558a795d3564dd180180"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'val' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 173,
      "offset": 17,
      "length": 3,
      "code": {
        "startLine": 171,
        "length": 3,
        "offset": 105,
        "surroundingCode": "\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n\n                if datetime.now(EST) >= dateObj:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "7c3b758591d738cdceee8f6a00ec2c409f4b5315b5b94a2a6dc30d76336e1caf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'i' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 61,
      "offset": 17,
      "length": 1,
      "code": {
        "startLine": 59,
        "length": 1,
        "offset": 64,
        "surroundingCode": "            else:\n                list_ten = []\n                i = 0\n                for entry in query:\n                    if not isinstance(entry.Date, datetime):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "1a2c73bb19d700e09e84958088a7c08586776f8464fe5e33cd9d2e504bdbca34"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'i' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 151,
      "offset": 13,
      "length": 1,
      "code": {
        "startLine": 149,
        "length": 1,
        "offset": 52,
        "surroundingCode": "        else:\n            list_ten = []\n            i = 0\n            for entry in query:\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "4e54b07dfcaf0b799221aa375320d2bcdec0ddb63f6b1467a9b51621ed28b2b6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 555,
      "offset": 30,
      "length": 32,
      "code": {
        "startLine": 553,
        "length": 32,
        "offset": 40,
        "surroundingCode": "        )\n\n    async def callback(self, interaction: discord.Interaction):\n        self.view.stop()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "a5c868cdc2e19d26b0d6e760b057ce29e3ee34125c29abb4a9ac790c7f354c95"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'nw' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 115,
      "offset": 17,
      "length": 2,
      "code": {
        "startLine": 113,
        "length": 2,
        "offset": 54,
        "surroundingCode": "                nextweek = old + new\n\n                nw = nextweek.strftime(\"%m/%d/%Y\")\n\n                query.Date = nextweek"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "86b7c27c029b98cdb0a8b752d68b8785a9674c621851b127771ab940c4c912af"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'directTranscript' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 98,
      "offset": 5,
      "length": 30,
      "code": {
        "startLine": 96,
        "length": 30,
        "offset": 90,
        "surroundingCode": "    user: discord.User = None,\n    responsesauthor: typing.List[discord.User] = None,\n    directTranscript: bool = False,\n):\n    transcript = await chat_exporter.export(channel, None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "8727dc65c312f32974d4d2935282be906d87bd19d4531a39bcfaaa320f56c8ba"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'self' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 159,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 157,
        "length": 4,
        "offset": 17,
        "surroundingCode": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "fd9dd46279f23d64e8a8daa09e562d1e57c77eeba78337389ea60a5bfab5a388"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'sandbox' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 277,
      "offset": 59,
      "length": 21,
      "code": {
        "startLine": 275,
        "length": 21,
        "offset": 72,
        "surroundingCode": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "b0282f71e05e812547385467af16e0a0167a1ffde5c2ddaa227b15575d4ebcb3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 340,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 338,
        "length": 7,
        "offset": 40,
        "surroundingCode": "            )\n        else:\n            channel = self.bot.get_channel(interaction.channel_id)\n            guild = interaction.message.guild\n            author = interaction.user"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "66e7c63f1d6b339d5cde69de9b90550fe4685cf8595357013365764e8b0dd063"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'e' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 368,
      "offset": 33,
      "length": 1,
      "code": {
        "startLine": 366,
        "length": 1,
        "offset": 80,
        "surroundingCode": "                    view=MSV,\n                )\n            except Exception as e:\n                await interaction.channel.send(\n                    f\"{interaction.user.mention} I can't send you messages, please check you're privacy settings!\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "5bb6785dea298e35d3b543d65ce97319a06210c25a0990b404151612abbcbac1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'e' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 402,
      "offset": 37,
      "length": 1,
      "code": {
        "startLine": 400,
        "length": 1,
        "offset": 129,
        "surroundingCode": "                try:\n                    await DMChannel.send(embed=embed, view=MiscOptList)\n                except Exception as e:\n                    await interaction.followup.send(embed=embed, view=MiscOptList)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "e12b4a85f8dfdab160a2dea22f5397e35d30ff9a6dff80c1d7039ec5e533c053"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'guild' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 779,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 777,
        "length": 5,
        "offset": 93,
        "surroundingCode": "        elif val == \"ch_lock\":\n            channel = interaction.message.channel\n            guild = interaction.message.guild\n            author = interaction.user\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "8328d8f0863026f85911f4f4bed5c2d96761891c9a00f799ff736fa72b1854f4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'query' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 782,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 780,
        "length": 5,
        "offset": 51,
        "surroundingCode": "            author = interaction.user\n\n            query = (\n                database.TicketInfo.select()\n                .where(database.TicketInfo.ChannelID == interaction.channel_id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "79cc4e32751c32d73f283a64303c5e4cf83242c8f85c924d9af8242a7ba4a9c5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 890,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 888,
        "length": 7,
        "offset": 80,
        "surroundingCode": "\n        elif InteractionResponse[\"custom_id\"] == \"ch_lock_CANCEL\":\n            channel = interaction.message.channel\n            author = interaction.user\n            await interaction.channel.send("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "1e088a8f5dfb7b42200f740f2e3dc43410f780c936add9898fb3d9cf0733933e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 898,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 896,
        "length": 7,
        "offset": 75,
        "surroundingCode": "\n        elif InteractionResponse[\"custom_id\"] == \"ch_lock_C\":\n            channel = self.bot.get_channel(interaction.channel_id)\n            author = interaction.user\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "93154fd76b3af6cd1d2c12e5cc286e9ccc231e8bdad9df331be817d07a584b51"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'msg' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 953,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 951,
        "length": 3,
        "offset": 68,
        "surroundingCode": "                )\n            author = interaction.user\n            msg = await interaction.channel.send(\n                f\"Please wait, creating your transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "d18b43fdc5fdb64180430c2bdb4e4ef3fa3013af0cc5746e5290beb016181357"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'query' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1092,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 1090,
        "length": 5,
        "offset": 49,
        "surroundingCode": "        )\n        if query.exists():\n            query = query.get()\n            embed = discord.Embed(\n                title=\"Confirm?\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "cc9b97843a5d9ee934acdc6e5d9786f7ffd52d68a3a5dbb6412bd50444c4f6f1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'e' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1129,
      "offset": 33,
      "length": 1,
      "code": {
        "startLine": 1127,
        "length": 1,
        "offset": 86,
        "surroundingCode": "                    entry.ChannelID\n                )\n            except Exception as e:\n                continue\n            fetchMessage = await channel.history(limit=1).flatten()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "e272bcca5a4f0322ebb40b4254927e8c5c9b55e1ed2053abf57e959f2bfcc19e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'LogCH' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1134,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 1132,
        "length": 5,
        "offset": 139,
        "surroundingCode": "            TicketOwner = self.bot.get_user(entry.authorID)\n            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "e249ff420b8632b5fd046e6007bee1fad7fd8c0f652a22915c554edbbcf26abd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'authorList' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1135,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 1133,
        "length": 10,
        "offset": 147,
        "surroundingCode": "            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:\n                continue"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "fb8f8f03bbbe383270afb96e44edc8a2e3506acdffb8066e133cca3d00e8205d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'val' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 45,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 43,
        "length": 3,
        "offset": 26,
        "surroundingCode": "\n        try:\n            val = InteractionResponse[\"custom_id\"]\n        except KeyError:\n            return"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "011ceafe698db24801aeede2f12e21b66d4e79a6c1db1cc61ce5f07bb7f1176e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 58,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 56,
        "length": 7,
        "offset": 31,
        "surroundingCode": "                )\n\n            channel = self.bot.get_channel(interaction.channel_id)\n            guild = interaction.message.guild\n            author = interaction.user"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "49dc3876f776220d5fe9438091b8f783136f1b8c011e90c7cc64d0455d92a43f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'e' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 110,
      "offset": 41,
      "length": 1,
      "code": {
        "startLine": 108,
        "length": 1,
        "offset": 133,
        "surroundingCode": "                    try:\n                        self.flow.fetch_token(code=answer1.content)\n                    except Exception as e:\n                        return await dm_channel.send(\"Invalid code, try again later...\")\n                    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "ad83e3cabddfddd78211e41cbce2dc60021fbefe7c8ec99e492b00a1249d0297"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'self' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 25,
      "offset": 25,
      "length": 4,
      "code": {
        "startLine": 23,
        "length": 4,
        "offset": 26,
        "surroundingCode": "\n\nasync def roleNameCheck(self, name: str, guild: discord.Guild, user: discord.Member):\n    check = getEqualRank(name)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "b15123157dcf447b552ca9919042f2041b8d605b3a835b88a41057fa510ef85a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'InteractionResponse' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 51,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 49,
        "length": 19,
        "offset": 126,
        "surroundingCode": "    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "4be8e9e970f67df7064ebd7d39ef4c3e338d764f728db485ac48483e7555a0dd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'e' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 116,
      "offset": 37,
      "length": 1,
      "code": {
        "startLine": 114,
        "length": 1,
        "offset": 59,
        "surroundingCode": "                    )\n\n                except Exception as e:\n                    print(\"member not found\")\n                    continue"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "a382e4dabe30adfa6dde24b8fecb54c313cf7c90d0429a9d398ce16e9cad0a29"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing built-in names",
  "severity": "Moderate",
  "comment": "Shadows built-in name 'id'",
  "detailsInfo": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix.",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 40,
      "offset": 15,
      "length": 2,
      "code": {
        "startLine": 38,
        "length": 2,
        "offset": 53,
        "surroundingCode": "class RedirectPizza:\n    def __init__(\n        self, id: int, domain: str, source: str, destination: str, created_at: datetime\n    ) -> None:\n        self.id = id"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingBuiltinsInspection"
  },
  "hash": "af428a13c78c2a4711c583e2235b3db828e2d3d9ddf0112386fa2839d95af5a5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing built-in names",
  "severity": "Moderate",
  "comment": "Shadows built-in name 'object'",
  "detailsInfo": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix.",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 85,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 83,
        "length": 6,
        "offset": 62,
        "surroundingCode": "        data = data[\"data\"]\n        ListData = []\n        for object in range(len(data) - 1):\n            # object = object\n            FullURL = data[object][\"sources\"][object][\"url\"]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingBuiltinsInspection"
  },
  "hash": "0c778bc6c96adae9c557e382f5850aa4698952709e2a33559159773c76f15d01"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing built-in names",
  "severity": "Moderate",
  "comment": "Shadows built-in name 'object'",
  "detailsInfo": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix.",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 123,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 121,
        "length": 6,
        "offset": 86,
        "surroundingCode": "        if r.status_code == 422:\n            raise InvalidAuth(r.status_code)\n        object = range(len(r.json()))\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingBuiltinsInspection"
  },
  "hash": "d2b89f9165dc3c3187c8b3760fb2a6a3e3e2e8d874a1740207221ea4ce3e39bb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing built-in names",
  "severity": "Moderate",
  "comment": "Shadows built-in name 'object'",
  "detailsInfo": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix.",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 175,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 173,
        "length": 6,
        "offset": 82,
        "surroundingCode": "            raise InvalidAuth(r.status_code)\n        print(r.status_code)\n        object = range(len(r.json()[\"data\"]))\n        pprint.pprint(r.json())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingBuiltinsInspection"
  },
  "hash": "973697038fe7df1406837befc7fdba34b37cfbdd1445c5dd0b347c786c5cdbe7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing built-in names",
  "severity": "Moderate",
  "comment": "Shadows built-in name 'object'",
  "detailsInfo": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 676,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 674,
        "length": 6,
        "offset": 70,
        "surroundingCode": "            interaction:\n            discord.Interaction,\n            object: Optional[str] = None\n    ):\n        await self._command_callback(interaction, _command=object)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingBuiltinsInspection"
  },
  "hash": "92ff902ad6ef0cd00dcdbe4f251907b7894e091e3c68427ad62deade7991f353"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing built-in names",
  "severity": "Moderate",
  "comment": "Shadows built-in name 'hex'",
  "detailsInfo": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 13,
      "offset": 38,
      "length": 3,
      "code": {
        "startLine": 11,
        "length": 3,
        "offset": 104,
        "surroundingCode": "from core import database\nfrom core.checks import is_hostTimmyBeta\nfrom core.common import hexColors as hex\nfrom core.common import Emoji\nfrom core.common import ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingBuiltinsInspection"
  },
  "hash": "25d46a11a4088542c699ca11050399d5c70b2817d274d08bdca431b5e2dc80a3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing built-in names",
  "severity": "Moderate",
  "comment": "Shadows built-in name 'id'",
  "detailsInfo": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 399,
      "offset": 60,
      "length": 2,
      "code": {
        "startLine": 397,
        "length": 2,
        "offset": 107,
        "surroundingCode": "    )\n    @guilds(MAIN_ID.g_main, TUT_ID.g_tut)\n    async def skip(self, interaction: discord.Interaction, id: str):\n        query: database.TutorBot_Sessions = database.TutorBot_Sessions.select().where(\n            database.TutorBot_Sessions.SessionID == id"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingBuiltinsInspection"
  },
  "hash": "aaa02ecd429fdf603c2efb191667965f93554638d473f79bec724d659bb072e2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing built-in names",
  "severity": "Moderate",
  "comment": "Shadows built-in name 'id'",
  "detailsInfo": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 438,
      "offset": 62,
      "length": 2,
      "code": {
        "startLine": 436,
        "length": 2,
        "offset": 109,
        "surroundingCode": "    )\n    @guilds(MAIN_ID.g_main, TUT_ID.g_tut)\n    async def remove(self, interaction: discord.Interaction, id: str):\n        query = database.TutorBot_Sessions.select().where(\n            database.TutorBot_Sessions.SessionID == id"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingBuiltinsInspection"
  },
  "hash": "f0e61d74a9eb63007409fef404fb97e90b4f2d9bf570e77658feb0514e2086e3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unreachable code",
  "severity": "High",
  "comment": "This code is unreachable",
  "detailsInfo": "Reports code fragments that cannot be normally reached.\n\n**Example:**\n\n```\nif True:\n    print('Yes')\nelse:\n    print('No')\n```\n\nAs a fix, you might want to check and modify the algorithm to ensure it implements\nthe expected logic.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 331,
      "offset": 14,
      "length": 12,
      "code": {
        "startLine": 329,
        "length": 12,
        "offset": 30,
        "surroundingCode": "    return True\n\n        elif newLvl < 40:\n            role = None  # TODO: get lvl 30 role and add to user\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnreachableCodeInspection"
  },
  "hash": "66f06c7a46176033cdce88dabf28b8d88f81d183a9411a52ed6f645eb6417528"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unreachable code",
  "severity": "High",
  "comment": "This code is unreachable",
  "detailsInfo": "Reports code fragments that cannot be normally reached.\n\n**Example:**\n\n```\nif True:\n    print('Yes')\nelse:\n    print('No')\n```\n\nAs a fix, you might want to check and modify the algorithm to ensure it implements\nthe expected logic.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 399,
      "offset": 5,
      "length": 35,
      "code": {
        "startLine": 397,
        "length": 35,
        "offset": 26,
        "surroundingCode": "        return False\n\n    StudySessionQ = StudySessionQ.get()\n    StudySessionQ.StartTime = datetime.now(EST)\n    StudySessionQ.Paused = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnreachableCodeInspection"
  },
  "hash": "19e9d7a5a67f173409c393a302cb2748ac0b0c093c311d4dc771a7b410afc5a0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unreachable code",
  "severity": "High",
  "comment": "This code is unreachable",
  "detailsInfo": "Reports code fragments that cannot be normally reached.\n\n**Example:**\n\n```\nif True:\n    print('Yes')\nelse:\n    print('No')\n```\n\nAs a fix, you might want to check and modify the algorithm to ensure it implements\nthe expected logic.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 408,
      "offset": 5,
      "length": 636,
      "code": {
        "startLine": 406,
        "length": 636,
        "offset": 51,
        "surroundingCode": "\nasync def endSession(member: discord.Member):\n    \"\"\"\n    Ends the session by kicking the user out of the voice channel and removing the user from the database table `StudyVCDB`.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnreachableCodeInspection"
  },
  "hash": "ac76baf4a9111d1b26cb10dd11fd99c4b255480d6bac55c008611045630f43af"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'reaction' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 95,
      "offset": 24,
      "length": 8,
      "code": {
        "startLine": 93,
        "length": 8,
        "offset": 50,
        "surroundingCode": "    emotes = [\"◀️\", \"▶️\"]\n\n    def check_reaction(reaction, user):\n        return user == ctx.author and str(reaction.emoji) in emotes\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "465083fb73fa48d4f7813e681658110c07dcf17237c242e47cdcbe1ec6c0f584"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'user' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 95,
      "offset": 34,
      "length": 4,
      "code": {
        "startLine": 93,
        "length": 4,
        "offset": 60,
        "surroundingCode": "    emotes = [\"◀️\", \"▶️\"]\n\n    def check_reaction(reaction, user):\n        return user == ctx.author and str(reaction.emoji) in emotes\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "bc1966d956a1fe744c3dcad41bb8497caeeaba1dc184db046b3fec62d46d7563"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'string' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1884,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 1882,
        "length": 6,
        "offset": 24,
        "surroundingCode": "\n\ndef stringTimeConvert(string: str):\n    \"\"\"\n    Filters out the different time units from a string (e.g. from '2d 4h 6m 7s') and returns a ``dict``."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "b29210063bc81ee66d89bb508ae4e3339eac3ba30ec34a226e17fe095bf1eb79"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'string' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1925,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 1923,
        "length": 6,
        "offset": 24,
        "surroundingCode": "\n\ndef searchCustomEmoji(string: str):\n    \"\"\"\n    Searches for a custom emoji in a specific ``str`` and returns it or None if nothing found."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "85f1bbb431d0c97180b0881f0ff14a7ff6b637f308d918574ed7b86dff5eef3b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'embed' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 114,
      "offset": 34,
      "length": 5,
      "code": {
        "startLine": 112,
        "length": 5,
        "offset": 74,
        "surroundingCode": "            return math.ceil(tags / 10)\n\n        async def populate_embed(embed: discord.Embed, page: int):\n            \"\"\"Used to populate the embed in listtag command\"\"\"\n            tag_list = \"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "498c14e9ff6a0a13d9dac0abcd76b8032a215321be8aa643a515f9d80ed29599"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'page' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 114,
      "offset": 56,
      "length": 4,
      "code": {
        "startLine": 112,
        "length": 4,
        "offset": 96,
        "surroundingCode": "            return math.ceil(tags / 10)\n\n        async def populate_embed(embed: discord.Embed, page: int):\n            \"\"\"Used to populate the embed in listtag command\"\"\"\n            tag_list = \"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "ca7f28f9ff8cde32e4c082775029f23ebe0b28b5edbae2188b14fb12b3001dfc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'reaction' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 271,
      "offset": 20,
      "length": 8,
      "code": {
        "startLine": 269,
        "length": 8,
        "offset": 66,
        "surroundingCode": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                    str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "0a36e08522e602dd5757b75f2ec1dda55335a24716861a184cc710cf6cee11ad"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'user' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 271,
      "offset": 30,
      "length": 4,
      "code": {
        "startLine": 269,
        "length": 4,
        "offset": 76,
        "surroundingCode": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                    str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "bfed3ede4ffd88dc12ffbd07e32973bd4282bd3b6c2c87ee773a871f40b15319"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'reaction' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 584,
      "offset": 20,
      "length": 8,
      "code": {
        "startLine": 582,
        "length": 8,
        "offset": 66,
        "surroundingCode": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                    str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "bfc9b3f1555102e49c514ad9d50425f055da0a1e8cbd4ca5a245fe044ef975a1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'user' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 584,
      "offset": 30,
      "length": 4,
      "code": {
        "startLine": 582,
        "length": 4,
        "offset": 76,
        "surroundingCode": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                    str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "0b163bbf619aee3cfed3e0da6ba1e921c0885e9c96b82145c76b4157de4ba524"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'e' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 830,
      "offset": 30,
      "length": 1,
      "code": {
        "startLine": 828,
        "length": 1,
        "offset": 102,
        "surroundingCode": "            vc.play(\n                discord.FFmpegPCMAudio(\"text.mp3\"),\n                after=lambda e: print(f\"Finished playing: {e}\"),\n            )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "375b6c6992e537839d822a9c11038931746497e044933fd49a09bb8a3cf2b60c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'StudySessionQ' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 136,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 134,
        "length": 13,
        "offset": 26,
        "surroundingCode": "    xpPerMinute = 30\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "ae40619464bb7c1a53124221a9050791a5028430d5cec518b2d641f0d17de43f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'StudySessionQ' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 138,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 136,
        "length": 13,
        "offset": 136,
        "surroundingCode": "    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where(database.StudyVCLeaderboard.discordID == member.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "f3d430be82afd97a94b7bdf0a5563ae6c041f809fbc49825400f38022d83f5e7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'newLvl' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 158,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 156,
        "length": 6,
        "offset": 104,
        "surroundingCode": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "7d86c90da06b9faf014480e1362bb7d3143f9d8b98262db3927ff039704abe81"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'newLvl' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 185,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 183,
        "length": 6,
        "offset": 104,
        "surroundingCode": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "4ad0e1d6bd01e4674d818c08ef631cd138c62c81a86bb869cdfa256729582a11"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'roleStr' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 207,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 205,
        "length": 7,
        "offset": 30,
        "surroundingCode": "            q.save()\n\n        roleStr = \"\"\n        if newLvl < 5:\n            pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "d8d7aacfe5aaf8f9cbf232e9b279b34a9c3841e49d042bbf380793b29168138d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'role' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 212,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 210,
        "length": 4,
        "offset": 39,
        "surroundingCode": "\n        elif newLvl < 10:\n            role = None  # TODO: get lvl 5 role and add to user\n\n            if currentLvl < 5:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "a234883bda6b9832c9ec53740af34c26167be530695589cd6ce22fcd4cc2c45f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'roleStr' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 215,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 213,
        "length": 7,
        "offset": 48,
        "surroundingCode": "\n            if currentLvl < 5:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "0678f4537950c605d8afa1234d8e939418bb124395ab7c7bda87e16cd417c67c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'role' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 219,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 217,
        "length": 4,
        "offset": 39,
        "surroundingCode": "\n        elif newLvl < 20:\n            role = None  # TODO: get lvl 10 role and add to user\n\n            if currentLvl < 10:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "80199a9ec34de49f454824f2ffc4a0ab74e75e529f54cebee1e5afe570c7d5d5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'roleStr' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 222,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 220,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 10:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "b5d52d69af3f3ccbe8e5898d3481bb3bb72a6cfd45fd2cf40fc95dfd7e6d6e92"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'role' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 226,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 224,
        "length": 4,
        "offset": 39,
        "surroundingCode": "\n        elif newLvl < 30:\n            role = None  # TODO: get lvl 20 role and add to user\n\n            if currentLvl < 20:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "10b32180be2ff8506c8066ea41cf4c018572a8077f07cfed64132bfbf360993f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'roleStr' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 229,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 227,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 20:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "ad3818ea77104843202ae1b2d68199dddcdcff30748d95940d9ff129d5d9cfa5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'role' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 233,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 231,
        "length": 4,
        "offset": 39,
        "surroundingCode": "\n        elif newLvl < 40:\n            role = None  # TODO: get lvl 30 role and add to user\n\n            if currentLvl < 30:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "aa0beb09c56640013ebefb57f876f94f6e01e05f5171632e7b6979f7c835c414"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'roleStr' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 236,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 234,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 30:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "9d786ad706bd6832a81d72f0aafa0ca2e4bf0ba363709aa6493d5128be62e3d9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'role' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 240,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 238,
        "length": 4,
        "offset": 39,
        "surroundingCode": "\n        elif newLvl < 50:\n            role = None  # TODO: get lvl 40 role and add to user\n\n            if currentLvl < 40:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "fd605de6adb7017fd1fbdc177f2ed054f00b4bef3eca754375242e8ee3d9bac0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'roleStr' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 243,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 241,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 40:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "95f8ac9258d8099e929caecec0ccd577bdb1d35604cbb39cd6839ecc35d89597"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'role' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 247,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 245,
        "length": 4,
        "offset": 39,
        "surroundingCode": "\n        elif newLvl < 60:\n            role = None  # TODO: get lvl 50 role and add to user\n\n            if currentLvl < 50:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "c53d67903df0512c9384146e91912794bb2c48abf4d904d12558930ecb3f97ba"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'roleStr' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 250,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 248,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 50:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "4e5290aee4c3d0783b85a05badf897917d12c7cea45084045e1c8ff314efc8be"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'role' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 254,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 252,
        "length": 4,
        "offset": 39,
        "surroundingCode": "\n        elif newLvl < 70:\n            role = None  # TODO: get lvl 60 role and add to user\n\n            if currentLvl < 60:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "1eef6bc4c3fbf6ace6ef04f959abe90bcb2010bedf6b5c1bfbace5bbc2ad8445"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'roleStr' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 257,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 255,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 60:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "4ae2223c8d25a0ee8673d808c94cffc83425942e0d91a1debc261cdb9d095593"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'role' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 261,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 259,
        "length": 4,
        "offset": 39,
        "surroundingCode": "\n        elif newLvl < 80:\n            role = None  # TODO: get lvl 70 role and add to user\n\n            if currentLvl < 70:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "1ae0df4714a591563027a7209ce47ec3c26a43602ed058d82f2a8fd557d540e8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'roleStr' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 264,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 262,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 70:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "dc8de447aa4ac35d7f33f9440b280aa358f7114be7721e2be054412ef9eb8c1b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'role' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 268,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 266,
        "length": 4,
        "offset": 39,
        "surroundingCode": "\n        elif newLvl < 90:\n            role = None  # TODO: get lvl 80 role and add to user\n\n            if currentLvl < 80:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "e0a762ca7a3f1beb1c44bb2d1f5aae6ee0c636a0795aacc8d69fd8bad3c967fe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'roleStr' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 271,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 269,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 80:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "c2c4db4c4da2586f66fa00b394bd8d5057f2dbedd35df67d730fe74717d67296"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'role' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 275,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 273,
        "length": 4,
        "offset": 40,
        "surroundingCode": "\n        elif newLvl < 100:\n            role = None  # TODO: get lvl 90 role and add to user\n\n            if currentLvl < 90:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "3cbf81bc196f284a896a2e4983e7211fd2f06d8efba1a539da6b6fe62c73dced"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'roleStr' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 278,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 276,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 90:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "6435b3e1cba003c7767e07167c3a1e097c8f6140b80892588d4cc5cc556858f3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'role' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 282,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 280,
        "length": 4,
        "offset": 41,
        "surroundingCode": "\n        elif newLvl >= 100:\n            role = None  # TODO: get lvl 100 role and add to user\n\n            if currentLvl < 100:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "8a6d12f4137c9c5735bb4bf142f4aa73ab8771150e504c453058bee07260a1d4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'roleStr' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 285,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 283,
        "length": 7,
        "offset": 50,
        "surroundingCode": "\n            if currentLvl < 100:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "07272b24b57bb49be33df9444d1866e5b2769104f7eb0af3fef17f51bd1e5808"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'dmMSG' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 290,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 288,
        "length": 5,
        "offset": 34,
        "surroundingCode": "        if isNewLvl:\n\n            dmMSG = f\"{member.mention}, you've reached level **{newLvl}** in Study VC!\" \\\n                    f\"{roleStr}\"\n            try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "0054f2c720be3c3c5a3007d16f99bfd9f323bb6a19b0400769e3c860bf057eef"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'StudySessionQ' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 300,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 298,
        "length": 13,
        "offset": 26,
        "surroundingCode": "        return False\n\n    StudySessionQ = StudySessionQ.get()\n    StudySessionQ.StartTime = datetime.now(EST)\n    StudySessionQ.Paused = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "b64e0937110c28b5e97ceced6f2ab7da774455c9061d5b53477f0ef569cfe89e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'StudySessionQ' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 317,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 315,
        "length": 13,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "6a4a1873f666b86e83587cd8db08ac3395b3c0552e3778ef72e006e58cd4250c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'StudySessionQ' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 319,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 317,
        "length": 13,
        "offset": 136,
        "surroundingCode": "    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        StudySessionQ.delete_instance()\n        StudySessionQ.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "2196571764f3c9f5f81bcf155cbcb6888d79acb426de811bf27ceb0e34391a3f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'newLvl' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 331,
      "offset": 14,
      "length": 6,
      "code": {
        "startLine": 329,
        "length": 6,
        "offset": 30,
        "surroundingCode": "    return True\n\n        elif newLvl < 40:\n            role = None  # TODO: get lvl 30 role and add to user\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "45219de0fa301074505cbbe823c6786a2a0168f0be9de98396120e8f741ebe9b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'role' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 332,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 330,
        "length": 4,
        "offset": 39,
        "surroundingCode": "\n        elif newLvl < 40:\n            role = None  # TODO: get lvl 30 role and add to user\n\n            if currentLvl < 30:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "498f6c0b07261f3a2851e56114b46ee62a4ac59c79ba2766630a64743b135658"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'roleStr' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 335,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 333,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 30:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "6a798cd415c06ac7791f17031e599c147c56207cd97467218048e61ae91ed3d1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'StudySessionQ' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 416,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 414,
        "length": 13,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "ae8602b82b711642a5ddc26851a579620b5653034fb539ba4eca321eceb18457"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'StudySessionQ' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 418,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 416,
        "length": 13,
        "offset": 136,
        "surroundingCode": "    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        StudySessionQ.delete_instance()\n        StudySessionQ.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "dc02ec1302e17980f221894b12892fb0634a6df965a7276eed554fb5f98339b1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'bar' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 109,
      "offset": 107,
      "length": 3,
      "code": {
        "startLine": 107,
        "length": 3,
        "offset": 153,
        "surroundingCode": "            await self.tree.sync(guild=guild)\n\n        with alive_bar(len(get_extensions()), ctrl_c=False, bar=\"bubbles\", title=\"Initializing Cogs:\") as bar:\n            for ext in get_extensions():\n                try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "3ef237c91976a45900902846a7dcec2cda4f24502e2905d0e802ddb678680c78"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'ext' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 110,
      "offset": 17,
      "length": 3,
      "code": {
        "startLine": 108,
        "length": 3,
        "offset": 128,
        "surroundingCode": "\n        with alive_bar(len(get_extensions()), ctrl_c=False, bar=\"bubbles\", title=\"Initializing Cogs:\") as bar:\n            for ext in get_extensions():\n                try:\n                    await bot.load_extension(ext)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "ed2d6317f25c0c5cde7f4edc2431332da1c804d8d5317ed88361ffdc02a52e55"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'query' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 122,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 120,
        "length": 5,
        "offset": 81,
        "surroundingCode": "    async def is_owner(self, user: discord.User):\n        admin_ids = []\n        query = database.Administrators.select().where(\n            database.Administrators.TierLevel >= 3\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "5848147f9453aa3cf20477889944db9e666d9c28553a8fb73f4dbbcf7ef3f003"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'query' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 299,
      "offset": 5,
      "length": 5,
      "code": {
        "startLine": 297,
        "length": 5,
        "offset": 23,
        "surroundingCode": "\n    adminIDs = []\n    query = database.Administrators.select().where(\n        database.Administrators.TierLevel == 4\n    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "7c34ddf793d4538ac472c33c949da6560aa0cb15196343853f66cedbe848806c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Non-optimal list declaration",
  "severity": "Moderate",
  "comment": "This list creation could be rewritten as a list literal",
  "detailsInfo": "Reports cases when a list declaration\ncan be rewritten with a list literal.\n\nThis ensures better performance of your application.\n\n**Example:**\n\n```\nl = [1]\nl.append(2)\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nl = [1, 2]\n```",
  "sources": [
    {
      "type": "file",
      "path": "cog_tests.py",
      "language": "Python",
      "line": 11,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 9,
        "length": 15,
        "offset": 27,
        "surroundingCode": "\ndef get_extensions():\n    extensions = []\n    extensions.append(\"jishaku\")\n    if sys.platform == \"win32\" or sys.platform == \"cygwin\":"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyListCreationInspection"
  },
  "hash": "6148fc3f9c70739e2ca8d0c36a7fcf0daf957c67f3ec6ae1eaf88100b7d8310e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 20,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 18,
        "length": 13,
        "offset": 6,
        "surroundingCode": "\n\ndef predicate_LV1(ctx) -> bool:\n    adminIDs = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "62f841ce9888cc03f5739196678f58e7dc92b3b6cbc0c76ffba235e078a991e1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 21,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 19,
        "length": 8,
        "offset": 37,
        "surroundingCode": "\ndef predicate_LV1(ctx) -> bool:\n    adminIDs = []\n\n    query = database.Administrators.select().where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d1b700f8d4655fa08e6119576ebc9a620e6571afdcad2dc5dd171af8cf5df2f9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 35,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 33,
        "length": 13,
        "offset": 6,
        "surroundingCode": "\n\ndef predicate_LV2(ctx) -> bool:\n    adminIDs = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f4b34ebae3dac985003decce326a26763f92394e77478f72eef383580b0aa5ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 36,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 34,
        "length": 8,
        "offset": 37,
        "surroundingCode": "\ndef predicate_LV2(ctx) -> bool:\n    adminIDs = []\n\n    query = database.Administrators.select().where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7fc918fb156859136b4faca8222a8300abff0a7910df4ef8f997214e943e8cc1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 50,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 48,
        "length": 13,
        "offset": 6,
        "surroundingCode": "\n\ndef predicate_LV3(ctx):\n    adminIDs = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5b553236608c0a31c2fde61baabf9c7ea3af47b22a6a0c7696a12e4444527a49"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 51,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 49,
        "length": 8,
        "offset": 29,
        "surroundingCode": "\ndef predicate_LV3(ctx):\n    adminIDs = []\n\n    query = database.Administrators.select().where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c8a0cba5c088816dfb213f4fbfc18c51297432d0fd917be9f91f9e7aefe6981b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 65,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 63,
        "length": 13,
        "offset": 6,
        "surroundingCode": "\n\ndef predicate_LV4(ctx):\n    adminIDs = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f406747314179bde9f72a1f4603b761b73b5eb076a01f1a2460ed3b9fc1a5565"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 66,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 64,
        "length": 8,
        "offset": 29,
        "surroundingCode": "\ndef predicate_LV4(ctx):\n    adminIDs = []\n\n    query = database.Administrators.select().where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "52ee8116e3f87c31d9671c73826a33fefab5534fe8c8c294694788e982b9bb81"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 140,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 138,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef mktCommissionAdd(ctx):\n    rolesID = [\n        MKT_ID.r_designManager,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "80075d7f28ef0ca67d031583e8cad0533e0d7e84be8379bbd3a3fdce47dcc5fe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 141,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 139,
        "length": 7,
        "offset": 32,
        "surroundingCode": "\ndef mktCommissionAdd(ctx):\n    rolesID = [\n        MKT_ID.r_designManager,\n        MKT_ID.r_designTeam,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "688ff36282c9d306d35725e715a772261bc82bbe23d1a29660830caf83b50840"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 155,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 153,
        "length": 13,
        "offset": 6,
        "surroundingCode": "\n\ndef TimmyBetaHost(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "77f01496ae5282c3c1c054cbdcd7dfa940fa9bd3f126c1f6b965104318861ca7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 156,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 154,
        "length": 7,
        "offset": 29,
        "surroundingCode": "\ndef TimmyBetaHost(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b8a6d1ad6416a2f56d77134ffa1d903c68d3f50d9c3157e677b3c461147f06ee"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 157,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 155,
        "length": 6,
        "offset": 69,
        "surroundingCode": "def TimmyBetaHost(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n\n    if runDir is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d5e58d7e47e8f7495a2f97a65c8d215587871d018dfa713f401e54569a87d4d1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 160,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 158,
        "length": 6,
        "offset": 36,
        "surroundingCode": "\n    if runDir is not None:\n        runDir = runDir.group(0)\n    else:\n        runDir = None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "62179ad6717e124fff210251ef68066d892b970611320f8dd14f6527d360215e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 162,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 160,
        "length": 6,
        "offset": 51,
        "surroundingCode": "        runDir = runDir.group(0)\n    else:\n        runDir = None\n\n    return runDir == \"/home/timmy-beta\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1a7cfb91a59b6ed99f245565afc0503d574725de37a493abf40c44c4cfd5c312"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 63,
      "offset": 11,
      "length": 9,
      "code": {
        "startLine": 61,
        "length": 9,
        "offset": 12,
        "surroundingCode": "\n\nasync def rawExport(channel, response, user: discord.User):\n    transcript = await chat_exporter.export(channel, None)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0cc68e6bc995e79eb896af897a8c141ead47ed0cb4defb5bd9ffe431931a81f2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 233,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 231,
        "length": 14,
        "offset": 6,
        "surroundingCode": "\n\ndef S3_upload_file(file_name, bucket, object_name=None):\n    \"\"\"Upload a file to an S3 bucket\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8575056d618161ad7e3b78435822a5f92d6284585c73ac6987645f579dd55387"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 266,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 264,
        "length": 7,
        "offset": 8,
        "surroundingCode": "\n\nclass MAIN_ID:\n    \"\"\"\n    IDs of the SS Main server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f5ff7863f8fae67e5952c203e172bbcc0188e907bf196aae5dc9f0abef054fa7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 423,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 421,
        "length": 8,
        "offset": 8,
        "surroundingCode": "\n\nclass STAFF_ID:\n    \"\"\"\n    IDs of the SS Staff Community server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "416175351e8ae9d1bca22a24df4c41c7f7b009dc2f21f4155b85004e15a3c780"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 528,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 526,
        "length": 10,
        "offset": 8,
        "surroundingCode": "\n\nclass DIGITAL_ID:\n    \"\"\"\n    IDs of the SS Staff Community server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a380b8c76e9292a3b0602c8ddce93a17af1aaec6e9727adc514cecafffa8cd0f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 588,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 586,
        "length": 7,
        "offset": 8,
        "surroundingCode": "\n\nclass TECH_ID:\n    \"\"\"\n    IDs of the 'The Department of Information & Technology' server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0ba29bfe5574141f41deca1587da0641abe22a6cc286d8092fc790e35e507009"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 720,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 718,
        "length": 5,
        "offset": 8,
        "surroundingCode": "\n\nclass CH_ID:\n    \"\"\"\n    IDs of the Chat Helper server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "724e9b728bfcdf869e178bf132ed59f5c535b4e1a8a13db92b3e1d1b49e24eb7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 740,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 738,
        "length": 6,
        "offset": 8,
        "surroundingCode": "\n\nclass MKT_ID:\n    \"\"\"\n    IDs of the SS Marketing Department server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e233f9b6058f792969b847031674078752b970a3a1401e645b482cdd70302837"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 818,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 816,
        "length": 6,
        "offset": 8,
        "surroundingCode": "\n\nclass TUT_ID:\n    \"\"\"\n    IDs of the SS Tutoring Division server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "039de356a7e65bf69776aeb6797071764c252476b23abbf3d2c3b486ffc384fd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 872,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 870,
        "length": 5,
        "offset": 8,
        "surroundingCode": "\n\nclass HR_ID:\n    \"\"\"\n    IDs of the SS HR Department server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2933e8eff4b439df42dd0fe2c8e71fb2131907764be56a08aec73ee100f80c01"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 899,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 897,
        "length": 9,
        "offset": 8,
        "surroundingCode": "\n\nclass LEADER_ID:\n    \"\"\"\n    IDs of the Leadership Lounge server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "31d3b2937d30287162bff67d34363be9281b0b74ad4f732332046699e97693c1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 947,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 945,
        "length": 6,
        "offset": 8,
        "surroundingCode": "\n\nclass SET_ID:\n    \"\"\"\n    IDs of the SSD SET SERVER"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b6cc35c8e65093143536c589098b65071dc95ebc0adbc02a1562648ce3bba658"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 975,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 973,
        "length": 9,
        "offset": 8,
        "surroundingCode": "\n\nclass LEADER_ID:\n    \"\"\"\n    IDs of the SSD SET SERVER"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1dfbe61d5afd19f4e4d0123d673f90265def43e3f7a0fcdebd6eae219dcaa3c7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1050,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 1048,
        "length": 10,
        "offset": 8,
        "surroundingCode": "\n\nclass CheckDB_CC:\n    \"\"\"\n    Checks and Safeguards for the Bot."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ee87b21e65ffad426794c56f63070fe566b60a1d825636ffd865f8107f00f9e5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1108,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 1106,
        "length": 11,
        "offset": 90,
        "surroundingCode": "    user = os.getenv(\"CONFIG_CC_USER\")\n    password = os.getenv(\"CONFIG_CC_PASSWORD\")\n    jsonPayload = [{\"op\": \"replace\", \"path\": \"/value\", \"value\": str(value)}]\n\n    r = requests.patch("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e283cd29dd88020f17d74c1ff5466594022a3b1b99f3452a25c801a33123bae4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1286,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 1284,
        "length": 7,
        "offset": 217,
        "surroundingCode": "deprecatedFiles = [\"TTScreds.json\", \"tokenA.json\", \"staff_verifyClient.json\", \"gmailAPI_credentials.json\", \"gmail_token.json\", \"docs_token.json\", \"docs_credentials.json\", \"credentialsA.json\", \"admincred.json\"]\n\nclass bcolors:\n    HEADER = \"\\033[95m\"\n    OKBLUE = \"\\033[94m\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "dbaa2ea4a647b27c2b6ce937ec5c5fce48143ff37cf38882f6c84a351406b4e9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1518,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 1516,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef getGuildList(bot: commands.Bot, exemptServer: List[int] = None) -> list:\n    guildList = []\n    for guild in bot.guilds:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d3149ad363b24fed5cb7a14602a6d02c74c2a396a284765635f0c7877df08eb5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1518,
      "offset": 37,
      "length": 30,
      "code": {
        "startLine": 1516,
        "length": 30,
        "offset": 38,
        "surroundingCode": "\n\ndef getGuildList(bot: commands.Bot, exemptServer: List[int] = None) -> list:\n    guildList = []\n    for guild in bot.guilds:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "82b318728ebc0b45cad634d5462d22c81829bd7009bed7605e761d43ff3267ba"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1519,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 1517,
        "length": 9,
        "offset": 82,
        "surroundingCode": "\ndef getGuildList(bot: commands.Bot, exemptServer: List[int] = None) -> list:\n    guildList = []\n    for guild in bot.guilds:\n        if guild.id in exemptServer:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4208c1a07a5e44d727d1d80cb47524543075fbd3cfe44b63d5ab2a025e38331f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1543,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 1541,
        "length": 13,
        "offset": 93,
        "surroundingCode": "            self, button: discord.ui.Button, interaction: discord.Interaction\n    ):\n        TranscriptLOG = self.bot.get_channel(TECH_ID.ch_ticketLog)\n        ch = await self.bot.get_channel(interaction.channel_id)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2e3aabf997e67dd735a9a8cefc1a407ba29d2d1292620bb2ad03bfa200c8740b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1574,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 1572,
        "length": 19,
        "offset": 98,
        "surroundingCode": "        self.value = True\n        ch = await self.bot.get_channel(interaction.channel_id)\n        TempConfirmInstance = TechnicalCommissionConfirm(self.bot)\n\n        msg = await ch.send("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a54b78863989376afdc336c87a8e923fa2383da1226e294a0e79686e35fd068a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1659,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 1657,
        "length": 19,
        "offset": 98,
        "surroundingCode": "        self.value = True\n        ch = await self.bot.get_channel(interaction.channel_id)\n        TempConfirmInstance = TicketTempConfirm()\n\n        msg = await ch.send("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bc3b48a35f2f78082a6d0d9a5550de81dd2fd2dea5d8f620d7c158b834963713"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1797,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1795,
        "length": 2,
        "offset": 86,
        "surroundingCode": "async def id_generator(size=3, chars=string.ascii_uppercase):\n    while True:\n        ID = \"\".join(random.choice(chars) for _ in range(size))\n        query = database.TutorBot_Sessions.select().where(\n            database.TutorBot_Sessions.SessionID == ID"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0ab81e33bc7ec868398115d431fa31c41109ade74d84f7e16da27c0756946b93"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1834,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 1832,
        "length": 9,
        "offset": 73,
        "surroundingCode": "        theproc = subprocess.Popen([sys.executable, \"main.py\"])\n\n        runThread = Thread(target=theproc.communicate)\n        runThread.start()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "54bf8469a24a5a3a8c815216901dc4b9893d02a5314fd61171980f3e8bea0cc3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1862,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 1860,
        "length": 10,
        "offset": 6,
        "surroundingCode": "\n\ndef getHostDir():\n    \"\"\"\n    Get the directory of the current host."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "91d32eb9e817a3743804151eb521bbeaa7caed4d9de190bdec6e24773d8e6bd8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1873,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 1871,
        "length": 7,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n    print(runPath)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a70b78f24727c9ccf19e5b1b75cc33095dbdb823b93cda6cbdc0e4310c270f72"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1874,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 1872,
        "length": 6,
        "offset": 46,
        "surroundingCode": "\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n    print(runPath)\n    if runDir is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "68f574eee715224c1eaa5d62c22f0dfc45b6da0bf802224c61645a62be71d767"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1877,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 1875,
        "length": 6,
        "offset": 54,
        "surroundingCode": "    print(runPath)\n    if runDir is not None:\n        runDir = runDir.group(0)\n    else:\n        runDir = None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4970b31eef89f8e64126c1010dcb44f8c584b9e25130106c46df9b7376f5afb3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1879,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 1877,
        "length": 6,
        "offset": 51,
        "surroundingCode": "        runDir = runDir.group(0)\n    else:\n        runDir = None\n    print(runDir)\n    return runDir"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "303275bfaa332a145460b7eaf60083af1ff2cee7786b2da24677a6b029f19d79"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1884,
      "offset": 5,
      "length": 17,
      "code": {
        "startLine": 1882,
        "length": 17,
        "offset": 6,
        "surroundingCode": "\n\ndef stringTimeConvert(string: str):\n    \"\"\"\n    Filters out the different time units from a string (e.g. from '2d 4h 6m 7s') and returns a ``dict``."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b253d82b3c011a9217c23761e3c5d5d974c79eab719eb8785b481cd869f8603c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1895,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 1893,
        "length": 8,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    timeDict: dict = {}\n\n    days = re.search(\"\\d+d\", string)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bb3031f6ed1279bed3b564c345bd045d7837e48b778910d21a01ae41a2353ca3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1925,
      "offset": 5,
      "length": 17,
      "code": {
        "startLine": 1923,
        "length": 17,
        "offset": 6,
        "surroundingCode": "\n\ndef searchCustomEmoji(string: str):\n    \"\"\"\n    Searches for a custom emoji in a specific ``str`` and returns it or None if nothing found."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e7912204726796b0a73d6537918ea0e8cd6789904e608686798d95b7ecdd2b3d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1936,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 1934,
        "length": 11,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    customEmoji = re.search(\"<[^:]*:[^:]*:(\\d)+>\", string)\n\n    if customEmoji is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "087567ecb33e6bce1d8a578361f174f4ba88dd20efa935a8f2d2b0a73990b5a1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1939,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 1937,
        "length": 11,
        "offset": 41,
        "surroundingCode": "\n    if customEmoji is not None:\n        customEmoji = customEmoji.group(0)\n    else:\n        customEmoji = None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "32ba46cdd121d7be966d6c177928bb6deab6acf4da698609528b7051bf11073a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1941,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 1939,
        "length": 11,
        "offset": 61,
        "surroundingCode": "        customEmoji = customEmoji.group(0)\n    else:\n        customEmoji = None\n\n    return customEmoji"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8f7a8434987ea73cd8bff84b142d2f2f419d9a08d89af80360749c4a76bfd505"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 166,
      "offset": 7,
      "length": 24,
      "code": {
        "startLine": 164,
        "length": 24,
        "offset": 8,
        "surroundingCode": "\n\nclass TutorSession_GracePeriod(BaseModel):\n    \"\"\"\n    # IgnoreThis"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2fb3a9046e54192a27503df43c42ba2a88b387eab27be1b2f7d842e5d0bb604d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 441,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 439,
        "length": 17,
        "offset": 8,
        "surroundingCode": "\n\nclass TutorBot_Sessions(BaseModel):\n    \"\"\"\n    #TutorBot Sessions"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3bd3509464d05511c1999d849e09b522d8835f057158ab08329cb914e0faa343"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 84,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 82,
        "length": 8,
        "offset": 60,
        "surroundingCode": "        data = r.json()\n        data = data[\"data\"]\n        ListData = []\n        for object in range(len(data) - 1):\n            # object = object"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d3bb1d9e31afe85a19a2a4f9598c7fbf4e63dc3e997526eb271cfa5f6f59b644"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 87,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 85,
        "length": 7,
        "offset": 86,
        "surroundingCode": "        for object in range(len(data) - 1):\n            # object = object\n            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d25c66365b002e76fae13869dee2e7e2221a34c73322b4d52d982c3923d6488f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 88,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 86,
        "length": 12,
        "offset": 103,
        "surroundingCode": "            # object = object\n            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "368a9b63d6898db6a3b96684d879643b8b19502fc8a173965742794515803585"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 89,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 87,
        "length": 6,
        "offset": 118,
        "surroundingCode": "            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0a154760569e62c33bbe3e9be9b8301745a09bb0cdc71376549b81b894086e4f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 90,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 88,
        "length": 4,
        "offset": 98,
        "surroundingCode": "            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path\n\n            ListData.append("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7d822bee505b56e032920e99c5257e8185a68c42e967c05cf85eadae604dfc9f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 125,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 123,
        "length": 7,
        "offset": 47,
        "surroundingCode": "        object = range(len(r.json()))\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2f3acaa1d2441e79091a3cbcda9d4f2afa9a9097cf75d52652740f35821a3291"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 126,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 124,
        "length": 12,
        "offset": 65,
        "surroundingCode": "\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "356ac68809059ca167d6bf6d2544386513404746f3cb05aae0a6d364745f1c21"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 127,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 125,
        "length": 6,
        "offset": 105,
        "surroundingCode": "        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "66acdd6d67980b92f1395e69a925c6a52adb53d45e7b55ac09a7cf6093dedf80"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 128,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 126,
        "length": 4,
        "offset": 86,
        "surroundingCode": "        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n\n        return RedirectPizza("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "466accff80ea7ccda5e5c1f606467b474ca8070abe91299b9f11bbc180ca021f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 178,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 176,
        "length": 7,
        "offset": 41,
        "surroundingCode": "        pprint.pprint(r.json())\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "63b9d2aefc90c7a134ab5cc26f9b6ff915e2578010eeb353b82df835d07e9e5d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 179,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 177,
        "length": 12,
        "offset": 65,
        "surroundingCode": "\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3dc0970c9b190909c0ffe92137c84f20559d4f8fe1f072646be7bd33e9a0db5c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 180,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 178,
        "length": 6,
        "offset": 105,
        "surroundingCode": "        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c176a28695d03276fe0319ccc1d6de12d8b7f47054dbff47cf129c2cedfaaab3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 181,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 179,
        "length": 4,
        "offset": 86,
        "surroundingCode": "        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n\n        return RedirectPizza("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1b6dced980e59175727af4b8e3f4504e0acd09fe0822ac7c2fd23e4373812c28"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 95,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 93,
        "length": 2,
        "offset": 42,
        "surroundingCode": "\n    if not os.getenv(\"USEREAL\"):\n        IP = os.getenv(\"IP\")\n        databaseField = (\n            f\"{bcolors.OKGREEN}Selected Database: External ({IP}){bcolors.ENDC}\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ad42b3d389ec7c918e2ce0590e3aeae379a6c7ed65cadf710b383acdb64b6dea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 96,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 94,
        "length": 13,
        "offset": 70,
        "surroundingCode": "    if not os.getenv(\"USEREAL\"):\n        IP = os.getenv(\"IP\")\n        databaseField = (\n            f\"{bcolors.OKGREEN}Selected Database: External ({IP}){bcolors.ENDC}\"\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6eb1dec2cbf9365fdc15e052edbb3c1446ab55c81c0ade4fa8cb353471cacbd8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 100,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 98,
        "length": 13,
        "offset": 28,
        "surroundingCode": "        )\n    else:\n        databaseField = (\n            f\"{bcolors.FAIL}Selected Database: localhost{bcolors.ENDC}\\n{bcolors.WARNING}WARNING: Not \"\n            f\"recommended to use SQLite.{bcolors.ENDC} \""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "48bb993e1e16c9830a48c1a93bea7de78b7003467fc919a9bb09543c39c659bc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 291,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 289,
        "length": 10,
        "offset": 66,
        "surroundingCode": "            data = \"\\n\".join([l.strip() for l in f])\n\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e0971c7108fa39c698680c7820c9ae204505bf91e4883e36ee987792f4620c55"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 292,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 290,
        "length": 9,
        "offset": 63,
        "surroundingCode": "\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\"\n            headers = {\"Authorization\": \"token %s\" % API_TOKEN}"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "143547ae7fdd07da52213534f6de15e5b4bd2d00e6a42d4f47319612b75235b8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 305,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 303,
        "length": 2,
        "offset": 63,
        "surroundingCode": "            )\n            j = json.loads(res.text)\n            ID = j[\"id\"]\n            gisturl = f\"https://gist.github.com/{ID}\"\n            print(gisturl)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c1cc3a0c3ab038ba3827b04a46ec6b49bc9a845ba9c909103540b373391c697d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 387,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 385,
        "length": 8,
        "offset": 51,
        "surroundingCode": "        blacklisted_users.append(p.discordID)\n\n    adminIDs = []\n    query = database.Administrators.select().where(\n        database.Administrators.TierLevel == 4"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "de08d5d3df10c41399c8665270f6da21c323288e9830e1029718d455495d19cd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 436,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 434,
        "length": 12,
        "offset": 45,
        "surroundingCode": "        return CheckDB_CC.elseSituation\n\ndef initializeDB(bot):\n    \"\"\"\n    Initializes the database, and creates the needed table data if they don't exist."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9b5d08045e49bca0c5f757c9777dea94ee90fefeecad3659f8b4c64f49df1431"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 441,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 439,
        "length": 3,
        "offset": 56,
        "surroundingCode": "    \"\"\"\n    database.db.connect(reuse_if_open=True)\n    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a34fc059d032e43a746239e8fcc8bea86081af7635fa3519a012376e501c5a7a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 442,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 440,
        "length": 3,
        "offset": 114,
        "surroundingCode": "    database.db.connect(reuse_if_open=True)\n    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "de62bfd4dd101d94477f0460747bd9884fdecf6ecba73ecc1d6ea2f33cd5b040"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 443,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 441,
        "length": 3,
        "offset": 156,
        "surroundingCode": "    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "72f7d418614bc77d6ee19bc50b989cf39bc9c399b936d83e1e33546c55020311"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 444,
      "offset": 5,
      "length": 2,
      "code": {
        "startLine": 442,
        "length": 2,
        "offset": 172,
        "surroundingCode": "    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)\n\n    if not UpQ.exists():"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ee1968f3cd260955b41ae751672d56a6431e97017cfe6e6e291e7f9367d8686b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 156,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 154,
        "length": 8,
        "offset": 98,
        "surroundingCode": "            member = ctx.guild.get_member(user.id)\n            if member is None:\n                banEntry = await ctx.guild.fetch_ban(user)\n\n                if banEntry is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e7f2ab83ac7d0b1e3fad776fe5a8c317a6dc432e7a9ae8e75adf26cd6b383539"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 62,
      "offset": 17,
      "length": 14,
      "code": {
        "startLine": 60,
        "length": 14,
        "offset": 134,
        "surroundingCode": "            # We need to check who banned the person.\n            if moderator.id == 548410451818708993:  # Wick's ID\n                banReasonAUDIT = logs.reason\n\n                if \"No reason specified by\" in banReasonAUDIT:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1a2bf6519acfdc3ec686ea50f6ea58628b9bb8829ddec90962dc830bbc4bfe1f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 65,
      "offset": 29,
      "length": 15,
      "code": {
        "startLine": 63,
        "length": 15,
        "offset": 92,
        "surroundingCode": "\n                if \"No reason specified by\" in banReasonAUDIT:\n                    random, fullUsernameMOD = banReasonAUDIT.split(\n                        \"No reason specified by \"\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "289d6918afdb7ebe2bd49172e9532983379d5bb70270a6078ec1a7ee2fcaaeb9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 68,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 66,
        "length": 9,
        "offset": 92,
        "surroundingCode": "                        \"No reason specified by \"\n                    )\n                    banReason = \"None Specified\"\n\n                else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1b602777aaffc3c522d0c34fd9f2068881ec17ea67666df33dffaa2b95e207f0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 71,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 69,
        "length": 9,
        "offset": 43,
        "surroundingCode": "\n                else:\n                    banReason = re.match(r\"[^[]*\\[([^]]*)\\]\", banReasonAUDIT).groups()[\n                        0\n                    ]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "427c44cb7196e3d5bcd6bef9c2453a46680155a1ba836af8ea2105491a99b15f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 76,
      "offset": 33,
      "length": 15,
      "code": {
        "startLine": 74,
        "length": 15,
        "offset": 58,
        "surroundingCode": "\n                    try:\n                        random, fullUsernameMOD = banReasonAUDIT.split(\"- \")\n                    except ValueError:\n                        fullUsernameMOD = \"Wick\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "84deaffbb939c6a3935787b8d4bbdc231356814a9335121aa87292095e4149f7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 78,
      "offset": 25,
      "length": 15,
      "code": {
        "startLine": 76,
        "length": 15,
        "offset": 140,
        "surroundingCode": "                        random, fullUsernameMOD = banReasonAUDIT.split(\"- \")\n                    except ValueError:\n                        fullUsernameMOD = \"Wick\"\n\n            else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "21b42171de91566afb2dcca9ca4d612e797e975b81f6515e90be5b1daadd2983"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 81,
      "offset": 17,
      "length": 9,
      "code": {
        "startLine": 79,
        "length": 9,
        "offset": 35,
        "surroundingCode": "\n            else:\n                banReason = logs.reason\n                # Get full username with tag\n                fullUsernameMOD = f\"{moderator.display_name}#{moderator.discriminator}\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1d40fcc0d14f2357c769b609175846a9559512adb9be891814c093ad90764026"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 83,
      "offset": 17,
      "length": 15,
      "code": {
        "startLine": 81,
        "length": 15,
        "offset": 101,
        "surroundingCode": "                banReason = logs.reason\n                # Get full username with tag\n                fullUsernameMOD = f\"{moderator.display_name}#{moderator.discriminator}\"\n\n            # Okay now we got our reason, we need to get a few more things"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5e7e1aaa5da2b05f1f76ed907e48052cb7f85f5471a19c03991d62e1c6751ad0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 89,
      "offset": 13,
      "length": 18,
      "code": {
        "startLine": 87,
        "length": 18,
        "offset": 54,
        "surroundingCode": "\n            # Get full username with tag\n            fullUsernameTARGET = f\"{target.display_name}#{target.discriminator}\"\n\n            # Get everything into a list so we can bulk insert."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0c423f9bc66d15bc2bd57a0132fc9c834948cde30fa4f05559ad7969c7db85d3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 105,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 103,
        "length": 10,
        "offset": 85,
        "surroundingCode": "            sheet.insert_row(row, 2)  # Insert data, and boom. We done!\n\n            ModChannel = self.bot.get_channel(self.ModLogID)\n\n            embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f5f14aa41dce65871a3706aebe6109491a9a9e4b906eb6a45c38101b89fc0eef"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "CamelCase variable imported as lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 13,
      "offset": 38,
      "length": 3,
      "code": {
        "startLine": 11,
        "length": 3,
        "offset": 104,
        "surroundingCode": "from core import database\nfrom core.checks import is_hostTimmyBeta\nfrom core.common import hexColors as hex\nfrom core.common import Emoji\nfrom core.common import ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "afe939a57e33324ed2b5755746aff669155188e8a23555f9373c06fc6e0aef71"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 128,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 126,
        "length": 9,
        "offset": 50,
        "surroundingCode": "\n        query = database.Voting.select()\n        msgIDList = [msg.msgID for msg in query]\n\n        interMsgID = interaction.message.id"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ce21861e2c0b4a59062cf2edc0a41180f07de162ba1b12aba8f01360fca7a3cd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 130,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 128,
        "length": 10,
        "offset": 58,
        "surroundingCode": "        msgIDList = [msg.msgID for msg in query]\n\n        interMsgID = interaction.message.id\n        print(f\"interMsgID: {interMsgID}\")\n        if interMsgID in msgIDList:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bf1caaa67286581125024245ea47dead62131bbfa56fd2e300097a334e938769"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 133,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 131,
        "length": 13,
        "offset": 91,
        "surroundingCode": "        print(f\"interMsgID: {interMsgID}\")\n        if interMsgID in msgIDList:\n            componentsStr = database.Voting.select().where(database.Voting.msgID == interMsgID).get().components\n            componentsDict = ast.literal_eval(componentsStr)\n            interactionData = interaction.data"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9b1f67c190d8c965e708d89587a2857ce23098489af8aebc5e01eff1664c5055"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 134,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 132,
        "length": 14,
        "offset": 161,
        "surroundingCode": "        if interMsgID in msgIDList:\n            componentsStr = database.Voting.select().where(database.Voting.msgID == interMsgID).get().components\n            componentsDict = ast.literal_eval(componentsStr)\n            interactionData = interaction.data\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "aebc3b9be9e5161dd380e02c2b738b7dc030753207fbba5ef075fa81a0fcf03e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 135,
      "offset": 13,
      "length": 15,
      "code": {
        "startLine": 133,
        "length": 15,
        "offset": 186,
        "surroundingCode": "            componentsStr = database.Voting.select().where(database.Voting.msgID == interMsgID).get().components\n            componentsDict = ast.literal_eval(componentsStr)\n            interactionData = interaction.data\n\n            print(componentsDict, type(componentsDict))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a1d95433052f731199ab780c634eb90f79713418451fb9792b8e5457668c0ea8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 159,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 157,
        "length": 19,
        "offset": 60,
        "surroundingCode": "    async def create(self, ctx: commands.Context):\n\n        acceptedChannelsStr = \"\"\n        noneChannels = []\n        for channelID in self.acceptedAnnouncementCHs:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "afd804f586abcaf410725a50cf3806172545552bf363d4d09a5b7126f18911a6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 160,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 158,
        "length": 12,
        "offset": 42,
        "surroundingCode": "\n        acceptedChannelsStr = \"\"\n        noneChannels = []\n        for channelID in self.acceptedAnnouncementCHs:\n            acceptedChannel = self.bot.get_channel(channelID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b7e0c56cfc112d09f21f859fdacc8c4e8da1418eb505dba9303171184fc97f78"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 162,
      "offset": 13,
      "length": 15,
      "code": {
        "startLine": 160,
        "length": 15,
        "offset": 93,
        "surroundingCode": "        noneChannels = []\n        for channelID in self.acceptedAnnouncementCHs:\n            acceptedChannel = self.bot.get_channel(channelID)\n\n            if acceptedChannel is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c80669ff8b536941acb754f2f8822845e416b1d661d697e1a883e0e2d021d926"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 171,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 169,
        "length": 8,
        "offset": 56,
        "surroundingCode": "        print(f\"noneChannels: {noneChannels}\")\n\n        randomID = \"\".join(random.choices(string.ascii_uppercase + string.digits, k=6))\n        tempVoteCHsPath = f\"./TEMP_voteCHS_{randomID}.txt\"\n        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "089f60c9bdc9cdab4e88207ae44be98cdb2822bbdaca59519fc8ecf53641a17d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 172,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 170,
        "length": 15,
        "offset": 97,
        "surroundingCode": "\n        randomID = \"\".join(random.choices(string.ascii_uppercase + string.digits, k=6))\n        tempVoteCHsPath = f\"./TEMP_voteCHS_{randomID}.txt\"\n        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b44a9c3f09f4a5d767b5957a416b4919fe7650f1287669ee8d08ff14d5dc480d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 173,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 171,
        "length": 19,
        "offset": 155,
        "surroundingCode": "        randomID = \"\".join(random.choices(string.ascii_uppercase + string.digits, k=6))\n        tempVoteCHsPath = f\"./TEMP_voteCHS_{randomID}.txt\"\n        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\"\n\n        tempVoteCHsFileWrite = open(tempVoteCHsPath, \"w+\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0980fc126a4c8c44e6be603623df699ff8bc92ab650a38425ba03c36e4029e77"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 175,
      "offset": 9,
      "length": 20,
      "code": {
        "startLine": 173,
        "length": 20,
        "offset": 69,
        "surroundingCode": "        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\"\n\n        tempVoteCHsFileWrite = open(tempVoteCHsPath, \"w+\")\n        tempVoteCHsFileWrite.write(f\"Accepted channels:\" f\"\\n{acceptedChannelsStr}\")\n        tempVoteCHsFileWrite.close()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "279487cb1d20d1ae1cff57a7f3c5a8236979d32d2e67401dbaad6fda150b27f8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 178,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 176,
        "length": 15,
        "offset": 130,
        "surroundingCode": "        tempVoteCHsFileWrite.write(f\"Accepted channels:\" f\"\\n{acceptedChannelsStr}\")\n        tempVoteCHsFileWrite.close()\n        tempVoteCHsFile = discord.File(tempVoteCHsPath, filename=tempVoteCHsFilename)\n\n        os.remove(tempVoteCHsPath)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d06ffc84d1698584100ef113d007325a520acd2319831c9858d2a13726e16a7f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 182,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 180,
        "length": 11,
        "offset": 44,
        "surroundingCode": "        os.remove(tempVoteCHsPath)\n\n        ch_snakePit = self.bot.get_channel(TECH_ID.ch_snakePit)\n        msgVoteCHsFile = await ch_snakePit.send(file=tempVoteCHsFile)\n        voteCHsFileURL = msgVoteCHsFile.attachments[0].url"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "729dff473eda9a94439578e49b574893390ba6edac954677c367f28edf06e0f2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 183,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 181,
        "length": 14,
        "offset": 73,
        "surroundingCode": "\n        ch_snakePit = self.bot.get_channel(TECH_ID.ch_snakePit)\n        msgVoteCHsFile = await ch_snakePit.send(file=tempVoteCHsFile)\n        voteCHsFileURL = msgVoteCHsFile.attachments[0].url\n        await msgVoteCHsFile.delete()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "41f45df4c3a88642b994627ea07e0eaa73b7b8894d9a8214a144da30e263fece"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 184,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 182,
        "length": 14,
        "offset": 142,
        "surroundingCode": "        ch_snakePit = self.bot.get_channel(TECH_ID.ch_snakePit)\n        msgVoteCHsFile = await ch_snakePit.send(file=tempVoteCHsFile)\n        voteCHsFileURL = msgVoteCHsFile.attachments[0].url\n        await msgVoteCHsFile.delete()\n        embedServer = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e4bbf32855e9946409a04cbce8d8c72b23c99d30eef0fa6682926da4fb069f2d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 186,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 184,
        "length": 11,
        "offset": 105,
        "surroundingCode": "        voteCHsFileURL = msgVoteCHsFile.attachments[0].url\n        await msgVoteCHsFile.delete()\n        embedServer = discord.Embed(\n            color=hex.ss_blurple,\n            title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8f3e48473964a2b706ca47afad3229e5005fff47a412339ce16ff0871a4879ec"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 196,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 194,
        "length": 15,
        "offset": 92,
        "surroundingCode": "        embedServer.set_footer(text=\"Type 'cancel' to cancel | Timeout after 60s\")\n\n        viewAcceptedCHs = discord.ui.View()\n        viewAcceptedCHs.add_item(\n            ButtonHandler("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0febc2c8c0b22596586d1cc58503a1d3c276e880b3c523176c746fe8bc219395"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 204,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 202,
        "length": 8,
        "offset": 32,
        "surroundingCode": "            )\n        )\n        msgSetup = await ctx.send(embed=embedServer, view=viewAcceptedCHs)\n\n        def msgInputCheck(message: discord.Message):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fa7b7b9e043a2c11fb1a371830dc821724c44a4e801bd786b3a26c65fca05662"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 206,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 204,
        "length": 13,
        "offset": 88,
        "surroundingCode": "        msgSetup = await ctx.send(embed=embedServer, view=viewAcceptedCHs)\n\n        def msgInputCheck(message: discord.Message):\n            return message.channel == ctx.channel and message.author == ctx.author\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7a0602082161af93f14bc99fe612a18269429c0f0257785cda5144f51c6720eb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 212,
      "offset": 9,
      "length": 18,
      "code": {
        "startLine": 210,
        "length": 18,
        "offset": 61,
        "surroundingCode": "        text = ...  # type: str\n        options = []\n        datetimeExpiration = ...  # type: datetime.datetime\n\n        msgError = ...  # type: discord.Message"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4a4c9955650f746e98f109c9f6e186baf631d0ba17476d407c832c61b7a4cb13"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 214,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 212,
        "length": 8,
        "offset": 69,
        "surroundingCode": "        datetimeExpiration = ...  # type: datetime.datetime\n\n        msgError = ...  # type: discord.Message\n        viewReset = discord.ui.View()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f5970e1b598728b5b2ae33c6514cbed6b8182ebfce4398bc215019aeb84e9866"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 215,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 213,
        "length": 9,
        "offset": 57,
        "surroundingCode": "\n        msgError = ...  # type: discord.Message\n        viewReset = discord.ui.View()\n\n        setupFinished = False"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "beae632f02c059ffbfc97f446221c455bfed776b34ce9fe2780e2e5b2acead28"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 217,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 215,
        "length": 13,
        "offset": 47,
        "surroundingCode": "        viewReset = discord.ui.View()\n\n        setupFinished = False\n        index = 0\n        while True:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a62ab581a386043410d9d568ec06b499a71b5e2f1473a5123400898bdd552fee"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 221,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 219,
        "length": 11,
        "offset": 53,
        "surroundingCode": "        while True:\n            try:\n                msgResponse: discord.Message = await self.bot.wait_for(\n                    \"message\", check=msgInputCheck, timeout=60\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "725e59abdef40f0154d22ef211b1bae683a2d62125402310ba4ff05c5e8f1d6c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 225,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 223,
        "length": 12,
        "offset": 75,
        "surroundingCode": "                )\n            except asyncio.TimeoutError:\n                embedTimeout = discord.Embed(\n                    color=hex.red_cancel,\n                    title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b23667c51270e04582c7a7e654a9206b3c65374463b6f62e17d12c262f149e89"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 245,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 243,
        "length": 10,
        "offset": 35,
        "surroundingCode": "\n            else:\n                msgContent = msgResponse.content\n\n                if msgContent.lower() == \"cancel\":"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "62c8d0fb6279100f57a5e1178b785633321e5273f7730921e2fea8f5ce9e4fe5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 248,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 246,
        "length": 11,
        "offset": 72,
        "surroundingCode": "\n                if msgContent.lower() == \"cancel\":\n                    embedCancel = discord.Embed(\n                        color=hex.red_cancel,\n                        title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cba32b16be54ff4957cbc64cce7cfcb2641496ab18ddd30c44db6a0860a2dba1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 272,
      "offset": 21,
      "length": 13,
      "code": {
        "startLine": 270,
        "length": 13,
        "offset": 50,
        "surroundingCode": "                        pass\n\n                    embedNotFound = discord.Embed(\n                        color=hex.red_error,\n                        title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cc8b34e7e183d3f68f2e268fa34854364f1d415e5af50d01c7cad9ca10c947ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 283,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 281,
        "length": 12,
        "offset": 97,
        "surroundingCode": "                    embedNotFound.set_footer(text=\"Use 'cancel' to cancel\")\n\n                    tempChannels = []\n                    if \",\" in msgContent:\n                        channelsStrList = msgContent.split(\",\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a015f7055ac266f304c17e0cf22f235453a9078f11baa0a7a84b6dfdbe508adf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 285,
      "offset": 25,
      "length": 15,
      "code": {
        "startLine": 283,
        "length": 15,
        "offset": 104,
        "surroundingCode": "                    tempChannels = []\n                    if \",\" in msgContent:\n                        channelsStrList = msgContent.split(\",\")\n                        for channelStr in channelsStrList:\n                            stripChannelStr = channelStr.strip()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "49093673d74477c62adedc5370e438086de42cbe56bcd685a757c898a576dbb8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 287,
      "offset": 29,
      "length": 15,
      "code": {
        "startLine": 285,
        "length": 15,
        "offset": 151,
        "surroundingCode": "                        channelsStrList = msgContent.split(\",\")\n                        for channelStr in channelsStrList:\n                            stripChannelStr = channelStr.strip()\n                            channelsStrList[\n                                channelsStrList.index(channelStr)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "643bbd8e2cb5c9fddf1cf65a48e92df5f604ed6adb17dd3c8737642a1625e278"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 311,
      "offset": 29,
      "length": 8,
      "code": {
        "startLine": 309,
        "length": 8,
        "offset": 85,
        "surroundingCode": "                            )\n                        ):\n                            msgError = await ctx.send(embed=embedNotFound)\n                            try:\n                                await msgError.delete(delay=7)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e2d9b4a0fb7ebefc8e5ec2dff4152bb2809b55e36157d5ebc1a558358cd2b9e0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 320,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 318,
        "length": 10,
        "offset": 51,
        "surroundingCode": "\n                    else:\n                        channelStr = msgContent.strip()\n                        if channelStr.isdigit():\n                            channel = self.bot.get_channel(int(channelStr))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1fe197e949822a0b7506dac677205329daa085b2631e8c687e1732ddb103065a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 332,
      "offset": 29,
      "length": 8,
      "code": {
        "startLine": 330,
        "length": 8,
        "offset": 133,
        "surroundingCode": "                            or channel.id not in self.acceptedAnnouncementCHs\n                        ):\n                            msgError = await ctx.send(embed=embedNotFound)\n                            try:\n                                await msgError.delete(delay=7)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "27feb354999e9a1e1127c8e9a82cc150cbffa1715fe130a9e138a4d1b891a31f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 344,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 342,
        "length": 9,
        "offset": 65,
        "surroundingCode": "                    channels = tempChannels\n\n                    embedText = discord.Embed(\n                        color=hex.ss_blurple,\n                        title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6cc4b70923f2b77ecad1d785114afff51e8f6bd515b671459bb14c5c29f03867"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 371,
      "offset": 25,
      "length": 12,
      "code": {
        "startLine": 369,
        "length": 12,
        "offset": 72,
        "surroundingCode": "\n                    if len(msgContent) > 2000:\n                        embedTooLong = discord.Embed(\n                            color=hex.red_error,\n                            title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "df40a08fd698490607bdfb473b1849fa1e7d4ae0be059ca2827cafb94ed81ee5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 380,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 378,
        "length": 10,
        "offset": 129,
        "surroundingCode": "                        )\n                        embedTooLong.set_footer(text=\"Use 'cancel' to cancel\")\n                        msgTooLong = await ctx.send(embed=embedTooLong)\n                        try:\n                            await msgTooLong.delete(delay=7)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2e5205c7a7e0c1fe3645b8514b745ace0327665c13119e7d3f8b94a0d556a0af"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 390,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 388,
        "length": 9,
        "offset": 59,
        "surroundingCode": "                    text = msgContent\n\n                    embedText = discord.Embed(\n                        color=hex.ss_blurple,\n                        title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "905c05b3f237449930d6619c1cba02d5654537b3ca8b0791481899adc9352bc9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 414,
      "offset": 21,
      "length": 14,
      "code": {
        "startLine": 412,
        "length": 14,
        "offset": 50,
        "surroundingCode": "                        pass\n\n                    optionsStrList = msgContent.split(\",\")\n                    for optionStr in optionsStrList:\n                        options.append(optionStr.strip())"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e576723f1531f75f42b59bad3ebe80726f675778b3535807dba8d2fa590e3e8b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 418,
      "offset": 21,
      "length": 13,
      "code": {
        "startLine": 416,
        "length": 13,
        "offset": 79,
        "surroundingCode": "                        options.append(optionStr.strip())\n\n                    embedDuration = discord.Embed(\n                        color=hex.ss_blurple,\n                        title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7dc467bcbf95361911c0214961d392100ee9f18dc87514724563253b8d8c0811"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 441,
      "offset": 21,
      "length": 8,
      "code": {
        "startLine": 439,
        "length": 8,
        "offset": 50,
        "surroundingCode": "                        pass\n\n                    timeDict: dict = stringTimeConvert(msgContent)\n                    days = timeDict[\"days\"]\n                    hours = timeDict[\"hours\"]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b454df3559a55de67e2be7ae37c02669af0687456d8fdd6d71d2581adcf5c65a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 453,
      "offset": 25,
      "length": 13,
      "code": {
        "startLine": 451,
        "length": 13,
        "offset": 91,
        "surroundingCode": "                        and seconds is None\n                    ):\n                        embedNotFound = discord.Embed(\n                            color=hex.red_error,\n                            title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "89ec715d17fa568406ee91385abeeeb2dbbd1d7574fa11ec088203d690d4ff95"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 462,
      "offset": 25,
      "length": 8,
      "code": {
        "startLine": 460,
        "length": 8,
        "offset": 130,
        "surroundingCode": "                        )\n                        embedNotFound.set_footer(text=\"Use 'cancel' to cancel\")\n                        msgError = await ctx.send(embed=embedNotFound)\n                        try:\n                            await msgError.delete(delay=7)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f42b98af3b366178d6c9a9225dc883f0877a0e4e406711b86c9f3546f681bfe8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 482,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 480,
        "length": 11,
        "offset": 57,
        "surroundingCode": "                        seconds = 0\n\n                    datetimeNow = datetime.datetime.now(self.est)\n                    try:\n                        datetimeExpiration = ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5349535b41f8dac0f62c371eec07c3d4c72de8bf16580f6165fc526fd6690325"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 484,
      "offset": 25,
      "length": 18,
      "code": {
        "startLine": 482,
        "length": 18,
        "offset": 115,
        "surroundingCode": "                    datetimeNow = datetime.datetime.now(self.est)\n                    try:\n                        datetimeExpiration = (\n                            datetimeNow\n                            + datetime.timedelta(days=days)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "455c278eb31798e4c51c57cc6d71e15950178659c3730737c84644d8065d30d2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 492,
      "offset": 25,
      "length": 13,
      "code": {
        "startLine": 490,
        "length": 13,
        "offset": 102,
        "surroundingCode": "                        )\n                    except OverflowError as _error:\n                        embedOverflow = discord.Embed(\n                            color=hex.red_error,\n                            title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "83eecf91b6c9f1628e21545841c3af0b9ff7ac4e0a1e659fc7207f753a202ff3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 502,
      "offset": 25,
      "length": 8,
      "code": {
        "startLine": 500,
        "length": 8,
        "offset": 130,
        "surroundingCode": "                        )\n                        embedOverflow.set_footer(text=\"Use 'cancel' to cancel\")\n                        msgError = await ctx.send(embed=embedOverflow)\n                        try:\n                            await msgError.delete(delay=7)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "15838c32536ac55cb939d02b5aa4dea556a5c97aadf30a1de8e52f6c2ed62e3d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 510,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 508,
        "length": 11,
        "offset": 54,
        "surroundingCode": "                        continue\n\n                    embedFinish = discord.Embed(\n                        color=hex.ss_blurple,\n                        title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cfcf90c3caabf33a74fc3af7355d72b6df59d9fc338236b6c44eabeb55b36c3e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 522,
      "offset": 21,
      "length": 17,
      "code": {
        "startLine": 520,
        "length": 17,
        "offset": 65,
        "surroundingCode": "                    await msgSetup.delete()\n\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ea1971e5cd2f25ad5cefd4766f7f095e6363135bb049754e581cd40043b31f47"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 523,
      "offset": 21,
      "length": 17,
      "code": {
        "startLine": 521,
        "length": 17,
        "offset": 110,
        "surroundingCode": "\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedPseudo = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0fcb590cf5e76d291502b6f856fe2d467e20848cba692eaaae9052ffb73ac4cc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 525,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 523,
        "length": 11,
        "offset": 110,
        "surroundingCode": "                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedPseudo = discord.Embed(\n                        color=hex.ss_blurple,\n                        title=\"Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4c698200ae8e570bb9220538c354974dc1f04eba3ede9a39d4465202fd82c643"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 536,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 534,
        "length": 12,
        "offset": 43,
        "surroundingCode": "                    )\n\n                    viewOverview = discord.ui.View()\n\n                    for option in options:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2759f15eb8172977b060b1b381e093c56714c8daa8733e341c7ab3cfbd974a4d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 540,
      "offset": 25,
      "length": 11,
      "code": {
        "startLine": 538,
        "length": 11,
        "offset": 68,
        "surroundingCode": "                    for option in options:\n\n                        customEmoji = searchCustomEmoji(option)\n                        if customEmoji is not None:\n                            option = option.replace(f\"{customEmoji}\", \"\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b2f069d1b49e613dde5c146ef4011f9b019d26752bd1303eb6e1a597f80beccf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 555,
      "offset": 21,
      "length": 13,
      "code": {
        "startLine": 553,
        "length": 13,
        "offset": 94,
        "surroundingCode": "                    await ctx.send(embed=embedPseudo, view=viewOverview)\n\n                    setupFinished = True\n                    break\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "87f27a983405bdbb4874ff4b03d6f5ec0c90fa120a41a4b0345bbf3e195c67b0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 564,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 562,
        "length": 11,
        "offset": 34,
        "surroundingCode": "                pass\n\n            strChannels = \"\"\n            for channel in channels:\n                strChannels += ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "71d07a5fc1ae3fcef1108d76c1d14915c384f8a92329fd7ea7ed9e556c75a29f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 570,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 568,
        "length": 12,
        "offset": 31,
        "surroundingCode": "                )\n\n            embedConfirm = discord.Embed(\n                color=hex.yellow,\n                title=\"Confirm\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "412c21ceda6a6b0d73b0f6316f6b14c2071bd9a65e69b0b067f47aa229f2711f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 583,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 581,
        "length": 10,
        "offset": 116,
        "surroundingCode": "                text=\"Abusing this feature has severe consequences! | Timeout after 120s\"\n            )\n            msgConfirm = await ctx.send(embed=embedConfirm)\n            await msgConfirm.add_reaction(\"✅\")\n            await msgConfirm.add_reaction(\"❌\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "68adbcec107922b7e8273ae9243a4660c01d8aa368727c596fee8dff284b24e2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 587,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 585,
        "length": 12,
        "offset": 64,
        "surroundingCode": "            await msgConfirm.add_reaction(\"❌\")\n\n            def confirmCheck(reaction, user):\n                return (\n                    user.id == ctx.author.id"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7f932cfb181fbf305e536d3eeb6c196e9e513c39648231fd073faaf97371a557"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 595,
      "offset": 17,
      "length": 16,
      "code": {
        "startLine": 593,
        "length": 16,
        "offset": 34,
        "surroundingCode": "\n            try:\n                reactionResponse, userResponse = await self.bot.wait_for(\n                    \"reaction_add\", check=confirmCheck, timeout=120\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "78a61f449537c3060b49338aaa7dc55cc79159b43c027fb58f5eb0956be09aa2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 595,
      "offset": 35,
      "length": 12,
      "code": {
        "startLine": 593,
        "length": 12,
        "offset": 52,
        "surroundingCode": "\n            try:\n                reactionResponse, userResponse = await self.bot.wait_for(\n                    \"reaction_add\", check=confirmCheck, timeout=120\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b22b1e1206f5595e1a5a637c1fd9d282802ab4e0af47b3d3ab064639a9da3b36"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 599,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 597,
        "length": 12,
        "offset": 75,
        "surroundingCode": "                )\n            except asyncio.TimeoutError:\n                embedTimeout = discord.Embed(\n                    color=hex.red_error,\n                    title=\"Confirm\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "17876cc715c296aac232d4f0a28e36eaa8c68f5d3c1a165455280f5d3d8d90db"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 615,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 613,
        "length": 12,
        "offset": 76,
        "surroundingCode": "                    await msgConfirm.clear_reactions()\n\n                    embedSending = discord.Embed(\n                        color=hex.yellow,\n                        title=\"Confirm\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4eb28e92619a6a0691b298e52db40f0a70f03d25029b4534c4e2af8e478481e5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 624,
      "offset": 21,
      "length": 17,
      "code": {
        "startLine": 622,
        "length": 17,
        "offset": 95,
        "surroundingCode": "                    print(\"sending\")  # TODO: Sending to original channel\n\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0efae8e0f698ada893bcab82d2ebe1847de3d317186b9f1c60b69af9d286e536"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 625,
      "offset": 21,
      "length": 17,
      "code": {
        "startLine": 623,
        "length": 17,
        "offset": 110,
        "surroundingCode": "\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedVoting = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d36e05b5f5a78c04ae2f01a0b7292fec8a70addc7644919abed99497c3d129f8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 627,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 625,
        "length": 11,
        "offset": 110,
        "surroundingCode": "                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedVoting = discord.Embed(\n                        color=hex.ss_blurple,\n                        title=\"Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "45f3fd1072be769a94b1402de449cf8eacc8e8af5bef55a465d0bd02725a5200"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 637,
      "offset": 21,
      "length": 10,
      "code": {
        "startLine": 635,
        "length": 10,
        "offset": 43,
        "surroundingCode": "                    )\n\n                    viewVoting = discord.ui.View()\n                    for option in options:\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bd0bdb5d565d8b7f014ac756b5078456eea301eb54ec8a6fda5c7f1dc2ee5f41"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 640,
      "offset": 25,
      "length": 11,
      "code": {
        "startLine": 638,
        "length": 11,
        "offset": 68,
        "surroundingCode": "                    for option in options:\n\n                        customEmoji = searchCustomEmoji(option)\n                        if customEmoji is not None:\n                            option = option.replace(f\"{customEmoji}\", \"\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "16fbb83ac9fbc2abf49a0d511c766f7411e36a7aa7337d997a2300d788272c73"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 653,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 651,
        "length": 11,
        "offset": 47,
        "surroundingCode": "                        )\n\n                    channelTest = self.bot.get_channel(942076483290161203)\n                    try:\n                        msgVote = await channelTest.send("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ac47f7c31baa54022de7d8d2bc0c299b32bf76ee724851833a196c8b1e0ef2ee"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 655,
      "offset": 25,
      "length": 7,
      "code": {
        "startLine": 653,
        "length": 7,
        "offset": 124,
        "surroundingCode": "                    channelTest = self.bot.get_channel(942076483290161203)\n                    try:\n                        msgVote = await channelTest.send(\n                            content=\"@ everyone\", embed=embedVoting, view=viewVoting\n                        )  # TODO: everyone"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e8f24f743a375325307587f5362c0f78c776c4a1561521c35959dbd95e3fb2e3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 659,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 657,
        "length": 10,
        "offset": 116,
        "surroundingCode": "                        )  # TODO: everyone\n                    except Exception as _error:\n                        embedError = discord.Embed(\n                            color=hex.red_error,\n                            title=\"Error while sending message/s\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bf3ef6fd3e534d0ab39a59781c3c9913bc3cde52a46ab0e3128acadfdac7113f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 674,
      "offset": 25,
      "length": 8,
      "code": {
        "startLine": 672,
        "length": 8,
        "offset": 114,
        "surroundingCode": "                        await msgConfirm.edit(embed=embedError)\n                    else:\n                        compDict = {}\n                        for option in options:\n                            compDict[option] = 0"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c29b249338458ef167c03def98560954c67fc7a211eec86425a41ab2435ec96d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 678,
      "offset": 25,
      "length": 8,
      "code": {
        "startLine": 676,
        "length": 8,
        "offset": 74,
        "surroundingCode": "                            compDict[option] = 0\n\n                        compDict = json.dumps(compDict)\n                        query = database.Voting.create(\n                            msgID=msgVote.id, components=compDict"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ca970b45dd844cbcba8d0e0aed54c2974816ceec7efec5a6e444ceba73f93a86"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 684,
      "offset": 25,
      "length": 12,
      "code": {
        "startLine": 682,
        "length": 12,
        "offset": 62,
        "surroundingCode": "                        query.save()\n\n                        embedSuccess = discord.Embed(\n                            color=hex.green_confirm,\n                            title=\"Confirm\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "526efc133b5a167cc7d445524933184735400e81dd01188dc7233658c30d369c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 695,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 693,
        "length": 11,
        "offset": 76,
        "surroundingCode": "                    await msgConfirm.clear_reactions()\n\n                    embedCancel = discord.Embed(\n                        color=hex.red_cancel,\n                        title=\"Confirm\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4141c886a6c92aeca0a2dff5e434f7519c54d43deae280f4f55f22820977b51e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 35,
      "offset": 40,
      "length": 19,
      "code": {
        "startLine": 33,
        "length": 19,
        "offset": 95,
        "surroundingCode": "\nclass TicTacToeButton(discord.ui.Button[\"TicTacToe\"]):\n    def __init__(self, x: int, y: int, xUser: discord.User, yUser: discord.User):\n        super().__init__(style=discord.ButtonStyle.secondary, label=\"\\u200b\", row=y)\n        self.x = x"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e2652319fc3a1369f0a4c32b22db62efb828787ffa189120b0526a4e4f175393"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 35,
      "offset": 61,
      "length": 19,
      "code": {
        "startLine": 33,
        "length": 19,
        "offset": 116,
        "surroundingCode": "\nclass TicTacToeButton(discord.ui.Button[\"TicTacToe\"]):\n    def __init__(self, x: int, y: int, xUser: discord.User, yUser: discord.User):\n        super().__init__(style=discord.ButtonStyle.secondary, label=\"\\u200b\", row=y)\n        self.x = x"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1b992062d46d02aa88fe02027365b6f9791128f73a1efd2300f9a0694acab0a4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 106,
      "offset": 24,
      "length": 7,
      "code": {
        "startLine": 104,
        "length": 7,
        "offset": 36,
        "surroundingCode": "    Tie = 2\n\n    def __init__(self, XPlayer, OPlayer):\n        super().__init__()\n        self.current_player = self.X"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2dad37373c6c13a76da2fadcebe251042f3f5454db615b4f2fd6c067a006d844"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 106,
      "offset": 33,
      "length": 7,
      "code": {
        "startLine": 104,
        "length": 7,
        "offset": 45,
        "surroundingCode": "    Tie = 2\n\n    def __init__(self, XPlayer, OPlayer):\n        super().__init__()\n        self.current_player = self.X"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5f73940aece7c8060d3e8d083bb69e8ad1ee15501330c1a8a62b8460d3cca60b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 321,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 319,
        "length": 17,
        "offset": 116,
        "surroundingCode": "    @commands.cooldown(1, 10, commands.BucketType.guild)\n    async def donate(self, ctx: commands.Context):\n        timmyDonation_png = discord.File(\n            Others.timmyDonation_path, filename=Others.timmyDonation_png\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8145b2359d58b569ea446843af85886172618fe3644ba02833aea33bf8ecb7d8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 325,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 323,
        "length": 11,
        "offset": 19,
        "surroundingCode": "        )\n\n        embedDonate = discord.Embed(\n            color=Colors.ss_blurple,\n            title=f\"Donate\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "10d53cc655e3ef6d5d1b1a50fd825cee31047303d2b4090a3c912f4285eff2ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 349,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 347,
        "length": 9,
        "offset": 124,
        "surroundingCode": "    @commands.has_any_role(\"Moderator\")\n    async def debateban(self, ctx, member: discord.Member, *, reason=None):\n        DebateBan = discord.utils.get(ctx.guild.roles, name=\"NoDebate\")\n\n        if member.id == self.bot.user.id:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "22936f132cbff03b0076eb4e133bd6df5697cbfefea9249a71e03e24e6e0e33f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 373,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 371,
        "length": 12,
        "offset": 44,
        "surroundingCode": "                    return\n\n                UpdateReason = f\"DebateBan requested by {ctx.author.display_name} | Reason: {reason}\"\n                await member.add_roles(DebateBan, reason=UpdateReason)\n            except Exception as e:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "149e4763565162fa67a7f7e47d0883111e9af4cd92a13df5fca3648163226400"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 392,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 390,
        "length": 12,
        "offset": 64,
        "surroundingCode": "                    reason = \"No Reason Given\"\n\n                UpdateReason = f\"Debate UnBan requested by {ctx.author.display_name} | Reason: {reason}\"\n                await member.remove_roles(DebateBan, reason=UpdateReason)\n            except Exception as e:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "40f1c041c7e473c2504e825a5632e0146b2e94ca89b51f5755793f28b45a1480"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 415,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 413,
        "length": 7,
        "offset": 123,
        "surroundingCode": "    @commands.has_any_role(\"Moderator\")\n    async def countban(self, ctx, member: discord.Member, *, reason=None):\n        NoCount = discord.utils.get(ctx.guild.roles, name=\"NoCounting\")\n\n        if member.id == self.bot.user.id:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "617142a9490db4e2fc7fa8b8bad008b5c351e63acb4e22f1ada6120e27004529"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 439,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 437,
        "length": 12,
        "offset": 44,
        "surroundingCode": "                    return\n\n                UpdateReason = f\"CountBan requested by {ctx.author.display_name} | Reason: {reason}\"\n                await member.add_roles(NoCount, reason=UpdateReason)\n            except Exception as e:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "426440231700ea7d3554cf1a1402e7b0cb542dbbf769c61eefcfeb08af7e8666"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 458,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 456,
        "length": 12,
        "offset": 64,
        "surroundingCode": "                    reason = \"No Reason Given\"\n\n                UpdateReason = f\"Count UnBan requested by {ctx.author.display_name} | Reason: {reason}\"\n                await member.remove_roles(NoCount, reason=UpdateReason)\n            except Exception as e:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7fba787d63b93311778e9b628d5147707eeab87a5ac109e0c357ed102b1c9ca6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 601,
      "offset": 17,
      "length": 2,
      "code": {
        "startLine": 599,
        "length": 2,
        "offset": 111,
        "surroundingCode": "                await message.delete()\n                database.db.connect(reuse_if_open=True)\n                NE = database.AdminLogging.create(\n                    discordID=ctx.author.id, action=\"KILL\"\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "258449d8b6075f5eab46714637732e36166583b7244276c244337594ca816f67"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 640,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 638,
        "length": 7,
        "offset": 34,
        "surroundingCode": "\n        userinput = None\n        userObj = None\n\n        await ctx.send("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c7b13742862d9cd8ad27101e685a44d09f62ca6b3c541df0b226d92234ae0734"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 647,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 645,
        "length": 8,
        "offset": 56,
        "surroundingCode": "\n        while userinput != str(randomnum):\n            inputMSG = await self.bot.wait_for(\"message\", check=check)\n            userinput = inputMSG.content\n            userObj = inputMSG.author"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0bcb9254037d55ad81d12a9002f49a97171cca26a5247b1d8bb03852c1d1eda6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 649,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 647,
        "length": 7,
        "offset": 124,
        "surroundingCode": "            inputMSG = await self.bot.wait_for(\"message\", check=check)\n            userinput = inputMSG.content\n            userObj = inputMSG.author\n\n        await ctx.send("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "31ee82180ec732fbb8f8e9ef1f333017133cfdc256e75829b8f1308c13ed283f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 705,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 703,
        "length": 8,
        "offset": 19,
        "surroundingCode": "        )\n\n        UserList = []\n        RoleList = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "34ee3652e5bf20d187dd0e3c3dd6cbd8e587445b16f01556912ccbd52c79cd10"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 706,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 704,
        "length": 8,
        "offset": 31,
        "surroundingCode": "\n        UserList = []\n        RoleList = []\n\n        for user in users:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2432a7f0cbc9279536ee42a44542e0ab89ee8d639161eb412456f4e5dd486544"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 713,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 711,
        "length": 8,
        "offset": 51,
        "surroundingCode": "            RoleList.append(role.mention)\n\n        UserList = \", \".join(UserList)\n        RoleList = \", \".join(RoleList)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "54626b6c300a9db08ef0980b443f4ff79b1d8d6827b765d0b58fb38a540de1da"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 714,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 712,
        "length": 8,
        "offset": 48,
        "surroundingCode": "\n        UserList = \", \".join(UserList)\n        RoleList = \", \".join(RoleList)\n\n        embed.add_field("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c285468becc81de571a4e05ee4478ea3dc224e248813eef89f1e6340477d37b0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 739,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 737,
        "length": 12,
        "offset": 61,
        "surroundingCode": "        await view.wait()\n        await msg.delete()\n        ViewResponse = str(view.children[0].values)\n        RoleID = self.decodeDict[ViewResponse]\n        await ctx.send(f\"<@&{RoleID}>\\n{message}\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f0c447fd3ad066495fc36d3db270da54dea72c84faf5d6953c9b50350f845ef9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 740,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 738,
        "length": 6,
        "offset": 87,
        "surroundingCode": "        await msg.delete()\n        ViewResponse = str(view.children[0].values)\n        RoleID = self.decodeDict[ViewResponse]\n        await ctx.send(f\"<@&{RoleID}>\\n{message}\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "067e45d2d0c212328955f2a390df8a096d631a40a7144e2b80908e93552bf464"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 776,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 774,
        "length": 2,
        "offset": 67,
        "surroundingCode": "    @is_botAdmin\n    async def say(self, ctx, *, message):\n        NE = database.AdminLogging.create(\n            discordID=ctx.author.id, action=\"SAY\", content=message\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "959fd868e7387f87de88fd140870844c4a017f4c8d2b4054634c0ec517902d95"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 804,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 802,
        "length": 2,
        "offset": 28,
        "surroundingCode": "            return\n\n        NE = database.AdminLogging.create(\n            discordID=ctx.author.id, action=\"SAYVC\", content=text\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9e489308757d11b6dd163aea7834a6d14371097060a805a9546408df5e2d21f7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 810,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 808,
        "length": 9,
        "offset": 71,
        "surroundingCode": "\n        # Lets prepare our text, and then save the audio file\n        TTSClient = texttospeech.TextToSpeechClient(\n            credentials=access_secret(\"ttscreds\", True, 2)\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e028bfaab3a5bd68a9e327b75fe547ec9242033479cc01cd551de1724130f987"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/todocommands.py",
      "language": "Python",
      "line": 88,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 86,
        "length": 8,
        "offset": 57,
        "surroundingCode": "        database.db.connect(reuse_if_open=True)\n\n        todoList = []\n        query = database.ToDo.select().where(database.ToDo.discordID == ctx.author.id)\n        for todo in query:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "134876b5a2ae60cf0dddf599445f791d1927d50cb32a2414dc7131cdd2dbbb01"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/todocommands.py",
      "language": "Python",
      "line": 93,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 91,
        "length": 9,
        "offset": 69,
        "surroundingCode": "            todoList.append(f\"{str(todo.id)}) {todo.item}\")\n\n        todoFinal = \"\\n\".join(todoList)\n\n        database.db.close()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2a7f9bdd8d8318fa4952db8dfcc49a5c81dd8d7195e5028635454c5313fedf7b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 44,
      "offset": 15,
      "length": 7,
      "code": {
        "startLine": 42,
        "length": 7,
        "offset": 56,
        "surroundingCode": "    @commands.command()\n    @is_botAdmin4\n    async def Fmodify(self, ctx, num: int, val: bool):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1462fbce95695b275ace435f5cf3d043465a951e8490c52657b9280a1e6bd2ad"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 45,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 43,
        "length": 7,
        "offset": 81,
        "surroundingCode": "    @is_botAdmin4\n    async def Fmodify(self, ctx, num: int, val: bool):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f8717d8bfa8d5761cb4b37b55333a967e946e5a0a876e0f553bc4fec938d383e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 51,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 49,
        "length": 14,
        "offset": 19,
        "surroundingCode": "        )\n\n        databaseValues = {\n            1: \"CheckDB.MasterMaintenance\",\n            2: \"CheckDB.guildNone\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "20ffa0ac764d2ef47327a1f281cad68b037a70b0d650ef194f70f0b2100a980a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 89,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 87,
        "length": 7,
        "offset": 62,
        "surroundingCode": "    @filters.command()\n    async def list(self, ctx):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "27e301e249047b561e6ffaa8f37f2747aab8167312f1100abc1826908644d69f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 119,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 117,
        "length": 17,
        "offset": 69,
        "surroundingCode": "    @is_botAdmin3\n    async def delete(self, ctx, num: int):\n        WhitelistedPrefix: database.WhitelistedPrefix = (\n            database.WhitelistedPrefix.select()\n                .where(database.WhitelistedPrefix.id == num)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "64c26ba5560f1ea4ecda00ddfc6eb4bbc79f12afbe820d7bd50d097c0a222fe7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 130,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 128,
        "length": 17,
        "offset": 64,
        "surroundingCode": "    @is_botAdmin3\n    async def add(self, ctx, prefix):\n        WhitelistedPrefix = database.WhitelistedPrefix.create(\n            prefix=prefix, status=True\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ef4a653dbd2b447a22b3f80c3db88bcdbcf1b48c334ec6bf57ca9ad71f9123e8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 138,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 136,
        "length": 8,
        "offset": 40,
        "surroundingCode": "    async def list(self, ctx):\n\n        PrefixDB = database.WhitelistedPrefix\n        response = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d990c265a89cdca42d415db7e3e67e6859bae7d11738c9e42cfbb887ab25ca51"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 144,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 142,
        "length": 12,
        "offset": 54,
        "surroundingCode": "\n            if entry.status is True:\n                statusFilter = \"ACTIVE\"\n            else:\n                statusFilter = \"DISABLED\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "83dd79e52a7fd37afa119ea92c6a6d510ae5e322877f1a402a8ac3a0890a02ed"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 146,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 144,
        "length": 12,
        "offset": 74,
        "surroundingCode": "                statusFilter = \"ACTIVE\"\n            else:\n                statusFilter = \"DISABLED\"\n\n            response.append(f\"Prefix `{entry.prefix}`:\\n{Emoji.barrow} {statusFilter}\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "17f43ac1369a02f829a9906c77d79b1eadb82b234ce64cc89e2a21b7fb791c80"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 253,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 251,
        "length": 7,
        "offset": 29,
        "surroundingCode": "        output = \"\"\n\n        hostDir = getHostDir()\n        if hostDir == \"/home/timmya\":\n            branch = \"origin/main\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "06a5434198ff073327974d4046ad3e77a03832fdf81245f89eaea0d6282a7e44"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 315,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 313,
        "length": 7,
        "offset": 29,
        "surroundingCode": "        output = \"\"\n\n        hostDir = getHostDir()\n        if hostDir == \"/home/timmya\":\n            branch = \"origin/main\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "dead021a98b4cd8464f1a34d0ccd156f7a8db904d508da919d0ff45d0ad708bf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 394,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 392,
        "length": 9,
        "offset": 56,
        "surroundingCode": "    @is_botAdmin\n    async def list(self, ctx):\n        adminList = []\n\n        query1 = database.Administrators.select().where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "85325ffdbe1316645f1a37f846da5212158c22f7f819f72e97e14c7b9b5a28f0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 403,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 401,
        "length": 11,
        "offset": 71,
        "surroundingCode": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL1 = \"\\n\".join(adminList)\n\n        adminList = []"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "226970c05bd42d93979900e73601f2465b0a5f3ba0d3ca6abc80c5769b932778"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 405,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 403,
        "length": 9,
        "offset": 52,
        "surroundingCode": "        adminLEVEL1 = \"\\n\".join(adminList)\n\n        adminList = []\n        query2 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 2"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "afd9b3c1f4cc4e3cb33e68a4188361546c8ed290f80dab436f209cb3f7187e75"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 413,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 411,
        "length": 11,
        "offset": 71,
        "surroundingCode": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL2 = \"\\n\".join(adminList)\n\n        adminList = []"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e18b7a317461bda28ffb51d5da50c1863e9442909a993fd90b04e76b69d426fa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 415,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 413,
        "length": 9,
        "offset": 52,
        "surroundingCode": "        adminLEVEL2 = \"\\n\".join(adminList)\n\n        adminList = []\n        query3 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 3"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e01c8da8dac68ddc87aca5ea9ebaab49333d2471d9acbb78b281efe62b1f9b98"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 423,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 421,
        "length": 11,
        "offset": 71,
        "surroundingCode": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL3 = \"\\n\".join(adminList)\n\n        adminList = []"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6ef2da23b82bb2bf60a91e77e348c831e2ab234e60aef0118ba5acbd9feb1e37"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 425,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 423,
        "length": 9,
        "offset": 52,
        "surroundingCode": "        adminLEVEL3 = \"\\n\".join(adminList)\n\n        adminList = []\n        query4 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 4"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b700072ac29cf2afe437f1e4f9911bb5deb9734732c401cebe8a623e4dad4201"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 433,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 431,
        "length": 11,
        "offset": 71,
        "surroundingCode": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL4 = \"\\n\".join(adminList)\n\n        embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "baf6cf9c4fc869b0355a22cdf092a13b83d320b9da5ea52ebfb560caac98ef73"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 456,
      "offset": 33,
      "length": 16,
      "code": {
        "startLine": 454,
        "length": 16,
        "offset": 67,
        "surroundingCode": "    @w.command()\n    @is_botAdmin4\n    async def remove(self, ctx, ID: discord.User):\n        database.db.connect(reuse_if_open=True)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8d410eb833594cb02b6ea3b7a7738eb24032e9b28de172514f5e329bcd9cb3d1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 486,
      "offset": 30,
      "length": 16,
      "code": {
        "startLine": 484,
        "length": 16,
        "offset": 64,
        "surroundingCode": "    @w.command()\n    @is_botAdmin4\n    async def add(self, ctx, ID: discord.User, level: int):\n        database.db.connect(reuse_if_open=True)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "89ac5e7a5827ea9985d438c110314ef1b0b84d207d696c1704a00b71a840cf8d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 530,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 528,
        "length": 9,
        "offset": 81,
        "surroundingCode": "            theproc = subprocess.Popen([sys.executable, \"main.py\"])\n\n            runThread = Thread(target=theproc.communicate)\n            runThread.start()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e788e5c4b43bb143670a6873e1b2153da3b23ea61ccc91ec3b3f9732da1d7226"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 66,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 64,
        "length": 7,
        "offset": 86,
        "surroundingCode": "        organizationunit: Literal[\"Personal Account\", \"Team Account\"],\n    ):\n        HR_Role = discord.utils.get(interaction.user.guild.roles, id=HR_ID.r_hrStaff)\n        if HR_Role not in interaction.user.roles:\n            return await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cf9f2b1774fdccb8230ae347724bb7ef8ae438bc02242e7cffe2447888e98c83"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 102,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 100,
        "length": 7,
        "offset": 126,
        "surroundingCode": "    @app_commands.guilds(HR_ID.g_hr)\n    async def delete_gsuite(self, interaction: discord.Interaction, email: str):\n        HR_Role = discord.utils.get(interaction.guild.roles, id=HR_ID.r_hrStaff)\n        if HR_Role not in interaction.user.roles:\n            return await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "18e03e856ebff994d5dad0e3821a24ec3613711106c2758eb12b2d15acd41083"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/RedirectService.py",
      "language": "Python",
      "line": 35,
      "offset": 29,
      "length": 2,
      "code": {
        "startLine": 33,
        "length": 2,
        "offset": 114,
        "surroundingCode": "    @commands.command(alliases=[\"redirectremove\", \"removeredirect\"])\n    @is_botAdmin\n    async def rr(self, ctx, ID):\n        self.raOBJ.del_redirect(ID)\n        await ctx.send(f\"Redirect removed for {ID}\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "09499689c056c386fd5180d4720129773ad27badb5505f6a835ab5a1798f8b5e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 115,
      "offset": 15,
      "length": 9,
      "code": {
        "startLine": 113,
        "length": 9,
        "offset": 55,
        "surroundingCode": "    @commands.command()\n    @is_botAdmin\n    async def techEmbed(self, ctx):\n        embed = discord.Embed(\n            title=\"Bot Developer Commissions\", color=discord.Color.brand_green()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c7c956b3d5e23da5580dbe807ec419efbc4166b304e200891910df6cc5b017ff"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 132,
      "offset": 15,
      "length": 11,
      "code": {
        "startLine": 130,
        "length": 11,
        "offset": 39,
        "surroundingCode": "\n    @commands.command()\n    async def closeThread(self, ctx: commands.Context):\n        channel: discord.TextChannel = self.bot.get_channel(TECH_ID.ch_botreq)\n        thread: discord.Thread = ctx.channel"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "959f017fc9cf0c24dbe34de2169d475993e0d5f97b80dbe5cfabcb6b7273d79e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 146,
      "offset": 15,
      "length": 10,
      "code": {
        "startLine": 144,
        "length": 10,
        "offset": 39,
        "surroundingCode": "\n    @commands.command()\n    async def openThread(self, ctx: commands.Context):\n        channel: discord.TextChannel = self.bot.get_channel(TECH_ID.ch_botreq)\n        thread: discord.Thread = ctx.channel"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8f835b528c9976352be9faee5f110dd3a352acfb100a629317c189835d855f9d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 165,
      "offset": 15,
      "length": 19,
      "code": {
        "startLine": 163,
        "length": 19,
        "offset": 45,
        "surroundingCode": "\n    @tasks.loop(seconds=60.0)\n    async def autoUnarchiveThread(self):\n        \"\"\"\n        Creates a task loop to make sure threads don't automatically archive due to inactivity."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8092a3407a814acb6f3b6439aea121d851a716089c8fae3c6bec2ad19c665132"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 38,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 36,
        "length": 14,
        "offset": 6,
        "surroundingCode": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "35b6bb5914c9cfd8adfd9a5e1706dc8dca842953777f7929e5c14c5ddc7c4fdd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 51,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 49,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b229beebff5eeb26f49c4dd6ba1e556f7d5609bb3017549322000fd3bf9c8022"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 51,
      "offset": 22,
      "length": 17,
      "code": {
        "startLine": 49,
        "length": 17,
        "offset": 23,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bd60cd5ae665eb92f16d484ecfc25d4dba96c8b14525c0b32958ac4589ac3200"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 54,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 52,
        "length": 9,
        "offset": 33,
        "surroundingCode": "    now = datetime.now(EST)\n\n    deltaTime = now - dateObj\n\n    minutes = str(deltaTime.total_seconds() // 60)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c91483b385bd8b4d0ab235f873de52cccd5b56c837b04018a3ce8ede2c93a7d2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 232,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 230,
        "length": 12,
        "offset": 96,
        "surroundingCode": "                timeout = await view.wait()\n                if not timeout:\n                    SelectedGame = var.view_response\n                else:\n                    return await ctx.send(\"Timed out, try again later.\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0d6d949e374cad0e8206b95a131c521d38f6f3a13825414bca076e81bd79af6b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 235,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 233,
        "length": 6,
        "offset": 111,
        "surroundingCode": "                else:\n                    return await ctx.send(\"Timed out, try again later.\")\n                GameID = GameDict[SelectedGame]\n                code = str(await self._create_invite(ctx.author.voice, GameID))\n                await ctx.send(\"Loading...\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "daae979964259a3f591b3844ebde5d31bbb966966f98990be0d96f53ddb44b0b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 291,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 289,
        "length": 12,
        "offset": 96,
        "surroundingCode": "                timeout = await view.wait()\n                if not timeout:\n                    SelectedGame = var.view_response\n                else:\n                    return await ctx.send(\"Timed out, try again later.\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "11ef3bddb28a135078f04b0d591842dcf822f679e394c0bf407e9b158c50d4eb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 295,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 293,
        "length": 6,
        "offset": 125,
        "surroundingCode": "                    return await ctx.send(\"Timed out, try again later.\")\n                print(SelectedGame)\n                GameID = GameDict[SelectedGame]\n                code = str(await self._create_invite(ctx.author.voice, GameID))\n                await ctx.send(f\"**Click the link to get started!**\\nhttps://discord.gg/{code}\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e2538f27ad943e5f9a7d5d3cab4181ce4bfdc12a412e1f996413f3b0d7fdeb06"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 331,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 329,
        "length": 8,
        "offset": 75,
        "surroundingCode": "                    int(query.ChannelID)\n                )\n                GameLink = str(await channel.create_activity_invite(880218394199220334))\n                await ctx.send(f\"**Click the link to get started!**\\n{GameLink}\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "51edfa311fd807ce8ef889cd356915755e57b0161dd03b502d2757cfe6396312"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 374,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 372,
        "length": 8,
        "offset": 35,
        "surroundingCode": "                )\n\n                GameLink = str(await channel.create_activity_invite(880218394199220334))\n                await ctx.send(f\"**Click the link to get started!**\\n{GameLink}\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a66eed019ae52bf913430b062a8b85a6653324faf906b978a973ba0295add616"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 391,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 389,
        "length": 2,
        "offset": 103,
        "surroundingCode": "    async def rename(self, ctx, *, name=None):\n        database.db.connect(reuse_if_open=True)\n        SB = discord.utils.get(ctx.guild.roles, name=self.SB)\n        legend = discord.utils.get(ctx.guild.roles, name=self.Legend)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "dc86cd6b4823157b420b7a9308bc0a942de8766f11d60161c05edf1899bdb107"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 394,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 392,
        "length": 2,
        "offset": 79,
        "surroundingCode": "        legend = discord.utils.get(ctx.guild.roles, name=self.Legend)\n\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3d446d83d36929206ccee4b11623b9edd036e640599e71423f7947cd094758c6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 395,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 393,
        "length": 3,
        "offset": 72,
        "surroundingCode": "\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5029f68ed1f4bd1ad6e94352d418e98bf58743fa0b7f4853542fdc259f155c9a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 396,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 394,
        "length": 2,
        "offset": 135,
        "surroundingCode": "        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "954ecc0fce10a79539268ea5b6f163518ddd4f3b51026ac5cf3a1fb3131de8d3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 397,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 395,
        "length": 2,
        "offset": 134,
        "surroundingCode": "        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d6d7f670abea859425800518526d95b644642b3ca4cdd21f6291b567a87595d5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 398,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 396,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4b75b942f2dd2cf9f4959a3ab393c49107e8ad14516f4c637fc4182678ef2d35"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 399,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 397,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7725f2dab799a1bd9a6d47fb64f49d57c567b445a0ac2375675e7aae121edae5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 401,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 399,
        "length": 4,
        "offset": 71,
        "surroundingCode": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "42cc9abaaab2a15216dbb96f05a40392848a3d1e4a8cdbb2e4070599baed66e2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 402,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 400,
        "length": 4,
        "offset": 75,
        "surroundingCode": "\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "85a10e4dd1319ba08691bc7cd587c84c084738775947feac019f7ddd98a9339b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 403,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 401,
        "length": 4,
        "offset": 140,
        "surroundingCode": "        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5419d84677934d895f073dd23d6c7e0e379f0b9c223b276f167e9315137e477a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 404,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 402,
        "length": 3,
        "offset": 140,
        "surroundingCode": "        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "97cb105606ed238ba14656e2f91cf3973d80aa0fc84a412cf792edf3c020440b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 405,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 403,
        "length": 3,
        "offset": 138,
        "surroundingCode": "        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ce339f915c0bbb7d4c58b97f288f1c78d5348cc2c02bfb05dbfc349a57e38478"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 406,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 404,
        "length": 3,
        "offset": 136,
        "surroundingCode": "        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5948a3fcb2e042e09a33d7ab2e7c311b8a02b31a6dd7fc7e5aff1b40c7defab6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 407,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 405,
        "length": 3,
        "offset": 136,
        "surroundingCode": "        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f00ed02d7104d3674df4bbcf84bfe3fff916bc4f62cb2fecae063eb15d510c5f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 408,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 406,
        "length": 3,
        "offset": 136,
        "surroundingCode": "        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "592616e65ba2f28616bcc22176373ef5d8a6050a1b6e929268bf1c1c669931b8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 409,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 407,
        "length": 3,
        "offset": 136,
        "surroundingCode": "        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n\n        roleList = ["
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7029fcff7bb0fd8e3ecb555f7e4109fdf4d7afe611db42dd777a0a47d7bdc59d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 411,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 409,
        "length": 8,
        "offset": 73,
        "surroundingCode": "        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n\n        roleList = [\n            SB,\n            AT,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7ee3a21210148f52c36183190c0248b2f2df84504d57bdc4d3fdc92141560a21"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 563,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 561,
        "length": 10,
        "offset": 89,
        "surroundingCode": "                )\n                print(f\"T: {query.TutorBotSessionID}\")\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(\n                    query.datetimeObj\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f1a2b9e8ff197c575aac67a369de461cd0afb1c7883ed0eced99df9819c02e6e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 568,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 566,
        "length": 6,
        "offset": 73,
        "surroundingCode": "\n                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cb2e6a85fe869b4ec3d5cde9dc67bf6eeb42c687bb6f6a31c354e951c329e1df"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 569,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 567,
        "length": 6,
        "offset": 125,
        "surroundingCode": "                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "430bc12a2d13fea4e815ce3b62ca4488308a25f88ab6fd6add397a7f2406c108"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 588,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 586,
        "length": 12,
        "offset": 64,
        "surroundingCode": "\n                print(query.TutorBotSessionID)\n                tutorSession = database.TutorBot_Sessions.select().where(\n                    database.TutorBot_Sessions.SessionID == query.TutorBotSessionID\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "713ca0fad2c25b2d36ed333307c5a9b6ed11e944fe76a4e3054e95c70a485538"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 595,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 593,
        "length": 12,
        "offset": 63,
        "surroundingCode": "\n                if tutorSession.exists():\n                    tutorSession = tutorSession.get()\n\n                    student = self.bot.get_user(tutorSession.StudentID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "38f8ac785af7cd00803b69077c5186ef4e011fb77404f27c86da94bfc2dbda9f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 600,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 598,
        "length": 6,
        "offset": 89,
        "surroundingCode": "                    tutor = self.bot.get_user(tutorSession.TutorID)\n\n                    HOURCH = self.bot.get_channel(self.TutorLogID)\n\n                    hourlog = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1d77a4c48d71a79f9bd156e2ed0f0715d3de9a29070a533ae354367f59ac27b5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 667,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 665,
        "length": 10,
        "offset": 61,
        "surroundingCode": "                )\n                tag.save()\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(q.datetimeObj)\n\n                day, now = showTotalMinutes(VCDatetime)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3a9eb0f8eb161481a397b22e9a9cfb06a696a61768c1a6553ca6619311d5245c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 670,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 668,
        "length": 6,
        "offset": 73,
        "surroundingCode": "\n                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fbb84fe0424abb12b31c328d647722bfa99a31a444f9bbe74b4f9511125f8fd1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 671,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 669,
        "length": 6,
        "offset": 125,
        "surroundingCode": "                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2f00b5e724532fec1291327097ee44dabeb44ac8ab8e8d27bec898feddf4b06b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 688,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 686,
        "length": 12,
        "offset": 60,
        "surroundingCode": "\n                print(q.TutorBotSessionID)\n                tutorSession = database.TutorBot_Sessions.select().where(\n                    database.TutorBot_Sessions.SessionID == q.TutorBotSessionID\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b92fcfaf7fd8e281b8d8775c0a272063e9df77e96e7e813e7dcae59c31dfaf5c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 692,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 690,
        "length": 12,
        "offset": 80,
        "surroundingCode": "                )\n                if tutorSession.exists():\n                    tutorSession = tutorSession.get()\n\n                    student = self.bot.get_user(tutorSession.StudentID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "658eae6b037412d5cef8188efbc6080705ea497db7ab6e0dbbe2263f0ce49310"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 697,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 695,
        "length": 6,
        "offset": 89,
        "surroundingCode": "                    tutor = self.bot.get_user(tutorSession.TutorID)\n\n                    HOURCH = self.bot.get_user(self.TutorLogID)\n\n                    hourlog = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1425fe76dcf16ff8afa6358a9fae283c0a48391b63e71af3001a6ff26c8b2b75"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 817,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 815,
        "length": 10,
        "offset": 61,
        "surroundingCode": "                    .get()\n                )\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(q.datetimeObj)\n\n                day, now = showTotalMinutes(VCDatetime)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7c73d98c54cb6b9175f4245bb7dd6e21b5f76e7360a298bee9e66f29a7eeee49"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 873,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 871,
        "length": 3,
        "offset": 62,
        "surroundingCode": "        member = ctx.guild.get_member(ctx.author.id)\n\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0fd9a21fc025843333a63a69c30f883629bcc52796a5e9ab0eaed9c447734f08"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 874,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 872,
        "length": 5,
        "offset": 62,
        "surroundingCode": "\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7b98869c60046e65f21d222e2a62ee8d5640d4e6d0c1e974238b90dcfa488220"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 875,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 873,
        "length": 4,
        "offset": 112,
        "surroundingCode": "        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8497b85a91ed0a6ab1b4984c1472326e58749df60c032a1062df1d788144db86"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 876,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 874,
        "length": 3,
        "offset": 125,
        "surroundingCode": "        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e26c36c5859afa677ec5acbccae2686b306f6a610ebc34e719dd3d27d2a7af7e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 877,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 875,
        "length": 4,
        "offset": 138,
        "surroundingCode": "        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5152040e9e497ac43a77368f49c067ddcff60a97ea7fdc4d469a5aa0f82d0e83"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 878,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 876,
        "length": 2,
        "offset": 138,
        "surroundingCode": "        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0f75d065dc4a8e4aa8f976263ca8e44b7dccbdfac97052d39093dcb08f1e3ec7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 879,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 877,
        "length": 2,
        "offset": 136,
        "surroundingCode": "        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "18f1b2f28bc0416631cdd3fe0e564d012ee9f2f480c302d5537d60ecf727ab32"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 880,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 878,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2f5110b781cd7e5738aa8d1aaf1bc8637028db02ddadeac171115673c59b0640"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 882,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 880,
        "length": 2,
        "offset": 71,
        "surroundingCode": "        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "048f30514303e7a0a335006d5bb627bf79a7b6747622d983da8a704e79fcbd74"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 883,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 881,
        "length": 2,
        "offset": 82,
        "surroundingCode": "\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")\n        roles = [BM, SE, E, OWNER]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9a4de3ab73fad898b12cb5fd2d1b03eebe9859e30a4cb8d644c6b6afbc5a1532"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 884,
      "offset": 9,
      "length": 1,
      "code": {
        "startLine": 882,
        "length": 1,
        "offset": 150,
        "surroundingCode": "        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")\n        roles = [BM, SE, E, OWNER]\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e4d840599f4551bd84c1741c09c7d2b079e157c6f8e9c6641938977bd16ae64d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 916,
      "offset": 21,
      "length": 4,
      "code": {
        "startLine": 914,
        "length": 4,
        "offset": 56,
        "surroundingCode": "\n                if query.exists():\n                    LOCK: database.VCChannelInfo = (\n                        database.VCChannelInfo.select()\n                        .where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "22ea71bda43f900ef1b925b05ae4545d0b5966b132f71b3577d7df7a03804805"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 995,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 993,
        "length": 2,
        "offset": 78,
        "surroundingCode": "    @commands.command()\n    async def settutor(self, ctx, tutorcode):\n        TR = discord.utils.get(ctx.guild.roles, name=self.TutorRole)\n\n        if TR not in ctx.author.roles or ctx.guild.id == STAFF_ID.g_staff:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "39d8e7c380148e1a7cb34e4fa12195e6c6858fca42d1ce164a8fa2e0ea6b21df"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1012,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 1010,
        "length": 12,
        "offset": 64,
        "surroundingCode": "                return await ctx.send(embed=embed)\n\n            tutorSession = database.TutorBot_Sessions.select().where(\n                database.TutorBot_Sessions.SessionID == tutorcode\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "59dcb80eea690150166e83d6b940b8babde36a934a4d13df212893df88d532bb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1016,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 1014,
        "length": 12,
        "offset": 68,
        "surroundingCode": "            )\n            if tutorSession.exists():\n                tutorSession = tutorSession.get()\n                if member.voice.channel.category_id in self.categoryID:\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4f478825e3e3a0931e0c4e612556527a4b8a09a660617bbdfaf63a15f8676301"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1104,
      "offset": 21,
      "length": 4,
      "code": {
        "startLine": 1102,
        "length": 4,
        "offset": 56,
        "surroundingCode": "\n                if query.exists():\n                    LOCK: database.VCChannelInfo = (\n                        database.VCChannelInfo.select()\n                        .where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "71862d58017e559674b56a31a9c2e9bc79a7845573963d2a08512af51805fe54"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1184,
      "offset": 33,
      "length": 10,
      "code": {
        "startLine": 1182,
        "length": 10,
        "offset": 111,
        "surroundingCode": "    @commands.command()\n    @commands.cooldown(1, 5, commands.BucketType.user)\n    async def permit(self, ctx, typeAction, user: discord.Member = None):\n        database.db.connect(reuse_if_open=True)\n        member = ctx.guild.get_member(ctx.author.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d834eef5df25fae7cc020129ef54276c197abe738a030e43771cfe58eb44b7c6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1284,
      "offset": 29,
      "length": 9,
      "code": {
        "startLine": 1282,
        "length": 9,
        "offset": 99,
        "surroundingCode": "                                    randomlist.append(x.display_name)\n\n                            formatVer = \"\\n\".join(randomlist)\n\n                            embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2e964b81e169162e24927fa78f4b3d64699c0c5fe016a31f221fd9263377b45d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1359,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1357,
        "length": 2,
        "offset": 62,
        "surroundingCode": "        member = ctx.guild.get_member(ctx.author.id)\n\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "45f4b42f08a840c2a309380e2424cae2cc7d09ccdd61f0114de67fea3d4fdb09"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1360,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 1358,
        "length": 3,
        "offset": 72,
        "surroundingCode": "\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4f3a0300a2ff7249aa5d2d40edfa3e27de2487df2cd6bfab849b6c6e6c673b51"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1361,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1359,
        "length": 2,
        "offset": 135,
        "surroundingCode": "        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "724ab99938be184a3d2912d249e50e80ae85292a2b7a67a405de52666fe15c77"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1362,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1360,
        "length": 2,
        "offset": 134,
        "surroundingCode": "        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a8450e0cebeb2104c404bd379b9e9717584f51d0b99640a8bbab1579dbfe1752"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1363,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1361,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7c06ad6e8cb5683e0f30c8b1dedeed875abcccc0424a0854003aa21d501e56c8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1364,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1362,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        roleList = [MT, MAT, TT, AT, VP, CO]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3d953e8ba5cec1f977ca8118ed48752349319550987f7c20a1cb4ef05fd01846"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1366,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 1364,
        "length": 8,
        "offset": 71,
        "surroundingCode": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        roleList = [MT, MAT, TT, AT, VP, CO]\n\n        voice_state = member.voice"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f61858fb5b387ca527e04ba26583fc2aeed580dadcb85b0eaac5cacbb86adb50"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1398,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 1396,
        "length": 10,
        "offset": 84,
        "surroundingCode": "                if query.exists():\n                    try:\n                        voiceLIMIT = int(new_voice_limit)\n                    except:\n                        return await ctx.send(f\"{Emoji.deny} Not a valid number!\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "dbe52e1b981819ff7dad3712195fd10af7db501f46f4b13534c23f5701fd34f5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1555,
      "offset": 15,
      "length": 7,
      "code": {
        "startLine": 1553,
        "length": 7,
        "offset": 56,
        "surroundingCode": "\n    @commands.command(aliases=[\"start\"])\n    async def startVC(self, ctx):\n        embed = discord.Embed(\n            title=\"Private Channels\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e46ab637f812fdb356a21fb5f656d3b214e66db1bdb6813368580eed9502ff66"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 27,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 25,
        "length": 14,
        "offset": 6,
        "surroundingCode": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c12a75dee80fd934e6b1bb6a977016d2d53152b7a987b36a73d1dca83a0c208e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 39,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 37,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6e8928b4a05ae71f66f301b7b203ebc66f682224c9ce5ed67ce3b9edd60c65c6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 39,
      "offset": 22,
      "length": 17,
      "code": {
        "startLine": 37,
        "length": 17,
        "offset": 23,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2a7468d0c1b1f87a935718b5384b2d19c0f5879d925f20d7e1c287c27fa98365"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 42,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 40,
        "length": 9,
        "offset": 33,
        "surroundingCode": "    now = datetime.now(EST)\n\n    deltaTime = now - dateObj\n\n    totalmin = deltaTime.total_seconds() // 60"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "42d1837afc461570025044c8700c7af4b27751752e8ec30199e1e2fa672a6c97"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 49,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 47,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f5123e5f4781d23c7ce815e765fa132561ad945f3f48bf07fce8e8849c37b9e4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 53,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 51,
        "length": 10,
        "offset": 94,
        "surroundingCode": "        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n    )\n    ColumnDict = {\n        0: q.ch_tv_console,\n        1: q.ch_tv_startvc,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "128fcfd27d21a508a7f9deb748b099c87b4bd595e33e36a14d3b7416bb77d24f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 127,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 125,
        "length": 10,
        "offset": 107,
        "surroundingCode": "        database.db.connect(reuse_if_open=True)\n        print(self.LobbyStartIDs[member.guild.id])\n        lobbyStart = member.guild.get_channel(self.LobbyStartIDs[member.guild.id])\n        if lobbyStart == None:\n            try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ccc52d3c1b3f967ada2f938b99666f0a4ddb3f3cf4ea3be18087733971e8c528"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 130,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 128,
        "length": 10,
        "offset": 64,
        "surroundingCode": "        if lobbyStart == None:\n            try:\n                lobbyStart = self.bot.get_channel(\n                    self.LobbyStartIDs[member.guild.id]\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "572f95cbe2160032f982ebc6f3faf4aef8758e4136c5ed4a2345bef3a65130ca"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 147,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 145,
        "length": 11,
        "offset": 24,
        "surroundingCode": "        ):\n\n            acadChannel = self.bot.get_channel(self.channel_id[member.guild.id])\n            query = database.VCChannelInfo.select().where(\n                (database.VCChannelInfo.authorID == member.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1901027ef3fff00896917f80cfab703345caf27c32a8091746efe6a4bcadebab"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 153,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 151,
        "length": 11,
        "offset": 104,
        "surroundingCode": "                & (database.VCChannelInfo.GuildID == before.channel.guild.id)\n            )\n            ignoreQuery = database.IgnoreThis.select().where(\n                (database.IgnoreThis.authorID == member.id)\n                & (database.IgnoreThis.channelID == before.channel.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "52623e4af2f35f9e5e91637ab5651be3ea7433fb2f664fb82d0d4b011b8b8105"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 183,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 181,
        "length": 12,
        "offset": 59,
        "surroundingCode": "                )\n                try:\n                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e1b8f0abddad5d359d369be90c68760023b19e4d2a7c0d199f08da87eebde7ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 185,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 183,
        "length": 12,
        "offset": 122,
        "surroundingCode": "                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None\n\n                if query.ChannelID == str(before.channel.id):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "12f2d72899a655f14e2be1d90f0ecd26412a354e780d5ba9fb43be2072cb788c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 244,
      "offset": 29,
      "length": 10,
      "code": {
        "startLine": 242,
        "length": 10,
        "offset": 97,
        "surroundingCode": "                                .get()\n                            )\n                            VCDatetime = pytz.timezone(\"America/New_York\").localize(\n                                query.datetimeObj\n                            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a48eeb69e253a39328547480e1e13002a0425e19a948421231c485bbd5c2fd4d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 249,
      "offset": 29,
      "length": 6,
      "code": {
        "startLine": 247,
        "length": 6,
        "offset": 97,
        "surroundingCode": "\n                            day, now = showTotalMinutes(VCDatetime)\n                            daySTR = int(VCDatetime.timestamp())\n                            nowSTR = int(now.timestamp())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "81370e173aee683a40bb09abc0f3666f552d845be8916a7418bea35b6da7262b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 250,
      "offset": 29,
      "length": 6,
      "code": {
        "startLine": 248,
        "length": 6,
        "offset": 161,
        "surroundingCode": "                            day, now = showTotalMinutes(VCDatetime)\n                            daySTR = int(VCDatetime.timestamp())\n                            nowSTR = int(now.timestamp())\n\n                            query.delete_instance()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "25d94eabe217b4ff0cfeab7a5742d971316498d9b7c3d7b884a29af391863931"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 273,
      "offset": 33,
      "length": 12,
      "code": {
        "startLine": 271,
        "length": 12,
        "offset": 138,
        "surroundingCode": "                                    content=member.mention, embed=embed\n                                )\n                                tutorSession = (\n                                    database.TutorBot_Sessions.select().where(\n                                        database.TutorBot_Sessions.SessionID"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "69b49e1e88fb6b4db226fc34952f889b43561b7d632675cbaf2f6c64ce5f2662"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 281,
      "offset": 37,
      "length": 12,
      "code": {
        "startLine": 279,
        "length": 12,
        "offset": 95,
        "surroundingCode": "                                if tutorSession.exists():\n\n                                    tutorSession = tutorSession.get()\n\n                                    student = self.bot.get_user("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "301602e03a614b4c515dfe540fe27dd07a376bfa78a6640760101c0e08ca2d43"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 289,
      "offset": 37,
      "length": 6,
      "code": {
        "startLine": 287,
        "length": 6,
        "offset": 135,
        "surroundingCode": "                                        tutorSession.TutorID\n                                    )\n                                    HOURCH = self.bot.get_channel(\n                                        self.TutorLogID\n                                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1f1378df85e89342329e2f86c4861c9fd66ccc33e8a4e4261867007589f0ad6c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 343,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 341,
        "length": 11,
        "offset": 54,
        "surroundingCode": "            and not member.bot\n        ):\n            acadChannel = self.bot.get_channel(\n                self.LobbyStartIDs[member.guild.id]\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "50428278042513909e0819611b56837f2c054eaa35f584612537055ba97558c4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 347,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 345,
        "length": 2,
        "offset": 81,
        "surroundingCode": "            )\n            print(acadChannel, after.channel.guild.id)\n            SB = discord.utils.get(member.guild.roles, name=self.SB)\n\n            legend = discord.utils.get(member.guild.roles, name=self.Legend)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d4282dda8db6cd8b56f2ba2c921d1e0e437f2c98014e0b73e945a4640294b741"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 351,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 349,
        "length": 2,
        "offset": 90,
        "surroundingCode": "            legend = discord.utils.get(member.guild.roles, name=self.Legend)\n\n            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "72483e5db4b3c24c50eb4489f49e2cde0478709c7d4712bca1b9d33240096d98"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 352,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 350,
        "length": 3,
        "offset": 83,
        "surroundingCode": "\n            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2001b9be0a35e271903d9b518315728bc60c149ac978d31ac8a65a46113cc65c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 353,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 351,
        "length": 2,
        "offset": 153,
        "surroundingCode": "            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e2d77d9870c332709005110160a7fed172371ef7ec1e22de4436ba20ff1395d1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 354,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 352,
        "length": 2,
        "offset": 152,
        "surroundingCode": "            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bc0175546f9e7dacadbe7280d3ca2ca9609714fa3daef130df016662e2d853fe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 355,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 353,
        "length": 2,
        "offset": 150,
        "surroundingCode": "            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d33021c7b250a672d8f1c29c2c07e3ed1417b279d87a7bf047fcd571e4972ec1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 356,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 354,
        "length": 2,
        "offset": 150,
        "surroundingCode": "            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)\n\n            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d1bed80cd0e7d67da745ab99b0db394b190f74abba58b6ba3f5fa58a277fb5ca"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 358,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 356,
        "length": 8,
        "offset": 82,
        "surroundingCode": "            CO = discord.utils.get(member.guild.roles, name=self.CO)\n\n            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]\n\n            TutorRole = discord.utils.get(member.guild.roles, name=self.TutorRole)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7f42571887ec8f0a0055cefbeb03e2fb7cecdfb9713e1a733d95f0af7e3b4746"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 360,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 358,
        "length": 9,
        "offset": 74,
        "surroundingCode": "            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]\n\n            TutorRole = discord.utils.get(member.guild.roles, name=self.TutorRole)\n\n            category = discord.utils.get("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "02f2c3aaaa22b430e74c4a18c709a83114e7aefe1e474d367386172dded4ce09"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 381,
      "offset": 17,
      "length": 13,
      "code": {
        "startLine": 379,
        "length": 13,
        "offset": 61,
        "surroundingCode": "            )\n            if query.exists():\n                moveToChannel = (\n                    database.VCChannelInfo.select()\n                    .where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f9b5211c38d09a89acc8b9f184e3c1a7eb2c6b844d75c307d2d0bcec5a481fe0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 397,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 395,
        "length": 12,
        "offset": 59,
        "surroundingCode": "                )\n                try:\n                    tutorChannel = self.bot.get_channel(\n                        int(moveToChannel.ChannelID)\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ba1b9512ff04f94bf678dc4aa312b9a6271479e34c1ea1938d9f39906322cc45"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 24,
      "offset": 15,
      "length": 12,
      "code": {
        "startLine": 22,
        "length": 12,
        "offset": 43,
        "surroundingCode": "\n    @tasks.loop(seconds=10)\n    async def TTSWeekCheck(self):\n        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3d8031e9c7e64a5798982a38b974ef29837c1ad746855ceaf98010a59ff36df0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 26,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 24,
        "length": 10,
        "offset": 88,
        "surroundingCode": "    async def TTSWeekCheck(self):\n        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()\n        timeNow = now.time()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c1c18a575dc706aa306ae09d3498527b942bf75156cca02c69be80f945f28c33"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 27,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 25,
        "length": 7,
        "offset": 92,
        "surroundingCode": "        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()\n        timeNow = now.time()\n\n        queryLeaderboard = StudyVCLeaderboard.select()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "65bdcbffb812948b30ca1a152a815c6a4b2717ec240feb26445f1d1e8f7d090d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 29,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 27,
        "length": 16,
        "offset": 38,
        "surroundingCode": "        timeNow = now.time()\n\n        queryLeaderboard = StudyVCLeaderboard.select()\n        entries = [entry.id for entry in queryLeaderboard]\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3415d2e664f9bce5037ae80f8187f6226f9843fbdd030d099e2326c98edc3b6e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 33,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 31,
        "length": 9,
        "offset": 127,
        "surroundingCode": "\n        if weekdayNow == 1 and (now - self.lastReset >= datetime.timedelta(days=7)) and timeNow >= self.midnight:\n            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(StudyVCLeaderboard.id == entry)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "63dc79142887b527f0ac12ed5e2420fb0737147edcd91d298060ea79ef7499fc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 35,
      "offset": 17,
      "length": 16,
      "code": {
        "startLine": 33,
        "length": 16,
        "offset": 78,
        "surroundingCode": "            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(StudyVCLeaderboard.id == entry)\n                queryLeaderboard = queryLeaderboard.get()\n                queryLeaderboard.TTSWeek = 0"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "708ba9e5119b53592cd53100a2271e0192c8f4a04a4181a03f36797ea58855fe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 36,
      "offset": 17,
      "length": 16,
      "code": {
        "startLine": 34,
        "length": 16,
        "offset": 149,
        "surroundingCode": "            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(StudyVCLeaderboard.id == entry)\n                queryLeaderboard = queryLeaderboard.get()\n                queryLeaderboard.TTSWeek = 0\n                queryLeaderboard.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6186cc5d75d3320fd6995049157ce0506a0d1c6daf022f214336711b4488fd3a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 45,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 43,
        "length": 14,
        "offset": 6,
        "surroundingCode": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2bd147885d32c01ddf9ac0171cca4cada0653b5caedbfae079f9befeaab464fb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 57,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 55,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6b0db09bad396931051ea2eab25a3337f95c28a04c2c164a63f40032101ff1fc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 57,
      "offset": 22,
      "length": 17,
      "code": {
        "startLine": 55,
        "length": 17,
        "offset": 23,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d8615d519c638524d72d8b838eae63f7cb9ac68aa06d2fda4b73004169a057e7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 59,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 57,
        "length": 7,
        "offset": 73,
        "surroundingCode": "def showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)\n\n    deltaTime = now - dateObj"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ba3caadb7881c832fb7a6b76b1a57b0caf878efd6a777473f5d539b64e796fc0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 61,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 59,
        "length": 9,
        "offset": 71,
        "surroundingCode": "    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)\n\n    deltaTime = now - dateObj\n\n    totalmin = deltaTime.total_seconds() // 60"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "568a7eabd820d107405a994cb6acde5a215dd2ca7dd0dc4e815b05408bbf1a9d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 68,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 66,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef _getXPForNextLvl(lvl: int):\n    \"\"\"\n    Get the XP the user needs to reach the next level."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "dad28ac048d2a57cc1666f7ebab17294f9df6c039fe4d0eb6a67f7a9e7f8cce6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 77,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 75,
        "length": 8,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    xpNeeded = (5 * lvl * lvl) + (50 * lvl) + 100\n\n    return xpNeeded"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4b1eb899a65d9ae771bfdc25df3b247a9a7537abc2bac4a42b4a0f72bbd10975"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 82,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 80,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef _shortNumber(number: int) -> str:\n    \"\"\"\n    Shorts a number and adds the number abbreviation to it."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "282c4a4aaa4e47072cea69af4227a3922ba4c14b3ca6a9c09dc1d2850430d2b2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 95,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 93,
        "length": 9,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    numberStr = ...     # type: str\n\n    if number < 1000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "daacfe95c48c29bd94f79b49be7f4e29a2ee48433dfb248ef659c500f366bfea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 98,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 96,
        "length": 9,
        "offset": 31,
        "surroundingCode": "\n    if number < 1000:\n        numberStr = f\"{number}\"\n\n    elif number < 1000000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1a934f6d978417e065497959feb060010f650b56ee3d0da3e641b49573592aef"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 103,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 101,
        "length": 9,
        "offset": 65,
        "surroundingCode": "        number /= 1000\n        number = round(number, 2)\n        numberStr = f\"{number}K\"\n\n    elif number < 1000000000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cd2edec33f2533403b5ceedcd3d557dcea749793c4ebd360016f8da12deca70c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 108,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 106,
        "length": 9,
        "offset": 68,
        "surroundingCode": "        number /= 1000000\n        number = round(number, 2)\n        numberStr = f\"{number}M\"\n\n    elif number < 1000000000000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "37148bf622142edabfe975a592b9e632b1a6278455acad9a0177d50deda97af3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 113,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 111,
        "length": 9,
        "offset": 71,
        "surroundingCode": "        number /= 1000000000\n        number = round(number, 2)\n        numberStr = f\"{number}B\"\n\n    elif number < 1000000000000000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "554a89ac7c265716da6e1e855eb59dcdb4595d4b8326f219f51abfc1b3bd3241"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 118,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 116,
        "length": 9,
        "offset": 74,
        "surroundingCode": "        number /= 1000000000000\n        number = round(number, 2)\n        numberStr = f\"{number}T\"\n\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "364d6845b53bc3fe73c38b8bf49fda87ca3aa8be8c0bb5b667810d3fb2b24b99"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 126,
      "offset": 11,
      "length": 22,
      "code": {
        "startLine": 124,
        "length": 22,
        "offset": 12,
        "surroundingCode": "\n\nasync def addLeaderboardProgress(member: discord.Member):\n    \"\"\"\n    Updates the data in the database table `StudyVCLeaderboard` of a specific member and adds level roles to the member if needed."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3981f53ccb42be232ab6803dfc71b576f13034e2b5c20438dbbeb027a3c823bf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 134,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 132,
        "length": 11,
        "offset": 80,
        "surroundingCode": "    :return: Whenever the user has been found in the database: bool\n    \"\"\"\n    xpPerMinute = 30\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d032381c93f4f41c48358ef9749b5970e900f68bbf8e0c6753af955439fe1a7b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 136,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 134,
        "length": 13,
        "offset": 26,
        "surroundingCode": "    xpPerMinute = 30\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b41e0be7986c9c11689bc673170dcb7250cc168704fa948084b849c87dd0f11b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 138,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 136,
        "length": 13,
        "offset": 136,
        "surroundingCode": "    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where(database.StudyVCLeaderboard.discordID == member.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "72d1f0cd99912e7f1c450949827c42e29188c317a25d6422787afa1a850c7c7d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 140,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 138,
        "length": 16,
        "offset": 118,
        "surroundingCode": "        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where(database.StudyVCLeaderboard.discordID == member.id)\n\n        isNewLvl = False"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fb2124b50f153547ffd75e4c0cf9f9f65e37dfeed7abe382ded6983538382bba"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 142,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 140,
        "length": 8,
        "offset": 131,
        "surroundingCode": "        leaderboardQuery = database.StudyVCLeaderboard.select().where(database.StudyVCLeaderboard.discordID == member.id)\n\n        isNewLvl = False\n        if leaderboardQuery.exists():\n            leaderboardQuery = leaderboardQuery.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "19fac9edac71da83b75dde3e277ef9fa27b107e842b1a531d1cfb11a3e7cf609"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 144,
      "offset": 13,
      "length": 16,
      "code": {
        "startLine": 142,
        "length": 16,
        "offset": 75,
        "surroundingCode": "        isNewLvl = False\n        if leaderboardQuery.exists():\n            leaderboardQuery = leaderboardQuery.get()\n            leaderboardQuery.TTS = totalmin + leaderboardQuery.TTS\n            leaderboardQuery.TTSWeek = totalmin + leaderboardQuery.TTSWeek"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0ff13fca4aae8e3091a8b754d8e8e62173b4df7f891ab3def8226cdf97f6751b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 149,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 147,
        "length": 10,
        "offset": 93,
        "surroundingCode": "            leaderboardQuery.totalSessions = leaderboardQuery.totalSessions + 1\n\n            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8987bd5f5bbb8e073ebfef6150e0d96643719b1a75b5a7cae0f1aba45c58c6e3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 150,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 148,
        "length": 9,
        "offset": 61,
        "surroundingCode": "\n            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3d87580322155864980923116600740e1f6dfb09e673d11543fa0d4bd6b0146a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 151,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 149,
        "length": 14,
        "offset": 104,
        "surroundingCode": "            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP\n\n            xpNeeded = _getXPForNextLvl(currentLvl)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3c30f138a805dddb256f9387f138c51a44640da382d77ac173ec9dcb2c622e98"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 153,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 151,
        "length": 8,
        "offset": 67,
        "surroundingCode": "            currentTotalXP = leaderboardQuery.totalXP\n\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "216a80d1a241e910d1184568ea299de344221f3910ab9b35b4369625842221e5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 154,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 152,
        "length": 8,
        "offset": 65,
        "surroundingCode": "\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "861ec94e63d127422f666c4284835c93bae4c19ed86494dcb7b6d25766336170"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 156,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 154,
        "length": 5,
        "offset": 59,
        "surroundingCode": "            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "12397bce33af8f55e8b698d54ce09535854cca7dcb850103e54ae521be599c9b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 157,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 155,
        "length": 10,
        "offset": 54,
        "surroundingCode": "\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "66120af1e29c4e30ef3555d6cbd5a9190964143f33f337d04e3c12ec67aaafae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 158,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 156,
        "length": 6,
        "offset": 104,
        "surroundingCode": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ecd073dec41adcc9529394d039fcf1885ed58ef2ea2b89533b9c2afd44aee836"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 162,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 160,
        "length": 8,
        "offset": 51,
        "surroundingCode": "            if newXP >= xpNeeded:\n\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "862bc62ba327c9673b7cec85efbeaa5844d255eedea6f775c48f582958686609"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 163,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 161,
        "length": 11,
        "offset": 49,
        "surroundingCode": "\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:\n                    newXP -= newXPNeeded"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8fbe4fca5a3183f7cdf82e8a6c4e161cb0dca8a18f177aa2e7bd45c50b93997a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 167,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 165,
        "length": 11,
        "offset": 93,
        "surroundingCode": "                    newXP -= newXPNeeded\n                    newLvl += 1\n                    newXPNeeded = _getXPForNextLvl(newLvl)\n\n            leaderboardQuery.xp = newXP"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e9c99a65fe88852e253aa4e44548184da283f5f2447d2af4442bc0bc5ededf59"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 176,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 174,
        "length": 10,
        "offset": 27,
        "surroundingCode": "\n        else:\n            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "65e8be5eb5bef8cbba6d7464ead9513c9eadf69847e816c2a317d27ccbdc7d57"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 177,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 175,
        "length": 9,
        "offset": 53,
        "surroundingCode": "        else:\n            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "528e8cc3eadff3db2bd24c5e1d9c0d6753d96c1e870975252e38b9bffb914ad8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 178,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 176,
        "length": 14,
        "offset": 65,
        "surroundingCode": "            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0\n\n            xpNeeded = _getXPForNextLvl(currentLvl)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "106a4d01eff00883cbca43fca52fa3118bfa62fa35a1b88c3978368ee74c800c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 180,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 178,
        "length": 8,
        "offset": 44,
        "surroundingCode": "            currentTotalXP = 0\n\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bf4b7a513513a444d0a47e8c1f196cc956dcb0aabf2c44e335e7437b4b2ffbac"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 181,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 179,
        "length": 8,
        "offset": 65,
        "surroundingCode": "\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bde5b12f9053d9ace5016f049da29a6cbb1528b9c1743a17ca0735540abd855e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 183,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 181,
        "length": 5,
        "offset": 59,
        "surroundingCode": "            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ddefc34fbfef35e4760130d3c9635b8fe3dcd34178299b29f1d5f2a07fb80e1e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 184,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 182,
        "length": 10,
        "offset": 54,
        "surroundingCode": "\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "414b18b32a790a3ab884b8c6cbe7fb2c1eb7d4bad077c3243f925149e2150a9d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 185,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 183,
        "length": 6,
        "offset": 104,
        "surroundingCode": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bce7c1ee1e733180a05b8bcacc10e78aae3c4f3937941494c54b4484c6e2fc67"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 189,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 187,
        "length": 8,
        "offset": 51,
        "surroundingCode": "            if newXP >= xpNeeded:\n\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "48a99769be8a50f23f6e94b2f3fe70ed39f761c03dfe5c6fc22d3458f1e399fb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 190,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 188,
        "length": 11,
        "offset": 49,
        "surroundingCode": "\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:\n                    newXP -= newXPNeeded"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f30a61b6f08a02239c1d7c00a95271c0f9b3e01145ff449f16640c7a1bff4b88"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 194,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 192,
        "length": 11,
        "offset": 93,
        "surroundingCode": "                    newXP -= newXPNeeded\n                    newLvl += 1\n                    newXPNeeded = _getXPForNextLvl(newLvl)\n\n            q = database.StudyVCLeaderboard.create("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fff55a7b7e35b9e332eb4dec02ee96b000efadff3b7526f6f60632e0f44f954a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 207,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 205,
        "length": 7,
        "offset": 30,
        "surroundingCode": "            q.save()\n\n        roleStr = \"\"\n        if newLvl < 5:\n            pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f9cfb3941c2ee9266d70f4b598fa4741d60c8df3d4f0a801d051c3706721fb6e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 215,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 213,
        "length": 7,
        "offset": 48,
        "surroundingCode": "\n            if currentLvl < 5:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2f01aa4536fdec4011d559d1cf24117ffed693f26ca59473ac4b1f53bfb6c3e0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 222,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 220,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 10:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "dea6d4a994c7c26171e1a63e1da38843950f67846a1802a33393a1ab4b8efcd0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 229,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 227,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 20:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0dd04f1c3ce13f3601a76fb428d97a877df4788d4839c8f45688bd58aa616d64"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 236,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 234,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 30:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cc5497dcc4e19d69b9ea828987257aa2a35bc1fbcf9fe5c753b394116407e864"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 243,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 241,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 40:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6c17b9cb83972762847f4f64f0f0703d4b31e0d29bc4fdb40b1908c23f68a74e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 250,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 248,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 50:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9c264163175c1d5e216153142620eabcd47be3f13956453e59cef82fb38c6e1a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 257,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 255,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 60:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "39ef610e3399d54ecae1a76090b27f2b2b1dc9aeb4b9d90c29d15bb81d907505"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 264,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 262,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 70:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0325bd603022e3482fe61d430e7829dd4df9b131723248ef06594e03f51b9d25"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 271,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 269,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 80:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0034f43c6f78a9b37e4a6e1c982242291f425d751ae76dc2e37af0a547a6e3ad"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 278,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 276,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 90:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e263b1694f6d702b6d153ad6ffe3b6a1585accdfd6ffc57220bca84423629c48"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 285,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 283,
        "length": 7,
        "offset": 50,
        "surroundingCode": "\n            if currentLvl < 100:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0f9453b94315eb50de732e7a23460b205c3edaf6535008a446e96860753841c0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 290,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 288,
        "length": 5,
        "offset": 34,
        "surroundingCode": "        if isNewLvl:\n\n            dmMSG = f\"{member.mention}, you've reached level **{newLvl}** in Study VC!\" \\\n                    f\"{roleStr}\"\n            try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a019d3de630a12b119ce3a23255020a64e08d81c61bb78dc0dde6da9bf70cb34"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 300,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 298,
        "length": 13,
        "offset": 26,
        "surroundingCode": "        return False\n\n    StudySessionQ = StudySessionQ.get()\n    StudySessionQ.StartTime = datetime.now(EST)\n    StudySessionQ.Paused = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7502f9cdb8d879c8aa588ca63600750eb6ce4473571d42c92001dfe0af5053ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 308,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 306,
        "length": 10,
        "offset": 12,
        "surroundingCode": "\n\nasync def endSession(member: discord.Member):\n    \"\"\"\n    Ends the session by kicking the user out of the voice channel and removing the user from the database table `StudyVCDB`."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "18219902452a5bbd44977fd5d3d4cfe40e6baf03d3e1e9f8dfccc2bc730bd362"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 317,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 315,
        "length": 13,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3566313c6325e7bc71c32a550ed82c3779af1cc2d4da1c7ecfd5872b777ff12e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 319,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 317,
        "length": 13,
        "offset": 136,
        "surroundingCode": "    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        StudySessionQ.delete_instance()\n        StudySessionQ.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7a8a3cc57e20cf00a4f8af8cf53486a7ca8372fb1b269d26fd2137b6886060df"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 335,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 333,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 30:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a63053097fc3aa4013de1efc6c64bfc56bd39e6f7ee73262336b16bf7e9616ac"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 407,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 405,
        "length": 10,
        "offset": 12,
        "surroundingCode": "\n\nasync def endSession(member: discord.Member):\n    \"\"\"\n    Ends the session by kicking the user out of the voice channel and removing the user from the database table `StudyVCDB`."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bb68ad611182c3cb569a194e13332131eade74ec18421412b652945f0c6388c1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 416,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 414,
        "length": 13,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7adb85542e9d137a111296255c328477e44fb914e497fc60f8e57c16e1fc7071"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 418,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 416,
        "length": 13,
        "offset": 136,
        "surroundingCode": "    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        StudySessionQ.delete_instance()\n        StudySessionQ.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d275ddf2ab2532e4296c87b901fec5d6b5bca7707df3369e73eaee4bd2c2ae4b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 478,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 476,
        "length": 12,
        "offset": 91,
        "surroundingCode": "        Removes an item from the study to-do list of the author/owner.\n        \"\"\"\n        isInDatabase = await addLeaderboardProgress(ctx.author)\n\n        if isInDatabase:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7a689255c78882c65538e177317914e2a2872adf099db92ae887dfc5a6c58afe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 513,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 511,
        "length": 6,
        "offset": 73,
        "surroundingCode": "        guild = await self.bot.fetch_guild(self.StudyVCGuildID)\n\n        lbList = []\n        i = 1\n        for entry in database.StudyVCLeaderboard.select().order_by(database.StudyVCLeaderboard.totalXP.desc(),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5abaadd3b1e3713c691f967d2a23a4ec276e3bdce255c2d58b7ce86da0b471c5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 533,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 531,
        "length": 10,
        "offset": 56,
        "surroundingCode": "                    place = f\"`{i}th`\"\n\n                totalXPStr = _shortNumber(entry.totalXP)\n                lbList.append(f\"{place} **{member}**: `{totalXPStr} XP`\")\n                i += 1"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "73922da7ae3ee3d7631b4526dc0f7020409a77123ba71c81d79efb6cfad3866d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 537,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 535,
        "length": 13,
        "offset": 53,
        "surroundingCode": "                i += 1\n        print(lbList)\n        FormattedList = \"\\n\".join(lbList)\n        embed = discord.Embed(\n            title=\"Study Leaderboard\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c5860a84ff5f42476c0a56a39ed6ef2d188831d22e73efcf62e90b9a8f0887b4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 31,
      "offset": 11,
      "length": 15,
      "code": {
        "startLine": 29,
        "length": 15,
        "offset": 12,
        "surroundingCode": "\n\nasync def setNewStudyGoal(self, console, member: discord.Member, renew: bool):\n    now = datetime.now(EST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "51308434d6c98e5cf751c47ac97dea5e5e14cba1fd1953496f1ae6e0f2775fa1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 37,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 35,
        "length": 3,
        "offset": 104,
        "surroundingCode": "        query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id).get()\n\n    MSV = discord.ui.View(timeout=60)\n    var = SelectMenuHandler(\n        SSTypes, \"temp_view:studybot_st1\", \"Select a duration for your study session\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "01359202fb74a93281cbbd21f5ff0ea820c5689a32c548e09d34db81c61d3757"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 43,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 41,
        "length": 7,
        "offset": 27,
        "surroundingCode": "    MSV.add_item(var)\n\n    msgView = await console.send(\n        f\"{member.mention} You have joined a study channel. Please choose the duration of your study session!\",\n        view=MSV"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b7262a21b59bd85b81e85c066d0e82f5b90ac1c57590afda01e1c02a0e3d31b0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 53,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 51,
        "length": 12,
        "offset": 19,
        "surroundingCode": "\n    else:\n        MSV_disabled = discord.ui.View()\n        var = SelectMenuHandler(\n            SSTypes, \"temp_view:studybot_st1\", \"Timed out\", disabled=True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d6ac1dfe283ecd861f0ce4a93ad3fcfe947796311b608f31dd3029b72582c26f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 104,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 102,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "eada4c6c3cc5878616dd5a0a27bdb4602ecfcc776c113aa410e4d4f606a88f27"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 108,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 106,
        "length": 10,
        "offset": 94,
        "surroundingCode": "        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n    )\n    ColumnDict = {\n        0: q.ch_tv_console,\n        1: q.ch_tv_startvc,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0b7b34ee7b96eb7f8c7c25559abc8ce63747d0fd1f172a46cce95b069c276c00"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 133,
      "offset": 15,
      "length": 13,
      "code": {
        "startLine": 131,
        "length": 13,
        "offset": 67,
        "surroundingCode": "\n    @commands.Cog.listener(\"on_voice_state_update\")\n    async def StudyVCModule(\n        self,\n        member: discord.Member,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9c268e2dd4c81655e26b3b0d5561302a71318421f64881c02558853bf8872ed9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 153,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 151,
        "length": 13,
        "offset": 24,
        "surroundingCode": "        ):\n\n            StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if StudySessionQ.exists():\n                await addLeaderboardProgress(member)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0aeeb591c6c5fab21d365bd98e742ec9336f9cb48cb318e624e3c3a23fc11440"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 175,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 173,
        "length": 7,
        "offset": 46,
        "surroundingCode": "                query.save()\n\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b9b542b351cb87eb04dce3016a94c1c57075a2efb8f8a00f0b6d374ae7a0ed92"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 200,
      "offset": 15,
      "length": 14,
      "code": {
        "startLine": 198,
        "length": 14,
        "offset": 84,
        "surroundingCode": "\n    @tasks.loop(seconds=10) # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\"\n        print(\"loop StudyVCChecker\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "105694faa3a2ca2f5a04f1d1baa46771a04c064b1ac1f986af1384dfffaa59e0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 204,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 202,
        "length": 15,
        "offset": 46,
        "surroundingCode": "        print(\"loop StudyVCChecker\")\n\n        StudyVCGuildObj = self.bot.get_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7a6b0f88f0b6b0d061ec08dd474775146c35542305977c2cbb7b1da4745f1b69"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 205,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 203,
        "length": 17,
        "offset": 73,
        "surroundingCode": "\n        StudyVCGuildObj = self.bot.get_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4a60aff32768d9bf85ec7d3acb9a2f54a350d94b6b48861e2285a8a1f1371cd6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 208,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 206,
        "length": 7,
        "offset": 50,
        "surroundingCode": "\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n\n            member = StudyVCGuildObj.get_member(q.discordID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "55c283e2fb4daa88a8d1016723016a328173c76d02a9061847cfda3cd26bc629"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 31,
      "offset": 11,
      "length": 15,
      "code": {
        "startLine": 29,
        "length": 15,
        "offset": 12,
        "surroundingCode": "\n\nasync def setNewStudyGoal(self, console, member: discord.Member, renew: bool):\n    now = datetime.now(EST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "67453a007fba65ee98cdc62f5617237a9290c23983120f41056f58e6168e90b5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 37,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 35,
        "length": 3,
        "offset": 104,
        "surroundingCode": "        query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id).get()\n\n    MSV = discord.ui.View(timeout=60)\n    var = SelectMenuHandler(\n        SSTypes, \"temp_view:studybot_st1\", \"Select a duration for your study session\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ab3d54f94c03effbfee3986876aad1a26b474dd7b54674b9937c288bdcfbe56e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 43,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 41,
        "length": 7,
        "offset": 27,
        "surroundingCode": "    MSV.add_item(var)\n\n    msgView = await console.send(\n        f\"{member.mention} You have joined a study channel. Please choose the duration of your study session!\",\n        view=MSV"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a8b0f8a9dd6975f80609b0f1eee75b43eb3de3e800f4621034e1c7c1fe241455"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 53,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 51,
        "length": 12,
        "offset": 19,
        "surroundingCode": "\n    else:\n        MSV_disabled = discord.ui.View()\n        var = SelectMenuHandler(\n            SSTypes, \"temp_view:studybot_st1\", \"Timed out\", disabled=True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0851ddfd77bae56bfdea0a9e2bf06bf5aaf5247208cb90c6a3764df90765fec6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 104,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 102,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "85eec57d13306bb631c6460bfd124439486b127b224dde2ed8bc689093567380"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 108,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 106,
        "length": 10,
        "offset": 94,
        "surroundingCode": "        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n    )\n    ColumnDict = {\n        0: q.ch_tv_console,\n        1: q.ch_tv_startvc,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9a0d93679f89b59d24e37160c3ddc07d11bd6e2647df9004e993dc9f52d4cae7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 133,
      "offset": 15,
      "length": 13,
      "code": {
        "startLine": 131,
        "length": 13,
        "offset": 67,
        "surroundingCode": "\n    @commands.Cog.listener(\"on_voice_state_update\")\n    async def StudyVCModule(\n        self,\n        member: discord.Member,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "38c8a4c2cd41fea4a99bba0a645096c2e091cc5f6ec620d55e71ecf71ae598be"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 151,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 149,
        "length": 13,
        "offset": 54,
        "surroundingCode": "            and not member.bot\n        ):\n            StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if StudySessionQ.exists():\n                await addLeaderboardProgress(member)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "53a2456fc19f2ac63b7bab8242793653d1db0282460ce0ee2f3114121fc2d178"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 172,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 170,
        "length": 7,
        "offset": 46,
        "surroundingCode": "                query.save()\n\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b04c6e62f2b79ffd47f390dea29978d9d3b769649a3c58c94401688d4983e85a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 197,
      "offset": 15,
      "length": 14,
      "code": {
        "startLine": 195,
        "length": 14,
        "offset": 84,
        "surroundingCode": "\n    @tasks.loop(seconds=10) # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\"\n        print(\"loop StudyVCChecker\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e65cebdf5af44d1015c2294035a08b860fe4a59d4de7039fe3365f80914921f2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 201,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 199,
        "length": 15,
        "offset": 46,
        "surroundingCode": "        print(\"loop StudyVCChecker\")\n\n        StudyVCGuildObj = await self.bot.fetch_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = await StudyVCGuildObj.fetch_channel(self.StudyVCConsole)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fa954b8463ebaa9ea909b476b21820f170b87dd2f2cb13223b272b21c11c9482"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 202,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 200,
        "length": 17,
        "offset": 81,
        "surroundingCode": "\n        StudyVCGuildObj = await self.bot.fetch_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = await StudyVCGuildObj.fetch_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0e04782a1f2427271c084486e4ff5f519caa810ada1607657f4f79b2ef512e84"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 205,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 203,
        "length": 7,
        "offset": 50,
        "surroundingCode": "\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n\n            member = await StudyVCGuildObj.fetch_member(q.discordID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c289f5a20e6acd718eab1cff3a671c89133880d936d258fd53d746a5b6163a58"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 17,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 15,
        "length": 2,
        "offset": 86,
        "surroundingCode": "async def id_generator(size=3, chars=string.ascii_uppercase):\n    while True:\n        ID = \"\".join(random.choice(chars) for _ in range(size))\n        query = database.TutorBot_Sessions.select().where(\n            database.TutorBot_Sessions.SessionID == ID"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2a89d1b2fbb474c4d0919b0996bfa5001676076553259ea912c6c5fa229f50e3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 562,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 560,
        "length": 13,
        "offset": 59,
        "surroundingCode": "    def __init__(self):\n        super().__init__()\n        DropdownClass = Dropdown()\n\n        self.add_item(DropdownClass)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3bc37cfe27e5b2b7b6d246d35495b76ab08bf801f1863b4915c12cf0b692090a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 25,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 23,
        "length": 12,
        "offset": 98,
        "surroundingCode": "        now = datetime.now(self.est)\n        for entry in database.TutorBot_Sessions:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.Date)\n            val = int((TutorSession - now).total_seconds())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b62561c9cb3b5ac0a929392251e8f1a77b171cf8a203d4d800126914519c3884"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 91,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 89,
        "length": 7,
        "offset": 46,
        "surroundingCode": "                geten.save()\n\n                GP_DATE = old + new\n\n                gp_en: database.TutorSession_GracePeriod = ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3c353c0facc2682a69d1bfc53ff971b361a43f77d2452e21264fe4aedc5cc115"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 124,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 122,
        "length": 12,
        "offset": 105,
        "surroundingCode": "        now = datetime.now(self.est)\n        for entry in database.TutorSession_GracePeriod:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.GP_DATE)\n            val = int((TutorSession - now).total_seconds())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d5a39c2cdd8a637757809c44e9fb5392f5fbc750bdc2e5c236b7cb4e2bbdba11"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 9,
      "offset": 15,
      "length": 16,
      "code": {
        "startLine": 7,
        "length": 16,
        "offset": 56,
        "surroundingCode": "class SimulatorProfile:\n    @staticmethod\n    async def create_TicketSys(ctx: commands.Context):\n        # category = discord.utils.get(ctx.guild.categories, id=TECH_ID.cat_sandbox)\n        query: database.SandboxConfig = ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7b4c7db662964013ca3170eb2681f538aebc247ff75f7d828be07b549bc8f6fa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 17,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 15,
        "length": 9,
        "offset": 69,
        "surroundingCode": "\n        await ctx.guild.create_text_channel(\"🧧┃chat-help\")\n        ListofCat = [\n            [\"Math Tickets\", query.cat_mathticket],\n            [\"Science Tickets\", query.cat_scienceticket],"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7daee06a5440fe8b43ebc147fcf5dfc1a7cac1116bf8f50ada162dc3e552464c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 40,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 38,
        "length": 9,
        "offset": 106,
        "surroundingCode": "            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n        )\n        ListofCat = [\n            [\"Math Tickets\", query.cat_mathticket],\n            [\"Science Tickets\", query.cat_scienceticket],"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0aa0257c7d5d473723246223a11315ea5c68cd8aa0477b8ead2260421b3ceb60"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 59,
      "offset": 15,
      "length": 16,
      "code": {
        "startLine": 57,
        "length": 16,
        "offset": 33,
        "surroundingCode": "\n    @staticmethod\n    async def create_PrivVCSys(ctx: commands.Context):\n        category = discord.utils.get(ctx.guild.categories, id=SandboxConfig.cat_sandbox)\n        q: database.SandboxConfig = ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bc39b00a299861b29c2ad6cbb69e1b7d8ee017ce17397b70f9e112526ad155f1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 75,
      "offset": 15,
      "length": 17,
      "code": {
        "startLine": 73,
        "length": 17,
        "offset": 33,
        "surroundingCode": "\n    @staticmethod\n    async def cleanup_PrivVCSys(ctx: commands.Context):\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f4f345a14a3d666675fa666ff2c72ff8830d08d68ac673719b85f9de27d73d52"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 106,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 104,
        "length": 2,
        "offset": 87,
        "surroundingCode": "    @sim.command()\n    async def create(self, ctx: commands.Context, profile):\n        SP = SimulatorProfile()\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a82b00181b78f668fd09b0556f1475ee8f917be5fd976e49cbc128f0057bfe61"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 133,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 131,
        "length": 2,
        "offset": 77,
        "surroundingCode": "    @sim.command()\n    async def clear(self, ctx: commands.Context):\n        SP = SimulatorProfile()\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "eb2b263a741e79b410ad556e7b43ae0998448e1be0c27c7f4c4d7f711242c7cb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 92,
      "offset": 11,
      "length": 12,
      "code": {
        "startLine": 90,
        "length": 12,
        "offset": 12,
        "surroundingCode": "\n\nasync def TicketExport(\n    self,\n    channel: discord.TextChannel,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2721e883d8f3074959f4cee0a6b71ffd3965a60d87ed7b4dcdd5a1ec4fd20f1c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 98,
      "offset": 5,
      "length": 30,
      "code": {
        "startLine": 96,
        "length": 30,
        "offset": 90,
        "surroundingCode": "    user: discord.User = None,\n    responsesauthor: typing.List[discord.User] = None,\n    directTranscript: bool = False,\n):\n    transcript = await chat_exporter.export(channel, None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9b1c76a953f5f45ced0658fa4ffae830454e23da560fa56b0e86262f1a3d5c06"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 106,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 104,
        "length": 11,
        "offset": 25,
        "surroundingCode": "        .get()\n    )\n    TicketOwner = self.bot.get_user(query.authorID)\n\n    if transcript is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3f1e16e9389c9c8f442f0cd17e63171d9487fe7509b6e2d5bc8425efc6337067"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 127,
      "offset": 5,
      "length": 4,
      "code": {
        "startLine": 125,
        "length": 4,
        "offset": 11,
        "surroundingCode": "    )\n\n    myIO = BytesIO()\n    myIO.write(var)\n    with open(f\"transcript-{channel.name}.html\", \"wb\") as f:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "09375c7f63da02f6b809c09057718c63c0f41db026aa3b5afe75c1ff10efce80"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 133,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 131,
        "length": 6,
        "offset": 80,
        "surroundingCode": "\n    S3_upload_file(f\"transcript-{channel.name}.html\", \"ch-transcriptlogs\")\n    S3_URL = f\"[Direct Transcript Link](https://acad-transcripts.schoolsimplified.org/transcript-{channel.name}.html)\"\n    embed.add_field(name=\"Transcript Link\", value=S3_URL)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9422cf2b468df30eb57cd0af95f6d6caf8cfc6038f886bd59b1e7067e8b132df"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 159,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 157,
        "length": 10,
        "offset": 6,
        "surroundingCode": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "21174bd1753fc9fb2db20e45e174901578807f88386083afdb9e9bcce741dbb8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 169,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 167,
        "length": 12,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    EssayOptions = [\n        discord.SelectOption(label=\"Essay Reviser\"),\n        discord.SelectOption(label=\"Other\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "13eab29e70fce1eddc6ce550b45bdb61ba651a7a27a38f79dee7eff29aed5fac"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 174,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 172,
        "length": 14,
        "offset": 11,
        "surroundingCode": "    ]\n\n    EnglishOptions = [\n        discord.SelectOption(label=\"English Language\"),\n        discord.SelectOption(label=\"English Literature\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "32d518240a3d086e71576be6edbcc5981dfa92a267ddc1dd7a964c33f78d1e09"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 180,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 178,
        "length": 11,
        "offset": 11,
        "surroundingCode": "    ]\n\n    MathOptions = [\n        discord.SelectOption(label=\"Algebra\"),\n        discord.SelectOption(label=\"Geometry\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "09f97de8e8c56af399473842b6feb70493690c23584f21150dad34712848c5e2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 189,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 187,
        "length": 14,
        "offset": 11,
        "surroundingCode": "    ]\n\n    ScienceOptions = [\n        discord.SelectOption(label=\"Biology\"),\n        discord.SelectOption(label=\"Chemistry\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "35ecb7fc53cb75e2876b76e9081ea9f67aa91815b6def970683879cd34c2f3e2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 197,
      "offset": 5,
      "length": 20,
      "code": {
        "startLine": 195,
        "length": 20,
        "offset": 11,
        "surroundingCode": "    ]\n\n    SocialStudiesOptions = [\n        discord.SelectOption(label=\"World History\"),\n        discord.SelectOption(label=\"US History\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "77a6998a4aedd9f885820dc471466f1a73529cd087b247dff1ecc3f974415ae8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 207,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 205,
        "length": 15,
        "offset": 11,
        "surroundingCode": "    ]\n\n    LanguageOptions = [\n        discord.SelectOption(label=\"French\"),\n        discord.SelectOption(label=\"Chinese\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c67e9fb003a7f010188710bcb523c4962ebd468db82701541bcb8f22ec82be61"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 215,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 213,
        "length": 12,
        "offset": 11,
        "surroundingCode": "    ]\n\n    OtherOptions = [\n        discord.SelectOption(label=\"Computer Science\"),\n        discord.SelectOption(label=\"Fine Arts\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1f5facde602947d40fce93ced364588b0a6a63d7115f3a2e4d52e33d44887e3a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 222,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 220,
        "length": 10,
        "offset": 11,
        "surroundingCode": "    ]\n\n    decodeName = {\n        \"['Math Helpers']\": \"Math Helpers\",\n        \"['Science Helpers']\": \"Science Helpers\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "87b91b7d76e1b4ffb1cc966423e9cbaa7994b3c30fe8ce0be1e4c415f971ec4e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 232,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 230,
        "length": 13,
        "offset": 11,
        "surroundingCode": "    }\n\n    decodeOptList = {\n        \"['Math Helpers']\": MathOptions,\n        \"['Science Helpers']\": ScienceOptions,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4653205490aa1feaf94c77277c5148695bfd504d14b71dcf2553a1639c227ded"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 246,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 244,
        "length": 8,
        "offset": 106,
        "surroundingCode": "            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n        )\n        decodeID = {\n            \"['Math Helpers']\": q.cat_mathticket,\n            \"['Science Helpers']\": q.cat_scienceticket,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3e2d0ceebc7a581900baeef17758f45ac1ada48573a71cc6bae860ea59549c1b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 256,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 254,
        "length": 8,
        "offset": 28,
        "surroundingCode": "        }\n    else:\n        decodeID = {\n            \"['Math Helpers']\": MAIN_ID.cat_mathTicket,\n            \"['Science Helpers']\": MAIN_ID.cat_scienceTicket,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3309ac2a38a914486c827f7809ab093ce99fd1f2b0a127a01f47fc6cb3fad6c2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 267,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 265,
        "length": 10,
        "offset": 34,
        "surroundingCode": "\n    name = decodeName[value]\n    CategoryID = decodeID[value]\n    if type(decodeOptList[value]) == int:\n        OptList = name"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3d19c69b0f96c8e188d5d96c3937a1e29cf0f4e5fda7b8a3f52bdee976e903f7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 269,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 267,
        "length": 7,
        "offset": 83,
        "surroundingCode": "    CategoryID = decodeID[value]\n    if type(decodeOptList[value]) == int:\n        OptList = name\n    else:\n        OptList = decodeOptList[value]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "673fd970293dac1816dc9fd382fb918d025f71c57b9f6b2b7e21e1515a73b159"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 271,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 269,
        "length": 7,
        "offset": 41,
        "surroundingCode": "        OptList = name\n    else:\n        OptList = decodeOptList[value]\n\n    return name, CategoryID, OptList"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a85f14280defab2eadf607dfe8104c1209ba70990103c63319cb26a17d5f212a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 276,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 274,
        "length": 7,
        "offset": 6,
        "surroundingCode": "\n\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "476e4dead5b13742d4a7c5dd47dea16e3d5ed23d3177e729e3140e8f919cf3ab"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 277,
      "offset": 27,
      "length": 16,
      "code": {
        "startLine": 275,
        "length": 16,
        "offset": 40,
        "surroundingCode": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8f03549957c7f3fa41c1d6891c62f20f239a8a3dddb50e49f43c4f0cdf8eac96"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 290,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 288,
        "length": 11,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    mainSubject = mainSubject.title()\n    subject = subject.title()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "18221d5f3a9d7f5d1f1f721df4afd71757896685114180da478eeb72c870af15"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 328,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 326,
        "length": 7,
        "offset": 73,
        "surroundingCode": "\n    async def callback(self, interaction: discord.Interaction):\n        Sandbox = False\n        if interaction.message.guild.id == TECH_ID.g_tech:\n            Sandbox = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "05ca347f2174943eee7109e37a75e4d874770b66baff0e7481da7e8142541422"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 330,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 328,
        "length": 7,
        "offset": 95,
        "surroundingCode": "        Sandbox = False\n        if interaction.message.guild.id == TECH_ID.g_tech:\n            Sandbox = True\n\n        bucket = self.view.cd_mapping.get_bucket(interaction.message)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6a5854ca20ab9db6e8084fd2ad9fee854d9a72124c45e80142c18a2fdee6389f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 343,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 341,
        "length": 9,
        "offset": 96,
        "surroundingCode": "            guild = interaction.message.guild\n            author = interaction.user\n            DMChannel = await author.create_dm()\n            try:\n                await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "39ec07b5c864afb6c1ff008356b2002ec1ce08cb6ef9eb906107691da19a6de0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 358,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 356,
        "length": 3,
        "offset": 31,
        "surroundingCode": "                )\n\n            MSV = discord.ui.View()\n            var = SelectMenuHandler(\n                MasterSubjectOptions, \"persistent_view:ticketdrop\", \"Click a subject!\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d005e3348896e664265792eace603bbcb6c2c560497e1eaa97c864ff969b90bd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 375,
      "offset": 17,
      "length": 17,
      "code": {
        "startLine": 373,
        "length": 17,
        "offset": 83,
        "surroundingCode": "            timeout = await MSV.wait()\n            if not timeout:\n                MasterSubjectView = var.view_response\n            else:\n                return await DMChannel.send(\"Timed out, try again later.\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "855fbf49212d1b8f61bec18a6b1c3581112b35ed908e7170b3b8a61f0667a606"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 379,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 377,
        "length": 12,
        "offset": 88,
        "surroundingCode": "                return await DMChannel.send(\"Timed out, try again later.\")\n\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3a7a9ee81153a285d886e0910a9ec2b44c5faa61cd3059a6085edd624e46ab3b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 380,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 378,
        "length": 11,
        "offset": 63,
        "surroundingCode": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1ab7823136064b1308cd682e1372a84a1597dd78cba23e5d0d96f95820a66785"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 380,
      "offset": 26,
      "length": 10,
      "code": {
        "startLine": 378,
        "length": 10,
        "offset": 76,
        "surroundingCode": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2ef1986e7fc945747d0c82828f10770ceefef92f0c3741382ee372772a821ab1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 380,
      "offset": 38,
      "length": 7,
      "code": {
        "startLine": 378,
        "length": 7,
        "offset": 88,
        "surroundingCode": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4bf55d1ae3f3795bfd5c9157d891ce3d7bd432d7bd81af8d32885db8f6d41067"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 386,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 384,
        "length": 11,
        "offset": 60,
        "surroundingCode": "\n            if not TypeSubject == OptList:\n                MiscOptList = discord.ui.View()\n                MiscOptList.add_item(\n                    SelectMenuHandler("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8c13f6ea545169578efa265b2d2b8463890941e9f7e828eb8f4245aafd4341d0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 510,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 508,
        "length": 10,
        "offset": 90,
        "surroundingCode": "                        return await DMChannel.send(\"No attachments found.\")\n\n            CounterNum = (\n                database.BaseTickerInfo.select()\n                .where(database.BaseTickerInfo.guildID == guild.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "aa656774fc4f69d30b958e9e49717af1a3c6095978e2b141db5a52c99396a949"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 515,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 513,
        "length": 4,
        "offset": 49,
        "surroundingCode": "                .get()\n            )\n            TNUM = CounterNum.counter\n            CounterNum.counter = CounterNum.counter + 1\n            CounterNum.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a0b479e37d57c8a01919c7925d161dcf67faa43ebe218b4bb65f99f737334f7c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 519,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 517,
        "length": 3,
        "offset": 43,
        "surroundingCode": "            CounterNum.save()\n\n            LDC = await DMChannel.send(\n                f\"Please wait, creating your ticket {Emoji.loadingGIF}\"\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "99d16f1618b9d1e378099fdd0c5662c8891bfbc7e623fb1f6f9fe9b767198016"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 524,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 522,
        "length": 11,
        "offset": 67,
        "surroundingCode": "\n            if TypeSubject == \"Language Helpers\":\n                mainSubject = \"languages\"\n            else:\n                mainSubject = ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "57a012384076bbfddd6a3f2935e01009ef9bf6b2b83eeef7e823fa9e4b715201"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 526,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 524,
        "length": 11,
        "offset": 76,
        "surroundingCode": "                mainSubject = \"languages\"\n            else:\n                mainSubject = (\n                    c.name.replace(\"═\", \"\")\n                    .replace(\"⁃\", \"\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "82e023a8fecbd21a2e66a51543a11654106bdacc3a32f8cecb4f85253fd48335"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 565,
      "offset": 21,
      "length": 7,
      "code": {
        "startLine": 563,
        "length": 7,
        "offset": 73,
        "surroundingCode": "                ]\n                for role in roles:\n                    RoleOBJ = discord.utils.get(\n                        interaction.message.guild.roles, name=role\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f01eeaba3108b2151ff59b3f1c57ad0d8c8d2240069a4a3536235b49a3f43491"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 576,
      "offset": 21,
      "length": 7,
      "code": {
        "startLine": 574,
        "length": 7,
        "offset": 89,
        "surroundingCode": "                        reason=\"Ticket Perms\",\n                    )\n                    RoleOBJ = discord.utils.get(guild.roles, name=role)\n                    if (\n                        not ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c565028ded0f395dfe4edeeb6c17948659caaf7fbae18378b859dcf9c375f130"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 608,
      "offset": 25,
      "length": 7,
      "code": {
        "startLine": 606,
        "length": 7,
        "offset": 109,
        "surroundingCode": "                    roles = [\"Essay Reviser\"]\n                    for role in roles:\n                        RoleOBJ = discord.utils.get(\n                            interaction.message.guild.roles, name=role\n                        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "53581c1b5def12c72e75a55b3c667ef023519808203d031deacede0a45d4d6f6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 620,
      "offset": 25,
      "length": 7,
      "code": {
        "startLine": 618,
        "length": 7,
        "offset": 122,
        "surroundingCode": "                    roles = [\"Chat Helper\", \"Lead Helper\"]\n                    for role in roles:\n                        RoleOBJ = discord.utils.get(\n                            interaction.message.guild.roles, name=role\n                        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "70b49f0b167c6ecdecfc185eb9a13131fcb05d690791735e61106a756ad8f155"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 642,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 640,
        "length": 13,
        "offset": 27,
        "surroundingCode": "            )\n\n            controlTicket = discord.Embed(\n                title=\"Control Panel\",\n                description=\"To end this ticket, click the lock button!\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "100f436710e7e9e8b7209651366729007544500f47fb07593c266b2b3dac3dc8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 647,
      "offset": 13,
      "length": 17,
      "code": {
        "startLine": 645,
        "length": 17,
        "offset": 71,
        "surroundingCode": "                color=discord.Colour.gold(),\n            )\n            LockControlButton = discord.ui.View()\n            LockControlButton.add_item(\n                ButtonHandler("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8e1e3c0579954b373ca6eeb85380f75227ac356c81e24c511876872cab1517e4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 659,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 657,
        "length": 3,
        "offset": 27,
        "surroundingCode": "            )\n\n            LCM = await channel.send(\n                interaction.user.mention, embed=controlTicket, view=LockControlButton\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cc9e609d72a24e10c4c689f5dd55557871da4123381fc436a3ae3603794d916d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 700,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 698,
        "length": 11,
        "offset": 39,
        "surroundingCode": "                    )\n\n                mentionRole = getRole(interaction.guild, mainSubject, selection_str)\n\n                await channel.send(mentionRole.mention, embed=embed)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a32a6209307d2eff983956f7af1a194d31d28dc4d15dec47ab02c1e51ddd1d8e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 760,
      "offset": 15,
      "length": 14,
      "code": {
        "startLine": 758,
        "length": 14,
        "offset": 60,
        "surroundingCode": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def TicketDropdown(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6afe02ed5c934ee6cb54290637cdae5f6417750fef0045b785eb3fdd77835e58"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 761,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 759,
        "length": 19,
        "offset": 123,
        "surroundingCode": "    @commands.Cog.listener(\"on_interaction\")\n    async def TicketDropdown(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "eec2b55ecddf49419dd19b2a84aed7ff2e6e051bee2ba486c63d6a4ad014bfd1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 792,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 790,
        "length": 11,
        "offset": 70,
        "surroundingCode": "                color=discord.Colour.red(),\n            )\n            ButtonViews = discord.ui.View()\n            ButtonViews.add_item(\n                ButtonHandler("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "87a1d8b5982e6717e2e04bbe7804fd391c9c8d87c886728b1688fa4507581b76"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 836,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 834,
        "length": 11,
        "offset": 34,
        "surroundingCode": "\n            try:\n                TicketOwner = guild.get_member(query.authorID)\n            except discord.NotFound:\n                await channel.send("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5d1b67eccda272f11840190941f1331e1606b6f1e48c607254cc88edfb765161"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 852,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 850,
        "length": 12,
        "offset": 92,
        "surroundingCode": "            )\n            embed.set_footer(text=\"This ticket has been closed!\")\n            ButtonViews2 = discord.ui.View()\n\n            ButtonViews2.add_item("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1317761e9cfc77f1a3fc64338623b86448b926b7866dc63fabf4c9ba93f6c331"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 924,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 922,
        "length": 11,
        "offset": 47,
        "surroundingCode": "            )\n            try:\n                TicketOwner = guild.get_member(query.authorID)\n            except discord.NotFound:\n                await channel.send("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e24c8f782c695c05e8b99fb1d72af9236a0b5c23b29cd649bd9e25f6b9575d05"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 945,
      "offset": 17,
      "length": 18,
      "code": {
        "startLine": 943,
        "length": 18,
        "offset": 113,
        "surroundingCode": "            channel = interaction.channel\n            if interaction.guild.id == MAIN_ID.g_main:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    MAIN_ID.ch_transcriptLogs\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "aea72f67ebff3e8993a1407f8b09c4361a4be52121c4f2b73a1d5dbfdc7950d0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 949,
      "offset": 17,
      "length": 18,
      "code": {
        "startLine": 947,
        "length": 18,
        "offset": 52,
        "surroundingCode": "                )\n            else:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    TECH_ID.ch_ticketLog\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "af55ed2ed4d4c1bf9dca653d73488511da0d86f8f924608e7a54e7c6a3125c65"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 957,
      "offset": 24,
      "length": 6,
      "code": {
        "startLine": 955,
        "length": 6,
        "offset": 38,
        "surroundingCode": "            )\n\n            msg, file, S3_URL = await TicketExport(\n                self, channel, ResponseLogChannel, author, None, True\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "352f6136b295bced6bec3a6368080404181ac4dda9064ca52063a4238afa24a8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1007,
      "offset": 17,
      "length": 18,
      "code": {
        "startLine": 1005,
        "length": 18,
        "offset": 109,
        "surroundingCode": "            author = interaction.user\n            if interaction.guild.id == MAIN_ID.g_main:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    MAIN_ID.ch_transcriptLogs\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1454861c72d9b91d6db290e2c7436458824e4328c7ace0226c77c91dc8564087"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1011,
      "offset": 17,
      "length": 18,
      "code": {
        "startLine": 1009,
        "length": 18,
        "offset": 52,
        "surroundingCode": "                )\n            else:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    TECH_ID.ch_ticketLog\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4b51cf351a8271743abdb68bfae2ef625b83c1dd6accf94ebfbf391b9ce185d6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1019,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 1017,
        "length": 4,
        "offset": 49,
        "surroundingCode": "                .get()\n            )\n            msgO = await interaction.channel.send(\n                f\"{author.mention}\\nPlease wait, generating a transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "08813934c9724d16d6c3c74b6eff85e3b34af090436979cb5b54b313fc489a7c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1022,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 1020,
        "length": 11,
        "offset": 149,
        "surroundingCode": "                f\"{author.mention}\\nPlease wait, generating a transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )\n            TicketOwner = self.bot.get_user(query.authorID)\n\n            messages = await channel.history(limit=None).flatten()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f9aeee88c41fd016466c238e2a43dcb036f86f0d251562364058d0cbebf6aa0d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1025,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 1023,
        "length": 10,
        "offset": 80,
        "surroundingCode": "\n            messages = await channel.history(limit=None).flatten()\n            authorList = []\n\n            for msg in messages:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6f41d4b372e5add6581c1e2ab7c97ab8e79d7dae60569889a400450472370503"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1098,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 1096,
        "length": 11,
        "offset": 70,
        "surroundingCode": "                color=discord.Colour.red(),\n            )\n            ButtonViews = discord.ui.View()\n            ButtonViews.add_item(\n                ButtonHandler("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "88bdd1d1de7f9a032eb6f833a39cc8259dc8bf922c262d35627370141e6988c4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1122,
      "offset": 15,
      "length": 14,
      "code": {
        "startLine": 1120,
        "length": 14,
        "offset": 44,
        "surroundingCode": "\n    @tasks.loop(minutes=1.0)\n    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        for entry in TicketInfoTB:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "307188b884bc3e30bc5a6163f325bfa265e52fcc8c98e0f1da339b6089ba6084"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1123,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 1121,
        "length": 12,
        "offset": 73,
        "surroundingCode": "    @tasks.loop(minutes=1.0)\n    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        for entry in TicketInfoTB:\n            try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3a1a745db69542e1a82324dcd1c58bea8ff38bb25e821e0d2b597ab5d2c03475"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1131,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 1129,
        "length": 12,
        "offset": 72,
        "surroundingCode": "            except Exception as e:\n                continue\n            fetchMessage = await channel.history(limit=1).flatten()\n            TicketOwner = self.bot.get_user(entry.authorID)\n            messages = await channel.history(limit=None).flatten()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d902727e93336f8790205ae91d5bf61b0205785df8cd4af4c9bb498f6c9717a0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1132,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 1130,
        "length": 11,
        "offset": 105,
        "surroundingCode": "                continue\n            fetchMessage = await channel.history(limit=1).flatten()\n            TicketOwner = self.bot.get_user(entry.authorID)\n            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1594c6f38fce8fa0cacb81294d32e93ca7e201c3ae9d84b5433452fb11b02da0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1134,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 1132,
        "length": 5,
        "offset": 139,
        "surroundingCode": "            TicketOwner = self.bot.get_user(entry.authorID)\n            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0964b2e2f2e2b1e5d8a478ee0654a54f15f8ef1f8d46e840f3e7818a42c91b98"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1135,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 1133,
        "length": 10,
        "offset": 147,
        "surroundingCode": "            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:\n                continue"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "256483d4e29d884e45ff1ee37c8113ee2ac450a9cba9caa68df96b5d8ccfe7a3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1143,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 1141,
        "length": 12,
        "offset": 94,
        "surroundingCode": "                - timedelta(minutes=self.TICKET_INACTIVE_TIME)\n            ):\n                ButtonViews2 = discord.ui.View()\n\n                ButtonViews2.add_item("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5f0a8f42de0d0d65ed82aa2d98d4dc4dc13743c45e9b772da0ccc92bd6ebdbf3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1214,
      "offset": 15,
      "length": 13,
      "code": {
        "startLine": 1212,
        "length": 13,
        "offset": 55,
        "surroundingCode": "    @commands.command()\n    @is_botAdmin\n    async def sendCHTKTView(self, ctx):\n        MasterSubjectView = discord.ui.View()\n        MasterSubjectView.add_item("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ab579e51079f8b5e388688173bdd4cf53e3f2bf2ec96b1a343771d8b6e841b52"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1215,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 1213,
        "length": 17,
        "offset": 65,
        "surroundingCode": "    @is_botAdmin\n    async def sendCHTKTView(self, ctx):\n        MasterSubjectView = discord.ui.View()\n        MasterSubjectView.add_item(\n            SelectMenuHandler("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "342f11850b30f27a4ef5cfcffc490003d041daf13c3224751355ca40d6938bce"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 39,
      "offset": 15,
      "length": 12,
      "code": {
        "startLine": 37,
        "length": 12,
        "offset": 60,
        "surroundingCode": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def GSuiteVerify(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n        if interaction.message is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e0db664ed9d3a6f977b746e007a78d2934da1019901ff8d31e58cd2edf3cd1a3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 40,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 38,
        "length": 19,
        "offset": 121,
        "surroundingCode": "    @commands.Cog.listener(\"on_interaction\")\n    async def GSuiteVerify(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n        if interaction.message is None:\n            return"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2c96d0baada745254d3dd55f28008f844776e1737d120c2f32a4b3f8415da2a7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 177,
      "offset": 15,
      "length": 17,
      "code": {
        "startLine": 175,
        "length": 17,
        "offset": 55,
        "surroundingCode": "    @commands.command()\n    @is_botAdmin\n    async def pasteGSuiteButton(self, ctx):\n        embed = discord.Embed(\n            title=\"Alternate Verification Method\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b3e67bb850947ed992a12e03e7c9c0896f95f4ed4c398e17fcbd715da4bcf89c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 184,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 182,
        "length": 12,
        "offset": 59,
        "surroundingCode": "            color=discord.Color.green(),\n        )\n        GSuiteButton = GSuiteVerify()\n        await ctx.send(embed=embed, view=GSuiteButton)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "66d3e5794585cedd98f0eab98a4498e9de048faf3043bba40b16e2e085f543dc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 18,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 16,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef getEqualRank(query):\n    if query not in config:\n        return None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e4f79584cde8da264f0a7ec3dccbc16904bf5d9c964a2cc745e475643bc80eaf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 25,
      "offset": 11,
      "length": 13,
      "code": {
        "startLine": 23,
        "length": 13,
        "offset": 12,
        "surroundingCode": "\n\nasync def roleNameCheck(self, name: str, guild: discord.Guild, user: discord.Member):\n    check = getEqualRank(name)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "af19b7186f2d59ed1da853567e89c2446e699862ef98ca337d0a41a4d18ccb17"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 50,
      "offset": 15,
      "length": 17,
      "code": {
        "startLine": 48,
        "length": 17,
        "offset": 60,
        "surroundingCode": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b00d9c715ebe8a9b5235a43a60585c6f12a895d123d25ff4adb89c0db807dd8c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 51,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 49,
        "length": 19,
        "offset": 126,
        "surroundingCode": "    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "738ba4c6c18b868c3f608dc807412adbef25cfdce1e346f80221b95edd3e750d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 62,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 60,
        "length": 11,
        "offset": 52,
        "surroundingCode": "            print(interaction.user.id)\n\n            staffServer: discord.Guild = self.bot.get_guild(\n                interaction.guild_id\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f11f861c4aee049c36c8f2af845ac8401f9598a5d1c9a1b56b5268860c134011"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 66,
      "offset": 13,
      "length": 17,
      "code": {
        "startLine": 64,
        "length": 17,
        "offset": 57,
        "surroundingCode": "            )\n            print(staffServer)\n            StaffServerMember: discord.Member = staffServer.get_member(\n                interaction.user.id\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "dc2d591758cf7dc4f920bbf599eb0126efc2c54c6a5769fec91100d0669ab99d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 73,
      "offset": 17,
      "length": 17,
      "code": {
        "startLine": 71,
        "length": 17,
        "offset": 85,
        "surroundingCode": "            if StaffServerMember is None:\n                print(\"h\")\n                StaffServerMember: discord.Member = staffServer.get_member(\n                    interaction.user.id\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "523aa7d153de24f2d84d103346bafa9bcea7d8e770b5e4c226c54d3817fa684f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 101,
      "offset": 13,
      "length": 19,
      "code": {
        "startLine": 99,
        "length": 19,
        "offset": 40,
        "surroundingCode": "                    return\n\n            VerificationChannel = interaction.channel\n            logchannel = self.bot.get_channel(\n                self.staffServer[interaction.guild_id]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8f920e0042cb26a5226ec88e6b12902f87832586a04ceebb402d552316386727"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 106,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 104,
        "length": 13,
        "offset": 27,
        "surroundingCode": "            )\n\n            VerifiedRoles = []\n            VerifiedGuilds = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7e48cea8c98ed5fe9e2a21b8cdc7ff000e057f5a8175a4300ce222659ec3530c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 107,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 105,
        "length": 14,
        "offset": 44,
        "surroundingCode": "\n            VerifiedRoles = []\n            VerifiedGuilds = []\n\n            for ID in self.ServerIDs:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e617c616961a83ffb0393ae74d645500bfa6f831e18d7ccadcaba8c433a850a6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 112,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 110,
        "length": 12,
        "offset": 104,
        "surroundingCode": "                server: discord.Guild = self.bot.get_guild(ID)\n                try:\n                    ServerMember: discord.Member = server.get_member(\n                        interaction.user.id\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "370ca2d44d38acfdf58e2f448c8910b594f3572cf7454ebf9b85ee680c4ff476"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 121,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 119,
        "length": 9,
        "offset": 43,
        "surroundingCode": "\n                else:\n                    roleNames = [role for role in ServerMember.roles]\n\n                    for role in roleNames:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0bd162534789e310dc0edb19cd1286f424ef0bd7e5141a5d752a0ac5617148ab"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 128,
      "offset": 29,
      "length": 8,
      "code": {
        "startLine": 126,
        "length": 8,
        "offset": 75,
        "surroundingCode": "\n                        if check is not None:\n                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "20cd06a3e627703585856c20fe2388c25cbe20bccd9fd6078ce88188e590847a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 129,
      "offset": 29,
      "length": 12,
      "code": {
        "startLine": 127,
        "length": 12,
        "offset": 130,
        "surroundingCode": "                        if check is not None:\n                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9151c2bba09e90ef8ab7076ab9c3c8cce0d2074e1ea814ebd1ae45ead7e7f8e6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 130,
      "offset": 29,
      "length": 13,
      "code": {
        "startLine": 128,
        "length": 13,
        "offset": 162,
        "surroundingCode": "                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\"\n\n                            if markdownRole not in VerifiedRoles:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "af78d73eb1f74abecb469f376769f41e358e38a65ef203f5fac3a001e39e2c1c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 139,
      "offset": 37,
      "length": 8,
      "code": {
        "startLine": 137,
        "length": 8,
        "offset": 169,
        "surroundingCode": "                            for elem in check:\n                                if elem in [role.name for role in staffServer.roles]:\n                                    jsonROLE = discord.utils.get(\n                                        staffServer.roles, name=elem\n                                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1ab6da7de1cc555bf5a037d51f78631857f3c8c30ba3e1aeafd20da6f39b21a2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 168,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 166,
        "length": 12,
        "offset": 68,
        "surroundingCode": "                await logchannel.send(embed=embed)\n\n                VerifiedRole: discord.Role = discord.utils.get(\n                    staffServer.roles, name=\"Member\"\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "43972bb40f7ddb2478280bcb18949003a17bd1d76850e9c148b2fa9ea80f6f84"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 231,
      "offset": 15,
      "length": 23,
      "code": {
        "startLine": 229,
        "length": 23,
        "offset": 39,
        "surroundingCode": "\n    @commands.command()\n    async def pasteVerificationButton(self, ctx):\n        button = VerifyButton()\n        await ctx.send(\"Click here to verify\", view=button)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "964ffcec6726648d908076d32a705e6c0f330f207f9aed472534301f03c002eb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 236,
      "offset": 15,
      "length": 22,
      "code": {
        "startLine": 234,
        "length": 22,
        "offset": 39,
        "surroundingCode": "\n    @commands.command()\n    async def pasteVerificationEmbed(self, ctx: commands.Context):\n        embed = discord.Embed(\n            title=\"Verification\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ad194ec9bf2df9aae8dfd0fc15f9e11d794ae52e037ddfcdb5ea81bc10dc6acc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 252,
      "offset": 11,
      "length": 12,
      "code": {
        "startLine": 250,
        "length": 12,
        "offset": 63,
        "surroundingCode": "\n@bot.user_command(name=\"Play TicTacToe with them!\")\nasync def tictactoeCTX(ctx, member: discord.Member):\n    if member is None:\n        return await ctx.respond("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e8a9151e3a8fc0034f435a77ff39bad7aa4fb226d461e4c387dce14ef97846a4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 288,
      "offset": 11,
      "length": 13,
      "code": {
        "startLine": 286,
        "length": 13,
        "offset": 22,
        "surroundingCode": "\n@bot.check\nasync def mainModeCheck(ctx: commands.Context):\n    \"\"\"MT = discord.utils.get(ctx.guild.roles, name=\"Moderator\")\n    VP = discord.utils.get(ctx.guild.roles, name=\"VP\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "42f1a1c40c51176f062fc23d7cfaf6cac08ee87ab0da3aa937f426fecc6db3ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 294,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 292,
        "length": 16,
        "offset": 77,
        "surroundingCode": "    SS = discord.utils.get(ctx.guild.roles, name=844013914609680384)\"\"\"\n\n    blacklistedUsers = []\n    for p in database.Blacklist:\n        blacklistedUsers.append(p.discordID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "82226429e3ea7f89df0b087fe6b1fae3dfe3cd34afdcdf31caf4ae0185c487af"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 298,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 296,
        "length": 8,
        "offset": 50,
        "surroundingCode": "        blacklistedUsers.append(p.discordID)\n\n    adminIDs = []\n    query = database.Administrators.select().where(\n        database.Administrators.TierLevel == 4"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "87ad2ff7a5b65952b565348b4528a617c7211983dbfc5ebcaab047b8ce119b32"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "An instance attribute is defined outside `__init__`",
  "severity": "Moderate",
  "comment": "Instance attribute index defined outside __init__",
  "detailsInfo": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 370,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 368,
        "length": 10,
        "offset": 99,
        "surroundingCode": "    async def get_page(self, page_number: int) -> Any:\n        # The front page is a dummy\n        self.index = page_number\n        return self\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyAttributeOutsideInitInspection"
  },
  "hash": "96187197b969788c302b05280a402f4d5ff2af3646817d02710acced06ef97ee"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "An instance attribute is defined outside `__init__`",
  "severity": "Moderate",
  "comment": "Instance attribute style defined outside __init__",
  "detailsInfo": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 58,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 56,
        "length": 10,
        "offset": 98,
        "surroundingCode": "\n        elif view.current_player == view.O and self.yUser.id == interaction.user.id:\n            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyAttributeOutsideInitInspection"
  },
  "hash": "7ab6f11654ad037d778b407d05a5d1b61bd54052695c8a837909a729568fb136"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "An instance attribute is defined outside `__init__`",
  "severity": "Moderate",
  "comment": "Instance attribute label defined outside __init__",
  "detailsInfo": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 59,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 57,
        "length": 10,
        "offset": 150,
        "surroundingCode": "        elif view.current_player == view.O and self.yUser.id == interaction.user.id:\n            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True\n            view.board[self.y][self.x] = view.O"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyAttributeOutsideInitInspection"
  },
  "hash": "98e41187b425283a26c3228edf0c06981fcf1c786d0e8ecc122f2525c3c65fb7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "An instance attribute is defined outside `__init__`",
  "severity": "Moderate",
  "comment": "Instance attribute disabled defined outside __init__",
  "detailsInfo": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 60,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 58,
        "length": 13,
        "offset": 94,
        "surroundingCode": "            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True\n            view.board[self.y][self.x] = view.O\n            view.current_player = view.X"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyAttributeOutsideInitInspection"
  },
  "hash": "de4838714fb5ab020c29bbd5f2fc32c701a40b06d1dfe11b1afdd0e29aa8ca24"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 227,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 225,
        "length": 6,
        "offset": 61,
        "surroundingCode": "        try:\n            os.remove(\"cred_file.json\")\n        except:\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "f6e12dfbdba258918b8eab7a65177cdef5e185bb1cde90d4dbd24bc346e06dd8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 239,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 237,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                try:\n                    await msgError.delete()\n                except:\n                    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "8576cf463c335f00eb27f8e3819ef564241775a235fb8a6b38a027093b7f4bf5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 261,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 259,
        "length": 6,
        "offset": 93,
        "surroundingCode": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "1293b396dfb9152d9b12d8e047b684fc90b2d522b50add1cbed884ecfeb292d6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 269,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 267,
        "length": 6,
        "offset": 93,
        "surroundingCode": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "0e08e6fde1b2f60599a74dd408b0835ac68281b5eac76421c1eaf79b0496dce9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 314,
      "offset": 29,
      "length": 6,
      "code": {
        "startLine": 312,
        "length": 6,
        "offset": 124,
        "surroundingCode": "                            try:\n                                await msgError.delete(delay=7)\n                            except:\n                                pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "42f64368c0f02ce3b598180d7d7dd2da64e91218665f92d31cad1134cc05331b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 335,
      "offset": 29,
      "length": 6,
      "code": {
        "startLine": 333,
        "length": 6,
        "offset": 124,
        "surroundingCode": "                            try:\n                                await msgError.delete(delay=7)\n                            except:\n                                pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "f9e2bbf6a409d713bd67e514f72d2b559a91a9fc1c2d471a04c955a087ad5f7c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 367,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 365,
        "length": 6,
        "offset": 93,
        "surroundingCode": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "9d536f350c353191d69296342bc79767fb2fee1117123fd8b57f2bb00415d3dc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 383,
      "offset": 25,
      "length": 6,
      "code": {
        "startLine": 381,
        "length": 6,
        "offset": 114,
        "surroundingCode": "                        try:\n                            await msgTooLong.delete(delay=7)\n                        except:\n                            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "72a9800716b18855d220de646e3c17b120f3d9b16bee7841e3abeb3b11efe0e6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 411,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 409,
        "length": 6,
        "offset": 93,
        "surroundingCode": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "a5c48bfb172b9a6cc4a3c2b4b752f8054ec5c9286ee26eac4f452a90db1c060f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 438,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 436,
        "length": 6,
        "offset": 93,
        "surroundingCode": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "d877c997b4705c47bea65830769b2ed46f668accf956f2104c5a465393538bce"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 465,
      "offset": 25,
      "length": 6,
      "code": {
        "startLine": 463,
        "length": 6,
        "offset": 112,
        "surroundingCode": "                        try:\n                            await msgError.delete(delay=7)\n                        except:\n                            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "000710b34b8d1fc80642894c96379521fec43a8edd5e283ccf4b87cf6540e961"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 505,
      "offset": 25,
      "length": 6,
      "code": {
        "startLine": 503,
        "length": 6,
        "offset": 112,
        "surroundingCode": "                        try:\n                            await msgError.delete(delay=7)\n                        except:\n                            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "52223c04764914b8793956911be52dd099ae2b381e5cf280b2dfeec23feee7be"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 561,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 559,
        "length": 6,
        "offset": 69,
        "surroundingCode": "            try:\n                await msgError.delete()\n            except:\n                pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "bfdfbc13006a4f134805df2537cf4752fa44d0c43ee9c598f47536c7f23945f1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/Blacklist.py",
      "language": "Python",
      "line": 77,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 75,
        "length": 6,
        "offset": 126,
        "surroundingCode": "                user = self.bot.get_user(p.id)\n                empty_list.append(f\"`{user.name}` -> `{user.id}`\")\n            except:\n                empty_list.append(f\"`{p}`\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "c2cf99823f2516ef1bf61dd9a42f02c0c8a209b014a3f82ee32480cd6a9300d2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 110,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 108,
        "length": 6,
        "offset": 81,
        "surroundingCode": "        try:\n            service.users().delete(userKey=email).execute()\n        except:\n            return await interaction.response.send_message(\n                f\"{interaction.user.mention} The account **{email}** does not exist.\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "cfe2dead09fd6a25be63a5fd8dcc1622a491d72d1e40900ede900e14f7e8eb30"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 29,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 27,
        "length": 6,
        "offset": 69,
        "surroundingCode": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "f8e463e657a8aa0d97f42b873341ff85df8b83a4fc76abc23722433dd45569ca"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 85,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 83,
        "length": 6,
        "offset": 114,
        "surroundingCode": "                database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n            )\n        except:\n            q = database.SandboxConfig.create(mode=\"None\")\n            q.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "59f6d7d00e697e8b8026d0c4b7507cab09d60abcafea3e6c175923dc7e8c4a7f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 752,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 750,
        "length": 6,
        "offset": 69,
        "surroundingCode": "                        .get()\n                    )\n                except:\n                    embed = discord.Embed(\n                        title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "782490965390259767df3c73b9c046bf26c3b940fcc424c579582db26339735b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 965,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 963,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "6a0b892b525991c3330b1df9f59b18eb124cc28f2ecd048c671252725909863b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1153,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1151,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "dd407f883bca5e8961b01c2aa1b068a1bde134598c62982b3234e8ab53127d35"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1328,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1326,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "6b87a116ed16729c8e91834988537edf76802f6f84b0164074a059864ca84458"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1399,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1397,
        "length": 6,
        "offset": 103,
        "surroundingCode": "                    try:\n                        voiceLIMIT = int(new_voice_limit)\n                    except:\n                        return await ctx.send(f\"{Emoji.deny} Not a valid number!\")\n                    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "7c1995d6b544597a7dfc2367f54e820078358fc0369967b77b39f26cd7cd5ba6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1449,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1447,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "cfa9677d43d2a9cd68ad575467cd1d1ce3a62e238d601ef5d31ad5ed4915c046"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1528,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1526,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "f4f049283411fb05700d46d3cc2622cd96fbefc94e6429ffd56577eb185d10eb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 18,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 16,
        "length": 6,
        "offset": 69,
        "surroundingCode": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "159971b27ac743f358ee38e65887311cd688f6b476e0bc9febe7f1512452660a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 184,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 182,
        "length": 6,
        "offset": 115,
        "surroundingCode": "                try:\n                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "187234edd894c166f807f329d6c9a705e0dd30bb1cff109eb24caf3e795512a1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 201,
      "offset": 25,
      "length": 6,
      "code": {
        "startLine": 199,
        "length": 6,
        "offset": 139,
        "surroundingCode": "                                tutorChannel, reason=\"Hogging the VC Start Channel.\"\n                            )\n                        except:\n                            await member.move_to(\n                                None, reason=\"Hogging the VC Start Channel.\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "d070aedfee0cf909233b4c8814bf9faccedb8cbf2785d46ba8b7b670b57b15ea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 404,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 402,
        "length": 6,
        "offset": 115,
        "surroundingCode": "                        reason=\"Maximum Channel Ownership Allowance [TRUE]\",\n                    )\n                except:\n                    await member.move_to(\n                        None, reason=\"Maximum Channel Ownership Allowance [FAIL]\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "a24e5169f46adddbf1194388b010f39e07355a9cbb8bfe1d36609f3b92aa6e61"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 36,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 34,
        "length": 6,
        "offset": 69,
        "surroundingCode": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "0d4bff045e4db573c8e379ddc41b02db3ba6c25208fc8c1c5bb90392ff2260ff"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 294,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 292,
        "length": 6,
        "offset": 70,
        "surroundingCode": "            try:\n                await member.send(dmMSG)\n            except:\n                pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "1ae7eca8fe53566be2dba735ffca988f732e63f922e66a6df87a1a5b60c81680"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 393,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 391,
        "length": 6,
        "offset": 70,
        "surroundingCode": "            try:\n                await member.send(dmMSG)\n            except:\n                pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "a84aa845cddf0d37f09bb715e5ed8ab3c31a6c4ac84c37c07770cdaa819cadaa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 84,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 82,
        "length": 6,
        "offset": 98,
        "surroundingCode": "            try:\n                await interaction.response.send_message(embed=embed)\n            except:\n                await interaction.channel.send(embed=embed)\n        else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "27a123e414431d1f6d9135d993baa84a686b8fb3276a1f719dd2cacee1a192c5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 115,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 113,
        "length": 6,
        "offset": 110,
        "surroundingCode": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n            else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "5140d1228b4782fbeb2f675c04cda51f488465ac9b14ebcb68be4c8ae7d98111"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 125,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 123,
        "length": 6,
        "offset": 110,
        "surroundingCode": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "436e4706ce3508ee349d73eb53bfda696b4332ffd86d37783211578bf2a559b4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 55,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 53,
        "length": 6,
        "offset": 87,
        "surroundingCode": "                try:\n                    await tutor.send(embed=embed)\n                except:\n                    await botch.send(\n                        f\"Unable to send a reminder DM to you {tutor.mention}!\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "0f4c204441033f3f3fe467393b7ba44111febd72a0bc91cebd41bf337c01f764"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 62,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 60,
        "length": 6,
        "offset": 89,
        "surroundingCode": "                try:\n                    await student.send(embed=embed)\n                except:\n                    print(f\"Unable to Send a Reminder DM to: {student.id}\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "4f47dd558be55bf82be53b550bc49bb2329b50bdaa0a8af62e30c0110766f508"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 142,
      "offset": 20,
      "length": 9,
      "code": {
        "startLine": 140,
        "length": 9,
        "offset": 84,
        "surroundingCode": "            try:\n                await UAuthor.send(embed=embed)\n            except Exception:\n                continue\n        if user not in responsesauthor:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "8cd3c9888b22a3614dcec56181101ab979bab1710486712d9088a6001e4d9b81"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 147,
      "offset": 20,
      "length": 9,
      "code": {
        "startLine": 145,
        "length": 9,
        "offset": 81,
        "surroundingCode": "            try:\n                await user.send(embed=embed)\n            except Exception:\n                pass\n    try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "b13f90a0317aa0295cb4b52e3335864b6995efe2a805c7b2d2821d289eb71e3f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 151,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 149,
        "length": 6,
        "offset": 66,
        "surroundingCode": "    try:\n        os.remove(f\"transcript-{channel.name}.html\")\n    except:\n        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "2efcefb693ef7faa942f2753157c17a5a678b475520b2bf41943cd42e752dcde"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 348,
      "offset": 20,
      "length": 9,
      "code": {
        "startLine": 346,
        "length": 9,
        "offset": 92,
        "surroundingCode": "                    \"Check your DM's!\", ephemeral=True\n                )\n            except Exception:\n                await interaction.followup.send(\"Check your DM's!\", ephemeral=True)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "751233084677ff0fdbcec7d919ac2a9ad195b77ff8eb42082bd6d3684a7ca0c3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 368,
      "offset": 20,
      "length": 9,
      "code": {
        "startLine": 366,
        "length": 9,
        "offset": 67,
        "surroundingCode": "                    view=MSV,\n                )\n            except Exception as e:\n                await interaction.channel.send(\n                    f\"{interaction.user.mention} I can't send you messages, please check you're privacy settings!\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "591e03111c4d71164e9920d701a42a88ddf8d6bbba5ad42b9459128c520e3f76"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 402,
      "offset": 24,
      "length": 9,
      "code": {
        "startLine": 400,
        "length": 9,
        "offset": 116,
        "surroundingCode": "                try:\n                    await DMChannel.send(embed=embed, view=MiscOptList)\n                except Exception as e:\n                    await interaction.followup.send(embed=embed, view=MiscOptList)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "f98ddccddd6c5519ef0df11b4145bad7be2b3d16527160de11e38364a2a7d32b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 815,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 813,
        "length": 6,
        "offset": 103,
        "surroundingCode": "                    f\"{author.mention}\\n\", embed=embed, view=ButtonViews\n                )\n            except:\n                try:\n                    await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "056131b5d9844b403ca12761baff15954e38ba7b1f6970d32246438a5c85c009"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 820,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 818,
        "length": 6,
        "offset": 115,
        "surroundingCode": "                        f\"{author.mention}\\n\", embed=embed, view=ButtonViews\n                    )\n                except:\n                    await channel.send(\n                        f\"{author.mention}\\n\", embed=embed, view=ButtonViews"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "76f2e5ebb194a83eb0bbbe38428ea89dcd2c5930e7e6158c58bb1ebdc96a52de"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 905,
      "offset": 20,
      "length": 9,
      "code": {
        "startLine": 903,
        "length": 9,
        "offset": 123,
        "surroundingCode": "                    f\"{author.mention} Alright, canceling request.\", delete_after=5.0\n                )\n            except Exception:\n                await interaction.channel.send(\n                    f\"{author.mention} Alright, canceling request.\", delete_after=5.0"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "d48ed3d6a2bdbc3cf3e5ccef142ab34948f455041c60b324728de13f60bdbdc1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1072,
      "offset": 20,
      "length": 9,
      "code": {
        "startLine": 1070,
        "length": 9,
        "offset": 157,
        "surroundingCode": "                    f\"{author.mention}\\nTranscript Created!\\n>>> `Jump Link:` {msg.jump_url}\\n`Transcript Link:` {url}\"\n                )\n            except Exception:\n                try:\n                    await msgO.edit("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "fb142ceae386c84187c42b56099f1683ca23f78888d851ef2975d722b3f0fdd6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1077,
      "offset": 24,
      "length": 9,
      "code": {
        "startLine": 1075,
        "length": 9,
        "offset": 169,
        "surroundingCode": "                        f\"{author.mention}\\nTranscript Created!\\n>>> `Jump Link:` {msg.jump_url}\\n`Transcript Link:` {url}\"\n                    )\n                except Exception:\n                    await msgO.edit(\n                        f\"{author.mention}\\nTranscript Created!\\n>>> `Jump Link:` {msg.jump_url}\\n`Transcript Link:` {url}\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "1a0272b824d4fd81641b321292a6fc74ff502acb154db8fcea19350ea86556c8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1129,
      "offset": 20,
      "length": 9,
      "code": {
        "startLine": 1127,
        "length": 9,
        "offset": 73,
        "surroundingCode": "                    entry.ChannelID\n                )\n            except Exception as e:\n                continue\n            fetchMessage = await channel.history(limit=1).flatten()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "2c96d396f0d3215260c3d5264b7a15be6d9d89d517be6d77adb69559636076ef"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 110,
      "offset": 28,
      "length": 9,
      "code": {
        "startLine": 108,
        "length": 9,
        "offset": 120,
        "surroundingCode": "                    try:\n                        self.flow.fetch_token(code=answer1.content)\n                    except Exception as e:\n                        return await dm_channel.send(\"Invalid code, try again later...\")\n                    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "0fe159d67e6f1fe089b639d9b7e2e9fb9a1eaa8556a459756fb71b5af4a33607"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 91,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 89,
        "length": 6,
        "offset": 90,
        "surroundingCode": "                            ephemeral=True,\n                        )\n                    except:\n                        await interaction.channel.send(\n                            f\"{interaction.user.mention} An error occurred while \""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "6029212613ccdeabf4c034ae708182da63b96d94ca16b615e475df365324f452"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 116,
      "offset": 24,
      "length": 9,
      "code": {
        "startLine": 114,
        "length": 9,
        "offset": 46,
        "surroundingCode": "                    )\n\n                except Exception as e:\n                    print(\"member not found\")\n                    continue"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "46dfe5b71393849ab815d8169e06c838ff2b6138b28331c3702d1d3ab77a7a42"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 184,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 182,
        "length": 6,
        "offset": 116,
        "surroundingCode": "                            \"You have been verified!\", ephemeral=True\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} You have been verified!\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "239c5a6f71f5ddd452e7c0bb528709ac61b7a7f7a0252de6140e750cb292c55d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 223,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 221,
        "length": 6,
        "offset": 90,
        "surroundingCode": "                            ephemeral=True,\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} I didn't seem to find any roles to give you, please try \""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "4fb2e17708da490c9eaee4e6be930c36e95eb2e30f69496fbafc5b5e6ef9e63a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _meta of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 75,
      "offset": 27,
      "length": 21,
      "code": {
        "startLine": 73,
        "length": 21,
        "offset": 83,
        "surroundingCode": "        else:\n            db.connect(reuse_if_open=True)\n            for column in model_dict[key]._meta.sorted_fields:\n                if not db.column_exists(key, column.name):\n                    db.create_column(key, column.name)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "6197070ee6850c7385951d1322326ea03f294f311cb74208b291d7d2461f0549"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _prepare_once of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 143,
      "offset": 15,
      "length": 25,
      "code": {
        "startLine": 141,
        "length": 25,
        "offset": 34,
        "surroundingCode": "            return\n\n        await self.source._prepare_once()\n        page = await self.source.get_page(0)\n        kwargs = await self._get_kwargs_from_page(page)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "e327017e586695d2d2af2607c6b6802a8f0e0a132c42f6fac4b9329fc793c760"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _prepare_once of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 351,
      "offset": 15,
      "length": 25,
      "code": {
        "startLine": 349,
        "length": 25,
        "offset": 45,
        "surroundingCode": "        self.current_page = 0\n\n        await self.source._prepare_once()\n        page = await self.source.get_page(0)\n        kwargs = await self._get_kwargs_from_page(page)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "9f4fb9aff7f34c7013155939b4fd35a7979d5c9e8d88fc7882650d3228313896"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (123 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 4,
      "offset": 121,
      "length": 3,
      "code": {
        "startLine": 2,
        "length": 3,
        "offset": 128,
        "surroundingCode": "SETUP:\n\nIf you require a specific command to be protected, you can use the built in @is_botAdmin check or create your own one here!\n\nIf you wish to use the @is_botAdmin check, DM Space.\"."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "ded0517cb34154aa20064082b79b82ad424b0fcd5b1326bd15c50e6f6a68563b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (175 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 179,
      "offset": 121,
      "length": 55,
      "code": {
        "startLine": 177,
        "length": 55,
        "offset": 223,
        "surroundingCode": "        secret_id (str): The secret ID to access. (Options: doc_t, doc_c, tts_c, tsa_c, svc_c, adm_t)\n\n        google_auth_load_mode (bool, optional): If marked as True, the function will return a specific credential class for you to authenticate with an API. Defaults to False.\n\n        type_auth (int, optional): Type of credential class to return."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "6f54d92ee2f20cad2954f074459431f212ccac63b7e04ecc5687467981e43e18"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (169 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 182,
      "offset": 121,
      "length": 49,
      "code": {
        "startLine": 180,
        "length": 49,
        "offset": 192,
        "surroundingCode": "\n        type_auth (int, optional): Type of credential class to return.\n        (0: oauth2.credentials.Credentials, 1: oauthlib.flow.Flow, 2: oauth2.service_account.Credentials, 3: service_account.ServiceAccountCredentials) Defaults to None.\n\n        scopes (list[str], optional): Scopes to access, this is required when using google_auth_load_mode. Defaults to None."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "74f2b98de4cd6bfb04d27704499fd9baa4853083095359a188b11cd8e9590113"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (124 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 184,
      "offset": 121,
      "length": 4,
      "code": {
        "startLine": 182,
        "length": 4,
        "offset": 291,
        "surroundingCode": "        (0: oauth2.credentials.Credentials, 1: oauthlib.flow.Flow, 2: oauth2.service_account.Credentials, 3: service_account.ServiceAccountCredentials) Defaults to None.\n\n        scopes (list[str], optional): Scopes to access, this is required when using google_auth_load_mode. Defaults to None.\n\n        redirect_uri (str, optional): Redirect URL to configure, required when using authentication mode 1. Defaults to None."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "b9ebd065828c119ace9d9e3ebeb3859b55ff28a42bb67e922fa04efc7e01a8d5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (125 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 186,
      "offset": 121,
      "length": 5,
      "code": {
        "startLine": 184,
        "length": 5,
        "offset": 246,
        "surroundingCode": "        scopes (list[str], optional): Scopes to access, this is required when using google_auth_load_mode. Defaults to None.\n\n        redirect_uri (str, optional): Redirect URL to configure, required when using authentication mode 1. Defaults to None.\n\n    Returns:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "7eccdbbf41a6cc1af4fbe60786a2a85e0c0c8f087918ed5d783ebc0df3cbce89"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 227,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 225,
        "length": 6,
        "offset": 61,
        "surroundingCode": "        try:\n            os.remove(\"cred_file.json\")\n        except:\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "81c2e2749af20ecf0a859e19f95dcfe1cbaf5d80ac75ac0056b38547ec4404e3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (179 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 260,
      "offset": 9,
      "length": 171,
      "code": {
        "startLine": 258,
        "length": 171,
        "offset": 156,
        "surroundingCode": "        # s3_object = s3_client.Object('ch-transcriptlogs', file_name)\n        # s3_object.metadata.update({'x-amz-meta-content-type':'text/html'})\n        # s3_object.copy_from(CopySource={'Bucket':'ch-transcriptlogs', 'x-amz-meta-content-type':'binary/octet-stream'}, Metadata=s3_object.metadata, MetadataDirective='REPLACE')\n\n    except ClientError as e:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "2f5b57b5db0f9d4a3145c32ff3384c9637fdbbfb082d31069c22ad88421edbf9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E124 closing bracket does not match visual indentation",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 347,
      "offset": 5,
      "length": 1,
      "code": {
        "startLine": 345,
        "length": 1,
        "offset": 128,
        "surroundingCode": "    )\n    cat_socialStudiesTicket = int(ConfigcatClient.MAIN_ID_CC.get_value(\"cat_socialstudiesticket\", 800481237608824882)\n    )\n    cat_englishTicket = int(\n        ConfigcatClient.MAIN_ID_CC.get_value(\"cat_englishticket\", 800475854353596469)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "3a30a4a0144911e0f237e8e4beeeb2e815e0f4ff9f06ad22db465d399c6acccc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (4)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 975,
      "offset": 1,
      "length": 16,
      "code": {
        "startLine": 973,
        "length": 16,
        "offset": 2,
        "surroundingCode": "\n\nclass LEADER_ID:\n    \"\"\"\n    IDs of the SSD SET SERVER"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "7bf21fdd41875725752d67f69e855c23f4d297e4a38112f446ff7e280686b8be"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (136 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1204,
      "offset": 21,
      "length": 116,
      "code": {
        "startLine": 1202,
        "length": 116,
        "offset": 181,
        "surroundingCode": "    timmyLaptop_png = \"https://i.gyazo.com/5cffb6cd45e5e1ee9b1d015bccbdf9e6.png\"\n    timmyHappy_png = \"https://i.gyazo.com/a0b221679db0f980504e64535885a5fd.png\"\n    timmyBook_png = \"https://media.discordapp.net/attachments/875233489727922177/876603875329732618/timmy_book.png?width=411&height=533\"\n    timmyTeacher_png = \"https://media.discordapp.net/attachments/875233489727922177/877378910214586368/tutoring.png?width=411&height=532\"\n    timmyDonation_png = \"timmydonation.png\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "7bd6c6d8bf829efcc5dfa54dd317cea308e35129db43cd1f381433fcf5e7dd71"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (137 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1205,
      "offset": 24,
      "length": 114,
      "code": {
        "startLine": 1203,
        "length": 114,
        "offset": 240,
        "surroundingCode": "    timmyHappy_png = \"https://i.gyazo.com/a0b221679db0f980504e64535885a5fd.png\"\n    timmyBook_png = \"https://media.discordapp.net/attachments/875233489727922177/876603875329732618/timmy_book.png?width=411&height=533\"\n    timmyTeacher_png = \"https://media.discordapp.net/attachments/875233489727922177/877378910214586368/tutoring.png?width=411&height=532\"\n    timmyDonation_png = \"timmydonation.png\"\n    timmyDonation_path = \"./utils/bots/CoreBot/LogFiles/timmydonation.png\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "80e29d120d57d78970415d51430149826041ba256895a077674e8d4a6c3fc279"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (154 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1268,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 1266,
        "length": 1,
        "offset": 135,
        "surroundingCode": "\nrulesDict = {\n    1: f\"All Terms of Service and Community Guidelines apply. && {Emoji.barrow} https://discord.com/terms\\n{Emoji.barrow} https://discord.com/guidelines\",\n    2: f\"Keep chats and conversations mainly in English. && {Emoji.barrow} Full-blown conversations in a different language that disrupt the environment are not allowed.\\n{Emoji.barrow} Disrupting an existing conversation in English in voice chat is not allowed.\",\n    3: f\"Keep chats and conversations relevant. && {Emoji.barrow} Keep discussions about politics or anything else in <#773366189648642069>.\\n{Emoji.barrow} Ask homework questions in the homework channels or tickets.\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "24a61a0128cd769928dc10103c7105a0840c41fcb70088216b3b03c481ec7400"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (264 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1269,
      "offset": 75,
      "length": 97,
      "code": {
        "startLine": 1267,
        "length": 97,
        "offset": 243,
        "surroundingCode": "rulesDict = {\n    1: f\"All Terms of Service and Community Guidelines apply. && {Emoji.barrow} https://discord.com/terms\\n{Emoji.barrow} https://discord.com/guidelines\",\n    2: f\"Keep chats and conversations mainly in English. && {Emoji.barrow} Full-blown conversations in a different language that disrupt the environment are not allowed.\\n{Emoji.barrow} Disrupting an existing conversation in English in voice chat is not allowed.\",\n    3: f\"Keep chats and conversations relevant. && {Emoji.barrow} Keep discussions about politics or anything else in <#773366189648642069>.\\n{Emoji.barrow} Ask homework questions in the homework channels or tickets.\",\n    4: f\"No content that does not belong in a school server. && {Emoji.barrow} No inappropriate user profiles, avatars, banners, statuses, about me, usernames, or nicknames.\\n{Emoji.barrow} No sharing of content that glorifies or promotes suicide or self-harm.\\n{Emoji.barrow} No trolling, raiding, epileptic, disturbing, suggestive, or offensive behavior.\\n{Emoji.barrow} No sexist, racist, homophobic, transphobic, xenophobic, islamophobic, pedophilic, creepy behavior, etc.\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "869effaa79d48a04fd0be236ba91b788555f130e99e788c5b4c17b9c31da9bf3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (218 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1270,
      "offset": 66,
      "length": 77,
      "code": {
        "startLine": 1268,
        "length": 77,
        "offset": 485,
        "surroundingCode": "    1: f\"All Terms of Service and Community Guidelines apply. && {Emoji.barrow} https://discord.com/terms\\n{Emoji.barrow} https://discord.com/guidelines\",\n    2: f\"Keep chats and conversations mainly in English. && {Emoji.barrow} Full-blown conversations in a different language that disrupt the environment are not allowed.\\n{Emoji.barrow} Disrupting an existing conversation in English in voice chat is not allowed.\",\n    3: f\"Keep chats and conversations relevant. && {Emoji.barrow} Keep discussions about politics or anything else in <#773366189648642069>.\\n{Emoji.barrow} Ask homework questions in the homework channels or tickets.\",\n    4: f\"No content that does not belong in a school server. && {Emoji.barrow} No inappropriate user profiles, avatars, banners, statuses, about me, usernames, or nicknames.\\n{Emoji.barrow} No sharing of content that glorifies or promotes suicide or self-harm.\\n{Emoji.barrow} No trolling, raiding, epileptic, disturbing, suggestive, or offensive behavior.\\n{Emoji.barrow} No sexist, racist, homophobic, transphobic, xenophobic, islamophobic, pedophilic, creepy behavior, etc.\",\n    5: f\"No advertising or self-promotion (unless given explicit permission). && {Emoji.barrow} Self-advertising a website, group, or anything else through DMs, VC or in the server is not allowed.\\n{Emoji.barrow} Explicitly asking users to look at advertisements in status/About Me is not allowed.\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "bf6131b0dd3c8804a13ff3c06e3159280f392c93498783aa9a2aa40eb1ebcdb8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (478 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1271,
      "offset": 79,
      "length": 97,
      "code": {
        "startLine": 1269,
        "length": 97,
        "offset": 562,
        "surroundingCode": "    2: f\"Keep chats and conversations mainly in English. && {Emoji.barrow} Full-blown conversations in a different language that disrupt the environment are not allowed.\\n{Emoji.barrow} Disrupting an existing conversation in English in voice chat is not allowed.\",\n    3: f\"Keep chats and conversations relevant. && {Emoji.barrow} Keep discussions about politics or anything else in <#773366189648642069>.\\n{Emoji.barrow} Ask homework questions in the homework channels or tickets.\",\n    4: f\"No content that does not belong in a school server. && {Emoji.barrow} No inappropriate user profiles, avatars, banners, statuses, about me, usernames, or nicknames.\\n{Emoji.barrow} No sharing of content that glorifies or promotes suicide or self-harm.\\n{Emoji.barrow} No trolling, raiding, epileptic, disturbing, suggestive, or offensive behavior.\\n{Emoji.barrow} No sexist, racist, homophobic, transphobic, xenophobic, islamophobic, pedophilic, creepy behavior, etc.\",\n    5: f\"No advertising or self-promotion (unless given explicit permission). && {Emoji.barrow} Self-advertising a website, group, or anything else through DMs, VC or in the server is not allowed.\\n{Emoji.barrow} Explicitly asking users to look at advertisements in status/About Me is not allowed.\",\n    6: f\"No toxic behavior or harassment. && {Emoji.barrow} No discriminatory jokes or language towards an individual or group due to race, ethnicity, nationality, sex, gender, sexual orientation, religious affiliation, or disabilities.\\n{Emoji.barrow} Disrespect of members is not allowed, especially if it is continuous, repetitive, or severe.\\n{Emoji.barrow} Encouraging toxicity, harassment, bullying, and anything of the sort is prohibited.\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "f74a04b5a5f4bb3b3c985bc09366a7796fa9945d822c2634acb96daf48c0d3ab"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (299 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1272,
      "offset": 96,
      "length": 103,
      "code": {
        "startLine": 1270,
        "length": 103,
        "offset": 793,
        "surroundingCode": "    3: f\"Keep chats and conversations relevant. && {Emoji.barrow} Keep discussions about politics or anything else in <#773366189648642069>.\\n{Emoji.barrow} Ask homework questions in the homework channels or tickets.\",\n    4: f\"No content that does not belong in a school server. && {Emoji.barrow} No inappropriate user profiles, avatars, banners, statuses, about me, usernames, or nicknames.\\n{Emoji.barrow} No sharing of content that glorifies or promotes suicide or self-harm.\\n{Emoji.barrow} No trolling, raiding, epileptic, disturbing, suggestive, or offensive behavior.\\n{Emoji.barrow} No sexist, racist, homophobic, transphobic, xenophobic, islamophobic, pedophilic, creepy behavior, etc.\",\n    5: f\"No advertising or self-promotion (unless given explicit permission). && {Emoji.barrow} Self-advertising a website, group, or anything else through DMs, VC or in the server is not allowed.\\n{Emoji.barrow} Explicitly asking users to look at advertisements in status/About Me is not allowed.\",\n    6: f\"No toxic behavior or harassment. && {Emoji.barrow} No discriminatory jokes or language towards an individual or group due to race, ethnicity, nationality, sex, gender, sexual orientation, religious affiliation, or disabilities.\\n{Emoji.barrow} Disrespect of members is not allowed, especially if it is continuous, repetitive, or severe.\\n{Emoji.barrow} Encouraging toxicity, harassment, bullying, and anything of the sort is prohibited.\",\n    7: f\"No illegal or explicit material. && {Emoji.barrow} Discussing or sharing illegal content is prohibited. This includes, but is not limited to: copyrighted content, pirated content, illegal activities, crimes, IPGrabbers, phishing links.\\n{Emoji.barrow} Any form of NSFW, NSFL, or explicit content (pornographic, overtly sexual, overly gory) is pro"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "beec4a651f0cc64db56d3527be8e96da94ef52744ecf0125274abb627ea6b8be"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (447 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1273,
      "offset": 60,
      "length": 179,
      "code": {
        "startLine": 1271,
        "length": 179,
        "offset": 838,
        "surroundingCode": "    4: f\"No content that does not belong in a school server. && {Emoji.barrow} No inappropriate user profiles, avatars, banners, statuses, about me, usernames, or nicknames.\\n{Emoji.barrow} No sharing of content that glorifies or promotes suicide or self-harm.\\n{Emoji.barrow} No trolling, raiding, epileptic, disturbing, suggestive, or offensive behavior.\\n{Emoji.barrow} No sexist, racist, homophobic, transphobic, xenophobic, islamophobic, pedophilic, creepy behavior, etc.\",\n    5: f\"No advertising or self-promotion (unless given explicit permission). && {Emoji.barrow} Self-advertising a website, group, or anything else through DMs, VC or in the server is not allowed.\\n{Emoji.barrow} Explicitly asking users to look at advertisements in status/About Me is not allowed.\",\n    6: f\"No toxic behavior or harassment. && {Emoji.barrow} No discriminatory jokes or language towards an individual or group due to race, ethnicity, nationality, sex, gender, sexual orientation, religious affiliation, or disabilities.\\n{Emoji.barrow} Disrespect of members is not allowed, especially if it is continuous, repetitive, or severe.\\n{Emoji.barrow} Encouraging toxicity, harassment, bullying, and anything of the sort is prohibited.\",\n    7: f\"No illegal or explicit material. && {Emoji.barrow} Discussing or sharing illegal content is prohibited. This includes, but is not limited to: copyrighted content, pirated content, illegal activities, crimes, IPGrabbers, phishing links.\\n{Emoji.barrow} Any form of NSFW, NSFL, or explicit content (pornographic, overtly sexual, overly gory) is prohibited.\",\n    8: f\"No DDoS, dox, death or any other sort of threats. && {Emoji.barrow} Indirect or direct threats to harm someone else are strictly prohibited and causes for immediate ban.\\n{Emoji.barrow} DDoS (Distrib"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "5bc16d64f7294dfef63f31a4c4e49d8eb7f5bb49697e88275fc585d1abce3619"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (365 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1274,
      "offset": 60,
      "length": 187,
      "code": {
        "startLine": 1272,
        "length": 187,
        "offset": 807,
        "surroundingCode": "    5: f\"No advertising or self-promotion (unless given explicit permission). && {Emoji.barrow} Self-advertising a website, group, or anything else through DMs, VC or in the server is not allowed.\\n{Emoji.barrow} Explicitly asking users to look at advertisements in status/About Me is not allowed.\",\n    6: f\"No toxic behavior or harassment. && {Emoji.barrow} No discriminatory jokes or language towards an individual or group due to race, ethnicity, nationality, sex, gender, sexual orientation, religious affiliation, or disabilities.\\n{Emoji.barrow} Disrespect of members is not allowed, especially if it is continuous, repetitive, or severe.\\n{Emoji.barrow} Encouraging toxicity, harassment, bullying, and anything of the sort is prohibited.\",\n    7: f\"No illegal or explicit material. && {Emoji.barrow} Discussing or sharing illegal content is prohibited. This includes, but is not limited to: copyrighted content, pirated content, illegal activities, crimes, IPGrabbers, phishing links.\\n{Emoji.barrow} Any form of NSFW, NSFL, or explicit content (pornographic, overtly sexual, overly gory) is prohibited.\",\n    8: f\"No DDoS, dox, death or any other sort of threats. && {Emoji.barrow} Indirect or direct threats to harm someone else are strictly prohibited and causes for immediate ban.\\n{Emoji.barrow} DDoS (Distributed Denial of Service): sending a large amount of requests in a short amount of time.\\n{Emoji.barrow} Dox: revealing any private information of another member, such as real name or address, without consent.\",\n    9: f\"No slurs and excessive or harmful profanity usage. && {Emoji.barrow} Using or attempting to use slurs and racist terms is prohibited.\\n{Emoji.barrow} Excessive profanity, verbal abuse and insults are prohibited.\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "3cf44b5cbc2f2e4e844f2458ee4910316ca14bba705831342c5fb9aa493d51d6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (417 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1275,
      "offset": 77,
      "length": 104,
      "code": {
        "startLine": 1273,
        "length": 104,
        "offset": 890,
        "surroundingCode": "    6: f\"No toxic behavior or harassment. && {Emoji.barrow} No discriminatory jokes or language towards an individual or group due to race, ethnicity, nationality, sex, gender, sexual orientation, religious affiliation, or disabilities.\\n{Emoji.barrow} Disrespect of members is not allowed, especially if it is continuous, repetitive, or severe.\\n{Emoji.barrow} Encouraging toxicity, harassment, bullying, and anything of the sort is prohibited.\",\n    7: f\"No illegal or explicit material. && {Emoji.barrow} Discussing or sharing illegal content is prohibited. This includes, but is not limited to: copyrighted content, pirated content, illegal activities, crimes, IPGrabbers, phishing links.\\n{Emoji.barrow} Any form of NSFW, NSFL, or explicit content (pornographic, overtly sexual, overly gory) is prohibited.\",\n    8: f\"No DDoS, dox, death or any other sort of threats. && {Emoji.barrow} Indirect or direct threats to harm someone else are strictly prohibited and causes for immediate ban.\\n{Emoji.barrow} DDoS (Distributed Denial of Service): sending a large amount of requests in a short amount of time.\\n{Emoji.barrow} Dox: revealing any private information of another member, such as real name or address, without consent.\",\n    9: f\"No slurs and excessive or harmful profanity usage. && {Emoji.barrow} Using or attempting to use slurs and racist terms is prohibited.\\n{Emoji.barrow} Excessive profanity, verbal abuse and insults are prohibited.\",\n    10: f\"No cheating in any form. && {Emoji.barrow} It is strictly prohibited to cheat or engage in academic dishonesty anywhere in the server.\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "03281e44790eb46402124016573e88f8a900b4776d9d7ee15386de5ef29e37c8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (222 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1276,
      "offset": 78,
      "length": 67,
      "code": {
        "startLine": 1274,
        "length": 67,
        "offset": 861,
        "surroundingCode": "    7: f\"No illegal or explicit material. && {Emoji.barrow} Discussing or sharing illegal content is prohibited. This includes, but is not limited to: copyrighted content, pirated content, illegal activities, crimes, IPGrabbers, phishing links.\\n{Emoji.barrow} Any form of NSFW, NSFL, or explicit content (pornographic, overtly sexual, overly gory) is prohibited.\",\n    8: f\"No DDoS, dox, death or any other sort of threats. && {Emoji.barrow} Indirect or direct threats to harm someone else are strictly prohibited and causes for immediate ban.\\n{Emoji.barrow} DDoS (Distributed Denial of Service): sending a large amount of requests in a short amount of time.\\n{Emoji.barrow} Dox: revealing any private information of another member, such as real name or address, without consent.\",\n    9: f\"No slurs and excessive or harmful profanity usage. && {Emoji.barrow} Using or attempting to use slurs and racist terms is prohibited.\\n{Emoji.barrow} Excessive profanity, verbal abuse and insults are prohibited.\",\n    10: f\"No cheating in any form. && {Emoji.barrow} It is strictly prohibited to cheat or engage in academic dishonesty anywhere in the server.\",\n    11: f\"No spamming in any form. && {Emoji.barrow} Spamming links, images, messages, roles, emojis, emotes, emote reactions, or anything else is not allowed.\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "fac4dea9326d8684a7ca1c74868c31d7b3da4be4b66e2e87df0209df9e25afbb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (146 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1277,
      "offset": 53,
      "length": 92,
      "code": {
        "startLine": 1275,
        "length": 92,
        "offset": 693,
        "surroundingCode": "    8: f\"No DDoS, dox, death or any other sort of threats. && {Emoji.barrow} Indirect or direct threats to harm someone else are strictly prohibited and causes for immediate ban.\\n{Emoji.barrow} DDoS (Distributed Denial of Service): sending a large amount of requests in a short amount of time.\\n{Emoji.barrow} Dox: revealing any private information of another member, such as real name or address, without consent.\",\n    9: f\"No slurs and excessive or harmful profanity usage. && {Emoji.barrow} Using or attempting to use slurs and racist terms is prohibited.\\n{Emoji.barrow} Excessive profanity, verbal abuse and insults are prohibited.\",\n    10: f\"No cheating in any form. && {Emoji.barrow} It is strictly prohibited to cheat or engage in academic dishonesty anywhere in the server.\",\n    11: f\"No spamming in any form. && {Emoji.barrow} Spamming links, images, messages, roles, emojis, emotes, emote reactions, or anything else is not allowed.\",\n    12: f\"No impersonation in any form. && {Emoji.barrow} Changing your username or avatar to something similar as any staff or members with the intent to mimic them and create confusion is prohibited. \","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "caee1fca8c19f3533557f8422faffd82b344d7c58d484630fec587dee639da45"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (161 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1278,
      "offset": 53,
      "length": 107,
      "code": {
        "startLine": 1276,
        "length": 107,
        "offset": 422,
        "surroundingCode": "    9: f\"No slurs and excessive or harmful profanity usage. && {Emoji.barrow} Using or attempting to use slurs and racist terms is prohibited.\\n{Emoji.barrow} Excessive profanity, verbal abuse and insults are prohibited.\",\n    10: f\"No cheating in any form. && {Emoji.barrow} It is strictly prohibited to cheat or engage in academic dishonesty anywhere in the server.\",\n    11: f\"No spamming in any form. && {Emoji.barrow} Spamming links, images, messages, roles, emojis, emotes, emote reactions, or anything else is not allowed.\",\n    12: f\"No impersonation in any form. && {Emoji.barrow} Changing your username or avatar to something similar as any staff or members with the intent to mimic them and create confusion is prohibited. \",\n    13: f\"No disruptive behavior in voice chat. && {Emoji.barrow} No continuous hopping between voice chats.\\n{Emoji.barrow} No starting and closing streams in short intervals.\\n{Emoji.barrow} No loud, annoying, or high-pitched noises.\\n{Emoji.barrow} No voice changers if asked to stop.\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "98e464a853c5bee53f507275d0d92bcb1f2c28a317741c9d329058735cd7e5cc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (204 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1279,
      "offset": 58,
      "length": 145,
      "code": {
        "startLine": 1277,
        "length": 145,
        "offset": 366,
        "surroundingCode": "    10: f\"No cheating in any form. && {Emoji.barrow} It is strictly prohibited to cheat or engage in academic dishonesty anywhere in the server.\",\n    11: f\"No spamming in any form. && {Emoji.barrow} Spamming links, images, messages, roles, emojis, emotes, emote reactions, or anything else is not allowed.\",\n    12: f\"No impersonation in any form. && {Emoji.barrow} Changing your username or avatar to something similar as any staff or members with the intent to mimic them and create confusion is prohibited. \",\n    13: f\"No disruptive behavior in voice chat. && {Emoji.barrow} No continuous hopping between voice chats.\\n{Emoji.barrow} No starting and closing streams in short intervals.\\n{Emoji.barrow} No loud, annoying, or high-pitched noises.\\n{Emoji.barrow} No voice changers if asked to stop.\",\n    14: f\"No evading user blocks, punishments, or bans by using alternate accounts. && {Emoji.barrow} Sending unwanted, repeated friend requests or messages to contact someone who has blocked you is prohibited.\\n{Emoji.barrow} Creating alternate accounts to evade a punishment or ban, harass or impersonate someone, or participate in a raid are all strictly prohibited.\\n{Emoji.barrow} Suspicions of being an alternate account are cause for a ban with no prior warning.\\n{Emoji.barrow} To discuss punishments or warnings, create a support ticket or talk to a moderator in DMs.\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "067423d7b45856b4418c638e2e4c657791fce728be9b8933328471c87d578a42"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (289 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1280,
      "offset": 118,
      "length": 6,
      "code": {
        "startLine": 1278,
        "length": 6,
        "offset": 484,
        "surroundingCode": "    11: f\"No spamming in any form. && {Emoji.barrow} Spamming links, images, messages, roles, emojis, emotes, emote reactions, or anything else is not allowed.\",\n    12: f\"No impersonation in any form. && {Emoji.barrow} Changing your username or avatar to something similar as any staff or members with the intent to mimic them and create confusion is prohibited. \",\n    13: f\"No disruptive behavior in voice chat. && {Emoji.barrow} No continuous hopping between voice chats.\\n{Emoji.barrow} No starting and closing streams in short intervals.\\n{Emoji.barrow} No loud, annoying, or high-pitched noises.\\n{Emoji.barrow} No voice changers if asked to stop.\",\n    14: f\"No evading user blocks, punishments, or bans by using alternate accounts. && {Emoji.barrow} Sending unwanted, repeated friend requests or messages to contact someone who has blocked you is prohibited.\\n{Emoji.barrow} Creating alternate accounts to evade a punishment or ban, harass or impersonate someone, or participate in a raid are all strictly prohibited.\\n{Emoji.barrow} Suspicions of being an alternate account are cause for a ban with no prior warning.\\n{Emoji.barrow} To discuss punishments or warnings, create a support ticket or talk to a moderator in DMs.\",\n}"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "37d7683897c0244bcce87adcd63258317d947e41ba3703ef28ed67071e919197"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (578 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1281,
      "offset": 102,
      "length": 111,
      "code": {
        "startLine": 1279,
        "length": 111,
        "offset": 596,
        "surroundingCode": "    12: f\"No impersonation in any form. && {Emoji.barrow} Changing your username or avatar to something similar as any staff or members with the intent to mimic them and create confusion is prohibited. \",\n    13: f\"No disruptive behavior in voice chat. && {Emoji.barrow} No continuous hopping between voice chats.\\n{Emoji.barrow} No starting and closing streams in short intervals.\\n{Emoji.barrow} No loud, annoying, or high-pitched noises.\\n{Emoji.barrow} No voice changers if asked to stop.\",\n    14: f\"No evading user blocks, punishments, or bans by using alternate accounts. && {Emoji.barrow} Sending unwanted, repeated friend requests or messages to contact someone who has blocked you is prohibited.\\n{Emoji.barrow} Creating alternate accounts to evade a punishment or ban, harass or impersonate someone, or participate in a raid are all strictly prohibited.\\n{Emoji.barrow} Suspicions of being an alternate account are cause for a ban with no prior warning.\\n{Emoji.barrow} To discuss punishments or warnings, create a support ticket or talk to a moderator in DMs.\",\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "b4402b9269b2d0aa4e071cccb4746838f4b5e76f42b777296ad81f66dbfb0f51"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (209 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1284,
      "offset": 108,
      "length": 18,
      "code": {
        "startLine": 1282,
        "length": 18,
        "offset": 110,
        "surroundingCode": "}\n\ndeprecatedFiles = [\"TTScreds.json\", \"tokenA.json\", \"staff_verifyClient.json\", \"gmailAPI_credentials.json\", \"gmail_token.json\", \"docs_token.json\", \"docs_credentials.json\", \"credentialsA.json\", \"admincred.json\"]\n\nclass bcolors:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "e968ea6ad17c5fb7e1fa7aa86402d6ca58af4df95c161c12720303d8402d5f0f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E302 expected 2 blank lines, found 1",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1286,
      "offset": 1,
      "length": 14,
      "code": {
        "startLine": 1284,
        "length": 14,
        "offset": 211,
        "surroundingCode": "deprecatedFiles = [\"TTScreds.json\", \"tokenA.json\", \"staff_verifyClient.json\", \"gmailAPI_credentials.json\", \"gmail_token.json\", \"docs_token.json\", \"docs_credentials.json\", \"credentialsA.json\", \"admincred.json\"]\n\nclass bcolors:\n    HEADER = \"\\033[95m\"\n    OKBLUE = \"\\033[94m\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "2237211af93977d4ce92adf6ed71e6cfe861708ca32b9049daaa866be9a68b89"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (166 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1367,
      "offset": 121,
      "length": 46,
      "code": {
        "startLine": 1365,
        "length": 46,
        "offset": 342,
        "surroundingCode": "            interaction_message: The response message when pressing on a selection. Default to None.\n            ephemeral: Whenever the response message should only be visible for the select_user or not. Default to True.\n            coroutine: A coroutine that gets invoked after the button is pressed. If None is passed, the view is stopped after the button is pressed. Default to None.\n        \"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "0c7397479a83b8e5c58ab3bedfbfcf96d0d72e6d5f2af5b8e02f5429f759b2c1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (166 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1459,
      "offset": 121,
      "length": 46,
      "code": {
        "startLine": 1457,
        "length": 46,
        "offset": 342,
        "surroundingCode": "            interaction_message: The response message when pressing on a selection. Default to None.\n            ephemeral: Whenever the response message should only be visible for the select_user or not. Default to True.\n            coroutine: A coroutine that gets invoked after the button is pressed. If None is passed, the view is stopped after the button is pressed. Default to None.\n        \"\"\"\n        self.style_ = style"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "0815fa6d7d371478cd794f0a149e5327716455c1b7cee8fd38cbb0c676a5c96f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E201 whitespace after '('",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1546,
      "offset": 25,
      "length": 1,
      "code": {
        "startLine": 1544,
        "length": 1,
        "offset": 89,
        "surroundingCode": "        ch = await self.bot.get_channel(interaction.channel_id)\n\n        await rawExport( ch, TranscriptLOG, interaction.user)\n        await ch.delete()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "2992c436d11c6009ee04bb55eb0d4e820d0be5f6d81b059428bf0558cfff73fc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (245 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1633,
      "offset": 17,
      "length": 228,
      "code": {
        "startLine": 1631,
        "length": 228,
        "offset": 82,
        "surroundingCode": "        try:\n            await interaction.response.send_message(\n                \"https://images-ext-2.discordapp.net/external/YTk-6Mfxbbr8KwIc-3Pyy5Z_06tfpcO65MflxYgbjA8/%3Fcid%3D73b8f7b119cc9225923f70c7e25a1f8e8932c7ae8ef48fe7%26rid%3Dgiphy.mp4%26ct%3Dg/https/media2.giphy.com/media/Ju7l5y9osyymQ/giphy.mp4\",\n                ephemeral=True,\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "ee0458d92382da4606684708004145a2710337db666d832c1e46a2cde5ee95d0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (245 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1638,
      "offset": 17,
      "length": 228,
      "code": {
        "startLine": 1636,
        "length": 228,
        "offset": 113,
        "surroundingCode": "        except discord.errors.InteractionResponded:\n            await interaction.followup.send(\n                \"https://images-ext-2.discordapp.net/external/YTk-6Mfxbbr8KwIc-3Pyy5Z_06tfpcO65MflxYgbjA8/%3Fcid%3D73b8f7b119cc9225923f70c7e25a1f8e8932c7ae8ef48fe7%26rid%3Dgiphy.mp4%26ct%3Dg/https/media2.giphy.com/media/Ju7l5y9osyymQ/giphy.mp4\",\n                ephemeral=True,\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "1e0084f9f25381250cb02a89b3bce55801769a3e5d2c49492580edc40a727dea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (210 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1726,
      "offset": 121,
      "length": 4,
      "code": {
        "startLine": 1724,
        "length": 4,
        "offset": 185,
        "surroundingCode": "\n    async def callback(self, interaction: discord.Interaction):\n        response = f\"User Action: {self.children[0]}\\nSteps to reproduce the issue: {self.children[1]}\\nWhat happened: {self.children[2]}\\nExpected Result: {self.children[3]}\\nAnything else: {self.children[4]}\"\n        url = f\"https://sentry.io/api/0/projects/schoolsimplified/timmy/user-feedback/\"\n        headers = {\"Authorization\": f'Bearer {os.getenv(\"FDB_SENTRY\")}'}"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "4bbe5ee5027e970b4d142ffec8c8a6ebcbcaeca5a413de9b252735f081bf633b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (132 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1771,
      "offset": 119,
      "length": 7,
      "code": {
        "startLine": 1769,
        "length": 7,
        "offset": 180,
        "surroundingCode": "                listkeys = []\n                authorrank = ''\n                for key, value in sorted(checkrew[f'{menu.ctx.guild.id}'].items(), key=lambda pair: pair[1]['total'], reverse=True):\n                    if menu.ctx.guild.get_member(int(key)):\n                        listkeys.append(key)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "6570efd30ad83229b1d321ab42035ca811ae0eecdbb6792b5ec2e71164bbc0dd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (2)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1779,
      "offset": 17,
      "length": 39,
      "code": {
        "startLine": 1777,
        "length": 39,
        "offset": 18,
        "surroundingCode": "\n\n                if f'{menu.ctx.author.id}' in listkeys:\n                    authorrank = f\"Your rank: #{authorrank_len}\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "da9743f4c5e412ef000be9837e8a5407fb85737f157464297de238a29eb5a193"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E128 continuation line under-indented for visual indent",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1787,
      "offset": 17,
      "length": 2,
      "code": {
        "startLine": 1785,
        "length": 2,
        "offset": 175,
        "surroundingCode": "                joined = '\\n'.join(item)\n                embed = discord.Embed(color=farbegeneral, title=f'Leaderboard of {menu.ctx.guild.name}', description=\n                f'_ _'\n                f'\\n{joined}')\n                embed.set_footer(text=f'{authorrank} | page {menu.current_page + 1}/{self.get_max_pages()}')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "c9bfaf5c57f2cca67676520446b9f0048c6be283774b209206abdf4d52ab4b36"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E128 continuation line under-indented for visual indent",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1788,
      "offset": 17,
      "length": 2,
      "code": {
        "startLine": 1786,
        "length": 2,
        "offset": 157,
        "surroundingCode": "                embed = discord.Embed(color=farbegeneral, title=f'Leaderboard of {menu.ctx.guild.name}', description=\n                f'_ _'\n                f'\\n{joined}')\n                embed.set_footer(text=f'{authorrank} | page {menu.current_page + 1}/{self.get_max_pages()}')\n                embed.set_thumbnail(url=f'{menu.ctx.guild.icon_url}')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "7166b432828549b9182423ce883bb5f7442197ab4e04f8769b1ebc572fe0c51f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (127 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1892,
      "offset": 121,
      "length": 7,
      "code": {
        "startLine": 1890,
        "length": 7,
        "offset": 215,
        "surroundingCode": "        string: The string which should get converted to the time units. (e.g. '2d 4h 6m 7s')\n\n    Returns: A ``dict`` which the keys are 'days', 'hours', 'minutes', 'seconds' and the value is either a ``int`` or ``None``.\n    \"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "776d8cc2544f496839b67fc93127a261bbb8cca17685efe60fd54a293fe19a80"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence '\\\\d'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1897,
      "offset": 22,
      "length": 6,
      "code": {
        "startLine": 1895,
        "length": 6,
        "offset": 46,
        "surroundingCode": "    timeDict: dict = {}\n\n    days = re.search(\"\\d+d\", string)\n    hours = re.search(\"\\d+h\", string)\n    minutes = re.search(\"\\d+m\", string)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "bdad590728323b9834d409cd1040092fc107b0cf71f346520f85e45a6152d36e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence '\\\\d'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1898,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 1896,
        "length": 6,
        "offset": 60,
        "surroundingCode": "\n    days = re.search(\"\\d+d\", string)\n    hours = re.search(\"\\d+h\", string)\n    minutes = re.search(\"\\d+m\", string)\n    seconds = re.search(\"\\d+s\", string)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "2c1c099aaa77f7bf6772b7743f535fbd055b1f1e7d44e77c3f6488750be6ffed"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence '\\\\d'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1899,
      "offset": 25,
      "length": 6,
      "code": {
        "startLine": 1897,
        "length": 6,
        "offset": 99,
        "surroundingCode": "    days = re.search(\"\\d+d\", string)\n    hours = re.search(\"\\d+h\", string)\n    minutes = re.search(\"\\d+m\", string)\n    seconds = re.search(\"\\d+s\", string)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "b6850833cec44169fdfb7db2b0a6e912477ab71146db7babe935208db2628ed6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence '\\\\d'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1900,
      "offset": 25,
      "length": 6,
      "code": {
        "startLine": 1898,
        "length": 6,
        "offset": 102,
        "surroundingCode": "    hours = re.search(\"\\d+h\", string)\n    minutes = re.search(\"\\d+m\", string)\n    seconds = re.search(\"\\d+s\", string)\n\n    if days is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "5c6c790fe6691c4fe0a2592d1bad5f1cd3d0624fec58ab258e5ec7206edc3d64"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence '\\\\d'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1936,
      "offset": 29,
      "length": 21,
      "code": {
        "startLine": 1934,
        "length": 21,
        "offset": 37,
        "surroundingCode": "    \"\"\"\n\n    customEmoji = re.search(\"<[^:]*:[^:]*:(\\d)+>\", string)\n\n    if customEmoji is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "2d5c9f3b09e46c019dfcc8054df338160f642e93cdd610e2a5fb160a7b5dbe20"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (241 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 42,
      "offset": 5,
      "length": 237,
      "code": {
        "startLine": 40,
        "length": 237,
        "offset": 39,
        "surroundingCode": "\nelif os.getenv(\"IP\") is not None:\n    # useDB = bool(input(f\"{bcolors.WARNING}Do you want to use MySQL? (y/n)\\n    > This option should be avoided if you are testing new database structures, do not use MySQL Production if you are testing table modifications.{bcolors.ENDC}\"))\n    if useDB:\n        try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "9e985c99a745623c2f47db3c1396981b3a9782092d0b62b028bef8dcce58a3c2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (155 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 84,
      "offset": 121,
      "length": 35,
      "code": {
        "startLine": 82,
        "length": 35,
        "offset": 136,
        "surroundingCode": "DATABASE FILES\n\nThis file represents every database table and the model they follow. When fetching information from the tables, consult the typehints for possible methods!\n\n\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "f257a52d90de87fefea4cc43b8d5baa13b4a31c7fa9754ed90172572bdf3b665"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (122 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 118,
      "offset": 121,
      "length": 2,
      "code": {
        "startLine": 116,
        "length": 2,
        "offset": 208,
        "surroundingCode": "    `used` BooleanField()\n    **DEPRECATED**: Signifies if the voice channel is active.\n    *When a voice session is archived, the database entry will also be deleted. Using this attribute will no longer work.*\n\n    `lockStatus` = bool(TextField())"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "a0bd35d2a614e9b56186761f3f8f5f990939e84170c9a7fe8b1b4c73168053fd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (127 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 310,
      "offset": 121,
      "length": 7,
      "code": {
        "startLine": 308,
        "length": 7,
        "offset": 259,
        "surroundingCode": "    `MasterMaintenance`: BooleanField()\n    Ultimate Check; If this is enabled no one except Permit 4+ users are allowed to use the bot.\\n\n    '>>> **NOTE:** This attribute must always have a bypass to prevent lockouts, otherwise this check will ALWAYS return False.\n\n    `guildNone`: BooleanField()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "4d2573b2731a8d487b78031062b614d7e8acc5381825617964c133523e05782a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (126 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 622,
      "offset": 121,
      "length": 6,
      "code": {
        "startLine": 620,
        "length": 6,
        "offset": 151,
        "surroundingCode": "\n    `components`: CharField()\n    A dict as a string which includes a component of the message (`msgID`) as a key and the count of the component as a value.\n    \"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "63852bf37231e3b1b41019f78e29047cdbe9a80d0404bf0ddd2235218c8a6d67"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E302 expected 2 blank lines, found 1",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 643,
      "offset": 1,
      "length": 27,
      "code": {
        "startLine": 641,
        "length": 27,
        "offset": 33,
        "surroundingCode": "    queueID = BigIntegerField()\n\nclass StudyVCDB(BaseModel):\n    \"\"\"\n    #StudyVCDB"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "30110154c72eac3580b19d5c4f0007e80bf57e8c38bbd76bac8da8a7d41c4e1f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E302 expected 2 blank lines, found 1",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 673,
      "offset": 1,
      "length": 36,
      "code": {
        "startLine": 671,
        "length": 36,
        "offset": 42,
        "surroundingCode": "    Paused = BooleanField(default=False)\n\nclass StudyVCLeaderboard(BaseModel):\n    \"\"\"\n    #StudyVCLeaderboard"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "738b88aca4c94598d40f859db68da7f1f3377522db087d5d111c9bc3058e3bc2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E305 expected 2 blank lines after class or function definition, found 1",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 711,
      "offset": 1,
      "length": 21,
      "code": {
        "startLine": 709,
        "length": 21,
        "offset": 42,
        "surroundingCode": "    totalXP = BigIntegerField(default=0)\n\napp = Flask(__name__)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "c33acdd88b0bcab315dd9de2167a293bfe5037470251eb5dd608c8292e4d8c96"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E302 expected 2 blank lines, found 1",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 31,
      "offset": 1,
      "length": 36,
      "code": {
        "startLine": 29,
        "length": 36,
        "offset": 26,
        "surroundingCode": "from pathlib import Path\n\nclass VerifyButton(discord.ui.View):\n    def __init__(self):\n        super().__init__(timeout=None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "d04bf2d545903d8e89f911ae7db176fa4dfee96bf7fc41e2a6620fbe935a6d1d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E302 expected 2 blank lines, found 1",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 45,
      "offset": 1,
      "length": 48,
      "code": {
        "startLine": 43,
        "length": 48,
        "offset": 27,
        "surroundingCode": "        self.value = True\n\nasync def before_invoke_(ctx: commands.Context):\n    sentry_sdk.set_user(None)\n    sentry_sdk.set_user({\"id\": ctx.author.id, \"username\": ctx.author.name})"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "e21676235de6ed803791b57d39371243ad8a7f695f3d2616c424fa179d85b0c5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E131 continuation line unaligned for hanging indent",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 81,
      "offset": 13,
      "length": 1,
      "code": {
        "startLine": 79,
        "length": 1,
        "offset": 96,
        "surroundingCode": "    query: database.CheckInformation = (\n        database.CheckInformation.select()\n            .where(database.CheckInformation.id == 1)\n            .get()\n    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "20c5c829a5f1de1adcec4af7950d66f0904d1f5225464f5fcde307dde6e822df"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E741 ambiguous variable name 'l'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 289,
      "offset": 45,
      "length": 1,
      "code": {
        "startLine": 287,
        "length": 1,
        "offset": 136,
        "surroundingCode": "        with error_file.open(\"r\") as f:\n            # config, _ = core.common.load_config()\n            data = \"\\n\".join([l.strip() for l in f])\n\n            GITHUB_API = \"https://api.github.com\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "a4d6bc01ebfd2e97992c0a439b3d7405dbcd43f7ff46e19a8214c907842fd037"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E302 expected 2 blank lines, found 1",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 436,
      "offset": 1,
      "length": 22,
      "code": {
        "startLine": 434,
        "length": 22,
        "offset": 41,
        "surroundingCode": "        return CheckDB_CC.elseSituation\n\ndef initializeDB(bot):\n    \"\"\"\n    Initializes the database, and creates the needed table data if they don't exist."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "58ba987b85e85ee6b06cb3325f40b6fe827c82b761a0c48521522dae23b3303a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (123 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 173,
      "offset": 114,
      "length": 8,
      "code": {
        "startLine": 171,
        "length": 8,
        "offset": 186,
        "surroundingCode": "            if banreason is None:\n                embed = discord.Embed(\n                    description=f\"`ID: {user.id}` | {user.mention} found with the nickname: **{user.display_name}**\\u0020\",\n                    color=discord.Color.green(),\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "3a509045cac4cb43d9b7ad29bf17e527d8959012e96330b4f3ebe5419811936f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E731 do not assign a lambda expression, use a def",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 451,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 449,
        "length": 3,
        "offset": 46,
        "surroundingCode": "\n        if sort and key is None:\n            key = lambda c: c.qualified_name\n        #\n        iterator = _commands"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "6a25d761a1856480d0074e8e36086019fb8dd57284f12103aa63162825c6498d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E122 continuation line missing indentation or outdented",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 508,
      "offset": 17,
      "length": 1,
      "code": {
        "startLine": 506,
        "length": 1,
        "offset": 59,
        "surroundingCode": "            [\n                x for x in (\n                *self.bot.tree.walk_commands(guild=discord.Object(interaction.guild.id)),\n                *self.bot.tree.walk_commands(),\n                *self.bot.commands"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "071f4e8a8e20662353f4324e224872797ae141c645404a2cdf64530315674ca4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E122 continuation line missing indentation or outdented",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 509,
      "offset": 17,
      "length": 1,
      "code": {
        "startLine": 507,
        "length": 1,
        "offset": 135,
        "surroundingCode": "                x for x in (\n                *self.bot.tree.walk_commands(guild=discord.Object(interaction.guild.id)),\n                *self.bot.tree.walk_commands(),\n                *self.bot.commands\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "70a50f052ad458118f210b67da900c2a5b6e5d08a72add1fccfbb635fbe4b3de"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E122 continuation line missing indentation or outdented",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 510,
      "offset": 17,
      "length": 1,
      "code": {
        "startLine": 508,
        "length": 1,
        "offset": 154,
        "surroundingCode": "                *self.bot.tree.walk_commands(guild=discord.Object(interaction.guild.id)),\n                *self.bot.tree.walk_commands(),\n                *self.bot.commands\n            )\n                if isinstance(x, (app_commands.Command, commands.Command))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "fd75b0daa976a1bf3916ff2ed0c909277918bfb35243190ffc41d4261f2ad239"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E122 continuation line missing indentation or outdented",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 511,
      "offset": 13,
      "length": 1,
      "code": {
        "startLine": 509,
        "length": 1,
        "offset": 95,
        "surroundingCode": "                *self.bot.tree.walk_commands(),\n                *self.bot.commands\n            )\n                if isinstance(x, (app_commands.Command, commands.Command))\n            ],"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "1144af9a99343a4a35bb0de92c66f8ce8d9bba68824b4a0c0ea1ea219d90d409"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E401 multiple imports on one line",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 2,
      "offset": 16,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 30,
        "surroundingCode": "import asyncio\nimport datetime, pytz\nimport random\nimport string"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "352de6d99cdb8466d551016f12314d9c19bffe75bfa1f1e5349baf77ed421e34"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (123 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 87,
      "offset": 121,
      "length": 3,
      "code": {
        "startLine": 85,
        "length": 3,
        "offset": 342,
        "surroundingCode": "            - !! INCLUDE THESE SERVERS: Marketing Social Media Division, SSD Essay Revision, SSD Community Engagement, \n                                        SSD Notes Creation, SSD Chat Helping, Programming Simplified,\n                                        Programming Simplified Staff, (The Editorial Division), (The Division of Projects),\n                                        (Marketing Brand Strategy Division)\n            - !! Update announcements channels in configcat (not common.py) due of hack which deleted channels"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "a43d00450a44ba51351e4eb2d8f72d02914d34db0e0dd7a2eef3628ab4707132"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (125 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 165,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 163,
        "length": 1,
        "offset": 165,
        "surroundingCode": "\n            if acceptedChannel is not None:\n                acceptedChannelsStr += f\"- {acceptedChannel.name} from {acceptedChannel.guild.name} ({acceptedChannel.id})\\n\"\n            else:\n                noneChannels.append(channelID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "357e09611ac1940a36283a6ddaf7cad5e5d09d97678a64a7b702eecd5793a93e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (122 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 189,
      "offset": 25,
      "length": 98,
      "code": {
        "startLine": 187,
        "length": 98,
        "offset": 93,
        "surroundingCode": "            color=hex.ss_blurple,\n            title=\"Create Voting\",\n            description=\"Please provide the announcement-channel/s ID in which the voting should get sent. To send it to \"\n            \"multiple channels, separate the channels with commas (`,`).\"\n            \"\\n**Click on the link below to see a list of the accepted channels.**\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "1691627af487a862a7b6abac3059e38fff8e56facfa373cfa23a2fe82b80f12e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 239,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 237,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                try:\n                    await msgError.delete()\n                except:\n                    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "5aa34fc21d68fdcb346c83cf6363883a1e954a55c4d9180bbfcab86bd2833162"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 261,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 259,
        "length": 6,
        "offset": 93,
        "surroundingCode": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "32ee070dda744e136bc1464d9f0d7f2b897e453db37a26dac2b340d6708db6f8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 269,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 267,
        "length": 6,
        "offset": 93,
        "surroundingCode": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "94908a610d436d00c7a1b80125e021b52cb184742e2a5fbd118a9ba8ae841a2e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (123 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 275,
      "offset": 39,
      "length": 84,
      "code": {
        "startLine": 273,
        "length": 84,
        "offset": 130,
        "surroundingCode": "                        color=hex.red_error,\n                        title=\"Create Voting\",\n                        description=f\"Couldn't find one or more of the given text channels. Make sure the channel exists, \"\n                        f\"you provide the channel's ID and it's an accepted channel.\",\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "685edd799054ee9d81cb96a15ab4368c3e3fc78cfa9ff018e5262738e621bd56"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 314,
      "offset": 29,
      "length": 6,
      "code": {
        "startLine": 312,
        "length": 6,
        "offset": 124,
        "surroundingCode": "                            try:\n                                await msgError.delete(delay=7)\n                            except:\n                                pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "2aecb73d16378a0aa327a8f63f764d138e207571e3382c2c7693fed877ffd37e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 335,
      "offset": 29,
      "length": 6,
      "code": {
        "startLine": 333,
        "length": 6,
        "offset": 124,
        "surroundingCode": "                            try:\n                                await msgError.delete(delay=7)\n                            except:\n                                pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "df4cb950cb8cfffc7919176948606862c073808aa044ec2bcee3a2fd38ab6ef1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 367,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 365,
        "length": 6,
        "offset": 93,
        "surroundingCode": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "6127f430421e4c9690ba59e038d642e54563f91fd537e47c2632cb75e24a47ea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 383,
      "offset": 25,
      "length": 6,
      "code": {
        "startLine": 381,
        "length": 6,
        "offset": 114,
        "surroundingCode": "                        try:\n                            await msgTooLong.delete(delay=7)\n                        except:\n                            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "3aeaa0c69a5684cfbd39e524f1d1b01537456f1e3a69c3bc7702c3aaf77a1ab8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (125 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 393,
      "offset": 37,
      "length": 89,
      "code": {
        "startLine": 391,
        "length": 89,
        "offset": 129,
        "surroundingCode": "                        color=hex.ss_blurple,\n                        title=\"Create Voting\",\n                        description=\"Please provide the options for the voting by separating the options with commas (`,`). \"\n                        \"They will shown as buttons.\"\n                        f\"\\n\\nFrom the example on the last message, the options would be: \""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "0f0a845f9e6817bfa13e265b1a793a543690145540068ee6d987a6eaaf96a214"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 411,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 409,
        "length": 6,
        "offset": 93,
        "surroundingCode": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "65aaeacbf9f8472b3333e988397dae23ae4191f708186054e96bdef058bd7a45"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 438,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 436,
        "length": 6,
        "offset": 93,
        "surroundingCode": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "ac98f28cdb948d0af500f69b8a33e5a05a084ecd17e5a3878ff162e4c63a5cc5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 465,
      "offset": 25,
      "length": 6,
      "code": {
        "startLine": 463,
        "length": 6,
        "offset": 112,
        "surroundingCode": "                        try:\n                            await msgError.delete(delay=7)\n                        except:\n                            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "9e9149f0e38c0580fe1ed268f6b3a110c843d433f7b15edc9e73f6520de14b20"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (127 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 495,
      "offset": 41,
      "length": 87,
      "code": {
        "startLine": 493,
        "length": 87,
        "offset": 140,
        "surroundingCode": "                            color=hex.red_error,\n                            title=\"Create Voting\",\n                            description=\"Couldn't convert it to a datetime due of a too big expiration date. Please try again.\"\n                            f\"\\n\\n**Error:** `{_error.__class__.__name__}: {_error}`\",\n                        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "d29dfdbff4166f4190cb0849b471fa5754e98654cc09f3989d98bc87b7e70174"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 505,
      "offset": 25,
      "length": 6,
      "code": {
        "startLine": 503,
        "length": 6,
        "offset": 112,
        "surroundingCode": "                        try:\n                            await msgError.delete(delay=7)\n                        except:\n                            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "4a3945a871d954300aeab09d2a32aad9c63c4dfe3dfca49e30891ca2962c0d68"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 561,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 559,
        "length": 6,
        "offset": 69,
        "surroundingCode": "            try:\n                await msgError.delete()\n            except:\n                pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "cc4764e761ad44a3335cfe6a8df5491570879496ebf3440fbefc047c226eb66f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (139 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 573,
      "offset": 31,
      "length": 108,
      "code": {
        "startLine": 571,
        "length": 108,
        "offset": 97,
        "surroundingCode": "                color=hex.yellow,\n                title=\"Confirm\",\n                description=f\"Please confirm that you overviewed the voting message and that this message will be sent and ping @everyone \"\n                f\"in the following channel/s:\"\n                f\"\\n{strChannels}\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "11f71ddb8d737baace72b96b836fa4e2104221349a22498eac4e149b3fde7129"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/Blacklist.py",
      "language": "Python",
      "line": 77,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 75,
        "length": 6,
        "offset": 126,
        "surroundingCode": "                user = self.bot.get_user(p.id)\n                empty_list.append(f\"`{user.name}` -> `{user.id}`\")\n            except:\n                empty_list.append(f\"`{p}`\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "712cc7bafd84ebe9a200deba7046702955d1c458d80622579994f09c3a16c77e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E741 ambiguous variable name 'O'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 103,
      "offset": 5,
      "length": 1,
      "code": {
        "startLine": 101,
        "length": 1,
        "offset": 51,
        "surroundingCode": "    children: List[TicTacToeButton]\n    X = -1\n    O = 1\n    Tie = 2\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "ba6f44e7604d2a69dd5a3082de85b23ec7852272423b255701886b053fda451c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (124 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 514,
      "offset": 117,
      "length": 6,
      "code": {
        "startLine": 512,
        "length": 6,
        "offset": 187,
        "surroundingCode": "        pingembed.add_field(\n            name=\"System Resource Usage\",\n            value=f\"```diff\\n- CPU Usage: {psutil.cpu_percent()}%\\n- Memory Usage: {psutil.virtual_memory().percent}%\\n```\",\n            inline=False,\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "76989451be0f85575cbc175016923e2b9cf10393d7a7447c081f671fd3d7f766"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E131 continuation line unaligned for hanging indent",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 47,
      "offset": 17,
      "length": 1,
      "code": {
        "startLine": 45,
        "length": 1,
        "offset": 110,
        "surroundingCode": "        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)\n                .get()\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "b81ec70b3c8edcd726e05fcda7474630543594adb18508262572733fa2daac8d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E131 continuation line unaligned for hanging indent",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 91,
      "offset": 17,
      "length": 1,
      "code": {
        "startLine": 89,
        "length": 1,
        "offset": 110,
        "surroundingCode": "        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)\n                .get()\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "6124d760636c6069177fc49bfcd7f297959b73323376cc6d3d2f8f2077aacafe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E131 continuation line unaligned for hanging indent",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 121,
      "offset": 17,
      "length": 1,
      "code": {
        "startLine": 119,
        "length": 1,
        "offset": 122,
        "surroundingCode": "        WhitelistedPrefix: database.WhitelistedPrefix = (\n            database.WhitelistedPrefix.select()\n                .where(database.WhitelistedPrefix.id == num)\n                .get()\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "1e3ed41952cd9bd2042c9c9ad4563eeeed38ef5c5ee9749126b24d92bfe1153d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (215 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 92,
      "offset": 52,
      "length": 162,
      "code": {
        "startLine": 90,
        "length": 162,
        "offset": 110,
        "surroundingCode": "        )\n        await interaction.response.send_message(\n            f\"**Temporary Password:**\\n||{temppass}||\\n\\n**Instructions:**\\nGive the Username and the Temporary Password to the user and let them know they have **1 week** to setup 2FA before they get locked out. \",\n            ephemeral=True,\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "f19eea11250989e7d3bef6301217c1562c5ad99e15cb1622b99605a257140180"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 110,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 108,
        "length": 6,
        "offset": 81,
        "surroundingCode": "        try:\n            service.users().delete(userKey=email).execute()\n        except:\n            return await interaction.response.send_message(\n                f\"{interaction.user.mention} The account **{email}** does not exist.\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "c48c336d8557b805fd49bba3f6cac3c92e05cb02d62ef94e2ada48ceb71fd4d8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (238 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/RedirectService.py",
      "language": "Python",
      "line": 30,
      "offset": 118,
      "length": 105,
      "code": {
        "startLine": 28,
        "length": 105,
        "offset": 211,
        "surroundingCode": "        val = self.raOBJ.add_redirect(redirect_code, destination_url)\n        await ctx.send(\n            f\"Redirect added for {destination_url} with redirect path /{redirect_code}\\nCreated with the ID: {val.id}. In order to delete this redirect, you'll need this ID!\\n\\nAccess it at https://rs.schoolsimplified.org/{redirect_code}\"\n        )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "1c82ed13cc47e13ba7b5f904c856fe26cb7412074331e42ceef469ebae8c11f3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 29,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 27,
        "length": 6,
        "offset": 69,
        "surroundingCode": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "897c7faa3557a162c8af24d81df44f1403f39705318f28914bf80965eb6cd127"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 85,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 83,
        "length": 6,
        "offset": 114,
        "surroundingCode": "                database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n            )\n        except:\n            q = database.SandboxConfig.create(mode=\"None\")\n            q.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "23e5931e8ead62b1c29adda76a46e11c50077c48454a42be44af211db23a52cc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (2)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 90,
      "offset": 9,
      "length": 41,
      "code": {
        "startLine": 88,
        "length": 41,
        "offset": 10,
        "surroundingCode": "\n\n        self.channel_id = MAIN_ID.ch_controlPanel\n        self.categoryID = [\n            MAIN_ID.cat_privateVC,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "8ac2707871ad06c5ef6f5271b9eae43a81c8919665901e4d71a4377f1583d099"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (131 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 522,
      "offset": 119,
      "length": 8,
      "code": {
        "startLine": 520,
        "length": 8,
        "offset": 231,
        "surroundingCode": "                    embed = discord.Embed(\n                        title=f\"{Emoji.deny} Ownership Check Failed\",\n                        description=f\"You are not the owner of this voice channel, please ask the original owner <@{q.authorID}>, \"\n                        f\"to rename it!\",\n                        color=discord.Colour.dark_red(),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "8ad7c8a57b1c131fe81e916d00697fb952ad64b4f020edb9e6be271acc3f04e8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 752,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 750,
        "length": 6,
        "offset": 69,
        "surroundingCode": "                        .get()\n                    )\n                except:\n                    embed = discord.Embed(\n                        title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "0da1c84e6dc75b1d86feb2877b40c7732eb8599f72c35e4a38847893f1119a45"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (125 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 947,
      "offset": 25,
      "length": 100,
      "code": {
        "startLine": 945,
        "length": 100,
        "offset": 208,
        "surroundingCode": "                        title=f\"{Emoji.lock} Locked Voice Channel\",\n                        description=\"Your voice channel has been locked and now only authorized users can join it!\"\n                        \"\\n\\n**NOTE:** Moderators and other Administrators will always be allowed into your voice channels!\",\n                        color=discord.Colour.green(),\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "bf1d8462800473a20de1e55c7cf14085bd53495b9c194b43066e43046856ca10"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 965,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 963,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "00ca7e22c36855565e2429a37a69f755c8294e552db9cd2ea9fc82afb4d91c21"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1153,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1151,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "0a1f6d48ba3531445e2159cbdeb9d678280d716e43a8682cd605016fac11eb21"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1328,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1326,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "44464ff45d06940ce4e9b7cd6003eff1d9057c678ee13fd39cb5a1693007c3d7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1399,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1397,
        "length": 6,
        "offset": 103,
        "surroundingCode": "                    try:\n                        voiceLIMIT = int(new_voice_limit)\n                    except:\n                        return await ctx.send(f\"{Emoji.deny} Not a valid number!\")\n                    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "9a1ba8fe30b6ac5cf08bfff5ea9b5a888bfb0038562de0f6fb13984feb634d30"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (122 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1415,
      "offset": 51,
      "length": 71,
      "code": {
        "startLine": 1413,
        "length": 71,
        "offset": 187,
        "surroundingCode": "                            if voiceLIMIT > 4 and ctx.guild.id == MAIN_ID.g_main:\n                                return await ctx.send(\n                                    f\"{Emoji.warn} You can't increase the voice limit to something bigger then 4 members!\"\n                                )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "e8249306b73a91c343ab440defb677e2cc2102e7f384665b914a4adb5bb7ae6f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (123 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1427,
      "offset": 51,
      "length": 72,
      "code": {
        "startLine": 1425,
        "length": 72,
        "offset": 153,
        "surroundingCode": "                            if voiceLIMIT > 10:\n                                return await ctx.send(\n                                    f\"{Emoji.warn} You can't increase the voice limit to something bigger then 10 members!\"\n                                )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "0182537cfa15d0c6c818759686c9d656e17c7a361b71db187485c455c26c43f0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1449,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1447,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "c9d9aca922de2cca9ef0f0edee6d569393eb629bd884fbcb99cc951eef0725fb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (123 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1452,
      "offset": 41,
      "length": 82,
      "code": {
        "startLine": 1450,
        "length": 82,
        "offset": 171,
        "surroundingCode": "                        embed = discord.Embed(\n                            title=f\"{Emoji.invalidchannel} Ownership Check Failed\",\n                            description=\"This isn't a voice channel! Please use the command on an actual private channel!\",\n                            color=discord.Colour.red(),\n                        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "fbbc85982b20fda74df026ccb4c85a8b57f640285f6f4be7de908da5d8685f8a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1528,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1526,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "5bd0154f25297c9456f599a9d781e577646104a296bffc1a22b56a7e46f349b6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (127 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1563,
      "offset": 120,
      "length": 2,
      "code": {
        "startLine": 1561,
        "length": 2,
        "offset": 191,
        "surroundingCode": "        embed.add_field(\n            name=\"Creating a Private Channel\",\n            value=f\"The **only** way to create a voice channel is through **you** joining <#{self.StartVCIDs[ctx.guild.id]}>. \"\n            f\"There is **no command**, so please don't spam `+start` or whatever comes up in your head.\",\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "b0fa43db3b417f428c86ef0e0ff574468aeff2ba11235e7ad91422e35059914e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (139 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1568,
      "offset": 19,
      "length": 121,
      "code": {
        "startLine": 1566,
        "length": 121,
        "offset": 75,
        "surroundingCode": "        embed.add_field(\n            name=\"Permissions\",\n            value=\"The voice channel owner is the only person who can run any of the modifier commands. (Rename, Permit, Disconnect, etc) \"\n            \"\\n**No**, there is no way of adding extra users to manage the voice channel. \"\n            \"Anyone who tries will just get an error saying they'd have to redirect the command back to the original owner.\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "e5e0d8db167a76cfd72478fc4b7113174eb5ffa386d5923fcc2de008f4eb598d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (125 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1570,
      "offset": 13,
      "length": 112,
      "code": {
        "startLine": 1568,
        "length": 112,
        "offset": 244,
        "surroundingCode": "            value=\"The voice channel owner is the only person who can run any of the modifier commands. (Rename, Permit, Disconnect, etc) \"\n            \"\\n**No**, there is no way of adding extra users to manage the voice channel. \"\n            \"Anyone who tries will just get an error saying they'd have to redirect the command back to the original owner.\",\n            inline=False,\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "3155561c2a8050b0ef42d7aed43469e1bc3e33c0101a8a06b973c55d78aec09f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (130 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1576,
      "offset": 13,
      "length": 117,
      "code": {
        "startLine": 1574,
        "length": 117,
        "offset": 149,
        "surroundingCode": "            name=\"Rank Requirements\",\n            value=\"In order to create a private voice channel, you need to be level 10 or above. \"\n            \"Unfortunately, if you are not above level 10 you won't be able to join the Start Private VC channel and create one.\",\n            inline=False,\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "6157cfbe0c1feb2ef84b1478c7fc46b18850b06c8cf8363c3c9187ea5963dadf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 18,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 16,
        "length": 6,
        "offset": 69,
        "surroundingCode": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "e98bbffa6fcb3570ceedaeefb4fd770aca740e8d76d0c3ddb9e5cd9402255221"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E711 comparison to None should be 'if cond is None:'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 128,
      "offset": 23,
      "length": 2,
      "code": {
        "startLine": 126,
        "length": 2,
        "offset": 156,
        "surroundingCode": "        print(self.LobbyStartIDs[member.guild.id])\n        lobbyStart = member.guild.get_channel(self.LobbyStartIDs[member.guild.id])\n        if lobbyStart == None:\n            try:\n                lobbyStart = self.bot.get_channel("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "c1525f1d8254c70305019c79ddca99df2ccfd997955002ae91e166f5e6802490"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 184,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 182,
        "length": 6,
        "offset": 115,
        "surroundingCode": "                try:\n                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "f23131581b7c0b5e863c15fe54f3732672ce3fc321443a88ae41a993a7a754d4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 201,
      "offset": 25,
      "length": 6,
      "code": {
        "startLine": 199,
        "length": 6,
        "offset": 139,
        "surroundingCode": "                                tutorChannel, reason=\"Hogging the VC Start Channel.\"\n                            )\n                        except:\n                            await member.move_to(\n                                None, reason=\"Hogging the VC Start Channel.\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "07701521942b3f9e698068f5cf1b95a0ecbff9969be337446d74e268548330d1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (123 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 324,
      "offset": 41,
      "length": 82,
      "code": {
        "startLine": 322,
        "length": 82,
        "offset": 207,
        "surroundingCode": "                                        \"I've already went ahead and sent your session legnth \"\n                                        f\"in <#{TUT_ID.ch_hourLogs}>.\"\n                                        \"\\n**NOTE:** You'll still need to fill in your hours on the hour log spreadsheet.\",\n                                        color=discord.Color.green(),\n                                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "a083aebecf68e07976621d35bd664f3bfb5ba7266adf56343c6f7f3f8aadb026"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 404,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 402,
        "length": 6,
        "offset": 115,
        "surroundingCode": "                        reason=\"Maximum Channel Ownership Allowance [TRUE]\",\n                    )\n                except:\n                    await member.move_to(\n                        None, reason=\"Maximum Channel Ownership Allowance [FAIL]\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "48fab6d8fad9e3318fa1f3776a07861d0a280ebdc87e489807d8cd56f445e5f6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (163 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 434,
      "offset": 31,
      "length": 132,
      "code": {
        "startLine": 432,
        "length": 132,
        "offset": 125,
        "surroundingCode": "                    embed.add_field(\n                        name=\"BETA: Check out VC Games!\",\n                        value=\"https://timmy.schoolsimplified.org/tutorvc#voice-channel-activities-games\\nStart by running: `+startgame` once in a voice channel!\",\n                        inline=False,\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "b3b31e81b19d05e8ce45c85af32f940494db0424d47f0804f2926103836b3219"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (163 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 454,
      "offset": 31,
      "length": 132,
      "code": {
        "startLine": 452,
        "length": 132,
        "offset": 125,
        "surroundingCode": "                    embed.add_field(\n                        name=\"BETA: Check out VC Games!\",\n                        value=\"https://timmy.schoolsimplified.org/tutorvc#voice-channel-activities-games\\nStart by running: `+startgame` once in a voice channel!\",\n                        inline=False,\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "9713c3e3b63465aeb01a4ae146dd3a8b115a438e381472ae811bc9a6b685b388"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (126 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 15,
      "offset": 98,
      "length": 29,
      "code": {
        "startLine": 13,
        "length": 29,
        "offset": 167,
        "surroundingCode": "        self.bot = bot\n        self.est = pytz.timezone(\"US/Eastern\")\n        self.lastReset = parser.parse(\"14.03.2022 00:00:00 EST\", tzinfos={\"EST\": -4 * 3600})     # 14.03.2022 as default value\n        self.midnight = datetime.datetime.strptime(\"00:00:00\", \"%H:%M:%S\").time()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "b4e08a5c11da6d82e08d041c849d6e4c3f89fed26a85183f27ac48ea458fe51d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 36,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 34,
        "length": 6,
        "offset": 69,
        "surroundingCode": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "ac59d9250504c6bff9cda6a41d386b83b5f2b17647d17db0354640a7fc6a08bd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (130 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 128,
      "offset": 121,
      "length": 10,
      "code": {
        "startLine": 126,
        "length": 10,
        "offset": 186,
        "surroundingCode": "async def addLeaderboardProgress(member: discord.Member):\n    \"\"\"\n    Updates the data in the database table `StudyVCLeaderboard` of a specific member and adds level roles to the member if needed.\n\n    :param member: The member on which the progress should apply on."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "beb5c5dc07a1390a5eac9e61a9657bf7fc5d4fbadb25ffc84faf4243d42bb7ad"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (121 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 140,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 138,
        "length": 1,
        "offset": 230,
        "surroundingCode": "        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where(database.StudyVCLeaderboard.discordID == member.id)\n\n        isNewLvl = False"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "051478f077c91bfab25d358bacaf0a8b7a5a5dcfd203ede620ea6c8349457484"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 294,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 292,
        "length": 6,
        "offset": 70,
        "surroundingCode": "            try:\n                await member.send(dmMSG)\n            except:\n                pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "df41b812f8213aa464a09ec5059d4c184eb3e8c231728c1bee2a9467a82a5539"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (124 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 310,
      "offset": 121,
      "length": 4,
      "code": {
        "startLine": 308,
        "length": 4,
        "offset": 174,
        "surroundingCode": "async def endSession(member: discord.Member):\n    \"\"\"\n    Ends the session by kicking the user out of the voice channel and removing the user from the database table `StudyVCDB`.\n\n    :param member: The member which should get removed from the database."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "f303652146e9f64a93fdacae4fcf4db6243c42db4e26ba6e06a25272a45c2bf6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E113 unexpected indentation",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 331,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 329,
        "length": 4,
        "offset": 25,
        "surroundingCode": "    return True\n\n        elif newLvl < 40:\n            role = None  # TODO: get lvl 30 role and add to user\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "bc857d5365bb49daa27c6327f029afe99fe8da6ec4f307436208fc183da6abab"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 393,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 391,
        "length": 6,
        "offset": 70,
        "surroundingCode": "            try:\n                await member.send(dmMSG)\n            except:\n                pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "9e19b5db0903d68d7cba0ea4797901074e22b8b4ddf4b8b9c550ad973bf9bf24"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (124 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 409,
      "offset": 121,
      "length": 4,
      "code": {
        "startLine": 407,
        "length": 4,
        "offset": 174,
        "surroundingCode": "async def endSession(member: discord.Member):\n    \"\"\"\n    Ends the session by kicking the user out of the voice channel and removing the user from the database table `StudyVCDB`.\n\n    :param member: The member which should get removed from the database."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "0d5dff99eecb16acbb61bcfc0c1749cf2f8d63e190bdf8cc4bb6c13811dc1461"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (2)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 439,
      "offset": 5,
      "length": 39,
      "code": {
        "startLine": 437,
        "length": 39,
        "offset": 6,
        "surroundingCode": "\n\n    @commands.group(aliaseS=[\"study-todo\"])\n    async def studytodo(self, ctx: commands.Context):\n        if ctx.message.content == \"+studytodo\":"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "382a5a1f29931829e0a22cc9146d59bf3a2f2235dbb688d21169ee59e1557552"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E225 missing whitespace around operator",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 457,
      "offset": 99,
      "length": 2,
      "code": {
        "startLine": 455,
        "length": 2,
        "offset": 111,
        "surroundingCode": "        \"\"\"\n\n        query: database.StudyVCDB = database.StudyVCDB.select().where(database.StudyVCDB.discordID==ctx.author.id)\n        if query.exists():\n            query = query.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "bbb658372e0e819d8db4cf0ddde9a663b323b3897747464971e73127ea176bf2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (2)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 473,
      "offset": 5,
      "length": 20,
      "code": {
        "startLine": 471,
        "length": 20,
        "offset": 6,
        "surroundingCode": "\n\n    @studytodo.command()\n    async def end(self, ctx: commands.Context):\n        \"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "ac98255f80d095b6450bcf6056df6c237641ddeff6e351f109d1bfb9ef89c492"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (2)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 488,
      "offset": 5,
      "length": 20,
      "code": {
        "startLine": 486,
        "length": 20,
        "offset": 6,
        "surroundingCode": "\n\n    @studytodo.command()\n    async def list(self, ctx):\n        query = database.StudyToDo.select().where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "862b847ebb29752024c5563f0a29461af882cbb02c2f1755e14fca6cb7522efc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (3)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 550,
      "offset": 1,
      "length": 15,
      "code": {
        "startLine": 548,
        "length": 15,
        "offset": 2,
        "surroundingCode": "\n\ndef setup(bot):\n    bot.add_cog(StudyToDo(bot))\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "172b5187922b3e49ef3b0b6b61a440e53d363a267d1b36d7400a8a6a3ca01e82"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 86,
      "offset": 48,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 97,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "2cfe7af06d80e4cd7a180c51895a5608802051a870ac7210f4441c6decd63003"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 86,
      "offset": 50,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 99,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "97955274fb6c898f8052d12733f917832fb7182901e2ff323b5a2ffdadd091e7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 86,
      "offset": 66,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 115,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "214689725d869ac246cd2214ab54b63b4fc1e103ca8295a0a6c5713be790a3bf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 86,
      "offset": 68,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 117,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "0e72f11f315c8fdbfe2c3bcea838ea9526575e62952233136f6f23446f3c2161"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 86,
      "offset": 84,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 133,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "d316750219129aa1c427e7e8cfe542736cf750b72270a53b77a2723a7ccf9838"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 86,
      "offset": 86,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 135,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "965b82d01fb4f328e48477db8dcab420d9b47d068118771895c5ec1fd66cda8e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 86,
      "offset": 117,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 166,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "4d5623f0a60566d2eb823db7662022263ebb264ceb06f76e762f4dc30e205c44"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 86,
      "offset": 119,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 168,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "ed28f27f492a6b56f85908ef5ad7a32c666f360f1581331db33abe4a239e76b2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (127 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 86,
      "offset": 120,
      "length": 7,
      "code": {
        "startLine": 84,
        "length": 7,
        "offset": 169,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "474d2aa921d0f0d9fd81637d8bd937661a8f4a3496a527a30379814e4a768c70"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (3)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 104,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 102,
        "length": 28,
        "offset": 2,
        "surroundingCode": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "7e43e31e7c0b9dc84508cb33c4caa931e0f245ea5f002d5cf603734ae9b10062"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (3)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 116,
      "offset": 1,
      "length": 34,
      "code": {
        "startLine": 114,
        "length": 34,
        "offset": 2,
        "surroundingCode": "\n\nclass StudyVCUpdate(commands.Cog):\n    def __init__(self, bot: commands.Bot):\n        self.bot = bot"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "07a4dc7a54f52ffe067b42560b429528a3ba37f1ad867cf7f91ff0e31fd0db92"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (2)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 126,
      "offset": 9,
      "length": 27,
      "code": {
        "startLine": 124,
        "length": 27,
        "offset": 10,
        "surroundingCode": "\n\n        self.StudyVCChecker.start()\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "68403071d38c26712606ac5e43aa6575ff16605c594ef5a7e3e187797b75a6b7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (2)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 129,
      "offset": 5,
      "length": 21,
      "code": {
        "startLine": 127,
        "length": 21,
        "offset": 6,
        "surroundingCode": "\n\n    def cog_unload(self):\n        self.StudyVCChecker.stop()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "23b9a6305ac87f218e3ecdcd053c557237dd64c8b5f4b5ffc5e1e7dbaffa22b3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (121 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 184,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 182,
        "length": 1,
        "offset": 247,
        "surroundingCode": "                    goal, renewal = await setNewStudyGoal(self, console, member, True)\n                    await console.send(\n                                f\"{member.mention} Successfully started your study session! Your study goal is '{goal}'.\"\n                                f\"n\\n**That's it!** Make sure you come back at {renewal.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "25252596bad2de09c9f6fc78c845e785c642b39733775da21c5ed620949821c2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (140 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 185,
      "offset": 111,
      "length": 29,
      "code": {
        "startLine": 183,
        "length": 29,
        "offset": 272,
        "surroundingCode": "                    await console.send(\n                                f\"{member.mention} Successfully started your study session! Your study goal is '{goal}'.\"\n                                f\"n\\n**That's it!** Make sure you come back at {renewal.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "24e1df911c12a8db40228d34dd89fe0532824817429fbbd17a97d5c8a0430a99"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (188 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 190,
      "offset": 118,
      "length": 11,
      "code": {
        "startLine": 188,
        "length": 11,
        "offset": 230,
        "surroundingCode": "                elif dateObj - datetime.now(EST) < timedelta(minutes=5):\n                    await console.send(\n                        f\"{member.mention} Your study session is ending in **less than 5 minutes**. (Ends at: {query.RenewalTime.strftime(r'%I:%M %p')})\\n\\nMaybe renew your study session?\"\n                    )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "e599ff1b4f32ef6f88c1ca208a645dd2caea6e427fed13c39ce845a675de9eb6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (184 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 195,
      "offset": 121,
      "length": 11,
      "code": {
        "startLine": 193,
        "length": 11,
        "offset": 182,
        "surroundingCode": "                else:\n                    await console.send(\n                        f\"{member.mention} You already have a study session going!\\n\\nMake sure you come back at {query.RenewalTime.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "1ce3f54b5803755aa9da420dbc3a8a20d979a4c96fcfc0e6c721f3e69f89a748"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (2)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 199,
      "offset": 5,
      "length": 64,
      "code": {
        "startLine": 197,
        "length": 64,
        "offset": 6,
        "surroundingCode": "\n\n    @tasks.loop(seconds=10) # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "21f934a9378359b2fff6cd5cf8bc998df4d5df92a47486c9bca37d25010c8bcb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E261 at least two spaces before inline comment",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 199,
      "offset": 28,
      "length": 1,
      "code": {
        "startLine": 197,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\n\n    @tasks.loop(seconds=10) # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "868ae6e0cf1a41f8f493bc4d11dcefd7c298a2c858af24a0e5a090f54a9d147c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (132 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 220,
      "offset": 103,
      "length": 29,
      "code": {
        "startLine": 218,
        "length": 29,
        "offset": 266,
        "surroundingCode": "                    await StudyVCConsoleObj.send(\n                        f\"{member.mention} Successfully started your study session! Your study goal is '{goal}'.\"\n                        f\"n\\n**That's it!** Make sure you come back at {renewal.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "2f4e9a2e1d3bf16cd076ec513a372a2e681ade640108f9965b55e7f8409d97fc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (174 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 225,
      "offset": 116,
      "length": 8,
      "code": {
        "startLine": 223,
        "length": 8,
        "offset": 230,
        "surroundingCode": "            elif dateObj - datetime.now(EST) < timedelta(minutes=5):\n                await StudyVCConsoleObj.send(\n                    f\"{member.mention} Your study session is ending in **less than 5 minutes**. (Ends at: {dateObj.strftime(r'%I:%M %p')})\\n\\nMaybe renew your study session?\"\n                )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "c54b221edab0f2291eef60e5acf46ce61130baa1b65f9f8e8ea299d5c62e4cd7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (5)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 232,
      "offset": 1,
      "length": 21,
      "code": {
        "startLine": 230,
        "length": 21,
        "offset": 6,
        "surroundingCode": "\n    \nasync def setup(bot):\n    await bot.add_cog(StudyVCUpdate(bot))\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "80a5976a71ae86d797301fa4ae9a2d2f261942db8169955497957390e2e87845"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 86,
      "offset": 48,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 97,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "1513c4b5a07d4b59408455ef14651df1c5b3c0833bf3f18762f13a120640a1a8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 86,
      "offset": 50,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 99,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "d84cff8cfb9f8d395f4d159a542ac158461b270119905be005873c0e6bb031f9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 86,
      "offset": 66,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 115,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "375addad5138fe172bcfc0e400b085163c1bcd45ec0bf03c2b161a18f1d02895"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 86,
      "offset": 68,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 117,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "db558b4238e195ddefcc8b4fb57803bbc95a4ed0d4b8143c98afccdfe1cf1f29"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 86,
      "offset": 84,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 133,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "7f6c1982ffa440a8663f0b2f26da240ae3f8d0f380a62be5d8ef11193589bb55"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 86,
      "offset": 86,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 135,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "c9dc40b219b500cc69d76e2cae71f5db81d36be5d9a72c69066ec13ad03defe4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 86,
      "offset": 117,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 166,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "695f1c5ae0ce0b11a8860637c72980fde4ba7db46228cc1ec1e9939b8da99c70"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 86,
      "offset": 119,
      "length": 1,
      "code": {
        "startLine": 84,
        "length": 1,
        "offset": 168,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "a66d78343d4337169288ba62caabb7e71a4db0ada22272a426f5fd4d64ddbebb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (127 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 86,
      "offset": 120,
      "length": 7,
      "code": {
        "startLine": 84,
        "length": 7,
        "offset": 169,
        "surroundingCode": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "511cb880b39ba6dc50465f70bed5b2f6e51c33b36e05190bac5dbfccba728a20"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (3)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 104,
      "offset": 1,
      "length": 28,
      "code": {
        "startLine": 102,
        "length": 28,
        "offset": 2,
        "surroundingCode": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "1ac6fb24ab12dc7c6aca716473c1abe849d8be39479743a50b1ec30e7d6ea8b7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (3)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 116,
      "offset": 1,
      "length": 34,
      "code": {
        "startLine": 114,
        "length": 34,
        "offset": 2,
        "surroundingCode": "\n\nclass StudyVCUpdate(commands.Cog):\n    def __init__(self, bot: commands.Bot):\n        self.bot = bot"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "95fb8319078d704324c45cbf3c87f6419ceed5165fe2828743517b11d09a1135"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (2)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 126,
      "offset": 9,
      "length": 27,
      "code": {
        "startLine": 124,
        "length": 27,
        "offset": 10,
        "surroundingCode": "\n\n        self.StudyVCChecker.start()\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "425e344e4657277bcb8ef0018e22459fb8d99a4f1e14671be5b6b7ae2d486db5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (2)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 129,
      "offset": 5,
      "length": 21,
      "code": {
        "startLine": 127,
        "length": 21,
        "offset": 6,
        "surroundingCode": "\n\n    def cog_unload(self):\n        self.StudyVCChecker.stop()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "8c5f1ecf22833e4153f4bad402a95c450fc3e0e4889b5c1fa2fc58876aff6f20"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (121 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 181,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 179,
        "length": 1,
        "offset": 247,
        "surroundingCode": "                    goal, renewal = await setNewStudyGoal(self, console, member, True)\n                    await console.send(\n                                f\"{member.mention} Successfully started your study session! Your study goal is '{goal}'.\"\n                                f\"n\\n**That's it!** Make sure you come back at {renewal.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "73d1ca41de1dd23cf642b4e603e143657c906f3f5bb131031275e7609b4efef9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (140 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 182,
      "offset": 111,
      "length": 29,
      "code": {
        "startLine": 180,
        "length": 29,
        "offset": 272,
        "surroundingCode": "                    await console.send(\n                                f\"{member.mention} Successfully started your study session! Your study goal is '{goal}'.\"\n                                f\"n\\n**That's it!** Make sure you come back at {renewal.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "e24759c7874edc8145c2637e0099480bef88c4aae68a8b77a4ef464ddad6de2d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (188 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 187,
      "offset": 118,
      "length": 11,
      "code": {
        "startLine": 185,
        "length": 11,
        "offset": 230,
        "surroundingCode": "                elif dateObj - datetime.now(EST) < timedelta(minutes=5):\n                    await console.send(\n                        f\"{member.mention} Your study session is ending in **less than 5 minutes**. (Ends at: {query.RenewalTime.strftime(r'%I:%M %p')})\\n\\nMaybe renew your study session?\"\n                    )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "29d90e46a8ca81369dc6b48553677e5dcb29678686dfff4f986f8ae4de8f52a6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (184 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 192,
      "offset": 121,
      "length": 11,
      "code": {
        "startLine": 190,
        "length": 11,
        "offset": 182,
        "surroundingCode": "                else:\n                    await console.send(\n                        f\"{member.mention} You already have a study session going!\\n\\nMake sure you come back at {query.RenewalTime.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "49a2889fdc93733f911c66b9fffd1448871c5f3003f3a1836fa349279c73271f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (2)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 196,
      "offset": 5,
      "length": 64,
      "code": {
        "startLine": 194,
        "length": 64,
        "offset": 6,
        "surroundingCode": "\n\n    @tasks.loop(seconds=10) # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "e56f2f5b61abff26c7934653cb86bea029507cd6b8ae323a94f6a16a6ceabbfe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E261 at least two spaces before inline comment",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 196,
      "offset": 28,
      "length": 1,
      "code": {
        "startLine": 194,
        "length": 1,
        "offset": 29,
        "surroundingCode": "\n\n    @tasks.loop(seconds=10) # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "72fa47e8b81f59ac24227592e98334ced107886252ea6022dc4c2e3b79d0912b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (132 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 217,
      "offset": 103,
      "length": 29,
      "code": {
        "startLine": 215,
        "length": 29,
        "offset": 266,
        "surroundingCode": "                    await StudyVCConsoleObj.send(\n                        f\"{member.mention} Successfully started your study session! Your study goal is '{goal}'.\"\n                        f\"n\\n**That's it!** Make sure you come back at {renewal.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "47deb83131cc53626967403bad36a9b2e289eaeab655ff18f9badb637162311b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (174 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 222,
      "offset": 116,
      "length": 8,
      "code": {
        "startLine": 220,
        "length": 8,
        "offset": 230,
        "surroundingCode": "            elif dateObj - datetime.now(EST) < timedelta(minutes=5):\n                await StudyVCConsoleObj.send(\n                    f\"{member.mention} Your study session is ending in **less than 5 minutes**. (Ends at: {dateObj.strftime(r'%I:%M %p')})\\n\\nMaybe renew your study session?\"\n                )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "40445937ffb80ebe8e051eed2608ad7c2acff479077edff666fc6eff5ff66fa7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (5)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 229,
      "offset": 1,
      "length": 15,
      "code": {
        "startLine": 227,
        "length": 15,
        "offset": 6,
        "surroundingCode": "\n    \ndef setup(bot):\n    bot.add_cog(StudyVCUpdate(bot))\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "a258eafe1d8f66af9e4a44c342b2d576e891f44c36f4bca036c36c0b17661b65"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 84,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 82,
        "length": 6,
        "offset": 98,
        "surroundingCode": "            try:\n                await interaction.response.send_message(embed=embed)\n            except:\n                await interaction.channel.send(embed=embed)\n        else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "a45065bdb66934f2abfaa069754ea5c926bc4b9918ea744076ab28d6f442049c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 115,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 113,
        "length": 6,
        "offset": 110,
        "surroundingCode": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n            else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "ea5735938e23d4f31fa787824a4819b1ada7afd78f3075e15556a4fac57eaf79"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 125,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 123,
        "length": 6,
        "offset": 110,
        "surroundingCode": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "2335d4fc729a55251c32b13e89c7185b4e85aefea97459f61c1c5de2c162f008"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 55,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 53,
        "length": 6,
        "offset": 87,
        "surroundingCode": "                try:\n                    await tutor.send(embed=embed)\n                except:\n                    await botch.send(\n                        f\"Unable to send a reminder DM to you {tutor.mention}!\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "85b39a3614066cd1bb766bad7e982e23016b950fa812a305ac352845360b724d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 62,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 60,
        "length": 6,
        "offset": 89,
        "surroundingCode": "                try:\n                    await student.send(embed=embed)\n                except:\n                    print(f\"Unable to Send a Reminder DM to: {student.id}\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "092a10a2c90842452e1c6702352a3f946b9c77a6a5e20927d3150e889ab24ba2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (3)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 152,
      "offset": 1,
      "length": 35,
      "code": {
        "startLine": 150,
        "length": 35,
        "offset": 2,
        "surroundingCode": "\n\nasync def setup(bot: commands.Bot):\n    await bot.add_cog(TutorBotLoop(bot))\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "61474eb7df3d93d07edf45225245edd3c340b6b50fb7248403d0cb4563a87378"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (137 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 49,
      "offset": 121,
      "length": 17,
      "code": {
        "startLine": 47,
        "length": 17,
        "offset": 125,
        "surroundingCode": "\n\"\"\"\nif not (RoleOBJ.id == MAIN_ID.r_chatHelper or RoleOBJ.id == MAIN_ID.r_leadHelper) and not channel.category.id == MAIN_ID.cat_essayTicket:\n                    if RoleOBJ.id == MAIN_ID.r_essayReviser:\n                        if channel.category.id == MAIN_ID.cat_essayTicket or channel.category.id == MAIN_ID.cat_englishTicket:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "c1fd6754241b8e4426debb735dd00696a364f8ffb8982fc9dd07fbf8d7db00e6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (126 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 51,
      "offset": 121,
      "length": 6,
      "code": {
        "startLine": 49,
        "length": 6,
        "offset": 319,
        "surroundingCode": "if not (RoleOBJ.id == MAIN_ID.r_chatHelper or RoleOBJ.id == MAIN_ID.r_leadHelper) and not channel.category.id == MAIN_ID.cat_essayTicket:\n                    if RoleOBJ.id == MAIN_ID.r_essayReviser:\n                        if channel.category.id == MAIN_ID.cat_essayTicket or channel.category.id == MAIN_ID.cat_englishTicket:\n\"\"\"\nMasterSubjectOptions = ["
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "58cceec7b91219deb4327e78a88c0c65ae48efc021dc235684f1f548fbeb0b9e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E711 comparison to None should be 'if cond is not None:'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 136,
      "offset": 17,
      "length": 2,
      "code": {
        "startLine": 134,
        "length": 2,
        "offset": 75,
        "surroundingCode": "    embed.add_field(name=\"Transcript Link\", value=S3_URL)\n\n    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "23be35db1400a3bd4b3c5f8e612a6ba5bde1dc8304f25367b4020f0fa08e3689"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E711 comparison to None should be 'if cond is not None:'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 138,
      "offset": 24,
      "length": 2,
      "code": {
        "startLine": 136,
        "length": 2,
        "offset": 95,
        "surroundingCode": "    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:\n        for UAuthor in responsesauthor:\n            try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "673431f643a16aca3beb531f6a35b59f7e4248672cf3e699f055167f14e8ec12"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 151,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 149,
        "length": 6,
        "offset": 66,
        "surroundingCode": "    try:\n        os.remove(f\"transcript-{channel.name}.html\")\n    except:\n        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "df9bd5c6944930736eff5a80e265428c13e92581850e22d1dcf97f594c514c4d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E711 comparison to None should be 'if cond is None:'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 154,
      "offset": 17,
      "length": 2,
      "code": {
        "startLine": 152,
        "length": 2,
        "offset": 30,
        "surroundingCode": "        pass\n\n    if response == None:\n        msg = S3_URL\n    return msg, transcript_file, S3_URL"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "2d02f1cab8447c029bca5bf96ac0611d69395725af01f27114acda297ada273b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (137 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 472,
      "offset": 33,
      "length": 104,
      "code": {
        "startLine": 470,
        "length": 104,
        "offset": 117,
        "surroundingCode": "                embed = discord.Embed(\n                    title=\"2) Send Question\",\n                    description=\"What is your question or topic?\\nDo not send a URL. You must send the question or topic in plain text.\",\n                    color=discord.Color.blue(),\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "6d39882c164f2184f1d5c904efd35c70ba97db8b8ac66da507827c4072092ec8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (171 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 488,
      "offset": 33,
      "length": 138,
      "code": {
        "startLine": 486,
        "length": 138,
        "offset": 125,
        "surroundingCode": "                embed = discord.Embed(\n                    title=\"3) Send Assignment Title\",\n                    description=\"**Acceptable Forms of Proof:**\\n1) Images/Attachments.\\n2) URL's such as Gyazo.\\n\\nSend them all in one message for them to all be sent.\",\n                    color=discord.Color.blue(),\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "20b24d011b1384f585994130c1091aabb832dc7d2d0463424f8441bdc779438b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (141 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 492,
      "offset": 26,
      "length": 116,
      "code": {
        "startLine": 490,
        "length": 116,
        "offset": 77,
        "surroundingCode": "                )\n                embed.set_footer(\n                    text=\"We need images/urls as proof that you aren't cheating, School Simplified does not offer assistance on assessments.\"\n                )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "9f3750d140516209afaee16ea3f7d369ea79acfa41ad47b0ac2d11c0295000a7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (134 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 726,
      "offset": 121,
      "length": 15,
      "code": {
        "startLine": 724,
        "length": 15,
        "offset": 131,
        "surroundingCode": "        )\n\n    \"\"\"@discord.ui.button(label=\"Create Ticket\", style=discord.ButtonStyle.blurple, emoji=\"📝\", custom_id=\"persistent_view:ticketdrop\")\n    async def confirm(self, button: discord.ui.Button, interaction: discord.Interaction):\n        print(\"hi\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "f71c2cc0554ac56b469ad6a4671c73f7822fa6e66fcc29391f7cdb81a03b040a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 815,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 813,
        "length": 6,
        "offset": 103,
        "surroundingCode": "                    f\"{author.mention}\\n\", embed=embed, view=ButtonViews\n                )\n            except:\n                try:\n                    await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "554a36aea993bcf6f3e43a4da34557c76487f5541f9dbdf3d33908a76c4899a2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 820,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 818,
        "length": 6,
        "offset": 115,
        "surroundingCode": "                        f\"{author.mention}\\n\", embed=embed, view=ButtonViews\n                    )\n                except:\n                    await channel.send(\n                        f\"{author.mention}\\n\", embed=embed, view=ButtonViews"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "0d746cbeccc07e704b77a70f0fec5cb5b56bc46e49251b8fdda8c44a911b91cb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (122 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1020,
      "offset": 93,
      "length": 29,
      "code": {
        "startLine": 1018,
        "length": 29,
        "offset": 157,
        "surroundingCode": "            )\n            msgO = await interaction.channel.send(\n                f\"{author.mention}\\nPlease wait, generating a transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )\n            TicketOwner = self.bot.get_user(query.authorID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "e0afae177464206f4e46f85d47f3f247230ab70fc6e32fc4fd6cd0db19ac775b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (123 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1075,
      "offset": 119,
      "length": 3,
      "code": {
        "startLine": 1073,
        "length": 3,
        "offset": 176,
        "surroundingCode": "                try:\n                    await msgO.edit(\n                        f\"{author.mention}\\nTranscript Created!\\n>>> `Jump Link:` {msg.jump_url}\\n`Transcript Link:` {url}\"\n                    )\n                except Exception:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "8c3529bc77b0b733be8b34cf3cffdb300df9dcf6ffe3e3e6d92850d875d3266a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (123 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1079,
      "offset": 119,
      "length": 3,
      "code": {
        "startLine": 1077,
        "length": 3,
        "offset": 189,
        "surroundingCode": "                except Exception:\n                    await msgO.edit(\n                        f\"{author.mention}\\nTranscript Created!\\n>>> `Jump Link:` {msg.jump_url}\\n`Transcript Link:` {url}\"\n                    )\n            await asyncio.sleep(5)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "2c42c1a130613421c15c47daf124f4391424b7d1b18c8de581c454ee34dc9386"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (122 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1231,
      "offset": 121,
      "length": 2,
      "code": {
        "startLine": 1229,
        "length": 2,
        "offset": 257,
        "surroundingCode": "        {Emoji.schoolsimplified} **__How to Get School Help:__**\n            > {Emoji.ssarrow} Click on the button to start the process.\n            > {Emoji.ssarrow} In your direct messages with <@852251896130699325>, select the sub-topic you need help with.\n            > {Emoji.ssarrow}Send the question in your direct messages as per the bot instructions.\n            > {Emoji.ssarrow} Send a picture of your assignment title in your direct messages as per the bot instructions.\"\"\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "8b8562124e9276c359641e5ffc35d0a42259bb4ec41fc5c1b2a761d6a93ab430"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (126 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1233,
      "offset": 30,
      "length": 93,
      "code": {
        "startLine": 1231,
        "length": 93,
        "offset": 252,
        "surroundingCode": "            > {Emoji.ssarrow} In your direct messages with <@852251896130699325>, select the sub-topic you need help with.\n            > {Emoji.ssarrow}Send the question in your direct messages as per the bot instructions.\n            > {Emoji.ssarrow} Send a picture of your assignment title in your direct messages as per the bot instructions.\"\"\",\n            view=TicketButton(self.bot),\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "da017952a293111b2b335d18b40af9249dfb65204549c39e652f87d32418cb63"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (3)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 35,
      "offset": 1,
      "length": 38,
      "code": {
        "startLine": 33,
        "length": 38,
        "offset": 2,
        "surroundingCode": "\n\nclass VerificationStaff(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "3454746df37fbcc403cd8431bae737037a5231bb2bca324ceea89b706606a760"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (142 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 81,
      "offset": 25,
      "length": 117,
      "code": {
        "startLine": 79,
        "length": 117,
        "offset": 106,
        "surroundingCode": "                try:\n                    await interaction.response.send_message(\n                        \"An error occurred while trying to verify your status, please contact a staff member! (Error Code: TM-NOMEMBERFOUND)\",\n                        ephemeral=True,\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "62367489dc4ed1b242ecfe3781e1117a439f50845d367f2b6b0239abfda7292f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 91,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 89,
        "length": 6,
        "offset": 90,
        "surroundingCode": "                            ephemeral=True,\n                        )\n                    except:\n                        await interaction.channel.send(\n                            f\"{interaction.user.mention} An error occurred while \""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "041855e9a2ae96009ebdbdd2861dde3f385cbd533136ea0c817d6b04bf6464c2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 184,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 182,
        "length": 6,
        "offset": 116,
        "surroundingCode": "                            \"You have been verified!\", ephemeral=True\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} You have been verified!\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "ce249c082eb764d8a28c89d2b33fbd237e4bde47d219c0ae0b06135c777b0c7b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E722 do not use bare 'except'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 223,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 221,
        "length": 6,
        "offset": 90,
        "surroundingCode": "                            ephemeral=True,\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} I didn't seem to find any roles to give you, please try \""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "9e8199c8fdf750c9d4a2dff90b2a2f7877e27c40100841c64f62bef09d37b1a2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (125 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 239,
      "offset": 87,
      "length": 37,
      "code": {
        "startLine": 237,
        "length": 37,
        "offset": 151,
        "surroundingCode": "        embed = discord.Embed(\n            title=\"Verification\",\n            description=f\"To get your staff roles, go to <#{DIGITAL_ID.ch_waitingRoom}> and say what teams you are part of!\",\n            color=discord.Colour.blurple(),\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "c94aea002578d37ac9d5d9b67edb792af7507af112aa28dda3b41ba5569a621b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (160 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 205,
      "offset": 70,
      "length": 75,
      "code": {
        "startLine": 203,
        "length": 75,
        "offset": 175,
        "surroundingCode": "for deprecationFile in deprecatedFiles:\n    if os.path.exists(\"gsheetsadmin/{}\".format(deprecationFile)):\n        print(f\"{bcolors.WARNING}Authentication via {deprecationFile} is deprecated. Consider removing this file and using sstimmy.json instead.{bcolors.ENDC}\")\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "83ee4d07fce063fada6688f9f23fd6bd637f1775001b667dc87cf009fa13ffad"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (3)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 209,
      "offset": 1,
      "length": 72,
      "code": {
        "startLine": 207,
        "length": 72,
        "offset": 2,
        "surroundingCode": "\n\n@bot.slash_command(description=\"Play a game of TicTacToe with someone!\")\nasync def tictactoe(ctx, user: Option(discord.Member, \"Enter an opponent you want\")):\n    if ctx.channel.id != MAIN_ID.ch_commands:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "8f664c567ae0a75b4bca878d32f7a8bc85357570cdf719570420fe5a841233d0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E265 block comment should start with '# '",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 274,
      "offset": 9,
      "length": 20,
      "code": {
        "startLine": 272,
        "length": 20,
        "offset": 51,
        "surroundingCode": ") as bar:\n    for ext in get_extensions():\n        #start = time.time()\n        try:\n            bot.load_extension(ext)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "8e9ffa0c9eb17d5e646848b40175f923604664b618ab47607aabb23c7d8d5fe3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E265 block comment should start with '# '",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 282,
      "offset": 9,
      "length": 18,
      "code": {
        "startLine": 280,
        "length": 18,
        "offset": 99,
        "surroundingCode": "        except discord.ExtensionNotFound:\n            raise discord.ExtensionNotFound(ext)\n        #end = time.time()\n        #print(f\"{ext} loaded in {end - start:.2f} seconds\")\n        bar()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "aec5254a3e1ce63a48e9b97faaec1d6deed81fa0d30e4d1978851f7a4b07b2f0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E265 block comment should start with '# '",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 283,
      "offset": 9,
      "length": 52,
      "code": {
        "startLine": 281,
        "length": 52,
        "offset": 84,
        "surroundingCode": "            raise discord.ExtensionNotFound(ext)\n        #end = time.time()\n        #print(f\"{ext} loaded in {end - start:.2f} seconds\")\n        bar()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "11a8854c2cb9ddbc90ff44a41bcd280911446fbfe91026094b5cf3371d20189a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: W292 no newline at end of file",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "cog_tests.py",
      "language": "Python",
      "line": 41,
      "offset": 29,
      "length": 1,
      "code": {
        "startLine": 39,
        "length": 1,
        "offset": 57,
        "surroundingCode": "\ndef pytest_sessionfinish():\n    print(\"Session finished\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "63175e517280a615bfd7e13471e268a9849d2f246eb27628da06e2abfcd555c7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'Union\\[str, bytes\\]', got 'dict' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 223,
      "offset": 40,
      "length": 7,
      "code": {
        "startLine": 221,
        "length": 7,
        "offset": 108,
        "surroundingCode": "            os.remove(\"cred_file.json\")\n        elif type_auth == 3:\n            payload: dict = json.loads(payload)\n            creds = ServiceAccountCredentials.from_json_keyfile_dict(payload, scopes)\n        try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "a77dc4deb7bfedaf6e2cc3f38adf24dbe467f4a857806f2924e4fe9c279a3675"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[WhitelistedPrefix\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/CommandsOnly.py",
      "language": "Python",
      "line": 21,
      "offset": 22,
      "length": 26,
      "code": {
        "startLine": 19,
        "length": 26,
        "offset": 129,
        "surroundingCode": "        if message.channel.id == MAIN_ID.ch_modCommands and not message.author.bot:\n            prefix = []\n            for p in database.WhitelistedPrefix:\n                prefix.append(p.prefix)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "72ae0a2837a00abd7af94793d28f40b41306caa327be2fb045284925c0fa633b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type '_SpecialForm', got '(_command: Any) -\\> str' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 515,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 513,
        "length": 7,
        "offset": 50,
        "surroundingCode": "            ],\n            sort=True,\n            key=key\n        )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "eba5d151a116018cf652a54565c360a7fc4046f3ae48013232a3fe113d6d4435"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[Blacklist\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/Blacklist.py",
      "language": "Python",
      "line": 73,
      "offset": 18,
      "length": 18,
      "code": {
        "startLine": 71,
        "length": 18,
        "offset": 97,
        "surroundingCode": "        await interaction.response.defer(thinking=True)\n        empty_list = []\n        for p in database.Blacklist:\n            try:\n                user = self.bot.get_user(p.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "5e4c05d08dcfdab7fa7c15ef4b2c6da8337e16262f062c5f77362d4be8268c7a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[WhitelistedPrefix\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 141,
      "offset": 22,
      "length": 8,
      "code": {
        "startLine": 139,
        "length": 8,
        "offset": 44,
        "surroundingCode": "        response = []\n\n        for entry in PrefixDB:\n\n            if entry.status is True:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "77ab2f56a64007ce3ce9c6b775f6d1786a4316832dc709608859c3a3cdfcbbcb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[StudyVCDB\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 207,
      "offset": 18,
      "length": 18,
      "code": {
        "startLine": 205,
        "length": 18,
        "offset": 95,
        "surroundingCode": "        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "d0fd5e13aee61c62b2d4ee29a7fd97339835b9d12ffa9e787f6512452b7c1978"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[StudyVCDB\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 204,
      "offset": 18,
      "length": 18,
      "code": {
        "startLine": 202,
        "length": 18,
        "offset": 103,
        "surroundingCode": "        StudyVCConsoleObj = await StudyVCGuildObj.fetch_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "319c95e17a888d5e34d3b0763edffcac78d0726d7b9fa4804b1dae3e04acf794"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 62,
      "offset": 30,
      "length": 5,
      "code": {
        "startLine": 60,
        "length": 5,
        "offset": 81,
        "surroundingCode": "                list_ten = []\n                i = 0\n                for entry in query:\n                    if not isinstance(entry.Date, datetime):\n                        entry.Date = datetime.fromisoformat(entry.Date)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "cc49556443f9021543c0ea076a2d10537d20f04154e0407129e4e5c27c79747e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 152,
      "offset": 26,
      "length": 5,
      "code": {
        "startLine": 150,
        "length": 5,
        "offset": 69,
        "surroundingCode": "            list_ten = []\n            i = 0\n            for entry in query:\n\n                if not isinstance(entry.Date, datetime):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "9bdaf1ca2d0703279207bfeb949babe886bb3daff467fb1f116318deff3420ed"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[TutorBot_Sessions\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 24,
      "offset": 22,
      "length": 26,
      "code": {
        "startLine": 22,
        "length": 26,
        "offset": 92,
        "surroundingCode": "    async def tutorsession(self):\n        now = datetime.now(self.est)\n        for entry in database.TutorBot_Sessions:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.Date)\n            val = int((TutorSession - now).total_seconds())"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "755647e1ad1a8c4604de15082fd4f1b3000c6c7f042942daca15e5b869a9a72e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[TutorSession_GracePeriod\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 123,
      "offset": 22,
      "length": 33,
      "code": {
        "startLine": 121,
        "length": 33,
        "offset": 104,
        "surroundingCode": "    async def tutorsession_graceperiod(self):\n        now = datetime.now(self.est)\n        for entry in database.TutorSession_GracePeriod:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.GP_DATE)\n            val = int((TutorSession - now).total_seconds())"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "78a1b9dd7bcd0f0bf4a68d3bf8dfcdbfca7b338f4d744e10f2e71944cd0e5fe9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[ResponseSpamBlacklist\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/set.py",
      "language": "Python",
      "line": 21,
      "offset": 20,
      "length": 30,
      "code": {
        "startLine": 19,
        "length": 30,
        "offset": 65,
        "surroundingCode": "def reload_blacklist():\n    blacklist.clear()\n    for user_id in database.ResponseSpamBlacklist:\n        blacklist.append(user_id)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "c3c0e605f0f44dd40059a17dfe6e4ecc7ae43f577290771720e4ac408c89d716"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[ResponseSpamBlacklist\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/set.py",
      "language": "Python",
      "line": 405,
      "offset": 24,
      "length": 30,
      "code": {
        "startLine": 403,
        "length": 30,
        "offset": 62,
        "surroundingCode": "\n    async def cog_load(self) -> None:\n        for user_id in database.ResponseSpamBlacklist:\n            blacklist.append(user_id)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "57668a1aa5efc584442da2e3538a7330aee535c51ed291e065adb526b182d415"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'bytes' (matched generic type 'AnyStr'), got 'memoryview' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 130,
      "offset": 17,
      "length": 16,
      "code": {
        "startLine": 128,
        "length": 16,
        "offset": 97,
        "surroundingCode": "    myIO.write(var)\n    with open(f\"transcript-{channel.name}.html\", \"wb\") as f:\n        f.write(myIO.getbuffer())\n\n    S3_upload_file(f\"transcript-{channel.name}.html\", \"ch-transcriptlogs\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "1f82ef209950e7997f12f0ea0886d1d06616db25933dd8c91c8930e3339c9282"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'Union\\[str, int\\]', got 'tuple\\[Any, Any, Any\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 273,
      "offset": 12,
      "length": 25,
      "code": {
        "startLine": 271,
        "length": 25,
        "offset": 51,
        "surroundingCode": "        OptList = decodeOptList[value]\n\n    return name, CategoryID, OptList\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "5f249cb11c24e1ea29b254cac440528ea9dc2baf4fa4ab4a4d38f38f7fab75d7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[TicketInfo\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1124,
      "offset": 22,
      "length": 12,
      "code": {
        "startLine": 1122,
        "length": 12,
        "offset": 100,
        "surroundingCode": "    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        for entry in TicketInfoTB:\n            try:\n                channel: discord.TextChannel = self.bot.get_channel("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "94db1eedecd8ad2bdf77c611407eb6cfa5770f49a99c0baf382ba5a286df5de4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[Blacklist\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 295,
      "offset": 14,
      "length": 18,
      "code": {
        "startLine": 293,
        "length": 18,
        "offset": 40,
        "surroundingCode": "\n    blacklistedUsers = []\n    for p in database.Blacklist:\n        blacklistedUsers.append(p.discordID)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "d35427028aec447ec58e9273f2cfc4d01ea7cb82485e6248ec4e065e49fda34b"
}]}