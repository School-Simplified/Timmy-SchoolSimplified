{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'creds' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 322,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 320,
        "length": 5,
        "offset": 33,
        "surroundingCode": "            pass\n\n        return creds\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "6921938191bf8ee3c430c00f18adada97827f5f85bfdd633fc0d76fbcb3872d0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'datetime' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 296,
      "offset": 38,
      "length": 8,
      "code": {
        "startLine": 294,
        "length": 8,
        "offset": 77,
        "surroundingCode": "    content = TextField(default=\"N/A\")\n\n    datetime = DateTimeField(default=datetime.now())\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "7acaa9ddabf56edf2859c700686b603e64b0004fc0590f9da6acc76ac3ce4a03"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'value' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 32,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 30,
        "length": 5,
        "offset": 45,
        "surroundingCode": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "5c14b59ee554e57b80982e2b850c8d6a6f4d2d6f28ff55d98abb12c2bfc4f8cc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 773,
      "offset": 42,
      "length": 5,
      "code": {
        "startLine": 771,
        "length": 5,
        "offset": 88,
        "surroundingCode": "                    )\n                finally:\n                    await ctx.send(embed=embed)\n        else:\n            embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "53ccee76d9a8061edfb951a7593e6156f3d9f7450a3f9d1bd8d0a57d6d2f9806"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 996,
      "offset": 46,
      "length": 5,
      "code": {
        "startLine": 994,
        "length": 5,
        "offset": 100,
        "surroundingCode": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "74e4b1a734e4388880433f7b4d0e445d538936b854ea57a29eea13df01ed365e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1184,
      "offset": 46,
      "length": 5,
      "code": {
        "startLine": 1182,
        "length": 5,
        "offset": 100,
        "surroundingCode": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n\n            else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "eddf12ce21f678adb98a488d61292129d172c52f3aac6763a66c8564462b14bc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1359,
      "offset": 46,
      "length": 5,
      "code": {
        "startLine": 1357,
        "length": 5,
        "offset": 100,
        "surroundingCode": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "84bcb3c1f798d3639c3e3dd5e99dce78cd48f35029052d5da79b9b66c8c9c177"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1485,
      "offset": 46,
      "length": 5,
      "code": {
        "startLine": 1483,
        "length": 5,
        "offset": 100,
        "surroundingCode": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "a838e66d7fd2014487aafcafa3d6daa8e6e87f27ae40a11e97d4e1e38ee9a0ce"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1566,
      "offset": 46,
      "length": 5,
      "code": {
        "startLine": 1564,
        "length": 5,
        "offset": 100,
        "surroundingCode": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "23f0394725ead2362b0de0629bd9034908ca56bdabee1d9cac16e44d53af115f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'value' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 22,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 20,
        "length": 5,
        "offset": 45,
        "surroundingCode": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "947cfb31fa0567ee40ea479e139912baf6f14bf5e95a794e06eeac581ac19bdb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'value' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 40,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 38,
        "length": 5,
        "offset": 45,
        "surroundingCode": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "d56d9985c08170a3414871b4f3619df40d18a631c32f8360b2014fcaf1f1601a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'query' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 81,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 79,
        "length": 5,
        "offset": 40,
        "surroundingCode": "        )\n        if renew:\n            query.delete_instance()\n\n        await member.move_to(None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "5fee0a5031bbfafcb7d43cd3f55679fffcff40bfe91931d0db6ce2d4ea30762f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'query' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 101,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 99,
        "length": 5,
        "offset": 54,
        "surroundingCode": "        await addLeaderboardProgress(member)\n\n        query.goal = goal\n        query.RenewalTime = renewal\n        query.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "8abfeeaee9f0a740636df79bdd309019ec15be4bad6b29ef8b14538ab2fa3c38"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'msg' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 159,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 157,
        "length": 3,
        "offset": 57,
        "surroundingCode": "    if response == None:\n        msg = S3_URL\n    return msg, transcript_file, S3_URL\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "d9751557c4211b14c1ce8419815858118eaad06a2c3c0e1394869396a67da2e4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 146,
      "offset": 17,
      "length": 221,
      "code": {
        "startLine": 144,
        "length": 221,
        "offset": 67,
        "surroundingCode": "            bot: Timmy,\n            task: Literal[\n                \"Motivation\",\n                \"Weekly Puzzle\",\n                \"Opportunities\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "e0ec80e3ee3b59d2772649fb3fa621ebfb71476225a74654e612d50f0f252e31"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 161,
      "offset": 38,
      "length": 32,
      "code": {
        "startLine": 159,
        "length": 32,
        "offset": 70,
        "surroundingCode": "        )\n        self.bot = bot\n        self.value: Optional[Literal[\"complete\", \"incomplete\", \"busy\"]] = \"incomplete\"\n        self._task = task\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "93321a1c3f22d618d995970021196bec224795e895355f34d86d70a00a55e3eb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 179,
      "offset": 17,
      "length": 221,
      "code": {
        "startLine": 177,
        "length": 221,
        "offset": 67,
        "surroundingCode": "            bot: Timmy,\n            task: Literal[\n                \"Motivation\",\n                \"Weekly Puzzle\",\n                \"Opportunities\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "47c5c1cab419578bd09e38dd81a157bf0d017052b7f126fc60b8dd8e26c348ce"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 194,
      "offset": 38,
      "length": 32,
      "code": {
        "startLine": 192,
        "length": 32,
        "offset": 70,
        "surroundingCode": "        )\n        self.bot = bot\n        self.value: Optional[Literal[\"complete\", \"incomplete\", \"busy\"]] = \"incomplete\"\n        self._task = task\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "216fbf50d4b6e76725a7d92befdf284fb8e865ce6256821a9080a60728506f84"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 218,
      "offset": 17,
      "length": 221,
      "code": {
        "startLine": 216,
        "length": 221,
        "offset": 67,
        "surroundingCode": "            bot: Timmy,\n            task: Literal[\n                \"Motivation\",\n                \"Weekly Puzzle\",\n                \"Opportunities\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "17d6348a380830088c1e0ed0c89e3c23f1ea73b8d55d7d5e79bc1523c87d18a8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "core/gh_modals.py",
      "language": "Python",
      "line": 13,
      "offset": 5,
      "length": 24,
      "code": {
        "startLine": 11,
        "length": 24,
        "offset": 94,
        "surroundingCode": "QuestionListType = List[Dict[str, Union[bool, str, None]]]\nGithubActionLiteral = Literal[\n    \"ISSUE\",\n    \"FEEDBACK\",\n]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "857921c155ea98ef7956e90b1a015259ec831eaa0689f0e99eb31eea9a141792"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "core/gh_modals.py",
      "language": "Python",
      "line": 16,
      "offset": 31,
      "length": 57,
      "code": {
        "startLine": 14,
        "length": 57,
        "offset": 48,
        "surroundingCode": "    \"FEEDBACK\",\n]\nIssueFeatureLiteral = Literal[\"Command\", \"Slash Command\", \"Dropdown or Button\", \"Other\"]\n\nif TYPE_CHECKING:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "49aab9bcff67e3ab5151d4797f83644b70063239e039c8ae084ac5730527f3bb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 352,
      "offset": 23,
      "length": 27,
      "code": {
        "startLine": 350,
        "length": 27,
        "offset": 94,
        "surroundingCode": "        interaction: discord.Interaction,\n        user: discord.Member,\n        role: Literal[\"debate\", \"count\", \"ticket\"],\n        reason: str\n    ):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "5c22fe8a09b77294b047befed3b6d96b7e7df2c7f0defc357924791db07a9d65"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 326,
      "offset": 23,
      "length": 10,
      "code": {
        "startLine": 324,
        "length": 10,
        "offset": 78,
        "surroundingCode": "        self,\n        interaction: discord.Interaction,\n        mode: Literal[\"-a\", \"-c\"] = \"-a\",\n        sync_commands: bool = False,\n    ) -> None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "6bc1f25d95384912ef65f28d3bf97c9aa4ce801eaae47ecd02d75e41afa28ed5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 131,
      "offset": 35,
      "length": 34,
      "code": {
        "startLine": 129,
        "length": 34,
        "offset": 81,
        "surroundingCode": "        firstname: str,\n        lastname: str,\n        organizationunit: Literal[\"Personal Account\", \"Team Account\"],\n    ):\n        HR_Role = discord.utils.get(interaction.user.guild.roles, id=HRID.r_hr_staff)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "cc4023802762356b601726c11432afdc1d13b47d0607fa22b22c16fec7767250"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/github_commands.py",
      "language": "Python",
      "line": 23,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 21,
        "length": 8,
        "offset": 94,
        "surroundingCode": "QuestionListType = List[Dict[str, Union[bool, str, None]]]\nGithubActionLiteral = Literal[\n    \"ISSUE\",\n]\nIssueFeatureLiteral = Literal[\"Command\", \"Slash Command\", \"Dropdown or Button\", \"Other\"]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "08ed872f7543f55329d7dc93a757d4ef244c925ecb6db280c1b66b0cc1a76a13"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/github_commands.py",
      "language": "Python",
      "line": 25,
      "offset": 31,
      "length": 57,
      "code": {
        "startLine": 23,
        "length": 57,
        "offset": 45,
        "surroundingCode": "    \"ISSUE\",\n]\nIssueFeatureLiteral = Literal[\"Command\", \"Slash Command\", \"Dropdown or Button\", \"Other\"]\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "2c73a89e78885f83ef754d421e68e58cd85a083ec79e581d613f1b972db02026"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 175,
      "offset": 65,
      "length": 7,
      "code": {
        "startLine": 173,
        "length": 7,
        "offset": 174,
        "surroundingCode": "    @app_commands.checks.cooldown(1, 300, key=lambda i: (i.guild_id, i.channel.id))\n    async def commission(\n        self, interaction: discord.Interaction, action: Literal[\"close\"]\n    ):\n        channel: discord.TextChannel = self.bot.get_channel(TechID.ch_bot_requests)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "d4ccfe5d592a657ef11fe84279d83c920641a2a5271d94cfb583659fca0a1aa2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/commands_manager.py",
      "language": "Python",
      "line": 18,
      "offset": 60,
      "length": 8,
      "code": {
        "startLine": 16,
        "length": 8,
        "offset": 97,
        "surroundingCode": "    @is_botAdmin4\n    async def sync(\n        self, ctx: commands.Context, action: Union[Literal[\"global\"], discord.Guild]\n    ):\n        if isinstance(action, discord.Guild):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "c2e803ec3bb1ddcc21181a44d8e3e946908c2c3cd119ee09ad9c9d51178c6f09"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 206,
      "offset": 23,
      "length": 10,
      "code": {
        "startLine": 204,
        "length": 10,
        "offset": 60,
        "surroundingCode": "        date: str,\n        time: str,\n        ampm: Literal[\"AM\", \"PM\"],\n        student: discord.Member,\n        repeats: bool,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "2fb51fb657858fd6dcf2d2d564dce8e6857fbda52c6479c6e7174aa786b0c25e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 338,
      "offset": 23,
      "length": 10,
      "code": {
        "startLine": 336,
        "length": 10,
        "offset": 60,
        "surroundingCode": "        date: str,\n        time: str,\n        ampm: Literal[\"AM\", \"PM\"],\n        student: str,\n        repeats: bool,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "8f8b155863afd41abf1b4d7b57ffce7ca09247f5f5f29fa78917097e195ce681"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/set.py",
      "language": "Python",
      "line": 19,
      "offset": 5,
      "length": 154,
      "code": {
        "startLine": 17,
        "length": 154,
        "offset": 90,
        "surroundingCode": "QuestionLiteral = List[Dict[str, Union[str, bool, None]]]\nMediaLiteralType = Literal[\n    \"Book\",\n    \"Movie\",\n    \"TV Show\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "c722398b13ddd35407f8a8f2606b5ea8f994dcb1cd802c70eb84829cc270c1b7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/schedule.py",
      "language": "Python",
      "line": 16,
      "offset": 5,
      "length": 149,
      "code": {
        "startLine": 14,
        "length": 149,
        "offset": 28,
        "surroundingCode": "\nTaskLiteral = Literal[\n    \"Motivation\",\n    \"Weekly Puzzle\",\n    \"Opportunities\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "d88e44449e738cf1fc6858d0c3433d5efca9e796661b3bb714a35619d5c6ae0e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/schedule.py",
      "language": "Python",
      "line": 29,
      "offset": 39,
      "length": 20,
      "code": {
        "startLine": 27,
        "length": 20,
        "offset": 104,
        "surroundingCode": "    def __init__(self, bot: Timmy):\n        self._schedule: Dict[\n            TaskLiteral, Dict[Literal[\"_type\", \"_schedule\"], Union[str, List[Union[Literal[\"rachel\", \"ignore\"], int]]]]\n        ] = {\n            \"Motivation\": {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "61df23e9959959166faadcbafd5a5f1e6a4d182816d0daf6e2c39298f5c0ec11"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/schedule.py",
      "language": "Python",
      "line": 29,
      "offset": 92,
      "length": 18,
      "code": {
        "startLine": 27,
        "length": 18,
        "offset": 157,
        "surroundingCode": "    def __init__(self, bot: Timmy):\n        self._schedule: Dict[\n            TaskLiteral, Dict[Literal[\"_type\", \"_schedule\"], Union[str, List[Union[Literal[\"rachel\", \"ignore\"], int]]]]\n        ] = {\n            \"Motivation\": {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "276734d2c9b0121ba64053b290b687f9a6e812fc80c7b597dfc106bd5992435b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/schedule.py",
      "language": "Python",
      "line": 152,
      "offset": 33,
      "length": 20,
      "code": {
        "startLine": 150,
        "length": 20,
        "offset": 72,
        "surroundingCode": "            self,\n            day: int,\n            dict_: Dict[Literal[\"_type\", \"_schedule\"], Union[str, List[Union[Literal[\"rachel\", \"ignore\"], int]]]]\n    ) -> Union[int, Literal[\"rachel\", \"ignore\"]]:\n        schedule_list = dict_[\"_schedule\"]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "d9f2489c000e165392fcf3a4f5119e799fc424774f058d3676b09cfdeb8d8721"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/schedule.py",
      "language": "Python",
      "line": 152,
      "offset": 86,
      "length": 18,
      "code": {
        "startLine": 150,
        "length": 18,
        "offset": 125,
        "surroundingCode": "            self,\n            day: int,\n            dict_: Dict[Literal[\"_type\", \"_schedule\"], Union[str, List[Union[Literal[\"rachel\", \"ignore\"], int]]]]\n    ) -> Union[int, Literal[\"rachel\", \"ignore\"]]:\n        schedule_list = dict_[\"_schedule\"]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "0873e4daded6f72b02284a50400c9f8d0e678f5d0f4bad95029e96cc33bd916b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/schedule.py",
      "language": "Python",
      "line": 153,
      "offset": 29,
      "length": 18,
      "code": {
        "startLine": 151,
        "length": 18,
        "offset": 164,
        "surroundingCode": "            day: int,\n            dict_: Dict[Literal[\"_type\", \"_schedule\"], Union[str, List[Union[Literal[\"rachel\", \"ignore\"], int]]]]\n    ) -> Union[int, Literal[\"rachel\", \"ignore\"]]:\n        schedule_list = dict_[\"_schedule\"]\n        return schedule_list[day - 1]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "bc67799b861d48a20f84c0329cfbec8a13acf6420d46f1dc54d8f431ddc4ed5d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Missing parameter r_id in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 104,
      "offset": 30,
      "length": 9,
      "code": {
        "startLine": 102,
        "length": 9,
        "offset": 54,
        "surroundingCode": "        return ListData\n\n    def fetch_redirect(self, r_id: str) -> RedirectPizza:\n        \"\"\"Fetches a redirect.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "443bdd6f5c715bc8eb03de5338cad1ba50952fb92e506c7a9e908f31d92be972"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Unexpected parameter url_code in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 108,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 106,
        "length": 8,
        "offset": 27,
        "surroundingCode": "\n        Args:\n            url_code (str): The URL code to fetch.\n            domain (str, optional): The domain to use. Defaults to None.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "1ee15a421bd96e43b5ba215b737da6d06aa97e87a6a3c04ccb65a80805470c61"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Unexpected parameter domain in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 109,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 107,
        "length": 6,
        "offset": 77,
        "surroundingCode": "        Args:\n            url_code (str): The URL code to fetch.\n            domain (str, optional): The domain to use. Defaults to None.\n\n        Raises:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "1670cba6db29a5411393862ca2aa1ff09720dbfd6b7d74def8e705264a256ef9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Missing parameter r_id in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 190,
      "offset": 28,
      "length": 9,
      "code": {
        "startLine": 188,
        "length": 9,
        "offset": 38,
        "surroundingCode": "        )\n\n    def del_redirect(self, r_id: str) -> typing.Union[dict, int]:\n        \"\"\"Deletes a redirect.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "f11738b060af1475894ea6fbcf769a511601690fc13a5590ef9333041a36617b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Unexpected parameter redirect_url in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 194,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 192,
        "length": 12,
        "offset": 27,
        "surroundingCode": "\n        Args:\n            redirect_url (str): The URL to delete.\n            domain (str, optional): The domain to use. Defaults to None.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "7283d95843cc395c50038e9be9ba4e2558c2b44eddceea5c310468cac30cbdba"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Unexpected parameter domain in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 195,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 193,
        "length": 6,
        "offset": 77,
        "surroundingCode": "        Args:\n            redirect_url (str): The URL to delete.\n            domain (str, optional): The domain to use. Defaults to None.\n\n        Raises:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "291979bb8f5c5473a45901f0852f9711315a86784f154e3ee002b80180cc0fd2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Missing parameter self in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 162,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 160,
        "length": 4,
        "offset": 17,
        "surroundingCode": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "fa3ff86d5c25216d9b0140920b2fec86d6d207343c965712d3d133b11d901b2c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Missing parameter sandbox in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 162,
      "offset": 34,
      "length": 21,
      "code": {
        "startLine": 160,
        "length": 21,
        "offset": 35,
        "surroundingCode": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "a49e147e53d5c7039987c6159dca256b6b80d3d5b8f00232f790e5a2c913ee4d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Missing parameter sandbox in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 280,
      "offset": 59,
      "length": 21,
      "code": {
        "startLine": 278,
        "length": 21,
        "offset": 72,
        "surroundingCode": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "3593cf1fd814475e9031e1e7ec0b46cb27ae248df1764764df33731476ba7d79"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Using equality operators to compare with None",
  "severity": "Moderate",
  "comment": "Comparison with None performed with equality operators",
  "detailsInfo": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 129,
      "offset": 12,
      "length": 18,
      "code": {
        "startLine": 127,
        "length": 18,
        "offset": 145,
        "surroundingCode": "        print(self.LobbyStartIDs[member.guild.id])\n        lobbyStart = member.guild.get_channel(self.LobbyStartIDs[member.guild.id])\n        if lobbyStart == None:\n            try:\n                lobbyStart = self.bot.get_channel(self.LobbyStartIDs[member.guild.id])"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyComparisonWithNoneInspection"
  },
  "hash": "af1375a51bacfcdddf06338ca8f206a18f7ab56aa2dbf956e449b2e0a3f50afd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Using equality operators to compare with None",
  "severity": "Moderate",
  "comment": "Comparison with None performed with equality operators",
  "detailsInfo": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 139,
      "offset": 8,
      "length": 16,
      "code": {
        "startLine": 137,
        "length": 16,
        "offset": 66,
        "surroundingCode": "    embed.add_field(name=\"Transcript Link\", value=S3_URL)\n\n    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyComparisonWithNoneInspection"
  },
  "hash": "6fd3e5e0fdc30e447f36327be0b4fef80e43222573f0173372ae289c514c98c5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Using equality operators to compare with None",
  "severity": "Moderate",
  "comment": "Comparison with None performed with equality operators",
  "detailsInfo": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 141,
      "offset": 8,
      "length": 23,
      "code": {
        "startLine": 139,
        "length": 23,
        "offset": 79,
        "surroundingCode": "    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:\n        for UAuthor in responsesauthor:\n            try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyComparisonWithNoneInspection"
  },
  "hash": "241de6a08a7efb3a82bbacbd9ff49208f2f6c4a010fdb1b09ab3d6fefc08fa58"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Using equality operators to compare with None",
  "severity": "Moderate",
  "comment": "Comparison with None performed with equality operators",
  "detailsInfo": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 157,
      "offset": 8,
      "length": 16,
      "code": {
        "startLine": 155,
        "length": 16,
        "offset": 21,
        "surroundingCode": "        pass\n\n    if response == None:\n        msg = S3_URL\n    return msg, transcript_file, S3_URL"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyComparisonWithNoneInspection"
  },
  "hash": "9a9be9972425dc1fb99b7fae12021fc0dda80a000f453a60f6ec319cc5d9dd0c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method 'is_paginating' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 501,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 499,
        "length": 13,
        "offset": 50,
        "surroundingCode": "\nclass FrontPageSource(menus.PageSource):\n    def is_paginating(self) -> bool:\n        # This forces the buttons to appear even in the front page\n        return True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "1df508d237f92e1a8124c638cc116434a1cb5c79697801fb9bdc92d021be62ea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method 'get_max_pages' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 505,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 503,
        "length": 13,
        "offset": 29,
        "surroundingCode": "        return True\n\n    def get_max_pages(self) -> Optional[int]:\n        # There's only one actual page in the front page\n        # However we need at least 2 to show all the buttons"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "bc246ac4d75d9d23f8c5a2e6db2b5f0f1282bdbeec8e38364f4ce31a9ab5fbeb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method '_filter_commands' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 566,
      "offset": 15,
      "length": 16,
      "code": {
        "startLine": 564,
        "length": 16,
        "offset": 38,
        "surroundingCode": "        self.bot = bot\n\n    async def _filter_commands(\n        self,\n        _commands: CommandsListType,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "cea39ba6b52774173b620a55e72a7d1c4bb3b26932749890a87327cb57b84144"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method 'interaction_check' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/set.py",
      "language": "Python",
      "line": 56,
      "offset": 15,
      "length": 17,
      "code": {
        "startLine": 54,
        "length": 17,
        "offset": 69,
        "surroundingCode": "        return self.bot.get_cog(\"Student Engagement\")\n\n    async def interaction_check(self, interaction: discord.Interaction) -> bool:\n        return interaction.user.id in [752984497259151370, 747126643587416174]\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "9e0fedee52caab12f844b7209e9905f4171e6fdc65f4484d4dd7d445bab37291"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method 'cog_load' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/set.py",
      "language": "Python",
      "line": 402,
      "offset": 15,
      "length": 8,
      "code": {
        "startLine": 400,
        "length": 8,
        "offset": 49,
        "surroundingCode": "        return Emoji.turtle_smirk\n\n    async def cog_load(self) -> None:\n        for item in database.ResponseSpamBlacklist:\n            blacklist.append(item.discordID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "942374b5123d7d7901acaa6d42fe50f0034caad8ba1990abee2701784263eed7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method '_get_user_id' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/schedule.py",
      "language": "Python",
      "line": 149,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 147,
        "length": 12,
        "offset": 122,
        "surroundingCode": "        await self._dm_member(embed=embed, user_id=self._get_user_id(day=day, dict_=dict_), _type=\"Daily Laugh\")\n\n    def _get_user_id(\n            self,\n            day: int,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "7c6192182a31ea6bac172096eac9544ec1dd082cb5655f2cc30843ccd4eb20b9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method 'interaction_check' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 51,
      "offset": 15,
      "length": 17,
      "code": {
        "startLine": 49,
        "length": 17,
        "offset": 38,
        "surroundingCode": "        self.bot = bot\n\n    async def interaction_check(self, interaction: discord.Interaction, /) -> bool:\n        blacklisted_users = [p.discordID for p in database.Blacklist]\n        if interaction.user.id in blacklisted_users:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "eeac45a0420ec7c784ce1542661ec2928ffbd0b60f774927590a3a441c79ab6e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method 'before_invoke' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 92,
      "offset": 15,
      "length": 13,
      "code": {
        "startLine": 90,
        "length": 13,
        "offset": 65,
        "surroundingCode": "        await on_command_error_(self, ctx, error)\n\n    async def before_invoke(self, ctx: commands.Context):\n        await before_invoke_(ctx)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "019b21d7f1e94c42c5daa0ba58d353eb14c06d67857c5ddf22492d1139b77790"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method 'check' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 95,
      "offset": 15,
      "length": 5,
      "code": {
        "startLine": 93,
        "length": 5,
        "offset": 49,
        "surroundingCode": "        await before_invoke_(ctx)\n\n    async def check(self, ctx: commands.Context):\n        await main_mode_check_(ctx)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "7ed2aebb11bdbe01c53f511d60013297fd3c83690e2f7618a66001b509d722fe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method 'setup_hook' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 98,
      "offset": 15,
      "length": 10,
      "code": {
        "startLine": 96,
        "length": 10,
        "offset": 51,
        "surroundingCode": "        await main_mode_check_(ctx)\n\n    async def setup_hook(self) -> None:\n        with alive_bar(\n                len(get_extensions()),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "5fa31cf860ad0f41449a4b84901388632c63046d03a52cd48d63819590dc2988"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'ctx' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 119,
      "offset": 21,
      "length": 3,
      "code": {
        "startLine": 117,
        "length": 3,
        "offset": 22,
        "surroundingCode": "\n\ndef timmy_beta_host(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "fc08b8007d2a000432f94f40d4f2c3705507ca6aeb3b634b1704a43c357d56b7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'response' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 350,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 348,
        "length": 8,
        "offset": 23,
        "surroundingCode": "    )\n    try:\n        response = s3_client.upload_file(\n            file_name,\n            bucket,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f1e84d75e9561ea959094783befef16190c5b341902059fa71499bbe563922ff"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1273,
      "offset": 9,
      "length": 25,
      "code": {
        "startLine": 1271,
        "length": 25,
        "offset": 64,
        "surroundingCode": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        transcript_log = self.bot.get_channel(TechID.ch_ticket_log)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "135cd6b65073597042f0cffd5f02ccdbbf56c84bb25680808864cc83b9b5fe28"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1282,
      "offset": 62,
      "length": 25,
      "code": {
        "startLine": 1280,
        "length": 25,
        "offset": 143,
        "surroundingCode": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.message.delete()\n        await interaction.response.send_message( \"ok, not removing this channel.\", ephemeral=True)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "3b1fa405d4e9965cc97dc83023deb95d77a806c4d45beac8cd1fc6d28626f4dd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1296,
      "offset": 60,
      "length": 25,
      "code": {
        "startLine": 1294,
        "length": 25,
        "offset": 176,
        "surroundingCode": "\n    @discord.ui.button(label=\"Lock\", style=discord.ButtonStyle.green, custom_id=\"persistent_view:lock\", emoji=\"🔒\")\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        ch = self.bot.get_channel(interaction.channel_id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "afeb85f1a4b5b0dde0306e037d3285ede05f6c9f465e922fb14454b20e554ea5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1315,
      "offset": 25,
      "length": 32,
      "code": {
        "startLine": 1313,
        "length": 32,
        "offset": 62,
        "surroundingCode": "        emoji=Emoji.gsuite_logo\n    )\n    async def lock(self,interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "1f3ccca264000cc0f5c1b08b149939e82553df288c07f8454cd307e3ea432abd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1315,
      "offset": 59,
      "length": 25,
      "code": {
        "startLine": 1313,
        "length": 25,
        "offset": 96,
        "surroundingCode": "        emoji=Emoji.gsuite_logo\n    )\n    async def lock(self,interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "3e79eac46b7a89a47bb3b6cd894d9c77754993bcdbf873cd1898b8c78a687072"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1330,
      "offset": 29,
      "length": 32,
      "code": {
        "startLine": 1328,
        "length": 32,
        "offset": 83,
        "surroundingCode": "        custom_id=\"persistent_view:tempconfirm\",\n    )\n    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n        self.stop()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "3217c2552a599a98465b65ad5ef4c010ba0fd603ce4caa93683c72676ef878ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1330,
      "offset": 63,
      "length": 25,
      "code": {
        "startLine": 1328,
        "length": 25,
        "offset": 117,
        "surroundingCode": "        custom_id=\"persistent_view:tempconfirm\",\n    )\n    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n        self.stop()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "73e4e37afb26eb48f7cb879b25858262e0221d23b352647c78a6a50b0a329222"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1335,
      "offset": 62,
      "length": 25,
      "code": {
        "startLine": 1333,
        "length": 25,
        "offset": 143,
        "surroundingCode": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.send_message(\"Cancelling\", ephemeral=True)\n        self.value = False"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "a5161aab8734f536f988385fa28cc727259e78d8c32883774ead8ab94341bac9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1351,
      "offset": 61,
      "length": 25,
      "code": {
        "startLine": 1349,
        "length": 25,
        "offset": 113,
        "surroundingCode": "        custom_id=\"persistent_view:nitrofake\",\n    )\n    async def claim(self, interaction: discord.Interaction, button: discord.ui.Button):\n        try:\n            await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "bab82f32a599a405f9f999c9fe5edda266a42c87f44e6a862a95f9ec26cf6bfc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1381,
      "offset": 60,
      "length": 25,
      "code": {
        "startLine": 1379,
        "length": 25,
        "offset": 85,
        "surroundingCode": "        emoji=\"🔒\",\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        ch = self.bot.get_channel(interaction.channel_id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c060df281e2723013a2e6ccba1d381bcccbadc6d1583d3844770d6ffc1f6cf4f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1400,
      "offset": 29,
      "length": 32,
      "code": {
        "startLine": 1398,
        "length": 32,
        "offset": 83,
        "surroundingCode": "        custom_id=\"persistent_view:tempconfirm\",\n    )\n    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n        self.stop()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "5e76ff1f11266e248aa4c9734b2cbea8a1589a6c0c4898d659214143ade2f1a5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1400,
      "offset": 63,
      "length": 25,
      "code": {
        "startLine": 1398,
        "length": 25,
        "offset": 117,
        "surroundingCode": "        custom_id=\"persistent_view:tempconfirm\",\n    )\n    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n        self.stop()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "ea819d7b461eeb2f67a36e1d759a4f8060ae0105cf22f3b78dac83c452defab3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1405,
      "offset": 62,
      "length": 25,
      "code": {
        "startLine": 1403,
        "length": 25,
        "offset": 143,
        "surroundingCode": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.send_message(\"Cancelling\", ephemeral=True)\n        self.value = False"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "145efcc62573da643c1850475066c4721547bc37beee1146eabfdbea2621268e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'result' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1471,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 1469,
        "length": 6,
        "offset": 55,
        "surroundingCode": "    msg = await ctx.send(embed=embed)\n    try:\n        result = subprocess.run(\n            f\"cd && cd {main_or_beta}\",\n            shell=True,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "26ebb5f98763e4d96376b8550f219009347ecbb9c3e0fb39c50974390635311a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'request_id' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/docsapi.py",
      "language": "Python",
      "line": 19,
      "offset": 14,
      "length": 10,
      "code": {
        "startLine": 17,
        "length": 10,
        "offset": 15,
        "surroundingCode": "\n\ndef callback(request_id, response, exception):\n    if exception:\n        print(exception)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "2a2161ad778362948c1608a4f5d7ec371635f67f94314c4a5ec7d1f7572b08e4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'result' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/docsapi.py",
      "language": "Python",
      "line": 118,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 116,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    ]\n\n    result = (\n        drive_service.documents()\n        .batchUpdate(documentId=document_copy_id, body={\"requests\": requests})"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "280b4cf2f7c380a76a652aa5bdc44998bad28b89583ec3553e6f92ff73d3b050"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'exc' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 746,
      "offset": 15,
      "length": 3,
      "code": {
        "startLine": 744,
        "length": 3,
        "offset": 37,
        "surroundingCode": "\n@app.teardown_request\ndef _db_close(exc):\n    \"\"\"\n    This hook ensures that the connection is closed when we've finished"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "289b161453f2a759e8bf84263b269fd6c477a1bde5feb78c0a54fbbe940656fd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/gh_modals.py",
      "language": "Python",
      "line": 197,
      "offset": 13,
      "length": 25,
      "code": {
        "startLine": 195,
        "length": 25,
        "offset": 76,
        "surroundingCode": "            self,\n            interaction: discord.Interaction,\n            button: discord.ui.Button,\n    ):\n        return await interaction.response.send_modal("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "3e16a0d453606ed66f4b477f3bb50fb3b6ca1bad7a698d90e155347ad937afb7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'object' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 124,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 122,
        "length": 6,
        "offset": 86,
        "surroundingCode": "        if r.status_code == 422:\n            raise InvalidAuth(r.status_code)\n        object = range(len(r.json()))\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "255498fa1fe15292ac2e8c6ea634757e13817ff5282f63f476fa6c8420f9783a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'object' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 174,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 172,
        "length": 6,
        "offset": 86,
        "surroundingCode": "        if r.status_code == 422:\n            raise InvalidAuth(r.status_code)\n        object = range(len(r.json()[\"data\"]))\n        pprint.pprint(r.json())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c266a6a7231881d4128bb168dc55bde98622a44bf8d4f2de88e7c3ca6033f39a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 53,
      "offset": 9,
      "length": 32,
      "code": {
        "startLine": 51,
        "length": 32,
        "offset": 44,
        "surroundingCode": "    async def verify(\n        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "3dd23efbcc139b713512bf5c56a563e5304df2aefb2e8abeabd610e340232b20"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 54,
      "offset": 9,
      "length": 25,
      "code": {
        "startLine": 52,
        "length": 25,
        "offset": 64,
        "surroundingCode": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        self.value = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "0dff936cfa815218baa27e3ce3e216afffb4655f2c22bb927df76faaa142a6ec"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'page_size' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 110,
      "offset": 21,
      "length": 14,
      "code": {
        "startLine": 108,
        "length": 14,
        "offset": 65,
        "surroundingCode": "        \"\"\"List all tags in the database\"\"\"\n\n        def get_end(page_size: int):\n            database.db.connect(reuse_if_open=True)\n            tags: int = database.PunishmentTag.select().count()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "89e97d6baa1ffd7e596cd8967c7009d6c0c8fbdc26aa78fe9db5014a2534a888"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'embed' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 129,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 127,
        "length": 5,
        "offset": 57,
        "surroundingCode": "\n        embed = discord.Embed(title=\"Tag List\")\n        embed = await common.paginate_embed(\n            self.bot, ctx, embed, populate_embed, get_end(10), page=page\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "ff99a4ddd2ac5c36d7903d306104224a41981b4804f4af77600c0556ea87e80b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'value' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 151,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 149,
        "length": 5,
        "offset": 51,
        "surroundingCode": "            user: discord.User = user\n\n            value = None\n            typeval = None\n            banreason = None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "49fec08276aa30e6af4d8f73f9142ce4dc4077cb818ef890124476663be3db1b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'typeval' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 152,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 150,
        "length": 7,
        "offset": 38,
        "surroundingCode": "\n            value = None\n            typeval = None\n            banreason = None\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f12db567944a0d9fa938e64d4238d03b9afd55e2ea3cd2ce9052fb6d6231537c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'user' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 41,
      "offset": 57,
      "length": 4,
      "code": {
        "startLine": 39,
        "length": 4,
        "offset": 86,
        "surroundingCode": "\n    @commands.Cog.listener()\n    async def on_member_ban(self, guild: discord.Guild, user):\n        \"\"\"\n        Pycord doesn't give us the information we need so we need to dig deeper and query the audit logs"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "b3d050b5bd7768aaf6d32bd5e6704e9f9684a70726916f098c81c24489d1c37a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 203,
      "offset": 9,
      "length": 25,
      "code": {
        "startLine": 201,
        "length": 25,
        "offset": 64,
        "surroundingCode": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        \"\"\"go to the first page\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "92856052c6b2d2c9a02d381445733927a757cdc3e51411df10090c21496701ba"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 210,
      "offset": 49,
      "length": 25,
      "code": {
        "startLine": 208,
        "length": 25,
        "offset": 155,
        "surroundingCode": "    @discord.ui.button(label=\"Back\", style=discord.ButtonStyle.blurple)\n    async def go_to_previous_page(\n        self, interaction: discord.Interaction, button: discord.ui.Button\n    ):\n        \"\"\"go to the previous page\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "688e3fbd0237b7847128312e0009d0af74792470c2f1b50edbd0c3b467f0ab88"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 225,
      "offset": 9,
      "length": 25,
      "code": {
        "startLine": 223,
        "length": 25,
        "offset": 64,
        "surroundingCode": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        \"\"\"go to the next page\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "7ac215f5255f6e95893b2e7b9a6a3681184389d946529666fb4e989a0d019c75"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 234,
      "offset": 9,
      "length": 25,
      "code": {
        "startLine": 232,
        "length": 25,
        "offset": 64,
        "surroundingCode": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        \"\"\"go to the last page\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "5512505202f93ed31c46b35519c26cd9626d6e82e69d2113b353f94281c259f6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 244,
      "offset": 9,
      "length": 25,
      "code": {
        "startLine": 242,
        "length": 25,
        "offset": 64,
        "surroundingCode": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        \"\"\"lets you type a page number to go to\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "06c4267ca109c955d2bd8524c1f86b5d31f65fd4192e2b1fcaff537fc2e63a0e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 286,
      "offset": 9,
      "length": 25,
      "code": {
        "startLine": 284,
        "length": 25,
        "offset": 64,
        "surroundingCode": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        \"\"\"stops the pagination session.\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "0665e09d49e6c091369cc250dc0f4a0be527a91786a6056e5e6fd81176c1da19"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'menu' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 515,
      "offset": 27,
      "length": 14,
      "code": {
        "startLine": 513,
        "length": 14,
        "offset": 47,
        "surroundingCode": "        return self\n\n    def format_page(self, menu: HelpMenu, page):\n        embed = discord.Embed(title=\"Bot Help\", colour=discord.Colour.blurple())\n        embed.description = inspect.cleandoc("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "cc187d243bba36473b82392aa5000dc3d8d59a9712be0dc02382b6f07e2c0e16"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'page' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 515,
      "offset": 43,
      "length": 4,
      "code": {
        "startLine": 513,
        "length": 4,
        "offset": 63,
        "surroundingCode": "        return self\n\n    def format_page(self, menu: HelpMenu, page):\n        embed = discord.Embed(title=\"Bot Help\", colour=discord.Colour.blurple())\n        embed.description = inspect.cleandoc("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "3fd99e8d118a821eccde5806dfc52babf50adabb8505a41b8356839a4af5d4bb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 569,
      "offset": 9,
      "length": 32,
      "code": {
        "startLine": 567,
        "length": 32,
        "offset": 59,
        "surroundingCode": "        self,\n        _commands: CommandsListType,\n        interaction: discord.Interaction,\n        *,\n        sort=False,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "ac932b8051665c3b5d3ad96c08f3729c17b9bfacf30361be0a1f8866965fa561"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'CheckDB' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 96,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 94,
        "length": 7,
        "offset": 62,
        "surroundingCode": "    @filters.command()\n    async def list(self, ctx):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n            .where(database.CheckInformation.id == 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f89e3314046e6efbb3f51f3ae95ff9a4ba857d6f3c73831e34fc1906abeed4af"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'result' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 541,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 539,
        "length": 6,
        "offset": 26,
        "surroundingCode": "        try:\n\n            result = subprocess.run(\n                f\"cd && cd {main_or_beta}\",\n                shell=True,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "9fd1006297630e422dd6eb804293807a830111f8fb6ee5710aab79f9799cbfc9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'i' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 20,
      "offset": 42,
      "length": 1,
      "code": {
        "startLine": 18,
        "length": 1,
        "offset": 74,
        "surroundingCode": "\n    rnd = random.SystemRandom()\n    return \"\".join(rnd.choice(chars) for i in range(length))\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "71a6ffb3b60c0ea7a1bbfae487a218a551fe612d10d3dedb5ab61daf3273e7a4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 79,
      "offset": 31,
      "length": 32,
      "code": {
        "startLine": 77,
        "length": 32,
        "offset": 37,
        "surroundingCode": "    )\n\n    async def on_submit(self, interaction: discord.Interaction):\n        respChannel = self.bot.get_channel(968345000100384788)\n        await respChannel.send(\"\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "1bef09e0d84d612092feaa07ff45b34bdaee114ecfc081688f7c74f2fa24ef1e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 99,
      "offset": 9,
      "length": 25,
      "code": {
        "startLine": 97,
        "length": 25,
        "offset": 64,
        "surroundingCode": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        await interaction.followup.send_modal(GSuiteForm(self.bot))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "208baabcce517ca342c6c414ba86745eff1d9a7cf87870ddd2dcfa634d64e2f9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 93,
      "offset": 29,
      "length": 32,
      "code": {
        "startLine": 91,
        "length": 32,
        "offset": 102,
        "surroundingCode": "\n    @discord.ui.button(label='Confirm', style=discord.ButtonStyle.green)\n    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        self.stop()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "0d146bb69205db2ab23260d42059c508b1ee9e924e0a61201a7a881dbed97e94"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 93,
      "offset": 63,
      "length": 25,
      "code": {
        "startLine": 91,
        "length": 25,
        "offset": 136,
        "surroundingCode": "\n    @discord.ui.button(label='Confirm', style=discord.ButtonStyle.green)\n    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        self.stop()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f70a62d47c6f477b2b752b0a46861f44309201d2795cbf9353ff0bd4ca858ebb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 98,
      "offset": 62,
      "length": 25,
      "code": {
        "startLine": 96,
        "length": 25,
        "offset": 132,
        "surroundingCode": "\n    @discord.ui.button(label='Cancel', style=discord.ButtonStyle.red)\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.send_message('Cancelling', ephemeral=True)\n        self.value = False"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "7c6307a27338a68b7e4b6020cd98f531e1b6670d6a2fe04ee660880ad0552295"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 119,
      "offset": 9,
      "length": 25,
      "code": {
        "startLine": 117,
        "length": 25,
        "offset": 64,
        "surroundingCode": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        extguild = False"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c17128851d403337d4a3adeaab4011482df9d21a86300cad57550de6afd35251"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 221,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 219,
        "length": 7,
        "offset": 61,
        "surroundingCode": "                    .get()\n                )\n                channel: discord.VoiceChannel = self.bot.get_channel(\n                    int(query.ChannelID)\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "32d8ec82836292edbeef97132f2cba92938499501048c2f0bd7a087be2c80e92"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 283,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 281,
        "length": 7,
        "offset": 61,
        "surroundingCode": "                    .get()\n                )\n                channel: discord.VoiceChannel = self.bot.get_channel(q.ChannelID)\n\n                view = discord.ui.View()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "2876a97863e402b07509577858b1476279f789a0d06f9d0267d3a78acfb6346d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'team' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 548,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 546,
        "length": 4,
        "offset": 86,
        "surroundingCode": "    async def end(self, ctx):\n        database.db.connect(reuse_if_open=True)\n        team = discord.utils.get(ctx.guild.roles, name=self.AT)\n        member = ctx.guild.get_member(ctx.author.id)\n        timestamp2 = datetime.now(EST)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c5fa93b97ff296572d9bf244ba256c6b27c150383374b295e78d7b5219d87722"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'timestamp2' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 550,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 548,
        "length": 10,
        "offset": 125,
        "surroundingCode": "        team = discord.utils.get(ctx.guild.roles, name=self.AT)\n        member = ctx.guild.get_member(ctx.author.id)\n        timestamp2 = datetime.now(EST)\n\n        voice_state = member.voice"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "bf0213e54f5ab37815b548c78ff7c0c9614dfe5fc3401ebdfb278c590d0f558b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'BOT' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 889,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 887,
        "length": 3,
        "offset": 62,
        "surroundingCode": "        member = ctx.guild.get_member(ctx.author.id)\n\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f10beadeb83aae3dd553856c6a0843cf3917fa4584a95b4ebd66df0d15ceba24"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'TMOD' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 891,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 889,
        "length": 4,
        "offset": 112,
        "surroundingCode": "        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "534eafb5e1882803bb7b48fe7719d5a333c0f853a2eb05b733fb75e38c6ac47e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'MOD' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 892,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 890,
        "length": 3,
        "offset": 125,
        "surroundingCode": "        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "4eb56c8afa0bd0bfaac6dd441647d065c74ce9b056e8fd3bac41b334e6fd17a0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'SMOD' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 893,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 891,
        "length": 4,
        "offset": 138,
        "surroundingCode": "        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "226f85c4e9296aaf373f7bf34b9ec447c504e2631918600561648c1ecdd4b6c9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'CO' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 894,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 892,
        "length": 2,
        "offset": 138,
        "surroundingCode": "        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "fd54090cf8be731148cd3b3ba0b21d9baf413e1f8ba1eeda70c0a090b693eebf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'VP' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 895,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 893,
        "length": 2,
        "offset": 136,
        "surroundingCode": "        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "4916a606acbc1f131a2287a68ed281a176fbd2d6daecc2d718eaf6d7118778bf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'ST' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 896,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 894,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "9dd4c8473dfcb1db039bbb0787e6478097916375f0b9e851b67038e6f0f6ec49"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'query' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1135,
      "offset": 21,
      "length": 5,
      "code": {
        "startLine": 1133,
        "length": 5,
        "offset": 53,
        "surroundingCode": "                    LOCK.save()\n\n                    query = (\n                        database.VCChannelInfo.select()\n                        .where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c1469c8797a12dad03f4a9ffdc9f6721b6fa8163b6e6642381bfd867fc14884a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local function 'check' is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 402,
      "offset": 21,
      "length": 5,
      "code": {
        "startLine": 400,
        "length": 5,
        "offset": 39,
        "surroundingCode": "            else:\n\n                def check(m):\n                    return (\n                        m.content is not None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "40585e21609ef51df1899b738ad32b2df75f6b9ac734aac16fe4bc9bbac24a1f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'lastReset' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 38,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 36,
        "length": 9,
        "offset": 64,
        "surroundingCode": "            and timeNow >= self.midnight\n        ):\n            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "748fb13592797d3088ebb513f28a7bc01e7b5a2c078992a59999bbca10a80775"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'numberStr' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 96,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 94,
        "length": 9,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    numberStr = ...  # type: str\n\n    if number < 1000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "298f2efffaeac93534139339c40228ccc95f1e7f787de91b58050a1504070b8d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'now' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 90,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 88,
        "length": 3,
        "offset": 27,
        "surroundingCode": "\n    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(\n            discordID=member.id,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "5a26ad355ca1a620e56615e60e4cfb907d3525aeec9b827935d1be65198b5725"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'goal' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 175,
      "offset": 17,
      "length": 4,
      "code": {
        "startLine": 173,
        "length": 4,
        "offset": 65,
        "surroundingCode": "            )\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "bee4965a62ae03b47f206e456570bee1aecc3235dd2992a8ce15b70ac6827ec3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'renewal' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 175,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 173,
        "length": 7,
        "offset": 71,
        "surroundingCode": "            )\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "764790dc8afc36f2cb924dfe1c4672551e7b746717cabcadfe92cc8fdcf1a724"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'val' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 183,
      "offset": 17,
      "length": 3,
      "code": {
        "startLine": 181,
        "length": 3,
        "offset": 105,
        "surroundingCode": "\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n\n                if datetime.now(EST) >= dateObj:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "2375864cb8ed9dccf143bf9a2d83ee9fada79d34f724c1102f97aceff2f2647b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'i' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 63,
      "offset": 17,
      "length": 1,
      "code": {
        "startLine": 61,
        "length": 1,
        "offset": 64,
        "surroundingCode": "            else:\n                list_ten = []\n                i = 0\n                for entry in query:\n                    if not isinstance(entry.Date, datetime):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "5fdc1c3edc64bd34c7f1a25cc9ce5517f7a342aaa90dd11ec1733f26afbb20ea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'i' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 153,
      "offset": 13,
      "length": 1,
      "code": {
        "startLine": 151,
        "length": 1,
        "offset": 52,
        "surroundingCode": "        else:\n            list_ten = []\n            i = 0\n            for entry in query:\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "a7bcbe360c3b238a7dc775ba0137c95b12a4fbe982cf90f90772059f20ac2cc7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 558,
      "offset": 30,
      "length": 32,
      "code": {
        "startLine": 556,
        "length": 32,
        "offset": 40,
        "surroundingCode": "        )\n\n    async def callback(self, interaction: discord.Interaction):\n        self.view.stop()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "a8bfe66f0fbd4ec801c5f9912280d13f8d21320aac1cf2f16e7ab412513374be"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'nw' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 115,
      "offset": 17,
      "length": 2,
      "code": {
        "startLine": 113,
        "length": 2,
        "offset": 54,
        "surroundingCode": "                nextweek = old + new\n\n                nw = nextweek.strftime(\"%m/%d/%Y\")\n\n                query.Date = nextweek"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "b6cbabef19472673251b6dbfb8f1ab2848246e0cf9f6d2e571c738684ecbcfb8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'val' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 45,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 43,
        "length": 3,
        "offset": 26,
        "surroundingCode": "\n        try:\n            val = InteractionResponse[\"custom_id\"]\n        except KeyError:\n            return"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "0852c2a348e392e4320ffc60b55640c2ff06d1bb670c4bc86ab6687da35efad2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 58,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 56,
        "length": 7,
        "offset": 31,
        "surroundingCode": "                )\n\n            channel = self.bot.get_channel(interaction.channel_id)\n            guild = interaction.message.guild\n            author = interaction.user"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "e4c3bf9582eed0d3ceef1b4f9b94d83ec43163f75c94e53db70b2113e6a65fc7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'e' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 117,
      "offset": 41,
      "length": 1,
      "code": {
        "startLine": 115,
        "length": 1,
        "offset": 133,
        "surroundingCode": "                    try:\n                        self.flow.fetch_token(code=answer1.content)\n                    except Exception as e:\n                        return await dm_channel.send(\"Invalid code, try again later...\")\n                    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "a88347f927b12d2fd0cf95f786e6d77092326f504e972511adf3b368eda0fcea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'directTranscript' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 99,
      "offset": 5,
      "length": 30,
      "code": {
        "startLine": 97,
        "length": 30,
        "offset": 90,
        "surroundingCode": "    user: discord.User = None,\n    responsesauthor: typing.List[discord.User] = None,\n    directTranscript: bool = False,\n):\n    transcript = await chat_exporter.export(channel, None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "fd31d9afe2013804f847930f028b645d6f3542c639c4ced4f86d9885b83d2893"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'self' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 162,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 160,
        "length": 4,
        "offset": 17,
        "surroundingCode": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "462aac70817365473f1b264ba9aef8394442403333d91b12aa9cbcce88629840"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'sandbox' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 280,
      "offset": 59,
      "length": 21,
      "code": {
        "startLine": 278,
        "length": 21,
        "offset": 72,
        "surroundingCode": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "d3a273b443820f11a65e9250c3a469db599e9d256c2b07a5f3d5d4be4fff0769"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 343,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 341,
        "length": 7,
        "offset": 40,
        "surroundingCode": "            )\n        else:\n            channel = self.bot.get_channel(interaction.channel_id)\n            guild = interaction.message.guild\n            author = interaction.user"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "9cbbe91978e8d9c54855a2a400f38b11c010a35853076c8a846d93057120da0b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'e' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 371,
      "offset": 33,
      "length": 1,
      "code": {
        "startLine": 369,
        "length": 1,
        "offset": 80,
        "surroundingCode": "                    view=MSV,\n                )\n            except Exception as e:\n                await interaction.followup.send(\n                    f\"{interaction.user.mention} I can't send you messages, please check you're privacy settings!\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "88bfa80c804712954b6d5d36c0c51230b471e39c37d78c7046489665157215aa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'e' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 405,
      "offset": 37,
      "length": 1,
      "code": {
        "startLine": 403,
        "length": 1,
        "offset": 129,
        "surroundingCode": "                try:\n                    await DMChannel.send(embed=embed, view=MiscOptList)\n                except Exception as e:\n                    await interaction.followup.send(embed=embed, view=MiscOptList)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "5c84dfe76bcbf20ab9b32e9641268037026e6311468705b9ffc8f32a6e5d4b37"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 781,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 779,
        "length": 7,
        "offset": 60,
        "surroundingCode": "            pass\n        elif val == \"ch_lock\":\n            channel = interaction.message.channel\n            guild = interaction.message.guild\n            author = interaction.user"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "26f76c1b11e258199441cbe1af3f2b656009511cd7f7be7e1f6934e1cd528ce7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'guild' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 782,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 780,
        "length": 5,
        "offset": 93,
        "surroundingCode": "        elif val == \"ch_lock\":\n            channel = interaction.message.channel\n            guild = interaction.message.guild\n            author = interaction.user\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f010671c7659b341b5a332e52ba6064dca8349b519230c3b8644e1ec6d9af27a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'query' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 785,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 783,
        "length": 5,
        "offset": 51,
        "surroundingCode": "            author = interaction.user\n\n            query = (\n                database.TicketInfo.select()\n                .where(database.TicketInfo.ChannelID == interaction.channel_id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "1f1f606b284442a0db17e166d114019b64140e4d23c531ff515310be8b45a34c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 894,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 892,
        "length": 7,
        "offset": 80,
        "surroundingCode": "\n        elif InteractionResponse[\"custom_id\"] == \"ch_lock_CANCEL\":\n            channel = interaction.message.channel\n            author = interaction.user\n            try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "788cd07e16fdec6968187d5cca650118442caad1d0000a6075e20378e3f696b6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 905,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 903,
        "length": 7,
        "offset": 75,
        "surroundingCode": "\n        elif InteractionResponse[\"custom_id\"] == \"ch_lock_C\":\n            channel = self.bot.get_channel(interaction.channel_id)\n            author = interaction.user\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f6a899175afc9325a7327eb9e4b070686023b3c12c06f0286757ca7accd9dd3b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'msg' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 970,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 968,
        "length": 3,
        "offset": 68,
        "surroundingCode": "                )\n            author = interaction.user\n            msg = await interaction.channel.send(\n                f\"Please wait, creating your transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f5b2965937784636e9f05cf046ba0cadb8a8c8574187a78f0ad5959099d0b9fd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'query' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1121,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 1119,
        "length": 5,
        "offset": 49,
        "surroundingCode": "        )\n        if query.exists():\n            query = query.get()\n            embed = discord.Embed(\n                title=\"Confirm?\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "a0ca686292a6f9876f687e5f340fbd7d4abae8efe80ce784740da09eff687ffe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'LogCH' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1162,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 1160,
        "length": 5,
        "offset": 153,
        "surroundingCode": "            TicketOwner = guild.get_member(entry.authorID)\n            messages = [message async for message in channel.history(limit=None)]\n            LogCH = self.bot.get_channel(MainID.ch_transcript_logs)\n            authorList = []\n            if len(messages) == 0:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "fa58e3a716ae03c80342f64f672d1fddced270bfa77e803455036fd0958ad2e5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'authorList' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1163,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 1161,
        "length": 10,
        "offset": 162,
        "surroundingCode": "            messages = [message async for message in channel.history(limit=None)]\n            LogCH = self.bot.get_channel(MainID.ch_transcript_logs)\n            authorList = []\n            if len(messages) == 0:\n                continue"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "734fd8bf95b9567cc5d960e9f041a262d5e38f154ea24d701821c448e8de36bd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'self' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 26,
      "offset": 25,
      "length": 4,
      "code": {
        "startLine": 24,
        "length": 4,
        "offset": 26,
        "surroundingCode": "\n\nasync def roleNameCheck(self, name: str, guild: discord.Guild, user: discord.Member):\n    check = getEqualRank(name)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "0cefc12a96c64ce031cbf45c180198e86a3cbf242655b89dbb951303d2587098"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'InteractionResponse' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 51,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 49,
        "length": 19,
        "offset": 126,
        "surroundingCode": "    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "4f9a3766e42545a2ba7374ddc859b2bd81f7cddd2ad3ec75e33740641d7b153c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'e' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 112,
      "offset": 37,
      "length": 1,
      "code": {
        "startLine": 110,
        "length": 1,
        "offset": 59,
        "surroundingCode": "                    )\n\n                except Exception as e:\n                    print(\"member not found\")\n                    continue"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "6ab86c0de41042a94a0bec03c59529ea84908a2fa7d07f1864b169f2bb4e0bb7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'command' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 62,
      "offset": 13,
      "length": 62,
      "code": {
        "startLine": 60,
        "length": 62,
        "offset": 76,
        "surroundingCode": "            self,\n            interaction: discord.Interaction,\n            command: Union[app_commands.Command, app_commands.ContextMenu],\n            error: app_commands.AppCommandError\n    ):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "007126223d6fc53654f2415fad63c141d6a17c4ec2bad7216eb3d7b81a2575b9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'reaction' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 108,
      "offset": 24,
      "length": 8,
      "code": {
        "startLine": 106,
        "length": 8,
        "offset": 50,
        "surroundingCode": "    emotes = [\"◀️\", \"▶️\"]\n\n    def check_reaction(reaction, user):\n        return user == ctx.author and str(reaction.emoji) in emotes\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "96c1fb36d212273c374ba23cec57f3a057b00770577337ffed57fc69dbddac5e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'user' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 108,
      "offset": 34,
      "length": 4,
      "code": {
        "startLine": 106,
        "length": 4,
        "offset": 60,
        "surroundingCode": "    emotes = [\"◀️\", \"▶️\"]\n\n    def check_reaction(reaction, user):\n        return user == ctx.author and str(reaction.emoji) in emotes\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "e8418042b5da1c752674e5b44b39b420a8bc5bc07a70ed442a12d8e1b86fbb4c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'embed' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 115,
      "offset": 34,
      "length": 5,
      "code": {
        "startLine": 113,
        "length": 5,
        "offset": 74,
        "surroundingCode": "            return math.ceil(tags / 10)\n\n        async def populate_embed(embed: discord.Embed, page: int):\n            \"\"\"Used to populate the embed in listtag command\"\"\"\n            tag_list = \"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "daa3a2d6c644c72e9f18d322419dae2fd67a36942ca0d8c3b8ca533ae7dc367e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'page' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 115,
      "offset": 56,
      "length": 4,
      "code": {
        "startLine": 113,
        "length": 4,
        "offset": 96,
        "surroundingCode": "            return math.ceil(tags / 10)\n\n        async def populate_embed(embed: discord.Embed, page: int):\n            \"\"\"Used to populate the embed in listtag command\"\"\"\n            tag_list = \"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "c44f24ee41a50857f9d16afd81d09829bcb5d0eb3ba61804485b8218257ded58"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'reaction' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 266,
      "offset": 20,
      "length": 8,
      "code": {
        "startLine": 264,
        "length": 8,
        "offset": 66,
        "surroundingCode": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "cad3589337d99330603c1081401271fe67f4ab7238cacbf774485c468bf7f8d6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'user' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 266,
      "offset": 30,
      "length": 4,
      "code": {
        "startLine": 264,
        "length": 4,
        "offset": 76,
        "surroundingCode": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "19ec376583f2f632efbe16b0d828ba4abe3d6296602de51683491ae81db76ada"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'reaction' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 488,
      "offset": 20,
      "length": 8,
      "code": {
        "startLine": 486,
        "length": 8,
        "offset": 66,
        "surroundingCode": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "5cdcf6c93d3fbd2183216a953ae19fe15f18905260ec7ee15de5f247e449c003"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'user' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 488,
      "offset": 30,
      "length": 4,
      "code": {
        "startLine": 486,
        "length": 4,
        "offset": 76,
        "surroundingCode": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "8d566d2a01cc49d1040184035064edcad640cacffe4414f730557b1890090d47"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'e' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 704,
      "offset": 30,
      "length": 1,
      "code": {
        "startLine": 702,
        "length": 1,
        "offset": 102,
        "surroundingCode": "            vc.play(\n                discord.FFmpegPCMAudio(\"text.mp3\"),\n                after=lambda e: print(f\"Finished playing: {e}\"),\n            )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "12dabbc4879c82df7d5524be0a0b73ad25a5c250d295a0aa668054ce2ce5c071"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'bot' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 47,
      "offset": 24,
      "length": 3,
      "code": {
        "startLine": 45,
        "length": 3,
        "offset": 74,
        "surroundingCode": "\nclass TimmyCommandTree(app_commands.CommandTree):\n    def __init__(self, bot):\n        super().__init__(bot)\n        self.bot = bot"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "61064bd3b7503a41374b4e927d7b8ca84993a7570347ac3df0b2421675c52da7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 49,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 47,
        "length": 15,
        "offset": 8,
        "surroundingCode": "\n\nclass ConfigCatClient:\n    PS_ID_CC = configcatclient.create_client(os.getenv(\"PS_ID_CC\"))\n    SET_ID_CC = configcatclient.create_client(os.getenv(\"SET_ID_CC\"))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "be31efc1a8ca7e1f9344e164ce427337c7e5a41aa3d9e5f53c96e3e489fd4248"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 67,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 65,
        "length": 13,
        "offset": 13,
        "surroundingCode": "    )\n\nclass ConsoleColors:\n   HEADER = '\\033[95m'\n   OKBLUE = '\\033[94m'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "f48bba5655da150eb4b8018d0ed16d5c45d3fb19dee66f777f557545192bab11"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 365,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 363,
        "length": 6,
        "offset": 8,
        "surroundingCode": "\n\nclass MainID:\n    \"\"\"\n    IDs of the SS Main server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "0d1309cb90438e75f7288145972905144b25003c08f23cc21b402f2123057de9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 468,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 466,
        "length": 7,
        "offset": 8,
        "surroundingCode": "\n\nclass StaffID:\n    \"\"\"\n    IDs of the SS Staff Community server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "0cca3623b7416b84174981711a9ad96eebf171e09ab509ce3ccf6f309b809cee"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 523,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 521,
        "length": 6,
        "offset": 8,
        "surroundingCode": "\n\nclass TechID:\n    \"\"\"\n    IDs of the 'The Department of Information & Technology' server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "6a0e76ca1638fbf36d96dc0887e8f8d8c97e300dbfabd4bc0f692b32d4f99509"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 556,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 554,
        "length": 13,
        "offset": 8,
        "surroundingCode": "\n\nclass SandboxConfig:\n    \"\"\"\n    IDs for the Sandbox Configuration."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "9b2acf6882c9694fbfcac9aad00eddef90595e43fc883447c91be6b3870c359e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 588,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 586,
        "length": 4,
        "offset": 8,
        "surroundingCode": "\n\nclass ChID:\n    \"\"\"\n    IDs of the Chat Helper server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "c3e2c3bbd248cd8e5b5ff0ffe4b30600db4bdb4bfedaa46c3686a8187a784975"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 607,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 605,
        "length": 5,
        "offset": 8,
        "surroundingCode": "\n\nclass MktID:\n    \"\"\"\n    IDs of the SS Marketing Department server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "0c40543e66eff9349efe2a500561fbe8cb018c7d6e0d3ebefb447d27fc8e3077"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 646,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 644,
        "length": 5,
        "offset": 8,
        "surroundingCode": "\n\nclass TutID:\n    \"\"\"\n    IDs of the SS Tutoring Division server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "bb78826e7727adaccd5f4700522bf24f4baff45d724b17f58ea927dfab4ab530"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 676,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 674,
        "length": 4,
        "offset": 8,
        "surroundingCode": "\n\nclass HRID:\n    \"\"\"\n    IDs of the SS HR Department server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "a6cbd5f090633534390c7a8eece22bdf026be7e26e77494075d4d0bcd4bf0be9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 704,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 702,
        "length": 4,
        "offset": 8,
        "surroundingCode": "\n\nclass PSID:\n    \"\"\"\n    IDs of the Programming Simplified server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "7c54b13865195e12cf5797ad3d00127f250ce1837703a59645e9284ddba6b356"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 724,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 722,
        "length": 8,
        "offset": 8,
        "surroundingCode": "\n\nclass LeaderID:\n    \"\"\"\n    IDs of the Leadership Lounge server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "057398bf65e8398f93dc375b0e6a6a9ac6a236c447bb6c0efaff330ae9a81025"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 772,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 770,
        "length": 5,
        "offset": 8,
        "surroundingCode": "\n\nclass SETID:\n    \"\"\"\n    IDs of the SSD SET SERVER"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "34b58236567f5af9020b36440f46db41e9f16a1b67a8271c1555921fd414ca68"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 811,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 809,
        "length": 10,
        "offset": 8,
        "surroundingCode": "\n\nclass CheckDB_CC:\n    \"\"\"\n    Checks and Safeguards for the Bot."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "ef3b32e72cdbfce2cfb17d0aa3f3d977e24dc1323a17824a508acd19ad0cbc8b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 853,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 851,
        "length": 5,
        "offset": 8,
        "surroundingCode": "\n\nclass Emoji:\n    \"\"\"\n    Emojis to use for the bot."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "a2bd3fa57ce4eebc52c2c6a18cb43ad2bbb273dab0f6333d8675341795cbd43a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 904,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 902,
        "length": 6,
        "offset": 8,
        "surroundingCode": "\n\nclass Colors:\n    \"\"\"\n    Colors for the bot. Can be custom hex colors or built-in colors."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "b09084b37ef47080ab6dadb074f87d0dd45892ad029eab322c83686da067ce42"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 924,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 922,
        "length": 6,
        "offset": 8,
        "surroundingCode": "\n\nclass Others:\n    \"\"\"\n    Other things to use for the bot. (Images, characters, etc.)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "cfdba18940a35ef5c341f93744ead8214a283bcb65c64b989536fb0d22b744e7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1028,
      "offset": 7,
      "length": 16,
      "code": {
        "startLine": 1026,
        "length": 16,
        "offset": 9,
        "surroundingCode": "]\n\nclass EmbeddedActivity:\n    awkword = 879863881349087252\n    betrayal = 773336526917861400"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "17f33e7dca323c1f8aea99d5e8ed3dcb2f71ea05c7d836ee950865f13f79646c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 509,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 507,
        "length": 2,
        "offset": 8,
        "surroundingCode": "\n\nclass Me:\n    publicCH = [\n        MainID.cat_casual,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "1928b5925a2d8d38f4ab8fb2e262b534c8a5b0cb050a6b7e042f061c03bfd3c5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 8,
      "offset": 7,
      "length": 16,
      "code": {
        "startLine": 6,
        "length": 16,
        "offset": 8,
        "surroundingCode": "\n\nclass SimulatorProfile:\n    @staticmethod\n    async def create_TicketSys(ctx: commands.Context):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "14c4e8e710634260da893f6ad3537b8bf3500144f9369e45870de46f47e13a5b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 19,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 17,
        "length": 13,
        "offset": 6,
        "surroundingCode": "\n\ndef predicate_LV1(ctx) -> bool:\n    adminIDs = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "823fbb08d9b2bf845da3ce0409bd2e6a76845445fed6fea6c7b70cb00510e5a1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 20,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 18,
        "length": 8,
        "offset": 37,
        "surroundingCode": "\ndef predicate_LV1(ctx) -> bool:\n    adminIDs = []\n\n    query = database.Administrators.select().where(database.Administrators.TierLevel >= 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "70435e359fd67614bd795c05e833e114dbc27097cf57cb8dadcaac9522e35d1e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 31,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 29,
        "length": 13,
        "offset": 6,
        "surroundingCode": "\n\ndef predicate_LV2(ctx) -> bool:\n    adminIDs = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "356710dcd5bef4dcd6d67b61daa1f006cfe9dc3c4aaeb00bd6a9dcbab503660c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 32,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 30,
        "length": 8,
        "offset": 37,
        "surroundingCode": "\ndef predicate_LV2(ctx) -> bool:\n    adminIDs = []\n\n    query = database.Administrators.select().where(database.Administrators.TierLevel >= 2)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a3ca4fca2190dad2c339457ed1ee5c8ce80a5cfff9027199de00e91d41a11da7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 43,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 41,
        "length": 13,
        "offset": 6,
        "surroundingCode": "\n\ndef predicate_LV3(ctx):\n    adminIDs = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f0d4252075039fb4f6f46399f320271c21f9e8b440ad460fb4aa635c6d117fcf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 44,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 42,
        "length": 8,
        "offset": 29,
        "surroundingCode": "\ndef predicate_LV3(ctx):\n    adminIDs = []\n\n    query = database.Administrators.select().where(database.Administrators.TierLevel >= 3)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9e5b1c5fb9950bc316ab1f27fe0b7dfda1f6be7089bda2f4d8d701519f5543fa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 55,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 53,
        "length": 13,
        "offset": 6,
        "surroundingCode": "\n\ndef predicate_LV4(ctx):\n    adminIDs = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "50a63893ee726572df5bcfeea917ae57f2fa886da8d23431c3e74853788a4198"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 56,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 54,
        "length": 8,
        "offset": 29,
        "surroundingCode": "\ndef predicate_LV4(ctx):\n    adminIDs = []\n\n    query = database.Administrators.select().where(database.Administrators.TierLevel >= 4)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "238776bdc004d785cfe05a58b359b65513ba96131ae0d06be3c1fe03c4fc60a0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 120,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 118,
        "length": 7,
        "offset": 31,
        "surroundingCode": "\ndef timmy_beta_host(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3d6e38125ea146bfd4449ea1f4a3b7ff217df001d6b8cb7d525977e4d3ed9c68"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 121,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 119,
        "length": 6,
        "offset": 71,
        "surroundingCode": "def timmy_beta_host(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n\n    if runDir is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0a3f7f44dafe53a47632a58e11c4203c5a4647dfd66c5fa326838a5351df33af"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 124,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 122,
        "length": 6,
        "offset": 36,
        "surroundingCode": "\n    if runDir is not None:\n        runDir = runDir.group(0)\n    else:\n        runDir = None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0fe8b3022307e9a195b63270b9e44100110f22902d673584af5a427de51c7ae0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 126,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 124,
        "length": 6,
        "offset": 51,
        "surroundingCode": "        runDir = runDir.group(0)\n    else:\n        runDir = None\n\n    return runDir == \"/home/timmy-beta\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c8d1e8aefd0b47ace6350ed1ae71396e480d8cbc6c7de0394f55e45d00db6684"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 325,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 323,
        "length": 14,
        "offset": 6,
        "surroundingCode": "\n\ndef S3_upload_file(\n        file_name,\n        bucket,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b32352007d49311331ec3b91b26b79b3e02c67f388950b7fd43137b84b3d136b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 811,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 809,
        "length": 10,
        "offset": 8,
        "surroundingCode": "\n\nclass CheckDB_CC:\n    \"\"\"\n    Checks and Safeguards for the Bot."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "68c495c937f4078f36a0a3ff92473e878727d19bbd9512dd6cf571d0780bda56"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1384,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 1382,
        "length": 19,
        "offset": 92,
        "surroundingCode": "        self.value = True\n        ch = self.bot.get_channel(interaction.channel_id)\n        TempConfirmInstance = TicketTempConfirm()\n\n        await ch.send(\"Are you sure you want to close this ticket?\", view=TempConfirmInstance)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b94a2676914707917c5ce87325297154c40781897f24c57ce4af0e8df496c9c3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1450,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1448,
        "length": 2,
        "offset": 86,
        "surroundingCode": "async def id_generator(size=3, chars=string.ascii_uppercase):\n    while True:\n        ID = \"\".join(random.choice(chars) for _ in range(size))\n        query = database.TutorBot_Sessions.select().where(database.TutorBot_Sessions.SessionID == ID)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d616e59753522e5bed49abb9e6db4f413485700bcc327ed73cd04e62b27e3a65"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 165,
      "offset": 7,
      "length": 24,
      "code": {
        "startLine": 163,
        "length": 24,
        "offset": 8,
        "surroundingCode": "\n\nclass TutorSession_GracePeriod(BaseModel):\n    \"\"\"\n    # IgnoreThis"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8f7d7da8f3ecc2c160f428a777922cf4f2a13c8c663a4fd43e7af9a8b79952c9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 440,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 438,
        "length": 17,
        "offset": 8,
        "surroundingCode": "\n\nclass TutorBot_Sessions(BaseModel):\n    \"\"\"\n    #TutorBot Sessions"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f34780c18919ffd573eb5f0a4392a8833020ee30fa898a6b90513b4393cde567"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 85,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 83,
        "length": 8,
        "offset": 60,
        "surroundingCode": "        data = r.json()\n        data = data[\"data\"]\n        ListData = []\n        for object in range(len(data) - 1):\n            # object = object"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e19dfe4f16d4eb7ba8b2abe52ec67f6beb5909f2fb3266ee29bc258c02cbbe08"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 88,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 86,
        "length": 7,
        "offset": 86,
        "surroundingCode": "        for object in range(len(data) - 1):\n            # object = object\n            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8db03fd4803e681a786b5ec9637e7af1452791aa3c54a399aa93d1e8a97ae650"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 89,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 87,
        "length": 12,
        "offset": 103,
        "surroundingCode": "            # object = object\n            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "94351d205b2a63db740691817cb03df4bb31328ff14823ce808b4092d7210d8c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 90,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 88,
        "length": 6,
        "offset": 118,
        "surroundingCode": "            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4ca4a12e9adcc21aa1bfeb691f9367a8611833dd4a6eac252e66127188256317"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 91,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 89,
        "length": 4,
        "offset": 98,
        "surroundingCode": "            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path\n\n            ListData.append("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "da3731037d7c5c6ba08ef79c9728f8f25ba8ff74db00303cdf3ba4784077f009"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 126,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 124,
        "length": 7,
        "offset": 47,
        "surroundingCode": "        object = range(len(r.json()))\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6bb472ff75961f7bf424a1bdb66a0e6c3c1fc93dac06d317b074c00049977d4e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 127,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 125,
        "length": 12,
        "offset": 65,
        "surroundingCode": "\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "edcd896d5a9f696c4b240010532fdba998619ddcc012743aa066ff5e04cd66a7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 128,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 126,
        "length": 6,
        "offset": 105,
        "surroundingCode": "        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "459413d472fd3b40c11a2ff96ba46244c7c2f1e7f8c6ecf108f8851c92be448b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 129,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 127,
        "length": 4,
        "offset": 86,
        "surroundingCode": "        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n\n        return RedirectPizza("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c86f5c9d60884c9481677749338f4ad382a15465c53ca536e87b4b986b52c544"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 177,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 175,
        "length": 7,
        "offset": 41,
        "surroundingCode": "        pprint.pprint(r.json())\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1277a391e6ada38a742d126abe87831681c592a5f0c0a1d7682a0e7e2d066d80"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 178,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 176,
        "length": 12,
        "offset": 65,
        "surroundingCode": "\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "feb84dddc7d942b005a077793a51b5ed7c0a66b9cd0b0b9fa7958925706404cb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 179,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 177,
        "length": 6,
        "offset": 105,
        "surroundingCode": "        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ca6aa1247a5c791d5fd1066844fdb9445d5100a4c60392658c2c948c5f9db674"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 180,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 178,
        "length": 4,
        "offset": 86,
        "surroundingCode": "        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n\n        return RedirectPizza("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2f56ee7485e4ac71aa05e78a0f7ee701ce0f9d912cc158df7dbd91b5491f4da5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 109,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 107,
        "length": 2,
        "offset": 42,
        "surroundingCode": "\n    if not os.getenv(\"USEREAL\"):\n        IP = os.getenv(\"IP\")\n        databaseField = (\n            f\"{ConsoleColors.OKGREEN}Selected Database: External ({IP}){ConsoleColors.ENDC}\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e1edddbb67ec6e5e9b7bdcc3cc10a4893ec2c619f27e4cd4b01144001c5bd703"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 110,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 108,
        "length": 13,
        "offset": 70,
        "surroundingCode": "    if not os.getenv(\"USEREAL\"):\n        IP = os.getenv(\"IP\")\n        databaseField = (\n            f\"{ConsoleColors.OKGREEN}Selected Database: External ({IP}){ConsoleColors.ENDC}\"\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b361734c0e91ce39835572d777c47ac3aaeda2ab3ffb101aa05b916853b718e6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 114,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 112,
        "length": 13,
        "offset": 28,
        "surroundingCode": "        )\n    else:\n        databaseField = (\n            f\"{ConsoleColors.FAIL}Selected Database: localhost{ConsoleColors.ENDC}\\n{ConsoleColors.WARNING}WARNING: Not \"\n            f\"recommended to use SQLite.{ConsoleColors.ENDC} \""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b2b4c1586ffea1266609554719911d81061a350a326b954467af86983fb356bd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 309,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 307,
        "length": 10,
        "offset": 66,
        "surroundingCode": "            data = \"\\n\".join([l.strip() for l in f])\n\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9a32f4b622c454003d55b0c16a80e591e632575ee58a9c8cea31e60bdb9ca095"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 310,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 308,
        "length": 9,
        "offset": 63,
        "surroundingCode": "\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\"\n            headers = {\"Authorization\": \"token %s\" % API_TOKEN}"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e031cb70ab01652eb37389963372628617f4bcc6caebbaeac735ef650d919de1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 323,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 321,
        "length": 2,
        "offset": 63,
        "surroundingCode": "            )\n            j = json.loads(res.text)\n            ID = j[\"id\"]\n            gisturl = f\"https://gist.github.com/{ID}\"\n            print(gisturl)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8adc90f292a894c6c08f5f44e88592fa37d461a7fd4915ad256a85599f17496b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 425,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 423,
        "length": 10,
        "offset": 66,
        "surroundingCode": "            data = \"\\n\".join([l.strip() for l in f])\n\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "26262cb55a1b6cff6c82a3373001b3d51829d482c3b642fe6e2a18233c8215e6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 426,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 424,
        "length": 9,
        "offset": 63,
        "surroundingCode": "\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\"\n            headers = {\"Authorization\": \"token %s\" % API_TOKEN}"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b4df12fd6381180c6aaf5ba307141c82a8cf2db0b41fd3d8a436a7cd6850d87c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 439,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 437,
        "length": 2,
        "offset": 63,
        "surroundingCode": "            )\n            j = json.loads(res.text)\n            ID = j[\"id\"]\n            gisturl = f\"https://gist.github.com/{ID}\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2d068b58e2d5414be1f6eb3e13ac9485357dd827b000d78156f0d3014553679e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 532,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 530,
        "length": 8,
        "offset": 51,
        "surroundingCode": "        blacklisted_users.append(p.discordID)\n\n    adminIDs = []\n    query = database.Administrators.select().where(\n        database.Administrators.TierLevel == 4"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8ef98e9fa2fbb5fe2a377ba9ebbd3d19fed8dd8dde72f32ce2f518b345dcdb35"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 582,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 580,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef initializeDB(bot):\n    \"\"\"\n    Initializes the database, and creates the needed table data if they don't exist."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "825ea5dbb090b68ca06f119860657b27a8c1d36cf10870fe6e4802509e39ea95"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 587,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 585,
        "length": 3,
        "offset": 56,
        "surroundingCode": "    \"\"\"\n    database.db.connect(reuse_if_open=True)\n    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4106752ae3320f37e0b653ca3852a0060960757b5d83122b0bc416e1865246b5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 588,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 586,
        "length": 3,
        "offset": 114,
        "surroundingCode": "    database.db.connect(reuse_if_open=True)\n    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "999589eea4e62eb393bd1463735a6b50527c4468cb9954decd1c220f2fd9addc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 589,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 587,
        "length": 3,
        "offset": 156,
        "surroundingCode": "    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1d929be20569818d8250bfae4c1a67fbcbd6d1c2cdc2b6cd10496beff6e2b26a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 590,
      "offset": 5,
      "length": 2,
      "code": {
        "startLine": 588,
        "length": 2,
        "offset": 172,
        "surroundingCode": "    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)\n\n    if not UpQ.exists():"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cfe97c2fa3d629f8ddd1531e446d9842cc19e654cae6aaff6c297e2ce5cb8cc3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 166,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 164,
        "length": 8,
        "offset": 48,
        "surroundingCode": "\n            if member is None:\n                banEntry = await ctx.guild.fetch_ban(user)\n\n                if banEntry is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "88ce3dd2457db7221f7c3df7436b20a58fb6c8d006d1bf8be57a830c530b484b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 63,
      "offset": 17,
      "length": 14,
      "code": {
        "startLine": 61,
        "length": 14,
        "offset": 134,
        "surroundingCode": "            # We need to check who banned the person.\n            if moderator.id == 548410451818708993:  # Wick's ID\n                banReasonAUDIT = logs.reason\n\n                if \"No reason specified by\" in banReasonAUDIT:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "31defe0a6ac0d514f59e84d73888aceaaf373e40f0c0e6aa4ef23ed7b2c61adc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 66,
      "offset": 29,
      "length": 15,
      "code": {
        "startLine": 64,
        "length": 15,
        "offset": 92,
        "surroundingCode": "\n                if \"No reason specified by\" in banReasonAUDIT:\n                    random, fullUsernameMOD = banReasonAUDIT.split(\n                        \"No reason specified by \"\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "51891a2434e550c5956e5e255727afaee8c054b9ce27d7b16c0954bc6f0d6ddc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 69,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 67,
        "length": 9,
        "offset": 92,
        "surroundingCode": "                        \"No reason specified by \"\n                    )\n                    banReason = \"None Specified\"\n\n                else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6ed72fc2942d6e1572b22ea13e0edc375db660b1baf67e5ca5bd67c29424f516"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 72,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 70,
        "length": 9,
        "offset": 43,
        "surroundingCode": "\n                else:\n                    banReason = re.match(r\"[^[]*\\[([^]]*)\\]\", banReasonAUDIT).groups()[\n                        0\n                    ]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d6019206eabd1c10c03baf992f83c3a35fbff3b750dd4fb1c5cf6755ee7bbddb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 77,
      "offset": 33,
      "length": 15,
      "code": {
        "startLine": 75,
        "length": 15,
        "offset": 58,
        "surroundingCode": "\n                    try:\n                        random, fullUsernameMOD = banReasonAUDIT.split(\"- \")\n                    except ValueError:\n                        fullUsernameMOD = \"Wick\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3f3e64aac90507a0028f1be50ab4a9a4c82334a46e8264f9d92371d3ac8094a0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 79,
      "offset": 25,
      "length": 15,
      "code": {
        "startLine": 77,
        "length": 15,
        "offset": 140,
        "surroundingCode": "                        random, fullUsernameMOD = banReasonAUDIT.split(\"- \")\n                    except ValueError:\n                        fullUsernameMOD = \"Wick\"\n\n            else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2e3928a9dac23bf3892da8e79b61655ac97a9f17ca4d64b8d85b479541a736a4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 82,
      "offset": 17,
      "length": 9,
      "code": {
        "startLine": 80,
        "length": 9,
        "offset": 35,
        "surroundingCode": "\n            else:\n                banReason = logs.reason\n                # Get full username with tag\n                fullUsernameMOD = f\"{moderator.display_name}#{moderator.discriminator}\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5725d43809b21b8bb29e68dc24dba8b2082d9c27572110298866bde6dbe8e7b4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 84,
      "offset": 17,
      "length": 15,
      "code": {
        "startLine": 82,
        "length": 15,
        "offset": 101,
        "surroundingCode": "                banReason = logs.reason\n                # Get full username with tag\n                fullUsernameMOD = f\"{moderator.display_name}#{moderator.discriminator}\"\n\n            # Okay now we got our reason, we need to get a few more things"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5d8506a10efe9f22f0b05cae952b75581946ee3d1e2bfd1e4f9931620c435aa3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 90,
      "offset": 13,
      "length": 18,
      "code": {
        "startLine": 88,
        "length": 18,
        "offset": 54,
        "surroundingCode": "\n            # Get full username with tag\n            fullUsernameTARGET = f\"{target.display_name}#{target.discriminator}\"\n\n            # Get everything into a list so we can bulk insert."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cbfba8fc9562c52947a7e127cf73fb6843adfde989a862fad93a92ef1b4368ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 106,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 104,
        "length": 10,
        "offset": 85,
        "surroundingCode": "            sheet.insert_row(row, 2)  # Insert data, and boom. We done!\n\n            ModChannel = self.bot.get_channel(self.ModLogID)\n\n            embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b38170b1b86ffd726d9068b47df5cd7b671a3d7058b130450414e4ca5b4737b1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 129,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 127,
        "length": 9,
        "offset": 50,
        "surroundingCode": "\n        query = database.Voting.select()\n        msgIDList = [msg.msgID for msg in query]\n\n        interMsgID = interaction.message.id"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e080ea2bc64d81c23dd7a7272e9f1d72316e25ad7e5ba7b8d5bf80080c4aebc3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 131,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 129,
        "length": 10,
        "offset": 58,
        "surroundingCode": "        msgIDList = [msg.msgID for msg in query]\n\n        interMsgID = interaction.message.id\n        print(f\"interMsgID: {interMsgID}\")\n        if interMsgID in msgIDList:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6bb0059515c49a871ad0394dea38b6841d5a0bffad6475ea258516cc7b15068b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 134,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 132,
        "length": 13,
        "offset": 91,
        "surroundingCode": "        print(f\"interMsgID: {interMsgID}\")\n        if interMsgID in msgIDList:\n            componentsStr = (\n                database.Voting.select()\n                .where(database.Voting.msgID == interMsgID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8dc3feee3521e74dd3ad58f910390f8312742b353428b0ad991779183abf5fac"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 140,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 138,
        "length": 14,
        "offset": 54,
        "surroundingCode": "                .components\n            )\n            componentsDict = ast.literal_eval(componentsStr)\n            interactionData = interaction.data\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ac876b3a79b23a5c2138e6c3a3d19f548ea5a96f75ce9a6f39504e202bd8ca43"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 141,
      "offset": 13,
      "length": 15,
      "code": {
        "startLine": 139,
        "length": 15,
        "offset": 87,
        "surroundingCode": "            )\n            componentsDict = ast.literal_eval(componentsStr)\n            interactionData = interaction.data\n\n            print(componentsDict, type(componentsDict))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c1414241d8bf3b55f1d0911552d3b11fd3a91c94d322c735d9022ddb665c9e7c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 165,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 163,
        "length": 19,
        "offset": 60,
        "surroundingCode": "    async def create(self, ctx: commands.Context):\n\n        acceptedChannelsStr = \"\"\n        noneChannels = []\n        for channelID in self.acceptedAnnouncementCHs:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0ef11d7752b07a453680ec444244c167961f3ea591d1f606921232f19207f4a8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 166,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 164,
        "length": 12,
        "offset": 42,
        "surroundingCode": "\n        acceptedChannelsStr = \"\"\n        noneChannels = []\n        for channelID in self.acceptedAnnouncementCHs:\n            acceptedChannel = self.bot.get_channel(channelID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "966def45c527a6482dc8598a4c91d5812978fdff9487a16d53944988d64234c2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 168,
      "offset": 13,
      "length": 15,
      "code": {
        "startLine": 166,
        "length": 15,
        "offset": 93,
        "surroundingCode": "        noneChannels = []\n        for channelID in self.acceptedAnnouncementCHs:\n            acceptedChannel = self.bot.get_channel(channelID)\n\n            if acceptedChannel is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7a6c15b9f9f504762af8bc90dcb4764720952367f322a30295877caec3005a52"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 177,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 175,
        "length": 8,
        "offset": 56,
        "surroundingCode": "        print(f\"noneChannels: {noneChannels}\")\n\n        randomID = \"\".join(random.choices(string.ascii_uppercase + string.digits, k=6))\n        tempVoteCHsPath = f\"./TEMP_voteCHS_{randomID}.txt\"\n        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1c0508df0ca50d1644082343a933d0f29aa63141787db0de3bbee36bd8f1a7af"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 178,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 176,
        "length": 15,
        "offset": 97,
        "surroundingCode": "\n        randomID = \"\".join(random.choices(string.ascii_uppercase + string.digits, k=6))\n        tempVoteCHsPath = f\"./TEMP_voteCHS_{randomID}.txt\"\n        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9f580d05cb24189d53331aaf21c9f96023e5be206c76bd8b549abeedd6488917"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 179,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 177,
        "length": 19,
        "offset": 155,
        "surroundingCode": "        randomID = \"\".join(random.choices(string.ascii_uppercase + string.digits, k=6))\n        tempVoteCHsPath = f\"./TEMP_voteCHS_{randomID}.txt\"\n        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\"\n\n        tempVoteCHsFileWrite = open(tempVoteCHsPath, \"w+\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e3b2aec9621051a48a0da2b40c794344f952c0e235fa5bc803f4339e07975cbb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 181,
      "offset": 9,
      "length": 20,
      "code": {
        "startLine": 179,
        "length": 20,
        "offset": 69,
        "surroundingCode": "        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\"\n\n        tempVoteCHsFileWrite = open(tempVoteCHsPath, \"w+\")\n        tempVoteCHsFileWrite.write(f\"Accepted channels:\" f\"\\n{acceptedChannelsStr}\")\n        tempVoteCHsFileWrite.close()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3dfcee39e8765cd64044efae407019b93ece2c6a4d6381f51d09d2ad2d23aca2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 184,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 182,
        "length": 15,
        "offset": 130,
        "surroundingCode": "        tempVoteCHsFileWrite.write(f\"Accepted channels:\" f\"\\n{acceptedChannelsStr}\")\n        tempVoteCHsFileWrite.close()\n        tempVoteCHsFile = discord.File(tempVoteCHsPath, filename=tempVoteCHsFilename)\n\n        os.remove(tempVoteCHsPath)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e0538e0b54a1af23dd4602b66b7ad9e8de098fd2e964ea353a400e8a77f5bfda"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 188,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 186,
        "length": 11,
        "offset": 44,
        "surroundingCode": "        os.remove(tempVoteCHsPath)\n\n        ch_snakePit = self.bot.get_channel(TechID.ch_snake_pit)\n        msgVoteCHsFile = await ch_snakePit.send(file=tempVoteCHsFile)\n        voteCHsFileURL = msgVoteCHsFile.attachments[0].url"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8047b802be72bab5329565088ae349c06e06b4529d901bd1571b5e46e7ecfa2b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 189,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 187,
        "length": 14,
        "offset": 73,
        "surroundingCode": "\n        ch_snakePit = self.bot.get_channel(TechID.ch_snake_pit)\n        msgVoteCHsFile = await ch_snakePit.send(file=tempVoteCHsFile)\n        voteCHsFileURL = msgVoteCHsFile.attachments[0].url\n        await msgVoteCHsFile.delete()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bab1e4c19db797d40f48674a5d9e3c8b1a9c794945ddb434baee17f1baf71f7e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 190,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 188,
        "length": 14,
        "offset": 142,
        "surroundingCode": "        ch_snakePit = self.bot.get_channel(TechID.ch_snake_pit)\n        msgVoteCHsFile = await ch_snakePit.send(file=tempVoteCHsFile)\n        voteCHsFileURL = msgVoteCHsFile.attachments[0].url\n        await msgVoteCHsFile.delete()\n        embedServer = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0102e3994b4724ce2b70fcf4f05a5d467993deda0e8eb99b521ed837e242ef74"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 192,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 190,
        "length": 11,
        "offset": 105,
        "surroundingCode": "        voteCHsFileURL = msgVoteCHsFile.attachments[0].url\n        await msgVoteCHsFile.delete()\n        embedServer = discord.Embed(\n            color=Colors.ss_blurple,\n            title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "174b9254ffe28cbad638425988fcf6914fc4938a83b60770069c4be665050406"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 202,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 200,
        "length": 15,
        "offset": 92,
        "surroundingCode": "        embedServer.set_footer(text=\"Type 'cancel' to cancel | Timeout after 60s\")\n\n        viewAcceptedCHs = discord.ui.View()\n        viewAcceptedCHs.add_item(\n            ButtonHandler("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "66523ac524b48fb89e45570e8b09f984e35c69dfd11dc003f5fbeff67688dfa7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 210,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 208,
        "length": 8,
        "offset": 32,
        "surroundingCode": "            )\n        )\n        msgSetup = await ctx.send(embed=embedServer, view=viewAcceptedCHs)\n\n        def msgInputCheck(message: discord.Message):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6eecc9960949dc1425511e8f69ba483ea1fdb4d29720695d2fb2ab9b99efe992"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 212,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 210,
        "length": 13,
        "offset": 88,
        "surroundingCode": "        msgSetup = await ctx.send(embed=embedServer, view=viewAcceptedCHs)\n\n        def msgInputCheck(message: discord.Message):\n            return message.channel == ctx.channel and message.author == ctx.author\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a409f9747bd063dede3d0b1fdd19f66c1dec3ee56adec55cfd93213f12d84db5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 218,
      "offset": 9,
      "length": 18,
      "code": {
        "startLine": 216,
        "length": 18,
        "offset": 61,
        "surroundingCode": "        text = ...  # type: str\n        options = []\n        datetimeExpiration = ...  # type: datetime.datetime\n\n        msgError = ...  # type: discord.Message"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c691d58f03c843ae66ce468d39ee87fa07a4d39bad37d89d08d9fcb79cfa65f2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 220,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 218,
        "length": 8,
        "offset": 69,
        "surroundingCode": "        datetimeExpiration = ...  # type: datetime.datetime\n\n        msgError = ...  # type: discord.Message\n        viewReset = discord.ui.View()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1ea9c5239e7b79c535a4c7a312f91d5c4246679d9e19e32d0477aff3a00773a0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 221,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 219,
        "length": 9,
        "offset": 57,
        "surroundingCode": "\n        msgError = ...  # type: discord.Message\n        viewReset = discord.ui.View()\n\n        setupFinished = False"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "99f77692edb0dd383fe0674b3684b7081477d0f486f838ac23453078c01622b0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 223,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 221,
        "length": 13,
        "offset": 47,
        "surroundingCode": "        viewReset = discord.ui.View()\n\n        setupFinished = False\n        index = 0\n        while True:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "aff1ded77b9f666d2eded5235bbcc30001f67179fd1ee9bcd5461c7c1c10d24a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 227,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 225,
        "length": 11,
        "offset": 53,
        "surroundingCode": "        while True:\n            try:\n                msgResponse: discord.Message = await self.bot.wait_for(\n                    \"message\", check=msgInputCheck, timeout=60\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "716ca7c331ab18d4379f0c5eafaf081c7d0be713958d3362758419a4a5351d35"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 231,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 229,
        "length": 12,
        "offset": 75,
        "surroundingCode": "                )\n            except asyncio.TimeoutError:\n                embedTimeout = discord.Embed(\n                    color=Colors.red,\n                    title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a19ba35fb2fdb0550d1d56b92a53873b5e25082a77ba726fb382f45ceb0e59ef"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 251,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 249,
        "length": 10,
        "offset": 35,
        "surroundingCode": "\n            else:\n                msgContent = msgResponse.content\n\n                if msgContent.lower() == \"cancel\":"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "32291478d266a1ae0c0721605caceae0e6e9faefd4d5acb8aa76273a8614e234"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 254,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 252,
        "length": 11,
        "offset": 72,
        "surroundingCode": "\n                if msgContent.lower() == \"cancel\":\n                    embedCancel = discord.Embed(\n                        color=Colors.red,\n                        title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "60e0c25c4d6f3560ee5f64a863bc067a1fa49cbb52a7f805b46d96023b4f46eb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 278,
      "offset": 21,
      "length": 13,
      "code": {
        "startLine": 276,
        "length": 13,
        "offset": 50,
        "surroundingCode": "                        pass\n\n                    embedNotFound = discord.Embed(\n                        color=Colors.red,\n                        title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b2184f8902c28001aa82ee298055ec6130ee3f1ebdeddd021bcf979d1b9c7350"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 289,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 287,
        "length": 12,
        "offset": 97,
        "surroundingCode": "                    embedNotFound.set_footer(text=\"Use 'cancel' to cancel\")\n\n                    tempChannels = []\n                    if \",\" in msgContent:\n                        channelsStrList = msgContent.split(\",\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c95357c33ef2acf73f4635633b3ee0c1063ecb4b2fc592e0d8cc7bec1443aff1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 291,
      "offset": 25,
      "length": 15,
      "code": {
        "startLine": 289,
        "length": 15,
        "offset": 104,
        "surroundingCode": "                    tempChannels = []\n                    if \",\" in msgContent:\n                        channelsStrList = msgContent.split(\",\")\n                        for channelStr in channelsStrList:\n                            stripChannelStr = channelStr.strip()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1ab6e40ad9a70f512c41b758e982ee31a60f0805cade60e3e80374b99a8a0da6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 293,
      "offset": 29,
      "length": 15,
      "code": {
        "startLine": 291,
        "length": 15,
        "offset": 151,
        "surroundingCode": "                        channelsStrList = msgContent.split(\",\")\n                        for channelStr in channelsStrList:\n                            stripChannelStr = channelStr.strip()\n                            channelsStrList[\n                                channelsStrList.index(channelStr)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7c4c915632a174b6379d03818fdaa5bcb25049edf73512998c172f50626e3a61"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 317,
      "offset": 29,
      "length": 8,
      "code": {
        "startLine": 315,
        "length": 8,
        "offset": 85,
        "surroundingCode": "                            )\n                        ):\n                            msgError = await ctx.send(embed=embedNotFound)\n                            try:\n                                await msgError.delete(delay=7)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "21898b55c17789dc7ecc9eca52261aa8de46b6d63285aaa8d68b3c6163e544ca"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 326,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 324,
        "length": 10,
        "offset": 51,
        "surroundingCode": "\n                    else:\n                        channelStr = msgContent.strip()\n                        if channelStr.isdigit():\n                            channel = self.bot.get_channel(int(channelStr))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7c6030ae625cf1808e34eb1ec276fb57c4837e91a4c963b98b1027c810abdcf1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 338,
      "offset": 29,
      "length": 8,
      "code": {
        "startLine": 336,
        "length": 8,
        "offset": 133,
        "surroundingCode": "                            or channel.id not in self.acceptedAnnouncementCHs\n                        ):\n                            msgError = await ctx.send(embed=embedNotFound)\n                            try:\n                                await msgError.delete(delay=7)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c02f0b91de38ea4e32dcb77310dbb65933ce4b02d57a975b198d27a8d1ff5013"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 350,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 348,
        "length": 9,
        "offset": 65,
        "surroundingCode": "                    channels = tempChannels\n\n                    embedText = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a61bdc8ad1e8d960fa7864e0544982b3ae8b3f78da8f919f2f2a4e53ba3e3ed1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 377,
      "offset": 25,
      "length": 12,
      "code": {
        "startLine": 375,
        "length": 12,
        "offset": 72,
        "surroundingCode": "\n                    if len(msgContent) > 2000:\n                        embedTooLong = discord.Embed(\n                            color=Colors.red,\n                            title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "88fecccfdc37369db371abe80d97db6b4e72c83bf417f188b4d4a6512112e4a1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 386,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 384,
        "length": 10,
        "offset": 129,
        "surroundingCode": "                        )\n                        embedTooLong.set_footer(text=\"Use 'cancel' to cancel\")\n                        msgTooLong = await ctx.send(embed=embedTooLong)\n                        try:\n                            await msgTooLong.delete(delay=7)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d3c2cda39bd63d505f393846b45f00634fbf24950af1b56d45ce5cba89b51153"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 396,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 394,
        "length": 9,
        "offset": 59,
        "surroundingCode": "                    text = msgContent\n\n                    embedText = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b971c5dd26ed6be89f045d7671a8ed6e1eef53c80f3f82300ba2f0ba4c708985"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 420,
      "offset": 21,
      "length": 14,
      "code": {
        "startLine": 418,
        "length": 14,
        "offset": 50,
        "surroundingCode": "                        pass\n\n                    optionsStrList = msgContent.split(\",\")\n                    for optionStr in optionsStrList:\n                        options.append(optionStr.strip())"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0c4a03d5ef85accb8c284281a6e5fcf33a5516b1e4c9aad6429ab3ef08cfc4c6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 424,
      "offset": 21,
      "length": 13,
      "code": {
        "startLine": 422,
        "length": 13,
        "offset": 79,
        "surroundingCode": "                        options.append(optionStr.strip())\n\n                    embedDuration = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "099d1a95e6d0e22cb3a10bf7c23405bc77780116b32acc09d68c6c0bba876cb7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 447,
      "offset": 21,
      "length": 8,
      "code": {
        "startLine": 445,
        "length": 8,
        "offset": 50,
        "surroundingCode": "                        pass\n\n                    timeDict: dict = string_time_convert(msgContent)\n                    days = timeDict[\"days\"]\n                    hours = timeDict[\"hours\"]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d8788d1502139433c88d781330dad0be181868e279566be4f7a976f62f970240"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 459,
      "offset": 25,
      "length": 13,
      "code": {
        "startLine": 457,
        "length": 13,
        "offset": 91,
        "surroundingCode": "                        and seconds is None\n                    ):\n                        embedNotFound = discord.Embed(\n                            color=Colors.red,\n                            title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "68a49e112fb468ea1a931358363c8cbbc52d98e0de5deb304cdfc8d0ca7b6b8d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 468,
      "offset": 25,
      "length": 8,
      "code": {
        "startLine": 466,
        "length": 8,
        "offset": 130,
        "surroundingCode": "                        )\n                        embedNotFound.set_footer(text=\"Use 'cancel' to cancel\")\n                        msgError = await ctx.send(embed=embedNotFound)\n                        try:\n                            await msgError.delete(delay=7)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "53920abf74102848ac2dd5ddf2edbac4e499a8b3d6ac51e1993d9fdccc47dfbf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 488,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 486,
        "length": 11,
        "offset": 57,
        "surroundingCode": "                        seconds = 0\n\n                    datetimeNow = datetime.datetime.now(self.est)\n                    try:\n                        datetimeExpiration = ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f66fa35d65da1acbc8052a4fc0fdade68ee09e2b7937ee44c6703e7ac37771f5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 490,
      "offset": 25,
      "length": 18,
      "code": {
        "startLine": 488,
        "length": 18,
        "offset": 115,
        "surroundingCode": "                    datetimeNow = datetime.datetime.now(self.est)\n                    try:\n                        datetimeExpiration = (\n                            datetimeNow\n                            + datetime.timedelta(days=days)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d6e5a7371c042fe22ed4d7d10420ede9c376709e8474e5fba2f2f2e0d8fc361e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 498,
      "offset": 25,
      "length": 13,
      "code": {
        "startLine": 496,
        "length": 13,
        "offset": 102,
        "surroundingCode": "                        )\n                    except OverflowError as _error:\n                        embedOverflow = discord.Embed(\n                            color=Colors.red,\n                            title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "02063eed404fb3b8d727ef97fb771486a3698a164abeb2b42b89aa0460eb0d22"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 508,
      "offset": 25,
      "length": 8,
      "code": {
        "startLine": 506,
        "length": 8,
        "offset": 130,
        "surroundingCode": "                        )\n                        embedOverflow.set_footer(text=\"Use 'cancel' to cancel\")\n                        msgError = await ctx.send(embed=embedOverflow)\n                        try:\n                            await msgError.delete(delay=7)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5004534dbfd950920245941b4c05259ceb09a049b2a836c84e71316808190d3c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 516,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 514,
        "length": 11,
        "offset": 54,
        "surroundingCode": "                        continue\n\n                    embedFinish = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Create Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "04f5df15f5459d3dad0e4bfdbade4003a88b01a99495758250292c70db7f7564"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 528,
      "offset": 21,
      "length": 17,
      "code": {
        "startLine": 526,
        "length": 17,
        "offset": 65,
        "surroundingCode": "                    await msgSetup.delete()\n\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "db774d4756ff12d693cfbdd39d7ba8ec7f3b29632fa2937c9ed2080f44a89235"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 529,
      "offset": 21,
      "length": 17,
      "code": {
        "startLine": 527,
        "length": 17,
        "offset": 110,
        "surroundingCode": "\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedPseudo = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e1a6623efdf78862be54279777d51a2d52b6c3231146b43c427f1cdd87acb97f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 531,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 529,
        "length": 11,
        "offset": 110,
        "surroundingCode": "                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedPseudo = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e99553ab6e4cadfcd9c20857ed341b256f0b06b1cb0ba916d327c4a9506504e5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 542,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 540,
        "length": 12,
        "offset": 43,
        "surroundingCode": "                    )\n\n                    viewOverview = discord.ui.View()\n\n                    for option in options:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "37235b1272b838ee39c20ca1c6395129542d8e36e06af833bc9d1b842b464233"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 546,
      "offset": 25,
      "length": 11,
      "code": {
        "startLine": 544,
        "length": 11,
        "offset": 68,
        "surroundingCode": "                    for option in options:\n\n                        customEmoji = search_custom_emoji(option)\n                        if customEmoji is not None:\n                            option = option.replace(f\"{customEmoji}\", \"\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a2c280432acebf63fa2dded883fd77f0774e9150332e92f9db0e92a56adce891"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 561,
      "offset": 21,
      "length": 13,
      "code": {
        "startLine": 559,
        "length": 13,
        "offset": 94,
        "surroundingCode": "                    await ctx.send(embed=embedPseudo, view=viewOverview)\n\n                    setupFinished = True\n                    break\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9761e5261221f795074b24ae112e0361a579014180bbe97a90e1b145288d391f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 570,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 568,
        "length": 11,
        "offset": 34,
        "surroundingCode": "                pass\n\n            strChannels = \"\"\n            for channel in channels:\n                strChannels += ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2d764f050c6c7d8b89752ebbe83ebe061ad43e48aada2e68f5f7695108131b30"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 576,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 574,
        "length": 12,
        "offset": 31,
        "surroundingCode": "                )\n\n            embedConfirm = discord.Embed(\n                color=Colors.yellow,\n                title=\"Confirm\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "97c8ec0d9db4004fe752e781be4d74a5d9b808b6cfeccdb4a0869255abd6a1a0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 589,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 587,
        "length": 10,
        "offset": 116,
        "surroundingCode": "                text=\"Abusing this feature has severe consequences! | Timeout after 120s\"\n            )\n            msgConfirm = await ctx.send(embed=embedConfirm)\n            await msgConfirm.add_reaction(\"✅\")\n            await msgConfirm.add_reaction(\"❌\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cb78c873e2c5bf350b6f487d2f76d7f569ffbf1f6ac692d96c55ce039c48ec02"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 593,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 591,
        "length": 12,
        "offset": 64,
        "surroundingCode": "            await msgConfirm.add_reaction(\"❌\")\n\n            def confirmCheck(reaction, user):\n                return (\n                    user.id == ctx.author.id"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1824dd1f3f264f6e4a9185c91fbacd7a2de5ed8454fafe664b9108aab913e4c1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 601,
      "offset": 17,
      "length": 16,
      "code": {
        "startLine": 599,
        "length": 16,
        "offset": 34,
        "surroundingCode": "\n            try:\n                reactionResponse, userResponse = await self.bot.wait_for(\n                    \"reaction_add\", check=confirmCheck, timeout=120\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3f1c7ee4ce4d4a53afdcc775706bf527fca2b2704792f8043e87f721287a8092"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 601,
      "offset": 35,
      "length": 12,
      "code": {
        "startLine": 599,
        "length": 12,
        "offset": 52,
        "surroundingCode": "\n            try:\n                reactionResponse, userResponse = await self.bot.wait_for(\n                    \"reaction_add\", check=confirmCheck, timeout=120\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6fd5a50112affde5eb1d23a782dc4b08b827464b0f7f5c34abf573fd21e0355f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 605,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 603,
        "length": 12,
        "offset": 75,
        "surroundingCode": "                )\n            except asyncio.TimeoutError:\n                embedTimeout = discord.Embed(\n                    color=Colors.red,\n                    title=\"Confirm\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1a2dbbf1fd4b2ebdafa0b0a386bd1e79c95c2ab3a9a5eb1d3868c00ff03d187c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 621,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 619,
        "length": 12,
        "offset": 76,
        "surroundingCode": "                    await msgConfirm.clear_reactions()\n\n                    embedSending = discord.Embed(\n                        color=Colors.yellow,\n                        title=\"Confirm\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c7cc39b345a078657aca829fd6d2227c420cf6a6bff1af97e4d68aebb3657ef8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 630,
      "offset": 21,
      "length": 17,
      "code": {
        "startLine": 628,
        "length": 17,
        "offset": 95,
        "surroundingCode": "                    print(\"sending\")  # TODO: Sending to original channel\n\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d190703e586a806875a75bb55af8aa29558280e2067ca810f656398c1cf97ed9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 631,
      "offset": 21,
      "length": 17,
      "code": {
        "startLine": 629,
        "length": 17,
        "offset": 110,
        "surroundingCode": "\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedVoting = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "826915c20f378b1a003244b301f67c22c260f0f44280738f64013349523442ea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 633,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 631,
        "length": 11,
        "offset": 110,
        "surroundingCode": "                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedVoting = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Voting\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2f28bab27f6a8f59d4a608a52cc6905e2091d82ffa6a9b5611d620b854c94386"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 643,
      "offset": 21,
      "length": 10,
      "code": {
        "startLine": 641,
        "length": 10,
        "offset": 43,
        "surroundingCode": "                    )\n\n                    viewVoting = discord.ui.View()\n                    for option in options:\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d17447d444e51c6160d377be284e578c15204d932a4cd8c274f9915d913b9c44"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 646,
      "offset": 25,
      "length": 11,
      "code": {
        "startLine": 644,
        "length": 11,
        "offset": 68,
        "surroundingCode": "                    for option in options:\n\n                        customEmoji = search_custom_emoji(option)\n                        if customEmoji is not None:\n                            option = option.replace(f\"{customEmoji}\", \"\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "17d7e9b6826b83a0b1fadfbad024549cc7d71b646fb7b9bb813dfce2048b35b2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 659,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 657,
        "length": 11,
        "offset": 47,
        "surroundingCode": "                        )\n\n                    channelTest = self.bot.get_channel(942076483290161203)\n                    try:\n                        msgVote = await channelTest.send("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "472e2e840549664b18fd78c6b99dce59cbe1a63a8e1be155f520bda4652e14ba"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 661,
      "offset": 25,
      "length": 7,
      "code": {
        "startLine": 659,
        "length": 7,
        "offset": 124,
        "surroundingCode": "                    channelTest = self.bot.get_channel(942076483290161203)\n                    try:\n                        msgVote = await channelTest.send(\n                            content=\"@ everyone\", embed=embedVoting, view=viewVoting\n                        )  # TODO: everyone"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1d818828fae848a64450f7904fc4800ba7ded3f138c2b5b2cce21da3f01e5adf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 665,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 663,
        "length": 10,
        "offset": 116,
        "surroundingCode": "                        )  # TODO: everyone\n                    except Exception as _error:\n                        embedError = discord.Embed(\n                            color=Colors.red,\n                            title=\"Error while sending message/s\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "57613330cde0a9cbc3b33b6504879b3a7a8f115c1985bf272a7eaf497dd8e8eb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 680,
      "offset": 25,
      "length": 8,
      "code": {
        "startLine": 678,
        "length": 8,
        "offset": 114,
        "surroundingCode": "                        await msgConfirm.edit(embed=embedError)\n                    else:\n                        compDict = {}\n                        for option in options:\n                            compDict[option] = 0"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bcfcb81936b6f9bd19e5904373caf016512fbc499af976f051d260a217809006"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 684,
      "offset": 25,
      "length": 8,
      "code": {
        "startLine": 682,
        "length": 8,
        "offset": 74,
        "surroundingCode": "                            compDict[option] = 0\n\n                        compDict = json.dumps(compDict)\n                        query = database.Voting.create(\n                            msgID=msgVote.id, components=compDict"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b470c9f58a48f885dd4be536789a72d2791abaf2d7f18557193b705907ca7936"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 690,
      "offset": 25,
      "length": 12,
      "code": {
        "startLine": 688,
        "length": 12,
        "offset": 62,
        "surroundingCode": "                        query.save()\n\n                        embedSuccess = discord.Embed(\n                            color=Colors.green,\n                            title=\"Confirm\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c74d2b4eff91290eb69034595db755936e576954269bc5321522607d3423dffb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 701,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 699,
        "length": 11,
        "offset": 76,
        "surroundingCode": "                    await msgConfirm.clear_reactions()\n\n                    embedCancel = discord.Embed(\n                        color=Colors.red,\n                        title=\"Confirm\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "148cfdfe87c81e0f232f1b6b7b0bc2d0a513d57bcf6461967180376b9d0729d4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 30,
      "offset": 40,
      "length": 19,
      "code": {
        "startLine": 28,
        "length": 19,
        "offset": 95,
        "surroundingCode": "\nclass TicTacToeButton(discord.ui.Button[\"TicTacToe\"]):\n    def __init__(self, x: int, y: int, xUser: discord.User, yUser: discord.User):\n        super().__init__(style=discord.ButtonStyle.secondary, label=\"\\u200b\", row=y)\n        self.x = x"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8b2f26a7d8ca43e1e35a0b0f9e4f0f2eb0092c61e281fb372679493bb2ecb9d2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 30,
      "offset": 61,
      "length": 19,
      "code": {
        "startLine": 28,
        "length": 19,
        "offset": 116,
        "surroundingCode": "\nclass TicTacToeButton(discord.ui.Button[\"TicTacToe\"]):\n    def __init__(self, x: int, y: int, xUser: discord.User, yUser: discord.User):\n        super().__init__(style=discord.ButtonStyle.secondary, label=\"\\u200b\", row=y)\n        self.x = x"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "79a3fc2d341df30b89227b0ca5d55144012565d0b02624015380eeda51afd7e5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 101,
      "offset": 24,
      "length": 7,
      "code": {
        "startLine": 99,
        "length": 7,
        "offset": 36,
        "surroundingCode": "    Tie = 2\n\n    def __init__(self, XPlayer, OPlayer):\n        super().__init__()\n        self.current_player = self.X"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "51f0fdc8785cd1b22d6e88c5852ccfe37c27cabc58518aec2946d8f3eb3e9b38"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 101,
      "offset": 33,
      "length": 7,
      "code": {
        "startLine": 99,
        "length": 7,
        "offset": 45,
        "surroundingCode": "    Tie = 2\n\n    def __init__(self, XPlayer, OPlayer):\n        super().__init__()\n        self.current_player = self.X"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "31507e9d8bd9db410ef1902aa498f760202290176392be49a75a1c6317d1233f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 316,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 314,
        "length": 17,
        "offset": 116,
        "surroundingCode": "    @commands.cooldown(1, 10, commands.BucketType.guild)\n    async def donate(self, ctx: commands.Context):\n        timmyDonation_png = discord.File(\n            Others.timmy_donation_path, filename=Others.timmy_donation_png\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "29cc557875fbaba2bd256e2fded7246ba05782c0c2f8e9b4245a01989a444d31"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 320,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 318,
        "length": 11,
        "offset": 19,
        "surroundingCode": "        )\n\n        embedDonate = discord.Embed(\n            color=Colors.ss_blurple,\n            title=f\"Donate\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "26899654cd1dc7eff666631986c3b4014af2b8db302a9b92de2d1abd36e48c5c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 355,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 353,
        "length": 7,
        "offset": 35,
        "surroundingCode": "        reason: str\n    ):\n        modRole = discord.utils.get(interaction.user.guild.roles, id=MainID.r_moderator)\n        if modRole not in interaction.user.roles:\n            return await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "44d416a55a3d50342f6cb72acd848911564d107419f2479de96776fd60b312d1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 361,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 359,
        "length": 8,
        "offset": 53,
        "surroundingCode": "                ephemeral=True\n            )\n        roleName = {\n            \"debate\": [MainID.r_debate_ban, \"Debate\"],\n            \"count\": [MainID.r_count_ban, \"Count\"],"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2ca17beb1ece2770f1b6008124e68b1c6eeaa1679be91a8b12200d6fbd291a6d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 369,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 367,
        "length": 12,
        "offset": 126,
        "surroundingCode": "        role = discord.utils.get(interaction.user.guild.roles, id=roleName[0])\n        if role not in user.roles:\n            updateReason = f\"{roleName[1]} Ban requested by {interaction.user.name} | Reason: {reason}\"\n            await user.add_roles(role, reason=updateReason)\n            await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3820f0c436f9d06b04ea8cea408f70a565b5d3832543881b025006e6bb9418c2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 375,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 373,
        "length": 12,
        "offset": 40,
        "surroundingCode": "            )\n        else:\n            updateReason = f\"{roleName[1]} Unban requested by {interaction.user.name} | Reason: {reason}\"\n            await user.remove_roles(role, reason=updateReason)\n            await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9392642eab433fdaa34737b090f0f27d61efcc500c48e82e0dea827c39b3ace7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 505,
      "offset": 17,
      "length": 2,
      "code": {
        "startLine": 503,
        "length": 2,
        "offset": 111,
        "surroundingCode": "                await message.delete()\n                database.db.connect(reuse_if_open=True)\n                NE = database.AdminLogging.create(\n                    discordID=ctx.author.id, action=\"KILL\"\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "96faeb81c582ddab81f42279c73d9f6d3e4131277059e4d1934d49610a1176f2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 579,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 577,
        "length": 8,
        "offset": 19,
        "surroundingCode": "        )\n\n        UserList = []\n        RoleList = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c7f801849f116af74aa834290966cce62ef730e8b0bded7206ab8a8a883afb57"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 580,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 578,
        "length": 8,
        "offset": 31,
        "surroundingCode": "\n        UserList = []\n        RoleList = []\n\n        for user in users:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5540b9e642a9ac9476c0d40619130ae597fc452d286b7edcb786c6dd7bf9c3c9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 587,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 585,
        "length": 8,
        "offset": 51,
        "surroundingCode": "            RoleList.append(role.mention)\n\n        UserList = \", \".join(UserList)\n        RoleList = \", \".join(RoleList)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0a4cc29d58963c124a704c7adf8f9e07fae8ae556fb90b94c081d47a377612b9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 588,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 586,
        "length": 8,
        "offset": 48,
        "surroundingCode": "\n        UserList = \", \".join(UserList)\n        RoleList = \", \".join(RoleList)\n\n        embed.add_field("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7bb090b8018527768a6e035ea3622778611d05ff017da8033ed1d464fdaa5474"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 613,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 611,
        "length": 12,
        "offset": 61,
        "surroundingCode": "        await view.wait()\n        await msg.delete()\n        ViewResponse = str(view.children[0].values)\n        RoleID = self.decodeDict[ViewResponse]\n        await ctx.send(f\"<@&{RoleID}>\\n{message}\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ef53b841893f254a80d96c456342b418b2ef071fcd1e78f4d665f343381a2f96"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 614,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 612,
        "length": 6,
        "offset": 87,
        "surroundingCode": "        await msg.delete()\n        ViewResponse = str(view.children[0].values)\n        RoleID = self.decodeDict[ViewResponse]\n        await ctx.send(f\"<@&{RoleID}>\\n{message}\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "03a9fd494a00d46e2c2d926c34fcc0dec5eaa4751cb399bfe18e454f085175cf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 650,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 648,
        "length": 2,
        "offset": 67,
        "surroundingCode": "    @is_botAdmin\n    async def say(self, ctx, *, message):\n        NE = database.AdminLogging.create(\n            discordID=ctx.author.id, action=\"SAY\", content=message\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "66deac94c1c48b9f738409fe667eea78f4ee1d651b390608f79b90acedecfe62"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 678,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 676,
        "length": 2,
        "offset": 28,
        "surroundingCode": "            return\n\n        NE = database.AdminLogging.create(\n            discordID=ctx.author.id, action=\"SAYVC\", content=text\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6db26b202f7aaecf93ee0839dffff08684d2d61f3fd868ae2c5ed2eda6727547"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 684,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 682,
        "length": 9,
        "offset": 71,
        "surroundingCode": "\n        # Lets prepare our text, and then save the audio file\n        TTSClient = texttospeech.TextToSpeechClient(\n            credentials=access_secret(\"ttscreds\", True, 2)\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fe1de815edb48a0a8647e959cac849485e85eb28a4c7053355b7ceebb2439e28"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/todocommands.py",
      "language": "Python",
      "line": 89,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 87,
        "length": 8,
        "offset": 57,
        "surroundingCode": "        database.db.connect(reuse_if_open=True)\n\n        todoList = []\n        query = database.ToDo.select().where(database.ToDo.discordID == ctx.author.id)\n        for todo in query:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ca2412212dc549025e8586046a6d78656a3d044cd0a041241773e47e6a1a6d85"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/todocommands.py",
      "language": "Python",
      "line": 94,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 92,
        "length": 9,
        "offset": 69,
        "surroundingCode": "            todoList.append(f\"{str(todo.id)}) {todo.item}\")\n\n        todoFinal = \"\\n\".join(todoList)\n\n        database.db.close()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5ca0a04b6bcb5939dd1228d059e34eeb9621cf40d4b46d3615da42f24bb2b11f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 51,
      "offset": 15,
      "length": 7,
      "code": {
        "startLine": 49,
        "length": 7,
        "offset": 56,
        "surroundingCode": "    @commands.command()\n    @is_botAdmin4\n    async def Fmodify(self, ctx, num: int, val: bool):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b10ca248c7f79dfa16a7e92400e56efc4f7fde1a51257af02ef00ed135bec4ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 52,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 50,
        "length": 7,
        "offset": 81,
        "surroundingCode": "    @is_botAdmin4\n    async def Fmodify(self, ctx, num: int, val: bool):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n            .where(database.CheckInformation.id == 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f7eab88c784c4306097a68db0d33af2d3aafc9f67f2d9e991882d8d97ec1fc9b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 58,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 56,
        "length": 14,
        "offset": 19,
        "surroundingCode": "        )\n\n        databaseValues = {\n            1: \"CheckDB.MasterMaintenance\",\n            2: \"CheckDB.guildNone\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fad078494caa1f2651a2325c466f2548367f31528062c3ef6fade19d91ad3013"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 96,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 94,
        "length": 7,
        "offset": 62,
        "surroundingCode": "    @filters.command()\n    async def list(self, ctx):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n            .where(database.CheckInformation.id == 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0558cfa46027c1b44d8bd8d00b575a3146544d3289662d221f503a24aa219205"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 126,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 124,
        "length": 17,
        "offset": 69,
        "surroundingCode": "    @is_botAdmin3\n    async def delete(self, ctx, num: int):\n        WhitelistedPrefix: database.WhitelistedPrefix = (\n            database.WhitelistedPrefix.select()\n            .where(database.WhitelistedPrefix.id == num)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7f91f0f1357ae898c91468c4cbd235ea86b83ea5674c5c508454fd1f67b46032"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 137,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 135,
        "length": 17,
        "offset": 64,
        "surroundingCode": "    @is_botAdmin3\n    async def add(self, ctx, prefix):\n        WhitelistedPrefix = database.WhitelistedPrefix.create(\n            prefix=prefix, status=True\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4518140d1f753a52d5a594eaa68b4e89661147f00f45944c258d5e4e7973cebb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 145,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 143,
        "length": 8,
        "offset": 40,
        "surroundingCode": "    async def list(self, ctx):\n\n        PrefixDB = database.WhitelistedPrefix\n        response = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d08f82904545d5d7078a0718aba3778cf55f6081d457652b322712da6f0d1843"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 151,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 149,
        "length": 12,
        "offset": 54,
        "surroundingCode": "\n            if entry.status is True:\n                statusFilter = \"ACTIVE\"\n            else:\n                statusFilter = \"DISABLED\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "47123976cd79fb75253044624a56d5ee26b8550c0b9253fb33032347fd8ccef2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 153,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 151,
        "length": 12,
        "offset": 74,
        "surroundingCode": "                statusFilter = \"ACTIVE\"\n            else:\n                statusFilter = \"DISABLED\"\n\n            response.append(f\"Prefix `{entry.prefix}`:\\n{Emoji.barrow} {statusFilter}\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e2bf65c9306405407588724e8b41c34f8b4ca6e2075538b2b9907f0f4e9c9016"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 259,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 257,
        "length": 7,
        "offset": 87,
        "surroundingCode": "    async def _gitpull(self, ctx, mode=\"-a\", branch=None):\n        output = \"\"\n        hostDir = get_host_dir()\n\n        if branch is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7c49382f8ea07b65a7361383437bc09b8c86f0a65fba1c3d5f8ecf0e69a907dd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 331,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 329,
        "length": 7,
        "offset": 29,
        "surroundingCode": "        output = \"\"\n\n        hostDir = get_host_dir()\n        if hostDir == \"/home/timmya\":\n            branch = \"origin/main\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e30dd6a1f7232e2edbbbe6b765c760405024b95678b608a391506affba27a096"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 413,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 411,
        "length": 9,
        "offset": 56,
        "surroundingCode": "    @is_botAdmin\n    async def list(self, ctx):\n        adminList = []\n\n        query1 = database.Administrators.select().where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "09e72bdd17cb4abed668e32149a474b96b0b602a0605ea8152a0f0a95fbd0268"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 422,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 420,
        "length": 11,
        "offset": 71,
        "surroundingCode": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL1 = \"\\n\".join(adminList)\n\n        adminList = []"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8307f56845f0d1eb39b3c6376eb94ba4664251cb482f356f0f838dedc4b0b99b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 424,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 422,
        "length": 9,
        "offset": 52,
        "surroundingCode": "        adminLEVEL1 = \"\\n\".join(adminList)\n\n        adminList = []\n        query2 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 2"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ee04f532602c87809a4742e8e368cb2f56ff4c98038217128480ec75af1bf054"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 432,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 430,
        "length": 11,
        "offset": 71,
        "surroundingCode": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL2 = \"\\n\".join(adminList)\n\n        adminList = []"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4c1b9fc377020ab05e9e1466c6b87d0f38cccc01ada050526eae8be12077f1c1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 434,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 432,
        "length": 9,
        "offset": 52,
        "surroundingCode": "        adminLEVEL2 = \"\\n\".join(adminList)\n\n        adminList = []\n        query3 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 3"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "92096c6902a73fa58f76161977bd8c64588ee9247ff85af77e3001e8d47cfe17"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 442,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 440,
        "length": 11,
        "offset": 71,
        "surroundingCode": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL3 = \"\\n\".join(adminList)\n\n        adminList = []"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c0248f02a0bdd33669e18a8fea2678c8c6d55be2d126457c16f6b6de75036209"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 444,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 442,
        "length": 9,
        "offset": 52,
        "surroundingCode": "        adminLEVEL3 = \"\\n\".join(adminList)\n\n        adminList = []\n        query4 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 4"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "090ac25bb62cb29c2dbb0a2f2841ee9a65f2bd3f1f163e051447cabb4daf2553"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 452,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 450,
        "length": 11,
        "offset": 71,
        "surroundingCode": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL4 = \"\\n\".join(adminList)\n\n        embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9d9291d52bcf4d0e86a5d4e860e294a41ceea19fa10e0c12b190db414aba5674"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 475,
      "offset": 33,
      "length": 16,
      "code": {
        "startLine": 473,
        "length": 16,
        "offset": 67,
        "surroundingCode": "    @w.command()\n    @is_botAdmin4\n    async def remove(self, ctx, ID: discord.User):\n        database.db.connect(reuse_if_open=True)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3b5deea0d49663ae805a63d1881cd53786b4a65a2283be14a8f3c755c4b0c8c7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 505,
      "offset": 30,
      "length": 16,
      "code": {
        "startLine": 503,
        "length": 16,
        "offset": 64,
        "surroundingCode": "    @w.command()\n    @is_botAdmin4\n    async def add(self, ctx, ID: discord.User, level: int):\n        database.db.connect(reuse_if_open=True)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ade57b6754d9c13c3993d879064a1dc48c338bd0c6ddc90f0925521dd8d4e6d4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 550,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 548,
        "length": 9,
        "offset": 81,
        "surroundingCode": "            theproc = subprocess.Popen([sys.executable, \"main.py\"])\n\n            runThread = Thread(target=theproc.communicate)\n            runThread.start()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4d1c2180df5cb09f4baf6816bd1a1f517b1cf1af5380a2b3e813e55ad4495f7f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 80,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 78,
        "length": 11,
        "offset": 74,
        "surroundingCode": "\n    async def on_submit(self, interaction: discord.Interaction):\n        respChannel = self.bot.get_channel(968345000100384788)\n        await respChannel.send(\"\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "144089169d76dfea1874af8c8844ca41668e002fd01ae9869b78bf37921c492a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 133,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 131,
        "length": 7,
        "offset": 86,
        "surroundingCode": "        organizationunit: Literal[\"Personal Account\", \"Team Account\"],\n    ):\n        HR_Role = discord.utils.get(interaction.user.guild.roles, id=HRID.r_hr_staff)\n        if HR_Role not in interaction.user.roles:\n            return await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ed9e59bf446bf9eacb9298e08e335fa4c6005f680d129e08088b9b5c9b0a4b31"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 170,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 168,
        "length": 7,
        "offset": 125,
        "surroundingCode": "    @app_commands.guilds(HRID.g_hr)\n    async def delete_gsuite(self, interaction: discord.Interaction, email: str):\n        HR_Role = discord.utils.get(interaction.guild.roles, id=HRID.r_hr_staff)\n        if HR_Role not in interaction.user.roles:\n            return await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6f1f175228bb1d54d5d7a612d63aaf7ab4e687b9ab9abbb5072c2e86750e1c12"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 194,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 192,
        "length": 7,
        "offset": 111,
        "surroundingCode": "    )\n    async def suspend_gsuite(self, interaction: discord.Interaction, email: str, suspend: bool):\n        HR_Role = discord.utils.get(interaction.guild.roles, id=HRID.r_hr_staff)\n        if HR_Role not in interaction.user.roles:\n            return await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c444c7390f10bad9ca02afacbd0133713d09c3ad16395fbbc208160c1f98e5be"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/RedirectService.py",
      "language": "Python",
      "line": 36,
      "offset": 29,
      "length": 2,
      "code": {
        "startLine": 34,
        "length": 2,
        "offset": 114,
        "surroundingCode": "    @commands.command(alliases=[\"redirectremove\", \"removeredirect\"])\n    @is_botAdmin\n    async def rr(self, ctx, ID):\n        self.raOBJ.del_redirect(ID)\n        await ctx.send(f\"Redirect removed for {ID}\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a046dbd3de650f7b2457486b25903c248d57dbfe10a38399efee82b1c9738239"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 155,
      "offset": 15,
      "length": 9,
      "code": {
        "startLine": 153,
        "length": 9,
        "offset": 55,
        "surroundingCode": "    @commands.command()\n    @is_botAdmin\n    async def techEmbed(self, ctx):\n        embed = discord.Embed(\n            title=\"Bot Developer Commissions\", color=discord.Color.brand_green()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c01a90b3b04c4a916be2591b0e980e9be59a8eaa35662bc69b4b5dea77d613ac"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 224,
      "offset": 15,
      "length": 14,
      "code": {
        "startLine": 222,
        "length": 14,
        "offset": 39,
        "surroundingCode": "\n    @commands.command()\n    async def leadershipPost(self, ctx: commands.Context):\n        \"\"\"\n        Post the Bot Development Commission Process in the leadership server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fcd287b0a281b51ccc7d2b83496eb3e8ad1c9c4e760813dc2f45df3a1855666b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 240,
      "offset": 15,
      "length": 19,
      "code": {
        "startLine": 238,
        "length": 19,
        "offset": 45,
        "surroundingCode": "\n    @tasks.loop(seconds=60.0)\n    async def autoUnarchiveThread(self):\n        \"\"\"\n        Creates a task loop to make sure threads don't automatically archive due to inactivity."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fea67cb48418d11a634019e0e957c3939110a97ce82fee7c3085aa4d6bd87180"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 38,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 36,
        "length": 14,
        "offset": 6,
        "surroundingCode": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cbb1cc7d09512f39f97ff7b033fe93fb87a790783bdbac4aca4c66758480bf78"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 51,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 49,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1c59ed09debdc35e4c0de3282fce2d7f9d83ae434eb296d700f01a1a399bf2c5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 51,
      "offset": 22,
      "length": 17,
      "code": {
        "startLine": 49,
        "length": 17,
        "offset": 23,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b7c471b510ae374f3a2634a2aeac60f958979cd296e902627badc2869537cad6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 54,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 52,
        "length": 9,
        "offset": 33,
        "surroundingCode": "    now = datetime.now(EST)\n\n    deltaTime = now - dateObj\n\n    minutes = str(deltaTime.total_seconds() // 60)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2604bb9acfbc2eb66f07efe5a02d139119448b793e4668d42e9220ef794eb23d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 237,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 235,
        "length": 12,
        "offset": 96,
        "surroundingCode": "                timeout = await view.wait()\n                if not timeout:\n                    SelectedGame = var.view_response\n                else:\n                    return await ctx.send(\"Timed out, try again later.\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7f292649c2959b5e9bee1315d75551f93c62cd7e7db1490b9d1e6e01700fb115"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 240,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 238,
        "length": 6,
        "offset": 111,
        "surroundingCode": "                else:\n                    return await ctx.send(\"Timed out, try again later.\")\n                GameID = GameDict[SelectedGame]\n                code = str(await self._create_invite(ctx.author.voice, GameID))\n                await ctx.send(\"Loading...\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2eb73b79d7d591685804abf84ef2507f7d06bf7633e7767b0373efbaf49a2509"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 298,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 296,
        "length": 12,
        "offset": 96,
        "surroundingCode": "                timeout = await view.wait()\n                if not timeout:\n                    SelectedGame = var.view_response\n                else:\n                    return await ctx.send(\"Timed out, try again later.\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "44821a896b1fb46cebc96df1176538ca1a46a4d4da63625fb14bf59a2e067cb0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 302,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 300,
        "length": 6,
        "offset": 125,
        "surroundingCode": "                    return await ctx.send(\"Timed out, try again later.\")\n                print(SelectedGame)\n                GameID = GameDict[SelectedGame]\n                code = str(await self._create_invite(ctx.author.voice, GameID))\n                await ctx.send("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "94cc72ced4b2a5a0c8ebbbf7287b6aee0f5720b85ec002a75014a9cde7072eec"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 397,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 395,
        "length": 2,
        "offset": 103,
        "surroundingCode": "    async def rename(self, ctx, *, name=None):\n        database.db.connect(reuse_if_open=True)\n        SB = discord.utils.get(ctx.guild.roles, name=self.SB)\n        legend = discord.utils.get(ctx.guild.roles, name=self.Legend)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "261415239a888f5dfc59986ae5408b51e8c864449abb6780e5372031403d9a1e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 400,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 398,
        "length": 2,
        "offset": 79,
        "surroundingCode": "        legend = discord.utils.get(ctx.guild.roles, name=self.Legend)\n\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ff42b95790bdeaa9a120611976038a0e63038bd5a1802a51eae5640372b6bb6f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 401,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 399,
        "length": 3,
        "offset": 72,
        "surroundingCode": "\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1eb77c4463ca7ef9088b324003c60c43bfddd2d9fa4d9a51c25ff2d55f348454"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 402,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 400,
        "length": 2,
        "offset": 135,
        "surroundingCode": "        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "45c0c87c5337d69e3d57ee755263a18c462134f24083fb7809b70732453979fb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 403,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 401,
        "length": 2,
        "offset": 134,
        "surroundingCode": "        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "352a0420812a4a14a5d7dc9a3d73509a7ef70af9299af95d0d3142d7acd3dd27"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 404,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 402,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "326e3d53db2f453ce74c0ce5ab243c62765786f6811d1b93f2703e9953720da2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 405,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 403,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "07d6c187c3882082d7e19e3a2023925de099771d41f4e92bdb910068968ca9b8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 407,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 405,
        "length": 4,
        "offset": 71,
        "surroundingCode": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8bf7f7ff1266317ada21ae2fdc6e655137b097ac11931845e1afeedb0ccee2a9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 408,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 406,
        "length": 4,
        "offset": 75,
        "surroundingCode": "\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1b4906a4c386327cc0ced446722866025ce60b9ff00e680ab342745f545b9ed6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 409,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 407,
        "length": 4,
        "offset": 140,
        "surroundingCode": "        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ca9ff41d275c099fe47fd616559c20bdea15655000129ebc0dcfa5ee19f1cdeb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 410,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 408,
        "length": 3,
        "offset": 140,
        "surroundingCode": "        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0f7cb7bc36366887360c358a6f74799617b97036eb1d031fe1ab41db86ce2ad6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 411,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 409,
        "length": 3,
        "offset": 138,
        "surroundingCode": "        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d6d3360d1b6ed75bdbdb3255ab4081d096dfc3bb5a54fd514e228840387a2326"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 412,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 410,
        "length": 3,
        "offset": 136,
        "surroundingCode": "        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0ff47051baeb3695002f18887994bc9cde65a499bb457adc487f22dee022eed1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 413,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 411,
        "length": 3,
        "offset": 136,
        "surroundingCode": "        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4343cbf7d0127c8c4a208df2a033fe597cd432ad4464ff298216817468fbda25"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 414,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 412,
        "length": 3,
        "offset": 136,
        "surroundingCode": "        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "17f9fc7ffb89fdd22183edb00f1f4b45715e9f6fd1eee882c71951f59a75590f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 415,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 413,
        "length": 3,
        "offset": 136,
        "surroundingCode": "        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n\n        roleList = ["
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6a28875ad5bc9692649006439cbc0e4b9cadf4714b04c055f16fec42f44c3bfe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 417,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 415,
        "length": 8,
        "offset": 73,
        "surroundingCode": "        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n\n        roleList = [\n            SB,\n            AT,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "328248c8b95af2b182209f98b8b295db4e30c24c31bb3411f87efac7532d55d5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 569,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 567,
        "length": 10,
        "offset": 89,
        "surroundingCode": "                )\n                print(f\"T: {query.TutorBotSessionID}\")\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(\n                    query.datetimeObj\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bb94c026c40f69c846fc722fd1b1097701d125e02227a96115c1129006fc36a6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 574,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 572,
        "length": 6,
        "offset": 73,
        "surroundingCode": "\n                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "721fa9f78af71edbc20b87888b3597b1d539793cb4171c7ef8de1b6e96d40fea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 575,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 573,
        "length": 6,
        "offset": 125,
        "surroundingCode": "                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4bdf01d65d029b0d0442cf9a0c5986d607b23646a7017458bf72ac780a616ff9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 594,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 592,
        "length": 12,
        "offset": 64,
        "surroundingCode": "\n                print(query.TutorBotSessionID)\n                tutorSession = database.TutorBot_Sessions.select().where(\n                    database.TutorBot_Sessions.SessionID == query.TutorBotSessionID\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4f4f549cd3d7228245ebf9085b8d76c4acbf8ef0e6808ed9ab5bcda5355eb790"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 601,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 599,
        "length": 12,
        "offset": 63,
        "surroundingCode": "\n                if tutorSession.exists():\n                    tutorSession = tutorSession.get()\n\n                    student = self.bot.get_user(tutorSession.StudentID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0604996607352069deeaa4e96135b64de5cb53bef67757ba227fb276b4b752ba"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 606,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 604,
        "length": 6,
        "offset": 89,
        "surroundingCode": "                    tutor = self.bot.get_user(tutorSession.TutorID)\n\n                    HOURCH = self.bot.get_channel(self.TutorLogID)\n\n                    hourlog = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9cba0d94b966cefda0c205f651f7f1366c7f95a0de9472b7596b276bbe258296"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 673,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 671,
        "length": 10,
        "offset": 61,
        "surroundingCode": "                )\n                tag.save()\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(q.datetimeObj)\n\n                day, now = showTotalMinutes(VCDatetime)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e9b3602acc48f7b07fec8000e03da6f5330b93019f748a09becb7820a909e45b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 676,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 674,
        "length": 6,
        "offset": 73,
        "surroundingCode": "\n                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "aefe0fae70be60b91d3ee8abb97fac62c9846c8306c82b111e12a9b2e9985e2d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 677,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 675,
        "length": 6,
        "offset": 125,
        "surroundingCode": "                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8285fa35962b207375a62ec4aaaae7374395251a5e6e933da39b0e89ef0fe4cf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 694,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 692,
        "length": 12,
        "offset": 60,
        "surroundingCode": "\n                print(q.TutorBotSessionID)\n                tutorSession = database.TutorBot_Sessions.select().where(\n                    database.TutorBot_Sessions.SessionID == q.TutorBotSessionID\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "78c7943d5016cd5b35b54362ac6dce94c3f3d799f57605d5fe2a11c93c191bd6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 698,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 696,
        "length": 12,
        "offset": 80,
        "surroundingCode": "                )\n                if tutorSession.exists():\n                    tutorSession = tutorSession.get()\n\n                    student = self.bot.get_user(tutorSession.StudentID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "93ec38d6115aca524950843dbf563e01a66365e03239659c537913aaccffbe1f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 703,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 701,
        "length": 6,
        "offset": 89,
        "surroundingCode": "                    tutor = self.bot.get_user(tutorSession.TutorID)\n\n                    HOURCH = self.bot.get_user(self.TutorLogID)\n\n                    hourlog = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "525da73d4697c5f29306e97d74004cfce0262a68d15b51eb5d0ebf065148c946"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 833,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 831,
        "length": 10,
        "offset": 61,
        "surroundingCode": "                    .get()\n                )\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(q.datetimeObj)\n\n                day, now = showTotalMinutes(VCDatetime)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c0943d84dbc075068b9c9ff867f5cbd7a5690eecf9b9ef7a403eb2a68153ea65"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 889,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 887,
        "length": 3,
        "offset": 62,
        "surroundingCode": "        member = ctx.guild.get_member(ctx.author.id)\n\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4e607271c7e491ef9e3f8f239ec32ccc1b19700fcd90fc6b55a87f04f6ab2c7f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 890,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 888,
        "length": 5,
        "offset": 62,
        "surroundingCode": "\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c711809fed5e7f4602943621533096e49db32330772ef62927454e4aac10622c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 891,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 889,
        "length": 4,
        "offset": 112,
        "surroundingCode": "        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4ab2ccb7c6741fea05a01e8b4667c6c9b78df0c5ec6c479fcb79360b92176e78"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 892,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 890,
        "length": 3,
        "offset": 125,
        "surroundingCode": "        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2283934277bb7dbd0c7ed0056cf38c521ae7897834a1aae084f6bd713b19585d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 893,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 891,
        "length": 4,
        "offset": 138,
        "surroundingCode": "        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e5be996aadddf0287a234d7a49153870927d0a464ed5dd08ae8bc6d7d82ff733"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 894,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 892,
        "length": 2,
        "offset": 138,
        "surroundingCode": "        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cbc666bb3799bb0eca745da17b5081c54326a4d47d0b73db2d9c5769ac4f7796"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 895,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 893,
        "length": 2,
        "offset": 136,
        "surroundingCode": "        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e8fd97d1c9c4acce952e21107cfdaefaa34379187d516d683c88ee6353c08a48"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 896,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 894,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "48e7e352f2d8bba3ee14e2ac9b4f20b632f261d48c30ca10fd0aefc20e74cb53"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 898,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 896,
        "length": 2,
        "offset": 71,
        "surroundingCode": "        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "eac1854231245c5ec0aecefd22facf759eb751de4fb710d6a9d88e15f680c57f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 899,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 897,
        "length": 2,
        "offset": 82,
        "surroundingCode": "\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")\n        roles = [BM, SE, E, OWNER]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1a008a378f997ace50bd691be4209d9b6ddd56684fa0dc770232854f95b8bf45"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 900,
      "offset": 9,
      "length": 1,
      "code": {
        "startLine": 898,
        "length": 1,
        "offset": 150,
        "surroundingCode": "        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")\n        roles = [BM, SE, E, OWNER]\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7ada0880c98f5b9862416c29a8277742817cd6a94bef1256c499bb669502b176"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 932,
      "offset": 21,
      "length": 4,
      "code": {
        "startLine": 930,
        "length": 4,
        "offset": 56,
        "surroundingCode": "\n                if query.exists():\n                    LOCK: database.VCChannelInfo = (\n                        database.VCChannelInfo.select()\n                        .where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "df184d35446ec8a771166c1d5c26d90745267a1a561f360498e232bbcef7781e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1011,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1009,
        "length": 2,
        "offset": 78,
        "surroundingCode": "    @commands.command()\n    async def settutor(self, ctx, tutorcode):\n        TR = discord.utils.get(ctx.guild.roles, name=self.TutorRole)\n\n        if TR not in ctx.author.roles or ctx.guild.id == StaffID.g_staff:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "47fdb15b50bce84e828daf468ec31e84fea446dd69d11ea464b0a61cf1b1d519"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1028,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 1026,
        "length": 12,
        "offset": 64,
        "surroundingCode": "                return await ctx.send(embed=embed)\n\n            tutorSession = database.TutorBot_Sessions.select().where(\n                database.TutorBot_Sessions.SessionID == tutorcode\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1571ea40590db86f0499725f1e30082c3c8499a381f310c04f6070d8bab88c3b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1032,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 1030,
        "length": 12,
        "offset": 68,
        "surroundingCode": "            )\n            if tutorSession.exists():\n                tutorSession = tutorSession.get()\n                if member.voice.channel.category_id in self.categoryID:\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0475f553a126312324a6ecb9728f771909cb85f6a7dc7a03fde137ce339436ca"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1120,
      "offset": 21,
      "length": 4,
      "code": {
        "startLine": 1118,
        "length": 4,
        "offset": 56,
        "surroundingCode": "\n                if query.exists():\n                    LOCK: database.VCChannelInfo = (\n                        database.VCChannelInfo.select()\n                        .where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9b80679a01c52a86c083d060094a9b1d3ff7144d29b6d4ef4d73e66f4dbf5e0a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1200,
      "offset": 33,
      "length": 10,
      "code": {
        "startLine": 1198,
        "length": 10,
        "offset": 111,
        "surroundingCode": "    @commands.command()\n    @commands.cooldown(1, 5, commands.BucketType.user)\n    async def permit(self, ctx, typeAction, user: discord.Member = None):\n        database.db.connect(reuse_if_open=True)\n        member = ctx.guild.get_member(ctx.author.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "97cc9e1296994ca6cc95bccc01fb150556b7ea084b4f9b9b381c5da9a35e9776"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1300,
      "offset": 29,
      "length": 9,
      "code": {
        "startLine": 1298,
        "length": 9,
        "offset": 99,
        "surroundingCode": "                                    randomlist.append(x.display_name)\n\n                            formatVer = \"\\n\".join(randomlist)\n\n                            embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "526a2547000765a0757a315db4e5dac8761c137901ff904ca2acdaf228a8efb3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1375,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1373,
        "length": 2,
        "offset": 62,
        "surroundingCode": "        member = ctx.guild.get_member(ctx.author.id)\n\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "27e76641528c9ed71781d079f77ea772cb804661c2f4211ed50a8be2e5f74082"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1376,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 1374,
        "length": 3,
        "offset": 72,
        "surroundingCode": "\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e7981079a1e32c3e595d033b84165636b4425ad8ffcf1a82a5d84a4b978aec6c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1377,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1375,
        "length": 2,
        "offset": 135,
        "surroundingCode": "        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c7020a387804e9d2631f5510b3a394ec2ffcb25d794c60fa60ace49e956c71e6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1378,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1376,
        "length": 2,
        "offset": 134,
        "surroundingCode": "        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "818fe290446390a40ac6654523ed7f0204ebfebea514c571cb03e9000e2891d6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1379,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1377,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "eec7761284d706a27a7e5c65465b9a85fb66f3af64027c8ed629dbcbc77e84e9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1380,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1378,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        roleList = [MT, MAT, TT, AT, VP, CO]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "64abef22040d80178836853790508a5d5258335c06904724c29f1327830be8c4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1382,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 1380,
        "length": 8,
        "offset": 71,
        "surroundingCode": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        roleList = [MT, MAT, TT, AT, VP, CO]\n\n        voice_state = member.voice"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5f25930da41efd9684ce23b1841bee59b29cfbf8edee2056e86612b268d6cc54"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1414,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 1412,
        "length": 10,
        "offset": 84,
        "surroundingCode": "                if query.exists():\n                    try:\n                        voiceLIMIT = int(new_voice_limit)\n                    except:\n                        return await ctx.send(f\"{Emoji.deny} Not a valid number!\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "83ecf6d9b1026022b6ee49bfbe9514b13ab6ebb951802d60b57e58dedeb71f19"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1578,
      "offset": 15,
      "length": 7,
      "code": {
        "startLine": 1576,
        "length": 7,
        "offset": 56,
        "surroundingCode": "\n    @commands.command(aliases=[\"start\"])\n    async def startVC(self, ctx):\n        embed = discord.Embed(\n            title=\"Private Channels\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "dc8410046d854f5d1da6aea2800e1a657ba379bde7f32b97506356d8e15eb810"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 28,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 26,
        "length": 14,
        "offset": 6,
        "surroundingCode": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "73f1a130eee2c9ae7038ff0db4958c9a9fd19138f3369cea3c2bf67d89c1def4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 40,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 38,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8459b478dd7c655ae8078b4ba971252f7de18704627ee52caa5942830fe48444"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 40,
      "offset": 22,
      "length": 17,
      "code": {
        "startLine": 38,
        "length": 17,
        "offset": 23,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b1730986fa6b3cb338501e82c19694ec8f453b1a7599fc8e5af0e494039387d8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 43,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 41,
        "length": 9,
        "offset": 33,
        "surroundingCode": "    now = datetime.now(EST)\n\n    deltaTime = now - dateObj\n\n    totalmin = deltaTime.total_seconds() // 60"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c684caaa527545ef412b3bdf90c0450798477c13d657a23996d6f640e7bc5eb8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 50,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 48,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0872e36688502584164b8146177585b950736a8c8265f88caf7dcb5dc64872b1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 54,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 52,
        "length": 10,
        "offset": 94,
        "surroundingCode": "        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n    )\n    ColumnDict = {\n        0: q.ch_tv_console,\n        1: q.ch_tv_startvc,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7fc261b9799b1daefcbba66df021c5ba32a3d212cc7b8ff738508ba110dd343f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 128,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 126,
        "length": 10,
        "offset": 107,
        "surroundingCode": "        database.db.connect(reuse_if_open=True)\n        print(self.LobbyStartIDs[member.guild.id])\n        lobbyStart = member.guild.get_channel(self.LobbyStartIDs[member.guild.id])\n        if lobbyStart == None:\n            try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a23312de5fafc2f2ad34cb1ae8b98b2d60ee02ecf0444195a9bac716624eb091"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 131,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 129,
        "length": 10,
        "offset": 64,
        "surroundingCode": "        if lobbyStart == None:\n            try:\n                lobbyStart = self.bot.get_channel(self.LobbyStartIDs[member.guild.id])\n            except Exception as e:\n                return print(e)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1289054770634afb45c325a3e60598c621859c08bbb20e78301a81c7b3abe51d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 146,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 144,
        "length": 11,
        "offset": 24,
        "surroundingCode": "        ):\n\n            acadChannel = self.bot.get_channel(self.channel_id[member.guild.id])\n            query = database.VCChannelInfo.select().where(\n                (database.VCChannelInfo.authorID == member.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "dd34086be72bba3e02ab0dbf504df971acfd87fbd5e517c1ffb62ad25eca1d56"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 152,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 150,
        "length": 11,
        "offset": 104,
        "surroundingCode": "                & (database.VCChannelInfo.GuildID == before.channel.guild.id)\n            )\n            ignoreQuery = database.IgnoreThis.select().where(\n                (database.IgnoreThis.authorID == member.id)\n                & (database.IgnoreThis.channelID == before.channel.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fa68cdccbca990520140376870f55a9d2ec88050ad50e439b24b86c9f183f215"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 182,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 180,
        "length": 12,
        "offset": 59,
        "surroundingCode": "                )\n                try:\n                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "12ca4e13fd6ad65de4ea556ae2436db83ae145ac3899a7e7e95b10f3de050ada"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 184,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 182,
        "length": 12,
        "offset": 122,
        "surroundingCode": "                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None\n\n                if query.ChannelID == str(before.channel.id):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5fa33d9e283b0721a7adeb1068ed35d04ed884bc8c75b5fe372959fb2105b14c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 243,
      "offset": 29,
      "length": 10,
      "code": {
        "startLine": 241,
        "length": 10,
        "offset": 97,
        "surroundingCode": "                                .get()\n                            )\n                            VCDatetime = pytz.timezone(\"America/New_York\").localize(\n                                query.datetimeObj\n                            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0b3280f76bab9f2cf08d3d03f390d1d5e336dd048e6a67f6844963b3f9935647"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 248,
      "offset": 29,
      "length": 6,
      "code": {
        "startLine": 246,
        "length": 6,
        "offset": 97,
        "surroundingCode": "\n                            day, now = showTotalMinutes(VCDatetime)\n                            daySTR = int(VCDatetime.timestamp())\n                            nowSTR = int(now.timestamp())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "00201bfc157a7f9493adb59e751f2ad8a155b828764edf0e389d7d726f23b549"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 249,
      "offset": 29,
      "length": 6,
      "code": {
        "startLine": 247,
        "length": 6,
        "offset": 161,
        "surroundingCode": "                            day, now = showTotalMinutes(VCDatetime)\n                            daySTR = int(VCDatetime.timestamp())\n                            nowSTR = int(now.timestamp())\n\n                            query.delete_instance()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fa0967d396818274477870ca4fc49de84d2e0ebf5be378e57268212d1dc14e39"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 272,
      "offset": 33,
      "length": 12,
      "code": {
        "startLine": 270,
        "length": 12,
        "offset": 138,
        "surroundingCode": "                                    content=member.mention, embed=embed\n                                )\n                                tutorSession = (\n                                    database.TutorBot_Sessions.select().where(\n                                        database.TutorBot_Sessions.SessionID"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a2be40735ab2a87bef85388a106cc49a701e4f67ccd715057a5dff03f435db61"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 280,
      "offset": 37,
      "length": 12,
      "code": {
        "startLine": 278,
        "length": 12,
        "offset": 95,
        "surroundingCode": "                                if tutorSession.exists():\n\n                                    tutorSession = tutorSession.get()\n\n                                    student = self.bot.get_user(tutorSession.StudentID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b6bd2ec1a9a5618bd425dea91576aafc30540adc48a27ed37552d863cf18b353"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 284,
      "offset": 37,
      "length": 6,
      "code": {
        "startLine": 282,
        "length": 6,
        "offset": 208,
        "surroundingCode": "                                    student = self.bot.get_user(tutorSession.StudentID)\n                                    tutor = self.bot.get_user(tutorSession.TutorID)\n                                    HOURCH = self.bot.get_channel(self.TutorLogID)\n\n                                    hourlog = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9fb93bc7ef023b82e6fb68a7f556634eb76836da7e72512ea460e98086f5f3fe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 336,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 334,
        "length": 11,
        "offset": 54,
        "surroundingCode": "            and not member.bot\n        ):\n            acadChannel = self.bot.get_channel(self.LobbyStartIDs[member.guild.id])\n            print(acadChannel, after.channel.guild.id)\n            SB = discord.utils.get(member.guild.roles, name=self.SB)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4ff514d4643a5ac1fc3e17b384c694987b1e79fd5b9aa4be9469f4f7825efc1f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 338,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 336,
        "length": 2,
        "offset": 151,
        "surroundingCode": "            acadChannel = self.bot.get_channel(self.LobbyStartIDs[member.guild.id])\n            print(acadChannel, after.channel.guild.id)\n            SB = discord.utils.get(member.guild.roles, name=self.SB)\n\n            legend = discord.utils.get(member.guild.roles, name=self.Legend)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b22086772d175055aae22c1684530de4c19d293d3f91d89d238f26754a93af3a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 342,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 340,
        "length": 2,
        "offset": 90,
        "surroundingCode": "            legend = discord.utils.get(member.guild.roles, name=self.Legend)\n\n            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2e70c3ee01966729da3d963a807289b53856c750057e56892ff91b168d7d1c9c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 343,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 341,
        "length": 3,
        "offset": 83,
        "surroundingCode": "\n            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9df58fcbebd156cfbc4c2552c344c55d056cbd20986e562ecb31295517f0db37"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 344,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 342,
        "length": 2,
        "offset": 153,
        "surroundingCode": "            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c9abcfd98fa67cc1ec795b969884155a23dde4bc070556d9d26686623752b375"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 345,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 343,
        "length": 2,
        "offset": 152,
        "surroundingCode": "            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "030820ade0d2fc7c2cfddadda842e3bc3b02f191644fbad3187e7bb89ca62eb8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 346,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 344,
        "length": 2,
        "offset": 150,
        "surroundingCode": "            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c2759b0d3fbab62b54b60ed0e3a8f48a61f39f29534c24c9e5541d9b6b0ddd11"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 347,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 345,
        "length": 2,
        "offset": 150,
        "surroundingCode": "            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)\n\n            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "625c46cb6a0a1c1882f588fffbab375fa51ecc37c2aaf817ef7330836df8334c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 349,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 347,
        "length": 8,
        "offset": 82,
        "surroundingCode": "            CO = discord.utils.get(member.guild.roles, name=self.CO)\n\n            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]\n\n            TutorRole = discord.utils.get(member.guild.roles, name=self.TutorRole)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "da410fdc9da13042d50b01ba1c22ba48e646be8f84d16dc36f865bb522cc7f1e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 351,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 349,
        "length": 9,
        "offset": 74,
        "surroundingCode": "            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]\n\n            TutorRole = discord.utils.get(member.guild.roles, name=self.TutorRole)\n\n            category = discord.utils.get("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c009733fa0b81bdfd111fb34c5fd4ded5a377af5a27e4bf4e457c4d875be7583"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 372,
      "offset": 17,
      "length": 13,
      "code": {
        "startLine": 370,
        "length": 13,
        "offset": 61,
        "surroundingCode": "            )\n            if query.exists():\n                moveToChannel = (\n                    database.VCChannelInfo.select()\n                    .where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "701fd1c8677f1613cbad026e09febbb26c248e3f821a35528aa3159212df715e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 388,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 386,
        "length": 12,
        "offset": 59,
        "surroundingCode": "                )\n                try:\n                    tutorChannel = self.bot.get_channel(int(moveToChannel.ChannelID))\n                    await member.move_to(\n                        tutorChannel,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c961393d7d824190a00c795a404f4418a47f59de0d91493307fd4f96cd10ea15"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 25,
      "offset": 15,
      "length": 12,
      "code": {
        "startLine": 23,
        "length": 12,
        "offset": 43,
        "surroundingCode": "\n    @tasks.loop(seconds=10)\n    async def TTSWeekCheck(self):\n        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e788efbef84f59c969d02ed703b8ddca398c30296f86a618394aa8ff30371777"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 27,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 25,
        "length": 10,
        "offset": 88,
        "surroundingCode": "    async def TTSWeekCheck(self):\n        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()\n        timeNow = now.time()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5888671e48c529e30cf7b14b2eae14a46b601aa79d15f772296ed9516857eb83"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 28,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 26,
        "length": 7,
        "offset": 92,
        "surroundingCode": "        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()\n        timeNow = now.time()\n\n        queryLeaderboard = StudyVCLeaderboard.select()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3b617d11c34e93d77a66578bdbec8e8c0a8c67e8ae0e1b8da0f1cf8df7436c89"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 30,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 28,
        "length": 16,
        "offset": 38,
        "surroundingCode": "        timeNow = now.time()\n\n        queryLeaderboard = StudyVCLeaderboard.select()\n        entries = [entry.id for entry in queryLeaderboard]\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "50f1d602d2d12909c0a01ce1eb61c29fb9b96569086de97b1082a01d5c8b215e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 38,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 36,
        "length": 9,
        "offset": 64,
        "surroundingCode": "            and timeNow >= self.midnight\n        ):\n            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "50a6b6534376a85620c2a92269ed7559bdb149f54138c3df1e734eca70937209"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 40,
      "offset": 17,
      "length": 16,
      "code": {
        "startLine": 38,
        "length": 16,
        "offset": 78,
        "surroundingCode": "            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(\n                    StudyVCLeaderboard.id == entry\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "af7d1ba97aeb870bdeed28a62f7eaee8fc1154ed10aed4b4b4859b87ff4cbbc9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 43,
      "offset": 17,
      "length": 16,
      "code": {
        "startLine": 41,
        "length": 16,
        "offset": 85,
        "surroundingCode": "                    StudyVCLeaderboard.id == entry\n                )\n                queryLeaderboard = queryLeaderboard.get()\n                queryLeaderboard.TTSWeek = 0\n                queryLeaderboard.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "488435a63dc00667f97e295728783b322f307b3f4abc37ec53ec48b80981ff47"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 46,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 44,
        "length": 14,
        "offset": 6,
        "surroundingCode": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7ec8cc1b810d87218543148bf62e4145b29ab0df58adcb8516aab21ae7f4a0c8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 58,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 56,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fa397654f75793df31fdcdc1369b393ce6c115613271f696a7d9c377675caa7c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 58,
      "offset": 22,
      "length": 17,
      "code": {
        "startLine": 56,
        "length": 17,
        "offset": 23,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b4ff9b50e8c7fac011e14132699fa4953e9e609ba2ecb58b3d7d9b7f61f0cdb7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 60,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 58,
        "length": 7,
        "offset": 73,
        "surroundingCode": "def showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)\n\n    deltaTime = now - dateObj"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cf024934db7d8a6beeaa15fdb52aed4df4065b37a555b43750ce23f5259397cf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 62,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 60,
        "length": 9,
        "offset": 71,
        "surroundingCode": "    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)\n\n    deltaTime = now - dateObj\n\n    totalmin = deltaTime.total_seconds() // 60"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c7cd2672f65fb49a7eee54cf78ff4d8784236924032833335627e8710c8e689d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 69,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 67,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef _getXPForNextLvl(lvl: int):\n    \"\"\"\n    Get the XP the user needs to reach the next level."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "db1678eada0b4f28a52bf28587c39102ee614bec17af3edd5efb4c57df78f40f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 78,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 76,
        "length": 8,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    xpNeeded = (5 * lvl * lvl) + (50 * lvl) + 100\n\n    return xpNeeded"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "25d71f49cbf1a311477cd63151cab430176f0f3a1faa40b96e9cb388bc24082d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 83,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 81,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef _shortNumber(number: int) -> str:\n    \"\"\"\n    Shorts a number and adds the number abbreviation to it."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b5a6f8190d962b4ce740bfe88b6364777c8fe6d99e01df6299f961e819b86336"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 96,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 94,
        "length": 9,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    numberStr = ...  # type: str\n\n    if number < 1000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "162596950be2443a111b250c6eea28985608571c744c22b722b22d3b02c9f0eb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 99,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 97,
        "length": 9,
        "offset": 31,
        "surroundingCode": "\n    if number < 1000:\n        numberStr = f\"{number}\"\n\n    elif number < 1000000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2ec1e37fa09cc0a1025ca90fc8d464092c96e044053774fd0daf58bd55906674"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 104,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 102,
        "length": 9,
        "offset": 65,
        "surroundingCode": "        number /= 1000\n        number = round(number, 2)\n        numberStr = f\"{number}K\"\n\n    elif number < 1000000000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a0e9a90c1dc2876855ae1333b069336f38906bede9cecba760e6697543124241"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 109,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 107,
        "length": 9,
        "offset": 68,
        "surroundingCode": "        number /= 1000000\n        number = round(number, 2)\n        numberStr = f\"{number}M\"\n\n    elif number < 1000000000000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ac2471f3b7603404b5dda34f0e881bae0e0ebe2e14e7da586e8e4ef75739b53e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 114,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 112,
        "length": 9,
        "offset": 71,
        "surroundingCode": "        number /= 1000000000\n        number = round(number, 2)\n        numberStr = f\"{number}B\"\n\n    elif number < 1000000000000000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fdd54d2d056e6ee51b6c53265479b19d77a13db577ad90d04f97b9f9a0f8c22d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 119,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 117,
        "length": 9,
        "offset": 74,
        "surroundingCode": "        number /= 1000000000000\n        number = round(number, 2)\n        numberStr = f\"{number}T\"\n\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "65edea7fdbc473b6f12c6c9e404d752ba4f93d37c2b608a19244c9943bbe5f33"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 127,
      "offset": 11,
      "length": 22,
      "code": {
        "startLine": 125,
        "length": 22,
        "offset": 12,
        "surroundingCode": "\n\nasync def addLeaderboardProgress(member: discord.Member):\n    \"\"\"\n    Updates the data in the database table `StudyVCLeaderboard` of a specific member and adds level roles to the member if needed."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ff3a9ede6b11524ff2de2f043b3c448a92dba1785011e378baa96275d8480a37"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 135,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 133,
        "length": 11,
        "offset": 80,
        "surroundingCode": "    :return: Whenever the user has been found in the database: bool\n    \"\"\"\n    xpPerMinute = 30\n\n    StudySessionQ = database.StudyVCDB.select().where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4d367212a90dec1e6f1ccd09386bb2afa8de35d07446c4e3c83b6eb9bb166e2a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 137,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 135,
        "length": 13,
        "offset": 26,
        "surroundingCode": "    xpPerMinute = 30\n\n    StudySessionQ = database.StudyVCDB.select().where(\n        database.StudyVCDB.discordID == member.id\n    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "12797cea9a8f148e199032c81d808a92be8f8a5abbffe3177e2a244e142cbb3f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 141,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 139,
        "length": 13,
        "offset": 45,
        "surroundingCode": "    )\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b723ab13b6bd5f33fb3e389b4ef8b21824592778b531de5cb3e38f103c5f8042"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 143,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 141,
        "length": 16,
        "offset": 118,
        "surroundingCode": "        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where(\n            database.StudyVCLeaderboard.discordID == member.id\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "79d774155666a18c94280e28a3ecb50eaad0c142662445896ad4318d0ab72869"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 147,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 145,
        "length": 8,
        "offset": 19,
        "surroundingCode": "        )\n\n        isNewLvl = False\n        if leaderboardQuery.exists():\n            leaderboardQuery = leaderboardQuery.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9de37936100efa4c05d1fec6c19d0baa0813f464d9a53a7e6179f1020e43dca4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 149,
      "offset": 13,
      "length": 16,
      "code": {
        "startLine": 147,
        "length": 16,
        "offset": 75,
        "surroundingCode": "        isNewLvl = False\n        if leaderboardQuery.exists():\n            leaderboardQuery = leaderboardQuery.get()\n            leaderboardQuery.TTS = totalmin + leaderboardQuery.TTS\n            leaderboardQuery.TTSWeek = totalmin + leaderboardQuery.TTSWeek"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "839cdf090f07116a6af0192a3e242b664a4ec20ee97841e3f363a06194fdb961"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 154,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 152,
        "length": 10,
        "offset": 93,
        "surroundingCode": "            leaderboardQuery.totalSessions = leaderboardQuery.totalSessions + 1\n\n            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6ca1da72931290c028d182673766b1f818302cc85d01ad35f39007bacd1a26c7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 155,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 153,
        "length": 9,
        "offset": 61,
        "surroundingCode": "\n            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1401bca1efa0d7f9d75a75a272031b4a22aff1a1826912a79195a099db830e6b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 156,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 154,
        "length": 14,
        "offset": 104,
        "surroundingCode": "            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP\n\n            xpNeeded = _getXPForNextLvl(currentLvl)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3d11eead71332067b324e9a03575ea3e0b27aa37fe76e615e494b59af4a6b175"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 158,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 156,
        "length": 8,
        "offset": 67,
        "surroundingCode": "            currentTotalXP = leaderboardQuery.totalXP\n\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d6be4c31b3dc7b40dbb4aaff264eba87e584ae86b3e22b6e21a3be4f2c39b181"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 159,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 157,
        "length": 8,
        "offset": 65,
        "surroundingCode": "\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fff42f6e198c978372ef96d8c40b9970d33cc4be6e7e13c10737fc2528a152b8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 161,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 159,
        "length": 5,
        "offset": 59,
        "surroundingCode": "            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3d1b673d3f05038aa5b4dc7f5c73e45847471d8c89d567e53794d985661f5ec3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 162,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 160,
        "length": 10,
        "offset": 54,
        "surroundingCode": "\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3f8bf106b2e1a207262c09a607e3eca450ec1043ead84f3f612d3c17e82c3912"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 163,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 161,
        "length": 6,
        "offset": 104,
        "surroundingCode": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7674a812ef263eb3d2152e4606eba5443506498ee6420d9d7dd919e50beb0a5a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 167,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 165,
        "length": 8,
        "offset": 51,
        "surroundingCode": "            if newXP >= xpNeeded:\n\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "58a0a694789eb39215778e175daa123fcb0b16fcc8925c6e097691f8fbc4c013"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 168,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 166,
        "length": 11,
        "offset": 49,
        "surroundingCode": "\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:\n                    newXP -= newXPNeeded"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "45a999d852e49175290c1aa4efc5d5beec4376ff6ddc38e052e46c6ee9867621"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 172,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 170,
        "length": 11,
        "offset": 93,
        "surroundingCode": "                    newXP -= newXPNeeded\n                    newLvl += 1\n                    newXPNeeded = _getXPForNextLvl(newLvl)\n\n            leaderboardQuery.xp = newXP"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7db9fdf829fdcac60ee700340e24f65763f746b604a49d7f9aeacd4c7b2ef053"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 181,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 179,
        "length": 10,
        "offset": 27,
        "surroundingCode": "\n        else:\n            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c96d9ec797d8294dc983f0a046f43e6d0e8bd2bb89bb58d9a32a8decc7477a22"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 182,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 180,
        "length": 9,
        "offset": 53,
        "surroundingCode": "        else:\n            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "83804c2c2513038efd36e3bef428fbff7baabec9bd77d5a8f274ece44b1e023a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 183,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 181,
        "length": 14,
        "offset": 65,
        "surroundingCode": "            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0\n\n            xpNeeded = _getXPForNextLvl(currentLvl)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "05b05bc04fb78b76bf08969080195410bb9fe47b4161c9d2e20a633b7fecaeb5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 185,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 183,
        "length": 8,
        "offset": 44,
        "surroundingCode": "            currentTotalXP = 0\n\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "70629f3062896bf60a1b274ccca9a62b5ef505ff4139796646ea71682b22a14b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 186,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 184,
        "length": 8,
        "offset": 65,
        "surroundingCode": "\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "93b69c9d16239b43b0f2a1ebc1acefd7dc71cc28a84ae01fd39cf7a8abbaf46f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 188,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 186,
        "length": 5,
        "offset": 59,
        "surroundingCode": "            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7b736baafe0fa6f160e6afad51a1242c80c45721cf8e0b5fb92af27d8600d19f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 189,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 187,
        "length": 10,
        "offset": 54,
        "surroundingCode": "\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "70bc892302a007e0f9e83b94f754854cfdc2d4ecdeb875286b8d96290242af80"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 190,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 188,
        "length": 6,
        "offset": 104,
        "surroundingCode": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a3bf86e439b9216d91d728b22e44240f24c12657569b77058729d92dd7a1e130"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 194,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 192,
        "length": 8,
        "offset": 51,
        "surroundingCode": "            if newXP >= xpNeeded:\n\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "602b6d367b965e8b83558454284e6b0070bd351f44afba4145690c630c306a33"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 195,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 193,
        "length": 11,
        "offset": 49,
        "surroundingCode": "\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:\n                    newXP -= newXPNeeded"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "91925cbe2908c75eba85559468226805c1a8e1646dc39974e08d5f26f4c48680"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 199,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 197,
        "length": 11,
        "offset": 93,
        "surroundingCode": "                    newXP -= newXPNeeded\n                    newLvl += 1\n                    newXPNeeded = _getXPForNextLvl(newLvl)\n\n            q = database.StudyVCLeaderboard.create("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b21ab184ce7f032634dada7d4e797852de61e70df245c0c03a94225f62e22617"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 212,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 210,
        "length": 7,
        "offset": 30,
        "surroundingCode": "            q.save()\n\n        roleStr = \"\"\n        if newLvl < 5:\n            pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9255d66040b32e8c28a6813a6cf27c12337972d0c391fe41baae89965abe1539"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 220,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 218,
        "length": 7,
        "offset": 48,
        "surroundingCode": "\n            if currentLvl < 5:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1b7d5748436ac41534714bd1a713551e908bf1e364551dfdd7b01ad53c910c9c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 227,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 225,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 10:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d69909ac21818b0ff795073c1ab68168cb39f828b92f8e45b9e5ad52fc58b955"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 234,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 232,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 20:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a50922f7b1c5fc97136befa6d7b05ba1a63b4baa70ce96d715b6a077018d9876"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 241,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 239,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 30:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d74f410085efd9224034814e16c751e7579f162cd4ca7b91b5a84b7ddf1080c4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 248,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 246,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 40:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "01675ba91b6a6899dc9d6e69066a8f71b0b7c1663806cf6d84b9bf9985f89ca5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 255,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 253,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 50:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ddc95ff205ba4558d7a4f183efc44c1eedddb335df209752c038da0251c0b973"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 262,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 260,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 60:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f9e8344a11e219e092e379cdf946fefbd13129d14182d876ff99a02ec105fb79"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 269,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 267,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 70:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9a4cc9eba53de4b0e11fe1c0ecf16b4ada5b267b437c1fd11dee41bb55dcb465"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 276,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 274,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 80:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a59b740de0203044438e3033cfcf5254c2b9989721f8999789122af7ebef3b21"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 283,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 281,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 90:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "93d67208ff17c9fd6897b56c0e9644944f970c081f4284b33b74c3974f948e87"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 290,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 288,
        "length": 7,
        "offset": 50,
        "surroundingCode": "\n            if currentLvl < 100:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5fe020525bffae5b66ea23d0b8e8728efb809b1a3d8d93a93c24d6e992f6e2e3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 295,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 293,
        "length": 5,
        "offset": 34,
        "surroundingCode": "        if isNewLvl:\n\n            dmMSG = (\n                f\"{member.mention}, you've reached level **{newLvl}** in Study VC!\"\n                f\"{roleStr}\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "83596b1546cdb21a8408be78737aba39c04572344cdd70145412a51cc8775f0c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 307,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 305,
        "length": 13,
        "offset": 26,
        "surroundingCode": "        return False\n\n    StudySessionQ = StudySessionQ.get()\n    StudySessionQ.StartTime = datetime.now(EST)\n    StudySessionQ.Paused = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b3e5c5f8ebf3b2a63a4280857c9959ce8cbfb77005a32835821ddd8897531f83"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 315,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 313,
        "length": 10,
        "offset": 12,
        "surroundingCode": "\n\nasync def endSession(member: discord.Member):\n    \"\"\"\n    Ends the session by kicking the user out of the voice channel and removing the user from the database table `StudyVCDB`."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "784127ee0528b599c28d6948e39f8b4c6b918a5c5a55e4381239706cc19bd512"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 324,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 322,
        "length": 13,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    StudySessionQ = database.StudyVCDB.select().where(\n        database.StudyVCDB.discordID == member.id\n    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d831c6ca8d2ed82100b96f8e68e0aa4e3e6a59a15c82fa999acee8c5425b5917"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 328,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 326,
        "length": 13,
        "offset": 45,
        "surroundingCode": "    )\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        StudySessionQ.delete_instance()\n        StudySessionQ.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cb10660a2be5d621af42fbf1e43d5536c1f0d6476a3ff7e9f5052e6c12c55b16"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 406,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 404,
        "length": 12,
        "offset": 91,
        "surroundingCode": "        Removes an item from the study to-do list of the author/owner.\n        \"\"\"\n        isInDatabase = await addLeaderboardProgress(interaction.user)\n\n        if isInDatabase:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "001b63eb18bb17e0624c23d1b34b623bc8a156b9700f96878a7e027a465d8b96"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 444,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 442,
        "length": 6,
        "offset": 65,
        "surroundingCode": "        guild = self.bot.get_guild(self.StudyVCGuildID)\n\n        lbList = []\n        i = 1\n        for entry in database.StudyVCLeaderboard.select().order_by("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4539dcce411a8156e10aed4dd5f3bde8207b75e374594fef00115c82456ccf2e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 466,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 464,
        "length": 10,
        "offset": 56,
        "surroundingCode": "                    place = f\"`{i}th`\"\n\n                totalXPStr = _shortNumber(entry.totalXP)\n                lbList.append(f\"{place} **{member}**: `{totalXPStr} XP`\")\n                i += 1"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4867a9744cefa79dcfaed709295562752012625023fbca7dc05820ddfbc8de39"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 470,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 468,
        "length": 13,
        "offset": 53,
        "surroundingCode": "                i += 1\n        print(lbList)\n        FormattedList = \"\\n\".join(lbList)\n        embed = discord.Embed(\n            title=\"Study Leaderboard\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3619ba74bfb50f00155d43bc8234dbf06adc7cd1a7289a4c849c360afce66d8a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 32,
      "offset": 11,
      "length": 15,
      "code": {
        "startLine": 30,
        "length": 15,
        "offset": 12,
        "surroundingCode": "\n\nasync def setNewStudyGoal(self, console, member: discord.Member, renew: bool):\n    now = datetime.now(EST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "87addaf20b59b7ad155d2ba648c59d931d453777b78cabac47935f1414369bc0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 42,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 40,
        "length": 3,
        "offset": 15,
        "surroundingCode": "        )\n\n    MSV = discord.ui.View(timeout=60)\n    var = SelectMenuHandler(\n        SSTypes, \"temp_view:studybot_st1\", \"Select a duration for your study session\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cf84f8fcbf6ac8f825a93a10f263b3d3e2c223f2af4dfabd5341e8a2b8c901aa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 48,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 46,
        "length": 7,
        "offset": 27,
        "surroundingCode": "    MSV.add_item(var)\n\n    msgView = await console.send(\n        f\"{member.mention} You have joined a study channel. Please choose the duration of your study session!\",\n        view=MSV,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cb268c9388b4f3151e18f2ae6cb322f6199a9c6778be39a6cabf17c3d2712f9b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 58,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 56,
        "length": 12,
        "offset": 19,
        "surroundingCode": "\n    else:\n        MSV_disabled = discord.ui.View()\n        var = SelectMenuHandler(\n            SSTypes, \"temp_view:studybot_st1\", \"Timed out\", disabled=True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "70f25e9704c4613a6335dbc49a73ed9a7952647cd61eaff35bba484919d92567"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 113,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 111,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "167643351bad8eee8eeaa20bf6019ce94c03e9e132a7a676af90bf04547191e7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 117,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 115,
        "length": 10,
        "offset": 94,
        "surroundingCode": "        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n    )\n    ColumnDict = {\n        0: q.ch_tv_console,\n        1: q.ch_tv_startvc,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6f9fa391f8f9c8c4353e97f61a5e3950e827ade78469cd83e709aa3f0fe046e5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 139,
      "offset": 15,
      "length": 13,
      "code": {
        "startLine": 137,
        "length": 13,
        "offset": 67,
        "surroundingCode": "\n    @commands.Cog.listener(\"on_voice_state_update\")\n    async def StudyVCModule(\n        self,\n        member: discord.Member,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3c74d7a386d20a7acb20749aa22086ff98ece04ad218091042e8380862f6a8ad"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 157,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 155,
        "length": 13,
        "offset": 54,
        "surroundingCode": "            and not member.bot\n        ):\n            StudySessionQ = database.StudyVCDB.select().where(\n                database.StudyVCDB.discordID == member.id\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0172b85dd3919d27bad7d1b9feb44b18688bbca8201ddef4c509951cff380c11"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 182,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 180,
        "length": 7,
        "offset": 46,
        "surroundingCode": "                query.save()\n\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "61223c0fe700ce822e6a8a052f6cfa12a57baf69818c51f1368ba6c71ae8cbd4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 206,
      "offset": 15,
      "length": 14,
      "code": {
        "startLine": 204,
        "length": 14,
        "offset": 85,
        "surroundingCode": "\n    @tasks.loop(seconds=60)  # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "923728ecd78f2f37e359944bf19f7bbf59bbe394bc125d7d08efcadacd72cc83"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 209,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 207,
        "length": 15,
        "offset": 101,
        "surroundingCode": "        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\"\n\n        StudyVCGuildObj = self.bot.get_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e8a91449b641c97b37b71267182362b2073cf3e2a48f0c2f3872474cfb68abb1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 210,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 208,
        "length": 17,
        "offset": 73,
        "surroundingCode": "\n        StudyVCGuildObj = self.bot.get_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bbcd619ac025dd63fc5fb9a3bcc41fdafcf6b7fec193462b72474ea67ab255e7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 213,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 211,
        "length": 7,
        "offset": 50,
        "surroundingCode": "\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n\n            member = StudyVCGuildObj.get_member(q.discordID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "45cfe10f2cd3c4ecd56d5d349870cff32e6123e532388124bd5d381bb30d6300"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 17,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 15,
        "length": 2,
        "offset": 86,
        "surroundingCode": "async def id_generator(size=3, chars=string.ascii_uppercase):\n    while True:\n        ID = \"\".join(random.choice(chars) for _ in range(size))\n        query = database.TutorBot_Sessions.select().where(\n            database.TutorBot_Sessions.SessionID == ID"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ef9d27641e412fac726e66ed7832bc39f0901b75ee5067f8bdf8aab8573e5c92"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 565,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 563,
        "length": 13,
        "offset": 59,
        "surroundingCode": "    def __init__(self):\n        super().__init__()\n        DropdownClass = Dropdown()\n\n        self.add_item(DropdownClass)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "301272231716b6f0e6900ebbd5ad60475ab48e26bffb3b4b7cde5e13599b427f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 25,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 23,
        "length": 12,
        "offset": 98,
        "surroundingCode": "        now = datetime.now(self.est)\n        for entry in database.TutorBot_Sessions:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.Date)\n            val = int((TutorSession - now).total_seconds())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c4ecc66a856f2978685dd2766933c6ef76c00341f618d5f4987d5d55def94a8e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 91,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 89,
        "length": 7,
        "offset": 46,
        "surroundingCode": "                geten.save()\n\n                GP_DATE = old + new\n\n                gp_en: database.TutorSession_GracePeriod = ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2af57c604678e6612f92b0915f4e7b6fb0e90cec405a0c2961e50e2239093684"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 124,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 122,
        "length": 12,
        "offset": 105,
        "surroundingCode": "        now = datetime.now(self.est)\n        for entry in database.TutorSession_GracePeriod:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.GP_DATE)\n            val = int((TutorSession - now).total_seconds())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "57e2826e65471dc8d133902467049d2118d30a1c57fef1b913ee26c22b785e83"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 10,
      "offset": 15,
      "length": 16,
      "code": {
        "startLine": 8,
        "length": 16,
        "offset": 56,
        "surroundingCode": "class SimulatorProfile:\n    @staticmethod\n    async def create_TicketSys(ctx: commands.Context):\n        # category = discord.utils.get(ctx.guild.categories, id=TechID.cat_sandbox)\n        query: database.SandboxConfig = ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8e63ced240b35f1419da9d470abaf9fce54eac9e0a23bc66d084070ca993cefa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 18,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 16,
        "length": 9,
        "offset": 69,
        "surroundingCode": "\n        await ctx.guild.create_text_channel(\"🧧┃chat-help\")\n        ListofCat = [\n            [\"Math Tickets\", query.cat_mathticket],\n            [\"Science Tickets\", query.cat_scienceticket],"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e4e800a31a8bb82383f57fd99ef9bc719920a467aae6173a8235c01eef1db6d5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 41,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 39,
        "length": 9,
        "offset": 106,
        "surroundingCode": "            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n        )\n        ListofCat = [\n            [\"Math Tickets\", query.cat_mathticket],\n            [\"Science Tickets\", query.cat_scienceticket],"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "37a563ccdf8f84bde8f498cb545d63ccbd4c96b9f07a06745a55d29b2f63daf7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 60,
      "offset": 15,
      "length": 16,
      "code": {
        "startLine": 58,
        "length": 16,
        "offset": 33,
        "surroundingCode": "\n    @staticmethod\n    async def create_PrivVCSys(ctx: commands.Context):\n        category = discord.utils.get(ctx.guild.categories, id=SandboxConfig.cat_sandbox)\n        q: database.SandboxConfig = ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "531a631a06c9e694a144332fc68f22d87014ef87195fe8545b7b44ee85f4c016"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 76,
      "offset": 15,
      "length": 17,
      "code": {
        "startLine": 74,
        "length": 17,
        "offset": 33,
        "surroundingCode": "\n    @staticmethod\n    async def cleanup_PrivVCSys(ctx: commands.Context):\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "234d2dcd2f28d6295fa795b6f53f636f377705e3c8e0f180aa7a7ffac1658ec9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 107,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 105,
        "length": 2,
        "offset": 87,
        "surroundingCode": "    @sim.command()\n    async def create(self, ctx: commands.Context, profile):\n        SP = SimulatorProfile()\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c673663aa24565c3d72d07f1f4556b5d867f3db105f92f435f78d1c16fae26a6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 134,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 132,
        "length": 2,
        "offset": 77,
        "surroundingCode": "    @sim.command()\n    async def clear(self, ctx: commands.Context):\n        SP = SimulatorProfile()\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3a558d88e60f9117f118ab6b3636a91cf87eff42359ddd63c09517569680454c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/guess_submit.py",
      "language": "Python",
      "line": 72,
      "offset": 15,
      "length": 12,
      "code": {
        "startLine": 70,
        "length": 12,
        "offset": 45,
        "surroundingCode": "\n    @tasks.loop(minutes=60.0)\n    async def mayEventPost(self):\n        now = datetime.now(self.est)\n        TutorSession = pytz.timezone(\"America/New_York\").localize(now)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9d6d5cb1e751398447e5b2af0b15c1b8be45c6da6a1bcb36a5cea33e624a4dd6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/guess_submit.py",
      "language": "Python",
      "line": 74,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 72,
        "length": 12,
        "offset": 79,
        "surroundingCode": "    async def mayEventPost(self):\n        now = datetime.now(self.est)\n        TutorSession = pytz.timezone(\"America/New_York\").localize(now)\n        channel = self.bot.get_channel(MainID.ch_event_announcements)\n        q = database.BaseQueue.select().where(database.BaseQueue.queueID == 2).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "86ad3bc67bacb1bb87a391956e173685278aaee978dd0dc5c2c04af4ef724b8c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 39,
      "offset": 15,
      "length": 12,
      "code": {
        "startLine": 37,
        "length": 12,
        "offset": 60,
        "surroundingCode": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def GSuiteVerify(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n        if interaction.message is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5c693aa7feeadb3a4c0e2792866e64365ca6afa5a7351f622bad9df3f49030d8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 40,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 38,
        "length": 19,
        "offset": 121,
        "surroundingCode": "    @commands.Cog.listener(\"on_interaction\")\n    async def GSuiteVerify(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n        if interaction.message is None:\n            return"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9d09fdcec1e5b16532c2972df645df1e9eba0db7c3b401a7297242e3518bd846"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 186,
      "offset": 15,
      "length": 17,
      "code": {
        "startLine": 184,
        "length": 17,
        "offset": 55,
        "surroundingCode": "    @commands.command()\n    @is_botAdmin\n    async def pasteGSuiteButton(self, ctx):\n        embed = discord.Embed(\n            title=\"Alternate Verification Method\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ce17f4e6de9dd6ee8baa1ec4d8970407b724bd14fb6cd126cdff605a6686194c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 193,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 191,
        "length": 12,
        "offset": 59,
        "surroundingCode": "            color=discord.Color.green(),\n        )\n        GSuiteButton = GSuiteVerify()\n        await ctx.send(embed=embed, view=GSuiteButton)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "85c2cba53ba4d3adceca733ac505f43e48d00897dc5a064b75d33ae29320d3b2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 93,
      "offset": 11,
      "length": 12,
      "code": {
        "startLine": 91,
        "length": 12,
        "offset": 12,
        "surroundingCode": "\n\nasync def TicketExport(\n    self,\n    channel: discord.TextChannel,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "275bcdd6a8671beea9190984042e77b0f74bd474cb952e438b8a5bf79374bc9b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 99,
      "offset": 5,
      "length": 30,
      "code": {
        "startLine": 97,
        "length": 30,
        "offset": 90,
        "surroundingCode": "    user: discord.User = None,\n    responsesauthor: typing.List[discord.User] = None,\n    directTranscript: bool = False,\n):\n    transcript = await chat_exporter.export(channel, None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a357edd50a0902f3a36853b1a9ff405c53ec0823be27ed557ccd89dfddd329a6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 107,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 105,
        "length": 11,
        "offset": 25,
        "surroundingCode": "        .get()\n    )\n    TicketOwner = self.bot.get_user(query.authorID)\n    if TicketOwner is None:\n        TicketOwner = await self.bot.fetch_user(query.authorID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1a401e97fa2698e35c2feb0431fbf577583f2990a9dded072a1de13a745b71a9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 109,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 107,
        "length": 11,
        "offset": 88,
        "surroundingCode": "    TicketOwner = self.bot.get_user(query.authorID)\n    if TicketOwner is None:\n        TicketOwner = await self.bot.fetch_user(query.authorID)\n\n    if transcript is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "46bc7cf23801e3d04e835f8dd26964fb51c668f130f8f307d3ff49c9d12af663"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 130,
      "offset": 5,
      "length": 4,
      "code": {
        "startLine": 128,
        "length": 4,
        "offset": 11,
        "surroundingCode": "    )\n\n    myIO = BytesIO()\n    myIO.write(var)\n    with open(f\"transcript-{channel.name}.html\", \"wb\") as f:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "38f01bd355696d5c6c1d363b06ceb1a0f5d44982bdb994353ae133ecc5ba0cae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 136,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 134,
        "length": 6,
        "offset": 80,
        "surroundingCode": "\n    S3_upload_file(f\"transcript-{channel.name}.html\", \"ch-transcriptlogs\")\n    S3_URL = f\"[Direct Transcript Link](https://acad-transcripts.schoolsimplified.org/transcript-{channel.name}.html)\"\n    embed.add_field(name=\"Transcript Link\", value=S3_URL)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "31153f35ee3848a191c80ded1ffa7568b8909935350913fcea0762ded7def3d4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 162,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 160,
        "length": 10,
        "offset": 6,
        "surroundingCode": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7a6aa12070a50103de3e7a661882f02e7d71d64e1afab8a3854523ab6d4d7876"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 172,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 170,
        "length": 12,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    EssayOptions = [\n        discord.SelectOption(label=\"Essay Reviser\"),\n        discord.SelectOption(label=\"Other\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6afcc114459ff252db90d985a8e1db7888f1de7cedf922b9dc7c99ab36dec8f9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 177,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 175,
        "length": 14,
        "offset": 11,
        "surroundingCode": "    ]\n\n    EnglishOptions = [\n        discord.SelectOption(label=\"English Language\"),\n        discord.SelectOption(label=\"English Literature\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e4491b3518f9c357bae773806dc1e9ca7277204256fc9f3791d2427bc6fd2b3e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 183,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 181,
        "length": 11,
        "offset": 11,
        "surroundingCode": "    ]\n\n    MathOptions = [\n        discord.SelectOption(label=\"Algebra\"),\n        discord.SelectOption(label=\"Geometry\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e7185041a99a2921b7d377e9f4c2f196f2d14972cac72b2a514294aedee6d637"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 192,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 190,
        "length": 14,
        "offset": 11,
        "surroundingCode": "    ]\n\n    ScienceOptions = [\n        discord.SelectOption(label=\"Biology\"),\n        discord.SelectOption(label=\"Chemistry\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "beb03afb0a48069af34794da9ef1b094801a107b71ff479b8fe62d7ae7c0745d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 200,
      "offset": 5,
      "length": 20,
      "code": {
        "startLine": 198,
        "length": 20,
        "offset": 11,
        "surroundingCode": "    ]\n\n    SocialStudiesOptions = [\n        discord.SelectOption(label=\"World History\"),\n        discord.SelectOption(label=\"US History\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "727e356231ec43262d90a798b903c8433fba7913a4de3c90ee7e0b9be91f2cd4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 210,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 208,
        "length": 15,
        "offset": 11,
        "surroundingCode": "    ]\n\n    LanguageOptions = [\n        discord.SelectOption(label=\"French\"),\n        discord.SelectOption(label=\"Chinese\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "89c20f405c94366041787ecfe99fd9ed530a46dfb45523f206ff883488a67b42"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 218,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 216,
        "length": 12,
        "offset": 11,
        "surroundingCode": "    ]\n\n    OtherOptions = [\n        discord.SelectOption(label=\"Computer Science\"),\n        discord.SelectOption(label=\"Fine Arts\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "96e4b6f38800dd57761d28d37e340fe92d28b0aae132a1afc278aa85e1d5b94b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 225,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 223,
        "length": 10,
        "offset": 11,
        "surroundingCode": "    ]\n\n    decodeName = {\n        \"['Math Helpers']\": \"Math Helpers\",\n        \"['Science Helpers']\": \"Science Helpers\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4cda534c086418040c69ca3b06ac1a5bfb0e0900de9b90ee5cb5938c6f59d75d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 235,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 233,
        "length": 13,
        "offset": 11,
        "surroundingCode": "    }\n\n    decodeOptList = {\n        \"['Math Helpers']\": MathOptions,\n        \"['Science Helpers']\": ScienceOptions,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b0444567b012a956f57258208f5cf23109289c53dcf122760ac728751553d081"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 249,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 247,
        "length": 8,
        "offset": 106,
        "surroundingCode": "            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n        )\n        decodeID = {\n            \"['Math Helpers']\": q.cat_mathticket,\n            \"['Science Helpers']\": q.cat_scienceticket,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "912cbfc42bd0d2fbffa2281dd05b2e2d52d7db0bffe70828cabc95e5d2a3bb61"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 259,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 257,
        "length": 8,
        "offset": 28,
        "surroundingCode": "        }\n    else:\n        decodeID = {\n            \"['Math Helpers']\": MainID.cat_math_ticket,\n            \"['Science Helpers']\": MainID.cat_science_ticket,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cbc0048bb6e09970fa277373ed8d06967ae89497ca5728937179e15de13e252d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 270,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 268,
        "length": 10,
        "offset": 34,
        "surroundingCode": "\n    name = decodeName[value]\n    CategoryID = decodeID[value]\n    if type(decodeOptList[value]) == int:\n        OptList = name"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d8980bf0852bac82eb02d696657d2b972052beb9498a3af835f26c922a786790"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 272,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 270,
        "length": 7,
        "offset": 83,
        "surroundingCode": "    CategoryID = decodeID[value]\n    if type(decodeOptList[value]) == int:\n        OptList = name\n    else:\n        OptList = decodeOptList[value]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e607c8b1c1920b4a4221f8e2167e5c9d925ab2aacdb76f63b9c5fcb9752b4edc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 274,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 272,
        "length": 7,
        "offset": 41,
        "surroundingCode": "        OptList = name\n    else:\n        OptList = decodeOptList[value]\n\n    return name, CategoryID, OptList"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "71ae1eb5b50b0b524ecdfe26e6b923a2709f6bf17ef4af54c76d0b9282318c7d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 279,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 277,
        "length": 7,
        "offset": 6,
        "surroundingCode": "\n\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "dcb0447f79afef270e70d7ad4d4710d1d5af81793fd58775f49a63b4094e5e75"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 280,
      "offset": 27,
      "length": 16,
      "code": {
        "startLine": 278,
        "length": 16,
        "offset": 40,
        "surroundingCode": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "64f70ec154ea38259c274e012d869ed6c699466211c9bd88be507c6fce7e1a8c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 293,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 291,
        "length": 11,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    mainSubject = mainSubject.title()\n    subject = subject.title()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "27aa4bbc6491e6ce778aae116cdd52beef22188242981eaff748b4732570401f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 331,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 329,
        "length": 7,
        "offset": 73,
        "surroundingCode": "\n    async def callback(self, interaction: discord.Interaction):\n        Sandbox = False\n        if interaction.message.guild.id == TechID.g_tech:\n            Sandbox = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "16c68913c09db5fd8da105087fd84e6c11533a361b543c62bc729919202a3499"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 333,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 331,
        "length": 7,
        "offset": 94,
        "surroundingCode": "        Sandbox = False\n        if interaction.message.guild.id == TechID.g_tech:\n            Sandbox = True\n\n        bucket = self.view.cd_mapping.get_bucket(interaction.message)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6ea0e7c3b2925233c554f86284b4af5e36747eb57b4be39438716c827790b20c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 346,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 344,
        "length": 9,
        "offset": 96,
        "surroundingCode": "            guild = interaction.message.guild\n            author = interaction.user\n            DMChannel = await author.create_dm()\n            try:\n                await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bb848bb2e4756b4f1304ca1e64c620b6359dc7f5fea15ec6ba51d48498ad4f4b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 361,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 359,
        "length": 3,
        "offset": 31,
        "surroundingCode": "                )\n\n            MSV = discord.ui.View()\n            var = SelectMenuHandler(\n                MasterSubjectOptions, \"persistent_view:ticketdrop\", \"Click a subject!\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0277de4823174916446a6d7cdfbf56a0c66311f358e4c6674e3342e8453ea7fa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 378,
      "offset": 17,
      "length": 17,
      "code": {
        "startLine": 376,
        "length": 17,
        "offset": 83,
        "surroundingCode": "            timeout = await MSV.wait()\n            if not timeout:\n                MasterSubjectView = var.view_response\n            else:\n                return await DMChannel.send(\"Timed out, try again later.\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ea192f71e08088e817fc547334eb9a0a83376af29539c6b8fbfc4b8dd409f6de"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 382,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 380,
        "length": 12,
        "offset": 88,
        "surroundingCode": "                return await DMChannel.send(\"Timed out, try again later.\")\n\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8098f0ae54156498d340d8d6c916b1683c8aebd13a79ca9e39f5ae36f8420c31"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 383,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 381,
        "length": 11,
        "offset": 63,
        "surroundingCode": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6024daac39d7ecadcd011cf33ca82b7c004a1d25106def2965ff733c39c84b81"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 383,
      "offset": 26,
      "length": 10,
      "code": {
        "startLine": 381,
        "length": 10,
        "offset": 76,
        "surroundingCode": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "eadcda2a2e1157617b698d92d91e59282ed5dae2264cebac0a4d9a445977a4c3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 383,
      "offset": 38,
      "length": 7,
      "code": {
        "startLine": 381,
        "length": 7,
        "offset": 88,
        "surroundingCode": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "061e25b41e5ecbfcc4780a387e25e41752417996a3ed7513c7a6bfa195e0e671"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 389,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 387,
        "length": 11,
        "offset": 60,
        "surroundingCode": "\n            if not TypeSubject == OptList:\n                MiscOptList = discord.ui.View()\n                MiscOptList.add_item(\n                    SelectMenuHandler("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b3ff1ce738b126940ab195147ab4991e57531e30a896cb1b1985980c35cee20c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 513,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 511,
        "length": 10,
        "offset": 90,
        "surroundingCode": "                        return await DMChannel.send(\"No attachments found.\")\n\n            CounterNum = (\n                database.BaseTickerInfo.select()\n                .where(database.BaseTickerInfo.guildID == guild.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7f899d461b3b5b0675dd755c31adbd01ca08bc57d2ae8479c91a3f9d62c80789"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 518,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 516,
        "length": 4,
        "offset": 49,
        "surroundingCode": "                .get()\n            )\n            TNUM = CounterNum.counter\n            CounterNum.counter = CounterNum.counter + 1\n            CounterNum.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0aac498dbb62867125c10148b863822dffd330416f1953bf88f5afe8c5d5dff4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 522,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 520,
        "length": 3,
        "offset": 43,
        "surroundingCode": "            CounterNum.save()\n\n            LDC = await DMChannel.send(\n                f\"Please wait, creating your ticket {Emoji.loadingGIF}\"\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "aebc9b063f0aafe4c8f47d6e605f5d5e7b3841dae3a72571d90d5a6ef562326c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 527,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 525,
        "length": 11,
        "offset": 67,
        "surroundingCode": "\n            if TypeSubject == \"Language Helpers\":\n                mainSubject = \"languages\"\n            else:\n                mainSubject = ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b0e18de4b36ad4374a47f243b66492d4bbac49dbcdb85667a14ed0cf2877dfe4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 529,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 527,
        "length": 11,
        "offset": 76,
        "surroundingCode": "                mainSubject = \"languages\"\n            else:\n                mainSubject = (\n                    c.name.replace(\"═\", \"\")\n                    .replace(\"⁃\", \"\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "475c0de7f28bdd5d7592e4669d1e2a9351bb745d55c50f60bf9592d2f2e79a7e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 568,
      "offset": 21,
      "length": 7,
      "code": {
        "startLine": 566,
        "length": 7,
        "offset": 73,
        "surroundingCode": "                ]\n                for role in roles:\n                    RoleOBJ = discord.utils.get(\n                        interaction.message.guild.roles, name=role\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5fc3b098cfb5064fde7976807ce2f42c1c4258db9859933888ef8b41060b75a7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 579,
      "offset": 25,
      "length": 7,
      "code": {
        "startLine": 577,
        "length": 7,
        "offset": 101,
        "surroundingCode": "                            reason=\"Ticket Perms\",\n                        )\n                        RoleOBJ = discord.utils.get(guild.roles, name=role)\n                        if (\n                            not ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "555592e5dcc1c2aa786e20daf17e3a28029a206009f8c67c5b9a47e2630d2d85"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 611,
      "offset": 25,
      "length": 7,
      "code": {
        "startLine": 609,
        "length": 7,
        "offset": 109,
        "surroundingCode": "                    roles = [\"Essay Reviser\"]\n                    for role in roles:\n                        RoleOBJ = discord.utils.get(\n                            interaction.message.guild.roles, name=role\n                        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1b4e5935974115560b1c796806486e9b9b18893860de3e1fb953aa1fc89864af"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 623,
      "offset": 25,
      "length": 7,
      "code": {
        "startLine": 621,
        "length": 7,
        "offset": 122,
        "surroundingCode": "                    roles = [\"Chat Helper\", \"Lead Helper\"]\n                    for role in roles:\n                        RoleOBJ = discord.utils.get(\n                            interaction.message.guild.roles, name=role\n                        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f87bb54e425a79d4a5cc8e812453bdd6c0991d1452db7dbf94ca8f6df0950eae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 645,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 643,
        "length": 13,
        "offset": 27,
        "surroundingCode": "            )\n\n            controlTicket = discord.Embed(\n                title=\"Control Panel\",\n                description=\"To end this ticket, click the lock button!\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e086f02d6bba3e3145699d26d260ef0969acd1d36aaef93a91e37e8d75746981"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 650,
      "offset": 13,
      "length": 17,
      "code": {
        "startLine": 648,
        "length": 17,
        "offset": 71,
        "surroundingCode": "                color=discord.Colour.gold(),\n            )\n            LockControlButton = discord.ui.View()\n            LockControlButton.add_item(\n                ButtonHandler("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d79e6181c64947f8fc7a38994e98dfa046ab6bfdd43e99bfc51202590cdf5fa2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 662,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 660,
        "length": 3,
        "offset": 27,
        "surroundingCode": "            )\n\n            LCM = await channel.send(\n                interaction.user.mention, embed=controlTicket, view=LockControlButton\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2ad210120d7f9f9225cb5c2f20787d48e430cf02c6c011df6427121053a2bc17"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 703,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 701,
        "length": 11,
        "offset": 39,
        "surroundingCode": "                    )\n\n                mentionRole = getRole(interaction.guild, mainSubject, selection_str)\n\n                await channel.send(mentionRole.mention, embed=embed)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5cd680168f07a2c8a8ae8f95b38a8504e43183432fcdda7e7ab1bb2fc99bfbf6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 763,
      "offset": 15,
      "length": 14,
      "code": {
        "startLine": 761,
        "length": 14,
        "offset": 60,
        "surroundingCode": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def TicketDropdown(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7dd4692485684bf6d3597b2d7db208ca2d07c8babce2b2771478b10add522ba6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 764,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 762,
        "length": 19,
        "offset": 123,
        "surroundingCode": "    @commands.Cog.listener(\"on_interaction\")\n    async def TicketDropdown(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e0ef9742804df6b27f59dfe90d2d21f9ba0364b50e177f22f26f80076a5a9562"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 795,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 793,
        "length": 11,
        "offset": 70,
        "surroundingCode": "                color=discord.Colour.red(),\n            )\n            ButtonViews = discord.ui.View()\n            ButtonViews.add_item(\n                ButtonHandler("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bedf5e35ccaff70a3e7147e8ede18a041f37e66df8e194fb280a643f1577856a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 833,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 831,
        "length": 11,
        "offset": 34,
        "surroundingCode": "\n            try:\n                TicketOwner = await guild.fetch_member(query.authorID)\n            except discord.NotFound:\n                try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0d8d9aadd5a7c970bf5c52efd96b4e5a7098e6af386220cbe148ab607bc6e4cf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 852,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 850,
        "length": 12,
        "offset": 92,
        "surroundingCode": "            )\n            embed.set_footer(text=\"This ticket has been closed!\")\n            ButtonViews2 = discord.ui.View()\n\n            ButtonViews2.add_item("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "59fabaf3fbe31e6193fa04efb5815991ecd53ab31a2a7a1c9a7100d41028c1eb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 931,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 929,
        "length": 11,
        "offset": 47,
        "surroundingCode": "            )\n            try:\n                TicketOwner = await guild.fetch_member(query.authorID)\n            except discord.NotFound:\n                try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bc2ee8174e31647e0532dd4a8c4def59792d8e2d0c7ff022f422696be3a686b2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 962,
      "offset": 17,
      "length": 18,
      "code": {
        "startLine": 960,
        "length": 18,
        "offset": 133,
        "surroundingCode": "            channel: discord.TextChannel = interaction.channel\n            if interaction.guild.id == MainID.g_main:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    MainID.ch_transcript_logs\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "610ebc9f7532d3b401ae139621280125956d41c71886c0e8ce7f7bf58477499a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 966,
      "offset": 17,
      "length": 18,
      "code": {
        "startLine": 964,
        "length": 18,
        "offset": 52,
        "surroundingCode": "                )\n            else:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    TechID.ch_ticket_log\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "739550c32999e17526173c30497748f070e8b24d54692d4482c6455e35891b03"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 974,
      "offset": 28,
      "length": 6,
      "code": {
        "startLine": 972,
        "length": 6,
        "offset": 82,
        "surroundingCode": "            )\n            async with channel.typing():\n                msg, file, S3_URL = await TicketExport(\n                    self, channel, ResponseLogChannel, author, None, True\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "78c6d8e87290004bb0a2c062270faf0cf2154a2878a566e8d9e8830fda476848"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1030,
      "offset": 17,
      "length": 18,
      "code": {
        "startLine": 1028,
        "length": 18,
        "offset": 108,
        "surroundingCode": "            author = interaction.user\n            if interaction.guild.id == MainID.g_main:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    MainID.ch_transcript_logs\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3b16cfff484575f1df7c8cfb7c389b9925bb3994b710c9251a616af34674642c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1034,
      "offset": 17,
      "length": 18,
      "code": {
        "startLine": 1032,
        "length": 18,
        "offset": 52,
        "surroundingCode": "                )\n            else:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    TechID.ch_ticket_log\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "755cc40d08cfd3e9e153c05c5030c6810581ce2926f57a8850ab2659020fdaf5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1042,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 1040,
        "length": 4,
        "offset": 49,
        "surroundingCode": "                .get()\n            )\n            msgO = await interaction.channel.send(\n                f\"{author.mention}\\nPlease wait, generating a transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5a9c5fe949e515f237e1ca25182759ec903a775890aefed7e7d06799011b9c2b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1046,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 1044,
        "length": 11,
        "offset": 71,
        "surroundingCode": "            )\n            async with channel.typing():\n                TicketOwner = self.bot.get_user(query.authorID)\n                if TicketOwner is None:\n                    TicketOwner = await self.bot.fetch_user(query.authorID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "30f22787fd775e6b43933f63990d15a526ef392f429d788d158ecd84ef13a75d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1048,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 1046,
        "length": 11,
        "offset": 124,
        "surroundingCode": "                TicketOwner = self.bot.get_user(query.authorID)\n                if TicketOwner is None:\n                    TicketOwner = await self.bot.fetch_user(query.authorID)\n\n                messages = [message async for message in channel.history(limit=None)]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e73ba6b9213af1e43046896ca7c77266cc6b4e8dcedd406494e237d7e9489f09"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1051,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 1049,
        "length": 10,
        "offset": 103,
        "surroundingCode": "\n                messages = [message async for message in channel.history(limit=None)]\n                authorList = []\n\n                for msg in messages:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6c575ce7093bbe5d59057e4df12d9fb7faa1c6490645c3214edfefeeaee25bb5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1127,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 1125,
        "length": 11,
        "offset": 70,
        "surroundingCode": "                color=discord.Colour.red(),\n            )\n            ButtonViews = discord.ui.View()\n            ButtonViews.add_item(\n                ButtonHandler("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "09b376c4f7ab7118eabb20dfc9945df2ef6196814e131939cd40a22421504a7c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1151,
      "offset": 15,
      "length": 14,
      "code": {
        "startLine": 1149,
        "length": 14,
        "offset": 44,
        "surroundingCode": "\n    @tasks.loop(minutes=1.0)\n    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        guild = self.bot.get_guild(MainID.g_main)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1d07023b108a8f0a0f9b240af7c77cf1ffba6c5ef9ae11dd6abbf55e6d0b598f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1152,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 1150,
        "length": 12,
        "offset": 73,
        "surroundingCode": "    @tasks.loop(minutes=1.0)\n    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        guild = self.bot.get_guild(MainID.g_main)\n        for entry in TicketInfoTB:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "66f76dc1eb2baa4cb6a9c4fdbc376c3ab9964b7008a332fbe52d466398efc6f3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1159,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 1157,
        "length": 12,
        "offset": 38,
        "surroundingCode": "                continue\n\n            fetchMessage = [message async for message in channel.history(limit=1)]\n            TicketOwner = guild.get_member(entry.authorID)\n            messages = [message async for message in channel.history(limit=None)]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "af6ec65309e0244d3b7fb17e1d75136812346a8c0f69d010c20640d65522073a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1160,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 1158,
        "length": 11,
        "offset": 96,
        "surroundingCode": "\n            fetchMessage = [message async for message in channel.history(limit=1)]\n            TicketOwner = guild.get_member(entry.authorID)\n            messages = [message async for message in channel.history(limit=None)]\n            LogCH = self.bot.get_channel(MainID.ch_transcript_logs)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2a26a55df9720a6db4e91acf0af201b1afc0fd4fa49132751df3955d1ad68f7a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1162,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 1160,
        "length": 5,
        "offset": 153,
        "surroundingCode": "            TicketOwner = guild.get_member(entry.authorID)\n            messages = [message async for message in channel.history(limit=None)]\n            LogCH = self.bot.get_channel(MainID.ch_transcript_logs)\n            authorList = []\n            if len(messages) == 0:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "97c147a88e2e92cc23911636b2529a50f444ef3fba5a170b9fb6a7e8c5b94df5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1163,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 1161,
        "length": 10,
        "offset": 162,
        "surroundingCode": "            messages = [message async for message in channel.history(limit=None)]\n            LogCH = self.bot.get_channel(MainID.ch_transcript_logs)\n            authorList = []\n            if len(messages) == 0:\n                continue"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "774cae9be055d1d24621c3f8dad87b06c13c99402de4e9cea9280feee0c5a023"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1171,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 1169,
        "length": 12,
        "offset": 94,
        "surroundingCode": "                - timedelta(minutes=self.TICKET_INACTIVE_TIME)\n            ):\n                ButtonViews2 = discord.ui.View()\n\n                ButtonViews2.add_item("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "03f281bd32017f3806b7463cb06c3e1eed48355f09283f023a3bcae6b94c1ba6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1250,
      "offset": 15,
      "length": 13,
      "code": {
        "startLine": 1248,
        "length": 13,
        "offset": 55,
        "surroundingCode": "    @commands.command()\n    @is_botAdmin\n    async def sendCHTKTView(self, ctx):\n        MasterSubjectView = discord.ui.View()\n        MasterSubjectView.add_item("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e142a3312b9edfaf23413cdd7537055feff78e00036e9a06fe41f21397ea0bf9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1251,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 1249,
        "length": 17,
        "offset": 65,
        "surroundingCode": "    @is_botAdmin\n    async def sendCHTKTView(self, ctx):\n        MasterSubjectView = discord.ui.View()\n        MasterSubjectView.add_item(\n            SelectMenuHandler("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e9327f7c88803320e062e648fab9f257a1fcdbe43b4687beb8b95f35cea25db5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 19,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 17,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef getEqualRank(query):\n    if query not in config:\n        return None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "938f4b9f57d0744ad079fd24625f65d9cfd1c664759aaee32e0c89b98e99dde3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 26,
      "offset": 11,
      "length": 13,
      "code": {
        "startLine": 24,
        "length": 13,
        "offset": 12,
        "surroundingCode": "\n\nasync def roleNameCheck(self, name: str, guild: discord.Guild, user: discord.Member):\n    check = getEqualRank(name)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "25f3d95081b2cc0d5c910f5c639dc5570595552e628cf1bb74d520334b68a161"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 50,
      "offset": 15,
      "length": 17,
      "code": {
        "startLine": 48,
        "length": 17,
        "offset": 60,
        "surroundingCode": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0ddd8ce545f78cbd6f8bc8a044df169d50e85fa0b1663ab18fcd1a8253f985af"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 51,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 49,
        "length": 19,
        "offset": 126,
        "surroundingCode": "    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "da0c9337b0a310f855cbb6e9dd58915315893684bfebd56bfab45736c2dba38e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 62,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 60,
        "length": 11,
        "offset": 52,
        "surroundingCode": "            print(interaction.user.id)\n\n            staffServer: discord.Guild = self.bot.get_guild(interaction.guild_id)\n            print(staffServer)\n            StaffServerMember: discord.Member = staffServer.get_member("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3be5a6dd3ab4fa66e7d759fcda9eb570bd7eaed17e03593c6de28ee14e57ff35"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 64,
      "offset": 13,
      "length": 17,
      "code": {
        "startLine": 62,
        "length": 17,
        "offset": 125,
        "surroundingCode": "            staffServer: discord.Guild = self.bot.get_guild(interaction.guild_id)\n            print(staffServer)\n            StaffServerMember: discord.Member = staffServer.get_member(\n                interaction.user.id\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2e8d9e9f890f02d9faf3c0644f1c7a4119af6a3c61d630833018e2a5d0ea7c08"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 71,
      "offset": 17,
      "length": 17,
      "code": {
        "startLine": 69,
        "length": 17,
        "offset": 85,
        "surroundingCode": "            if StaffServerMember is None:\n                print(\"h\")\n                StaffServerMember: discord.Member = staffServer.get_member(\n                    interaction.user.id\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4515959d7bc4bce082639fd31761f0d8d56b823059be7abe4d2799466081e850"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 99,
      "offset": 13,
      "length": 19,
      "code": {
        "startLine": 97,
        "length": 19,
        "offset": 40,
        "surroundingCode": "                    return\n\n            VerificationChannel = interaction.channel\n            logchannel = self.bot.get_channel(self.staffServer[interaction.guild_id])\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4a2592b48f6e87b91fb3b0c9f4d296dfa1bbfec44a5cea2ed81bd082af17d7a3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 102,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 100,
        "length": 13,
        "offset": 99,
        "surroundingCode": "            logchannel = self.bot.get_channel(self.staffServer[interaction.guild_id])\n\n            VerifiedRoles = []\n            VerifiedGuilds = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "335ceddca0c1fd9d6ad99da5fd1fe6a7faa4aaf485049183702b46cccece28f1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 103,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 101,
        "length": 14,
        "offset": 44,
        "surroundingCode": "\n            VerifiedRoles = []\n            VerifiedGuilds = []\n\n            for ID in self.ServerIDs:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "18cd07d360c4d348db9a48429768b70e5906ccb8ab79f3a0681ab3057df56893"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 108,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 106,
        "length": 12,
        "offset": 104,
        "surroundingCode": "                server: discord.Guild = self.bot.get_guild(ID)\n                try:\n                    ServerMember: discord.Member = server.get_member(\n                        interaction.user.id\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6afe7cae669ab4488dff1310a79b6f282a67e2a47f1225bf01961c8c24a52efc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 117,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 115,
        "length": 9,
        "offset": 43,
        "surroundingCode": "\n                else:\n                    roleNames = [role for role in ServerMember.roles]\n\n                    for role in roleNames:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b83c2b95e4200f9adb9f15f556196ae7c1ca7f7ba86e756f6c7ff6d60f6c2563"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 124,
      "offset": 29,
      "length": 8,
      "code": {
        "startLine": 122,
        "length": 8,
        "offset": 75,
        "surroundingCode": "\n                        if check is not None:\n                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cbdfaec1aa1e431fbc04f2fb744747696afede444ce3c92a4c3c56f3b93745d6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 125,
      "offset": 29,
      "length": 12,
      "code": {
        "startLine": 123,
        "length": 12,
        "offset": 130,
        "surroundingCode": "                        if check is not None:\n                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3273435596f87afd270013a59fe29ce14c438dccf40aa41fba91c35871ed0d6f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 126,
      "offset": 29,
      "length": 13,
      "code": {
        "startLine": 124,
        "length": 13,
        "offset": 162,
        "surroundingCode": "                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\"\n\n                            if markdownRole not in VerifiedRoles:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fb5b68499180c06bf5516a6b1d1fe7629764e80bf146e6d0ce977db629cc7e2b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 135,
      "offset": 37,
      "length": 8,
      "code": {
        "startLine": 133,
        "length": 8,
        "offset": 169,
        "surroundingCode": "                            for elem in check:\n                                if elem in [role.name for role in staffServer.roles]:\n                                    jsonROLE = discord.utils.get(\n                                        staffServer.roles, name=elem\n                                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "13a5b33cbe5c6b3c4d654631a2d80689ce99509ea76bb11595917915bd3f8600"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 164,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 162,
        "length": 12,
        "offset": 68,
        "surroundingCode": "                await logchannel.send(embed=embed)\n\n                VerifiedRole: discord.Role = discord.utils.get(\n                    staffServer.roles, name=\"Member\"\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "50ad0f85ee35094875cb5435d3bf0ed1ec7c22c5331deaf8cf3deb072ff416a7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 227,
      "offset": 15,
      "length": 23,
      "code": {
        "startLine": 225,
        "length": 23,
        "offset": 39,
        "surroundingCode": "\n    @commands.command()\n    async def pasteVerificationButton(self, ctx):\n        button = VerifyButton()\n        await ctx.send(\"Click here to verify\", view=button)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ddf02649551f063badca1be61255ff1348a83dd4454677e594cd7086bcb8bc00"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 232,
      "offset": 15,
      "length": 22,
      "code": {
        "startLine": 230,
        "length": 22,
        "offset": 39,
        "surroundingCode": "\n    @commands.command()\n    async def pasteVerificationEmbed(self, ctx: commands.Context):\n        embed = discord.Embed(\n            title=\"Verification\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "006dd06de9f4d5910bab119287aa363a67a88b732c8595d15ac68b77f769c869"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "An instance attribute is defined outside `__init__`",
  "severity": "Moderate",
  "comment": "Instance attribute index defined outside __init__",
  "detailsInfo": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 512,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 510,
        "length": 10,
        "offset": 99,
        "surroundingCode": "    async def get_page(self, page_number: int) -> Any:\n        # The front page is a dummy\n        self.index = page_number\n        return self\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyAttributeOutsideInitInspection"
  },
  "hash": "67459e9c7779da68cd92ef9e6bf32f503e5dd4c57b7336b32fcea9f56e7e8529"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "An instance attribute is defined outside `__init__`",
  "severity": "Moderate",
  "comment": "Instance attribute style defined outside __init__",
  "detailsInfo": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 53,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 51,
        "length": 10,
        "offset": 98,
        "surroundingCode": "\n        elif view.current_player == view.O and self.yUser.id == interaction.user.id:\n            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyAttributeOutsideInitInspection"
  },
  "hash": "8bd2a3000b03a0c3418ab974a932074b9fff40f91cb4ec6d7e6df35b1fc5d39b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "An instance attribute is defined outside `__init__`",
  "severity": "Moderate",
  "comment": "Instance attribute label defined outside __init__",
  "detailsInfo": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 54,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 52,
        "length": 10,
        "offset": 150,
        "surroundingCode": "        elif view.current_player == view.O and self.yUser.id == interaction.user.id:\n            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True\n            view.board[self.y][self.x] = view.O"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyAttributeOutsideInitInspection"
  },
  "hash": "22e8e0534a6c27e64107f24381288f33fda1574b7e2bdda40f05bb95c9023c1c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "An instance attribute is defined outside `__init__`",
  "severity": "Moderate",
  "comment": "Instance attribute disabled defined outside __init__",
  "detailsInfo": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 55,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 53,
        "length": 13,
        "offset": 94,
        "surroundingCode": "            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True\n            view.board[self.y][self.x] = view.O\n            view.current_player = view.X"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyAttributeOutsideInitInspection"
  },
  "hash": "8203fe927cae45a2bb71ac3a7f7b6dbef8d4b0a3f55739b36fa369f0e00b9bff"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "An instance attribute is defined outside `__init__`",
  "severity": "Moderate",
  "comment": "Instance attribute disabled defined outside __init__",
  "detailsInfo": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/github_commands.py",
      "language": "Python",
      "line": 85,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 83,
        "length": 13,
        "offset": 125,
        "surroundingCode": "            f\"Added labels {' '.join(f'[`{val}`]' for val in self.values)} to Issue #{self._issue.number}\"\n        )\n        self.disabled = True\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyAttributeOutsideInitInspection"
  },
  "hash": "d3cbe6789148a2356e9679bbfc118fac29890777cda9aeba3c96388e166e0426"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 319,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 317,
        "length": 6,
        "offset": 61,
        "surroundingCode": "        try:\n            os.remove(\"cred_file.json\")\n        except:\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "f24686ff733cfa5cf9a664233e3e1b17306bce7ff5e696032c7dbd7430ce58db"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 245,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 243,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                try:\n                    await msgError.delete()\n                except:\n                    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "9a77ac281db0c42e88ce05fc2814857b868a31b5e0ef7850b4d170d00cdc7b8d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 267,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 265,
        "length": 6,
        "offset": 93,
        "surroundingCode": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "11088e6aa94cc8d8e4c29e3bcc22662be0dab1d5323b874a67b741059d5f1929"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 275,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 273,
        "length": 6,
        "offset": 93,
        "surroundingCode": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "0706584d61f8a685f85c6ca9dea2021bb92efa06c923d3a80a4658d2dd45b106"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 320,
      "offset": 29,
      "length": 6,
      "code": {
        "startLine": 318,
        "length": 6,
        "offset": 124,
        "surroundingCode": "                            try:\n                                await msgError.delete(delay=7)\n                            except:\n                                pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "bb9745c3d2de8460c29ceb826f9132db864559668b0dbb20f00f6651412d7b44"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 341,
      "offset": 29,
      "length": 6,
      "code": {
        "startLine": 339,
        "length": 6,
        "offset": 124,
        "surroundingCode": "                            try:\n                                await msgError.delete(delay=7)\n                            except:\n                                pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "dc895404ec0d49a0250ceae407a569109659d72f413d0773b35737f621ee8bc0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 373,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 371,
        "length": 6,
        "offset": 93,
        "surroundingCode": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "76ec267e068d370021b3b8bc3eb6e483e198389a974d766ceb6e624ae45ef30b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 389,
      "offset": 25,
      "length": 6,
      "code": {
        "startLine": 387,
        "length": 6,
        "offset": 114,
        "surroundingCode": "                        try:\n                            await msgTooLong.delete(delay=7)\n                        except:\n                            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "42eeeba1e7f4863af427e4eb9331d07e6a1c0f33eb1b1544928ce4391b089976"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 417,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 415,
        "length": 6,
        "offset": 93,
        "surroundingCode": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "f6adf1933a8971604f03bf7913d83b569e7c9eb83a810008f40b75d47b17b92e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 444,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 442,
        "length": 6,
        "offset": 93,
        "surroundingCode": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "156d78c8cf8f1cbd9715cbd258b3864c87e9e94f6c7c4f673c6cf4efc47a0c91"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 471,
      "offset": 25,
      "length": 6,
      "code": {
        "startLine": 469,
        "length": 6,
        "offset": 112,
        "surroundingCode": "                        try:\n                            await msgError.delete(delay=7)\n                        except:\n                            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "86f78bfa5c1d7e03691915b24fc1356b50e16d9c22c79b7e18ef47a1bfa83e81"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 511,
      "offset": 25,
      "length": 6,
      "code": {
        "startLine": 509,
        "length": 6,
        "offset": 112,
        "surroundingCode": "                        try:\n                            await msgError.delete(delay=7)\n                        except:\n                            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "2e4b0af5e1e52d946062301e55b9272ae1eb3f2b8a35408e3dfed7a783e6404d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/voting.py",
      "language": "Python",
      "line": 567,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 565,
        "length": 6,
        "offset": 69,
        "surroundingCode": "            try:\n                await msgError.delete()\n            except:\n                pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "d9b36408d1c579086535616b7c19692c911033930441d44c4a508d009855b518"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 178,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 176,
        "length": 6,
        "offset": 81,
        "surroundingCode": "        try:\n            service.users().delete(userKey=email).execute()\n        except:\n            return await interaction.response.send_message(\n                f\"{interaction.user.mention} The account **{email}** does not exist.\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "a2d77e2f0a62521bbb9c692f41209996dd890b9d443c8ef241794d9792258e44"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 209,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 207,
        "length": 6,
        "offset": 119,
        "surroundingCode": "            user['suspended'] = suspend\n            service.users().update(userKey=email, body=user).execute()\n        except:\n            await interaction.response.send_message(\n                f\"{interaction.user.mention} The account **{email}** does not exist.\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "8d4ddef1b59dc791af86cd412b28b77e826c2e47e8188ed16b2636df9b19eb9d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 29,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 27,
        "length": 6,
        "offset": 69,
        "surroundingCode": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "e493692652b96ee1e3ab140f82fd0919c6cc76400799f9f4e6d52648d644ca0e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 87,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 85,
        "length": 6,
        "offset": 45,
        "surroundingCode": "                .get()\n            )\n        except:\n            q = database.SandboxConfig.create(mode=\"None\")\n            q.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "abf79c93ab8dd41e6cf7c8cfaedc0f6bea912bc5b65d27b5ac3bd73c04a11625"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 758,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 756,
        "length": 6,
        "offset": 69,
        "surroundingCode": "                        .get()\n                    )\n                except:\n                    embed = discord.Embed(\n                        title=f\"{Emoji.invalid_channel} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "9a1c9cb3fa111964df7930da11ad262c357240aaed92462196a844abac5e9d68"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 981,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 979,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "716774cacb8944f9b1bfa9b289b40881294dfaa43acb76e8440d16a2b4ca160d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1169,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1167,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "ed87d5d293115aef4d18dae053ae4d99ff46600ad24e3df1dc3ef12a6515bc6d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1344,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1342,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalid_channel} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "ac56fad0eb26295f92e857b3665e79753230a79747c8a49391a5229e5844d726"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1415,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1413,
        "length": 6,
        "offset": 103,
        "surroundingCode": "                    try:\n                        voiceLIMIT = int(new_voice_limit)\n                    except:\n                        return await ctx.send(f\"{Emoji.deny} Not a valid number!\")\n                    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "bd0394ea11d00f0fe1ea4f930eeb6b61205b2e93dfdc3d4d1e7d6daa444fb680"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1471,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1469,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalid_channel} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "cb40865acc025a0c37c0652ba8e5658cccf67dd619b3d2a81d108269701c57eb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1551,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1549,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "721d1b680a6eaec94988250c82fe6f415abb3c554ec4efbb43db37ec9d9d8296"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 19,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 17,
        "length": 6,
        "offset": 69,
        "surroundingCode": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "9100c9b0fd8dade48db440a46d928d5d440b719381e9cc90ae4f968664f9c872"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 183,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 181,
        "length": 6,
        "offset": 115,
        "surroundingCode": "                try:\n                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "a958dbba88758fbe2eda601b07c6d1cf286f3639855d94446214189b4b31ca94"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 200,
      "offset": 25,
      "length": 6,
      "code": {
        "startLine": 198,
        "length": 6,
        "offset": 139,
        "surroundingCode": "                                tutorChannel, reason=\"Hogging the VC Start Channel.\"\n                            )\n                        except:\n                            await member.move_to(\n                                None, reason=\"Hogging the VC Start Channel.\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "cf9e9763ac86f5825424a5af01b297701ed5a85f42bb7b57c6c04d4b64250de8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 393,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 391,
        "length": 6,
        "offset": 115,
        "surroundingCode": "                        reason=\"Maximum Channel Ownership Allowance [TRUE]\",\n                    )\n                except:\n                    await member.move_to(\n                        None, reason=\"Maximum Channel Ownership Allowance [FAIL]\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "085a3fb059fe7c51ef6d1e9ca011a4e7458e22397f7a0bf79440037bedf2c24e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 37,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 35,
        "length": 6,
        "offset": 69,
        "surroundingCode": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "0502670c4c876f56c4e342eeb24d4890cc0827fb50721e933c141b6ef0b0c792"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 301,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 299,
        "length": 6,
        "offset": 70,
        "surroundingCode": "            try:\n                await member.send(dmMSG)\n            except:\n                pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "52fb9ab94fc280352e1461c27615de39d28f9824a02fbfe4f0e41f3476198a39"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 86,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 84,
        "length": 6,
        "offset": 98,
        "surroundingCode": "            try:\n                await interaction.response.send_message(embed=embed)\n            except:\n                await interaction.channel.send(embed=embed)\n        else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "089b97fb9c127026e202fc854c11f5accb15564468b51a376aa89135c00cc99f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 117,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 115,
        "length": 6,
        "offset": 110,
        "surroundingCode": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n            else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "fcee7a9160285d928e234f14e4d57c2e3fa85055d96e7fc4e3e3343db1dda79f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 127,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 125,
        "length": 6,
        "offset": 110,
        "surroundingCode": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "f10a7970579c82894239e2ae8287b20120e9432d49d877487eb0b927c7633131"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 55,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 53,
        "length": 6,
        "offset": 87,
        "surroundingCode": "                try:\n                    await tutor.send(embed=embed)\n                except:\n                    await botch.send(\n                        f\"Unable to send a reminder DM to you {tutor.mention}!\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "8381a2f0075a6d90c70db3c61763e16ae8e5055da34f902fc1b9ae6c10fc6a2c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 62,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 60,
        "length": 6,
        "offset": 89,
        "surroundingCode": "                try:\n                    await student.send(embed=embed)\n                except:\n                    print(f\"Unable to Send a Reminder DM to: {student.id}\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "440bf0f088b901404d7dd1c9e84a17c24dd31273f31c575ac0cf4f3b0380158e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 154,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 152,
        "length": 6,
        "offset": 66,
        "surroundingCode": "    try:\n        os.remove(f\"transcript-{channel.name}.html\")\n    except:\n        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "42e0bd8e5da069fbb6294b53fa62b14e8787557f2fff2d01adabdf1d1412257a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 89,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 87,
        "length": 6,
        "offset": 90,
        "surroundingCode": "                            ephemeral=True,\n                        )\n                    except:\n                        await interaction.channel.send(\n                            f\"{interaction.user.mention} An error occurred while \""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "c26af6d8b09bfe2070e95e770169c937bf8daa466f53775e71a565d8dc054b60"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 180,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 178,
        "length": 6,
        "offset": 116,
        "surroundingCode": "                            \"You have been verified!\", ephemeral=True\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} You have been verified!\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "81b0c4d7ebe12f9062c8ce8ee03c29ea31dd8eb3650c77d6a9f27071f100d285"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/!VerificationStaff.py",
      "language": "Python",
      "line": 219,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 217,
        "length": 6,
        "offset": 90,
        "surroundingCode": "                            ephemeral=True,\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} I didn't seem to find any roles to give you, please try \""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "be4d844c92e47c14585f2b6f60a9a9af170aa26e976489c097244cc888f4e0b0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _meta of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 74,
      "offset": 27,
      "length": 21,
      "code": {
        "startLine": 72,
        "length": 21,
        "offset": 83,
        "surroundingCode": "        else:\n            db.connect(reuse_if_open=True)\n            for column in model_dict[key]._meta.sorted_fields:\n                if not db.column_exists(key, column.name):\n                    db.create_column(key, column.name)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "68b85ae0402813efa65830ebffba173742ec6d3456fa8950bac9fd7851e37225"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _prepare_once of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 193,
      "offset": 15,
      "length": 25,
      "code": {
        "startLine": 191,
        "length": 25,
        "offset": 34,
        "surroundingCode": "            return\n\n        await self.source._prepare_once()\n        page = await self.source.get_page(0)\n        kwargs = await self._get_kwargs_from_page(page)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "6fb59a5bb2acb445981d2ab0f21b50e20232993c083326a8c994e0eeebc1c192"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _prepare_once of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 493,
      "offset": 15,
      "length": 25,
      "code": {
        "startLine": 491,
        "length": 25,
        "offset": 45,
        "surroundingCode": "        self.current_page = 0\n\n        await self.source._prepare_once()\n        page = await self.source.get_page(0)\n        kwargs = await self._get_kwargs_from_page(page)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "13f7206b7825c54fca0d0652e415328c6ed81c2ea7c13c01be7bcbc76323dd32"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type[Blacklist]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 529,
      "offset": 14,
      "length": 12,
      "code": {
        "startLine": 527,
        "length": 12,
        "offset": 100,
        "surroundingCode": "    blacklisted_users = []\n    db_blacklist: collections.Iterable = database.Blacklist\n    for p in db_blacklist:\n        blacklisted_users.append(p.discordID)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "050813472c60c9004abe07cf9aaa01af733cb6990ea6bf8dc1a3122ba02f08e8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type[WhitelistedPrefix]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/CommandsOnly.py",
      "language": "Python",
      "line": 22,
      "offset": 22,
      "length": 26,
      "code": {
        "startLine": 20,
        "length": 26,
        "offset": 129,
        "surroundingCode": "        if message.channel.id == MainID.ch_mod_commands and not message.author.bot:\n            prefix = []\n            for p in database.WhitelistedPrefix:\n                prefix.append(p.prefix)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "7ced4086b081019e2fa71a11bf08958118922d5781b7a2cae7d1ff1f86909f1d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type[Blacklist]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/Blacklist.py",
      "language": "Python",
      "line": 83,
      "offset": 18,
      "length": 18,
      "code": {
        "startLine": 81,
        "length": 18,
        "offset": 97,
        "surroundingCode": "        await interaction.response.defer(thinking=True)\n        empty_list = []\n        for p in database.Blacklist:\n            user = self.bot.get_user(p.discordID)\n            if not user:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "a56e151761a09f58029aacac37dd6653f5409fcb34f2e37098a557cb191ed23b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type[WhitelistedPrefix]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 148,
      "offset": 22,
      "length": 8,
      "code": {
        "startLine": 146,
        "length": 8,
        "offset": 44,
        "surroundingCode": "        response = []\n\n        for entry in PrefixDB:\n\n            if entry.status is True:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "a1331dc9d6b6f1a07a7335174f3b1d0bd881a40fe343b921904ae1773158bc09"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type[StudyVCDB]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
      "language": "Python",
      "line": 212,
      "offset": 18,
      "length": 18,
      "code": {
        "startLine": 210,
        "length": 18,
        "offset": 95,
        "surroundingCode": "        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "6056bdb3a53a318c19ed78b984039e4760f20e9cd6fd2f4a1fc217b34a4b2cca"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 64,
      "offset": 30,
      "length": 5,
      "code": {
        "startLine": 62,
        "length": 5,
        "offset": 81,
        "surroundingCode": "                list_ten = []\n                i = 0\n                for entry in query:\n                    if not isinstance(entry.Date, datetime):\n                        entry.Date = datetime.fromisoformat(entry.Date)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "c44198ba2b5eba154fd5834c1a4ccb1f7595becc6777030b6aa2a11c937663e8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 154,
      "offset": 26,
      "length": 5,
      "code": {
        "startLine": 152,
        "length": 5,
        "offset": 69,
        "surroundingCode": "            list_ten = []\n            i = 0\n            for entry in query:\n\n                if not isinstance(entry.Date, datetime):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "2a1bc47b02c816b967a0edd096716d7c6787930b6f030bb42408af3892fce9c4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type[TutorBot_Sessions]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 24,
      "offset": 22,
      "length": 26,
      "code": {
        "startLine": 22,
        "length": 26,
        "offset": 92,
        "surroundingCode": "    async def tutorsession(self):\n        now = datetime.now(self.est)\n        for entry in database.TutorBot_Sessions:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.Date)\n            val = int((TutorSession - now).total_seconds())"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "90bf0529eacf8b64a86f51b78749d4339faa900bc019d45440297788702ff9a3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type[TutorSession_GracePeriod]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 123,
      "offset": 22,
      "length": 33,
      "code": {
        "startLine": 121,
        "length": 33,
        "offset": 104,
        "surroundingCode": "    async def tutorsession_graceperiod(self):\n        now = datetime.now(self.est)\n        for entry in database.TutorSession_GracePeriod:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.GP_DATE)\n            val = int((TutorSession - now).total_seconds())"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "6db66d243536927f2f87a3935a8c2ca4c39f0511e7f25ef2884b323e7893d6fa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type[ResponseSpamBlacklist]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/set.py",
      "language": "Python",
      "line": 43,
      "offset": 18,
      "length": 30,
      "code": {
        "startLine": 41,
        "length": 30,
        "offset": 63,
        "surroundingCode": "def reload_blacklist():\n    blacklist.clear()\n    for entry in database.ResponseSpamBlacklist:\n        blacklist.append(entry.discordID)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "9d36fc6f62378f5429baf9f686de5a95f7f7f3cc9a024e83f7db1ef823d977ef"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type[ResponseSpamBlacklist]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/set.py",
      "language": "Python",
      "line": 403,
      "offset": 21,
      "length": 30,
      "code": {
        "startLine": 401,
        "length": 30,
        "offset": 59,
        "surroundingCode": "\n    async def cog_load(self) -> None:\n        for item in database.ResponseSpamBlacklist:\n            blacklist.append(item.discordID)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "5851d66973dd71f9486289c71965c964661ff67fd1d9a44e0f99d42e43a66e27"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type '{__ne__}', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 975,
      "offset": 64,
      "length": 4,
      "code": {
        "startLine": 973,
        "length": 4,
        "offset": 160,
        "surroundingCode": "            async with channel.typing():\n                msg, file, S3_URL = await TicketExport(\n                    self, channel, ResponseLogChannel, author, None, True\n                )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "f10e86f505fc61559713abef2a2906bb7be5b7f80a2e96b0b6bba397b222b3f7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type[TicketInfo]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1154,
      "offset": 22,
      "length": 12,
      "code": {
        "startLine": 1152,
        "length": 12,
        "offset": 114,
        "surroundingCode": "        TicketInfoTB = database.TicketInfo\n        guild = self.bot.get_guild(MainID.g_main)\n        for entry in TicketInfoTB:\n            channel: discord.TextChannel = self.bot.get_channel(entry.ChannelID)\n            if channel is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "a6827d772fb6f273cfb197b460240d8386b811c73b91fb83355ab5a5c6f3e4d1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type[Blacklist]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 52,
      "offset": 51,
      "length": 18,
      "code": {
        "startLine": 50,
        "length": 18,
        "offset": 135,
        "surroundingCode": "\n    async def interaction_check(self, interaction: discord.Interaction, /) -> bool:\n        blacklisted_users = [p.discordID for p in database.Blacklist]\n        if interaction.user.id in blacklisted_users:\n            await interaction.response.send_message(\"You have been blacklisted from using commands!\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "67aa30e462707afa7b241d609f6a3dbfe0f61b072ced8b90ff0760972c2afac0"
}]}