{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'creds' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 225,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 223,
        "length": 5,
        "offset": 33,
        "surroundingCode": "            pass\n\n        return creds\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "222af4e3a1c5b0e499ef69c287eedf4f01f8e0018087cbe3ff19193e4046c56b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'datetime' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 297,
      "offset": 38,
      "length": 8,
      "code": {
        "startLine": 295,
        "length": 8,
        "offset": 77,
        "surroundingCode": "    content = TextField(default=\"N/A\")\n\n    datetime = DateTimeField(default=datetime.now())\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "a18217894eb27e3532e7cf4287e22ed088425524db15ead86ef56c8eeca9d68c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'value' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 32,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 30,
        "length": 5,
        "offset": 45,
        "surroundingCode": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "2187dac9eeb0fcf2d8d8bccde334aca113b7ea985418fba53b04588c97437be4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 762,
      "offset": 42,
      "length": 5,
      "code": {
        "startLine": 760,
        "length": 5,
        "offset": 88,
        "surroundingCode": "                    )\n                finally:\n                    await ctx.send(embed=embed)\n        else:\n            embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "6ec8dcadcfea1f4d48186a6978d390c83f8587c8b28c8dee703f79b5c6b237c5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 975,
      "offset": 46,
      "length": 5,
      "code": {
        "startLine": 973,
        "length": 5,
        "offset": 100,
        "surroundingCode": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "853fd0fab51884fb3053eb8737208232f5ddcabda8a693cfa1439441186ebcfa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1163,
      "offset": 46,
      "length": 5,
      "code": {
        "startLine": 1161,
        "length": 5,
        "offset": 100,
        "surroundingCode": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n\n            else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "4a040dda08a273ea623b746024ae391cd78242ba7157156e5869f1f17252b7ef"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1338,
      "offset": 46,
      "length": 5,
      "code": {
        "startLine": 1336,
        "length": 5,
        "offset": 100,
        "surroundingCode": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "76568ef19aa79aeb7bb7c629c960de7a6d6fc02910d45ef2cc1b00f9cc35245f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1458,
      "offset": 46,
      "length": 5,
      "code": {
        "startLine": 1456,
        "length": 5,
        "offset": 100,
        "surroundingCode": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "b3aafc70f9a0e0ecddae4ee5ef8f86fb9b817d835d9ad6fbb63b079e5a385c39"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'embed' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1538,
      "offset": 46,
      "length": 5,
      "code": {
        "startLine": 1536,
        "length": 5,
        "offset": 100,
        "surroundingCode": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "ecf43661fb0f342e90d69107fa314bc9b462a72551652c8d28429c383249ecb0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'value' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 21,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 19,
        "length": 5,
        "offset": 45,
        "surroundingCode": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "9d9fb06ba1811986c1f507b15b60da8d9623508fc340f06268235192988bdb60"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'value' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 40,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 38,
        "length": 5,
        "offset": 45,
        "surroundingCode": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "32bafff74160e5b2d4b920731b0e91dea791d077021b7c98ae7386428aa02561"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'query' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 76,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 74,
        "length": 5,
        "offset": 40,
        "surroundingCode": "        )\n        if renew:\n            query.delete_instance()\n\n        await member.move_to(None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "80ed2ac6d65c5dcb41dcffbfec13000f8d68b7d580e9469bdbcf9ef1acd73d2b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'query' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 91,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 89,
        "length": 5,
        "offset": 54,
        "surroundingCode": "        await addLeaderboardProgress(member)\n\n        query.goal = goal\n        query.RenewalTime = renewal\n        query.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "15b1b1d32e3127c482ba22212bac1bbe7e7648b9e962f5bac1a536fec95c4952"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'msg' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 156,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 154,
        "length": 3,
        "offset": 57,
        "surroundingCode": "    if response == None:\n        msg = S3_URL\n    return msg, transcript_file, S3_URL\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "47f913d53f5be1e1ab4f0e2affd8060af48d1055038b83165f67bf38944e9c20"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 311,
      "offset": 67,
      "length": 10,
      "code": {
        "startLine": 309,
        "length": 10,
        "offset": 117,
        "surroundingCode": "    @slash_is_bot_admin_2()\n    async def gitpull(\n            self, interaction: discord.Interaction, mode: Literal[\"-a\", \"-c\"] = \"-a\", sync_commands: bool = False\n    ) -> None:\n        output = \"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "752763b362a23245f9d92a7efff5c597ba7eeb51dd0ca1041896f8075a0f0a1b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 64,
      "offset": 35,
      "length": 34,
      "code": {
        "startLine": 62,
        "length": 34,
        "offset": 81,
        "surroundingCode": "        firstname: str,\n        lastname: str,\n        organizationunit: Literal[\"Personal Account\", \"Team Account\"],\n    ):\n        HR_Role = discord.utils.get(interaction.user.guild.roles, id=HR_ID.r_hrStaff)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "31bce8fa15b57458cf9139e0129d9dea186f54b7e58b83da3124ebcc1a35fef9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 204,
      "offset": 23,
      "length": 10,
      "code": {
        "startLine": 202,
        "length": 10,
        "offset": 60,
        "surroundingCode": "        date: str,\n        time: str,\n        ampm: Literal[\"AM\", \"PM\"],\n        student: discord.Member,\n        repeats: bool,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "54e82abcd0a24fa4868323cfeae95fb16ef3a052efe9f218257bb7db78e8058a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 336,
      "offset": 23,
      "length": 10,
      "code": {
        "startLine": 334,
        "length": 10,
        "offset": 60,
        "surroundingCode": "        date: str,\n        time: str,\n        ampm: Literal[\"AM\", \"PM\"],\n        student: str,\n        repeats: bool,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "f9fac6097d8b8a3ca2e8626c2240d0e2c8b887a5a773fb673debbe67918bc470"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/set.py",
      "language": "Python",
      "line": 175,
      "offset": 17,
      "length": 228,
      "code": {
        "startLine": 173,
        "length": 228,
        "offset": 82,
        "surroundingCode": "            bot: commands.Bot,\n            suggest_type: Literal[\n                \"Book\",\n                \"Movie\",\n                \"TV Show\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "a8f1f22c4e0009f2bd83028bf38c9793090827b2ee9b71088212315392891ab9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid type hints definitions and usages",
  "severity": "High",
  "comment": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
  "detailsInfo": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/set.py",
      "language": "Python",
      "line": 337,
      "offset": 17,
      "length": 101,
      "code": {
        "startLine": 335,
        "length": 101,
        "offset": 80,
        "surroundingCode": "        self.type_to_questions_list: Dict[\n            Literal[\n                \"Book\", \"Movie\", \"TV Show\", \"Meme\", \"Pickup Line\", \"Puzzle\", \" Daily Question\", \"Motivation\", \"Music\"\n            ], List[\n                Dict[str, Union[bool, str, None]]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeHintsInspection"
  },
  "hash": "08ce88b0f06ae445f414e689354ba46e5e767642294693ff0028572ce6637e6c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Missing parameter r_id in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 103,
      "offset": 30,
      "length": 9,
      "code": {
        "startLine": 101,
        "length": 9,
        "offset": 54,
        "surroundingCode": "        return ListData\n\n    def fetch_redirect(self, r_id: str) -> RedirectPizza:\n        \"\"\"Fetches a redirect.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "7c540045d85522766746c949e9a5261efd023dacebdd4914b71ce152c48ca0f7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Unexpected parameter url_code in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 107,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 105,
        "length": 8,
        "offset": 27,
        "surroundingCode": "\n        Args:\n            url_code (str): The URL code to fetch.\n            domain (str, optional): The domain to use. Defaults to None.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "7d581e9081f0f36734fea24c3f63c6b04ceb0e38ac4c8793aa9a247bf7864bff"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Unexpected parameter domain in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 108,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 106,
        "length": 6,
        "offset": 77,
        "surroundingCode": "        Args:\n            url_code (str): The URL code to fetch.\n            domain (str, optional): The domain to use. Defaults to None.\n\n        Raises:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "d304b43cdf8c4609b3368f98473928da2e76dc5965cf16ffe059c6ec55ebc45b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Missing parameter r_id in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 191,
      "offset": 28,
      "length": 9,
      "code": {
        "startLine": 189,
        "length": 9,
        "offset": 38,
        "surroundingCode": "        )\n\n    def del_redirect(self, r_id: str) -> typing.Union[dict, int]:\n        \"\"\"Deletes a redirect.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "d24c12d4c796efaf055b1b8ee1977d0fe50a47e4128f2f53194ecfc1578bb2b4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Unexpected parameter redirect_url in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 195,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 193,
        "length": 12,
        "offset": 27,
        "surroundingCode": "\n        Args:\n            redirect_url (str): The URL to delete.\n            domain (str, optional): The domain to use. Defaults to None.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "e3504cd22faf998e142dc0c11672e98df2582af3d223366a4d20d87a65a3a589"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Unexpected parameter domain in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 196,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 194,
        "length": 6,
        "offset": 77,
        "surroundingCode": "        Args:\n            redirect_url (str): The URL to delete.\n            domain (str, optional): The domain to use. Defaults to None.\n\n        Raises:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "97c35f31ffdf109259bf585aff0fbd4f4f1940e4f74c4eb2e499ee27fea30e6c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Missing parameter self in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 159,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 157,
        "length": 4,
        "offset": 17,
        "surroundingCode": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "74e36bf6345c76c1a38f025fe3d8ede589ae4c9857f5f37d1fa89911328f3a4b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Missing parameter sandbox in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 159,
      "offset": 34,
      "length": 21,
      "code": {
        "startLine": 157,
        "length": 21,
        "offset": 35,
        "surroundingCode": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "c02864f3b091392a75caf96607b2a6555dd087f3896d5e2c8545db9c9f56d7c7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Missing parameter sandbox in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 277,
      "offset": 59,
      "length": 21,
      "code": {
        "startLine": 275,
        "length": 21,
        "offset": 72,
        "surroundingCode": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "86f802b1d16f35d904b042f123a8e48789dca679dd081417a3f8d457a4baee2b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Using equality operators to compare with None",
  "severity": "Moderate",
  "comment": "Comparison with None performed with equality operators",
  "detailsInfo": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 128,
      "offset": 12,
      "length": 18,
      "code": {
        "startLine": 126,
        "length": 18,
        "offset": 145,
        "surroundingCode": "        print(self.LobbyStartIDs[member.guild.id])\n        lobbyStart = member.guild.get_channel(self.LobbyStartIDs[member.guild.id])\n        if lobbyStart == None:\n            try:\n                lobbyStart = self.bot.get_channel("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyComparisonWithNoneInspection"
  },
  "hash": "a560279693087a6ac7bff2fad39ca93746275bcfdbe60404f628edbb0082f197"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Using equality operators to compare with None",
  "severity": "Moderate",
  "comment": "Comparison with None performed with equality operators",
  "detailsInfo": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 136,
      "offset": 8,
      "length": 16,
      "code": {
        "startLine": 134,
        "length": 16,
        "offset": 66,
        "surroundingCode": "    embed.add_field(name=\"Transcript Link\", value=S3_URL)\n\n    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyComparisonWithNoneInspection"
  },
  "hash": "5cccda372efdc6358e7cc905a4e302b47ed6773dd37a7ca48b0829305e4a6b69"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Using equality operators to compare with None",
  "severity": "Moderate",
  "comment": "Comparison with None performed with equality operators",
  "detailsInfo": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 138,
      "offset": 8,
      "length": 23,
      "code": {
        "startLine": 136,
        "length": 23,
        "offset": 79,
        "surroundingCode": "    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:\n        for UAuthor in responsesauthor:\n            try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyComparisonWithNoneInspection"
  },
  "hash": "2e8b4859df97eb8d4df94b60f022fd37e4ee10194aa6de3bc212918afe5bd45b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Using equality operators to compare with None",
  "severity": "Moderate",
  "comment": "Comparison with None performed with equality operators",
  "detailsInfo": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 154,
      "offset": 8,
      "length": 16,
      "code": {
        "startLine": 152,
        "length": 16,
        "offset": 21,
        "surroundingCode": "        pass\n\n    if response == None:\n        msg = S3_URL\n    return msg, transcript_file, S3_URL"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyComparisonWithNoneInspection"
  },
  "hash": "2617a89bcfc2c03a002d25013b9debe1841bd6bab857cb2fc19a9b86c423ae9e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `on_error` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 130,
      "offset": 15,
      "length": 8,
      "code": {
        "startLine": 128,
        "length": 8,
        "offset": 62,
        "surroundingCode": "            await self.message.edit(view=None)\n\n    async def on_error(self, error: Exception, item: discord.ui.Item, interaction: discord.Interaction) -> None:\n        if interaction.response.is_done():\n            await interaction.followup.send(f'An unknown error occurred, sorry {error}', ephemeral=True)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "12d58ebe975516ea7144e85aec107fceaffe264d097a0875b7fac269fcd52224"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `is_paginating` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 359,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 357,
        "length": 13,
        "offset": 50,
        "surroundingCode": "\nclass FrontPageSource(menus.PageSource):\n    def is_paginating(self) -> bool:\n        # This forces the buttons to appear even in the front page\n        return True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "6f54ec1b78fab32c1da900305ac5e04ef1fd7d9914b6d8dd34c935c306a2c4dc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `get_max_pages` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 363,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 361,
        "length": 13,
        "offset": 29,
        "surroundingCode": "        return True\n\n    def get_max_pages(self) -> Optional[int]:\n        # There's only one actual page in the front page\n        # However we need at least 2 to show all the buttons"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "d7938b4d8d3aef13ab4e0e09798b846d027c8d853cc21432b90f5e7817ffe09f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `interaction_check` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/set.py",
      "language": "Python",
      "line": 33,
      "offset": 15,
      "length": 17,
      "code": {
        "startLine": 31,
        "length": 17,
        "offset": 38,
        "surroundingCode": "        self.bot = bot\n\n    async def interaction_check(self, interaction: discord.Interaction) -> bool:\n        return interaction.user.id == 752984497259151370\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "3cfef395e727c65c398ca7b4523fbae929d52f217975f6dac83ad694f11ab49d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `cog_load` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/set.py",
      "language": "Python",
      "line": 409,
      "offset": 15,
      "length": 8,
      "code": {
        "startLine": 407,
        "length": 8,
        "offset": 48,
        "surroundingCode": "        return Emoji.turtlesmirk\n\n    async def cog_load(self) -> None:\n        for user_id in database.ResponseSpamBlacklist:\n            blacklist.append(user_id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "275bbde5a356d9fcc5da5a63d65f70dbdb2114a15c224d43f685fba2be5ee824"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `before_invoke` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 70,
      "offset": 15,
      "length": 13,
      "code": {
        "startLine": 68,
        "length": 13,
        "offset": 72,
        "surroundingCode": "        return await on_command_error_(self, ctx, error)\n\n    async def before_invoke(self, ctx: commands.Context):\n        return await before_invoke_(ctx)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "4f347b42df29495751ebb5df238d4042e4f6315851fdcbba925bdef3b68ca6c3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `check` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 73,
      "offset": 15,
      "length": 5,
      "code": {
        "startLine": 71,
        "length": 5,
        "offset": 56,
        "surroundingCode": "        return await before_invoke_(ctx)\n\n    async def check(self, ctx: commands.Context):\n        return await main_mode_check_(ctx)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "6b47cc745fdcb665bb6f3cea8692c5caf0005b623165cc6961d443e542fba817"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect call arguments",
  "severity": "High",
  "comment": "Parameter 'name' unfilled",
  "detailsInfo": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 153,
      "offset": 39,
      "length": 1,
      "code": {
        "startLine": 151,
        "length": 1,
        "offset": 68,
        "surroundingCode": "\ndef prompt_config(msg, key):\n    config, config_file = load_config()\n    if key not in config:\n        config[key] = input(msg)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyArgumentListInspection"
  },
  "hash": "9d5ff356ff3367493b7656e00616dd2137e7d8ee29ffdcede4810d7cf5a7ec7d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect call arguments",
  "severity": "High",
  "comment": "Parameter 'name' unfilled",
  "detailsInfo": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 161,
      "offset": 39,
      "length": 1,
      "code": {
        "startLine": 159,
        "length": 1,
        "offset": 69,
        "surroundingCode": "\ndef prompt_config2(msg, key):\n    config, config_file = load_config()\n    config[key] = msg\n    with config_file.open(\"w+\") as f:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyArgumentListInspection"
  },
  "hash": "ff969ae9602565c44385991e9a1547c36cc37b493dedd2aaeb1e02d46d3b5984"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'ctx' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 155,
      "offset": 19,
      "length": 3,
      "code": {
        "startLine": 153,
        "length": 3,
        "offset": 20,
        "surroundingCode": "\n\ndef TimmyBetaHost(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c1faf3649a960e545e30f0f5054bee41f41bc2991b37b1f2776005271a38a3d9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'response' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 247,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 245,
        "length": 8,
        "offset": 23,
        "surroundingCode": "    )\n    try:\n        response = s3_client.upload_file(\n            file_name,\n            bucket,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "d611c573e17deee59ede6509eeffc32b69599c9dbc5631eceaf38c876ba20d2b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1453,
      "offset": 53,
      "length": 25,
      "code": {
        "startLine": 1451,
        "length": 25,
        "offset": 81,
        "surroundingCode": "    )\n    async def confirm(\n            self, interaction: discord.Interaction, button: discord.ui.Button,\n    ):\n        TranscriptLOG = self.bot.get_channel(TECH_ID.ch_ticketLog)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "059009c13a63e5b0adb76f43a98a88c6765bcce5be56e358d5d1c28cfc34921c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1462,
      "offset": 62,
      "length": 25,
      "code": {
        "startLine": 1460,
        "length": 25,
        "offset": 143,
        "surroundingCode": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.message.delete()\n        await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "670ee70d10b7865d8446edc41b2b2a8a33d6f75474f882277b668da6f9ce075b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1483,
      "offset": 60,
      "length": 25,
      "code": {
        "startLine": 1481,
        "length": 25,
        "offset": 85,
        "surroundingCode": "        emoji=\"🔒\",\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        ch = self.bot.get_channel(interaction.channel_id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "4f170509684e71d16251ed0df60a557d1db0d0b4963a4a0ba9e984b2586c0cf7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'msg' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1488,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 1486,
        "length": 3,
        "offset": 76,
        "surroundingCode": "        TempConfirmInstance = TechnicalCommissionConfirm(self.bot)\n\n        msg = await ch.send(\n            \"Are you sure you want to close this ticket?\", view=TempConfirmInstance\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "757faa57de5f2a81b9a1a607e29cc0a1e939b98f7fc2030434ab29fb9f0701be"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1504,
      "offset": 26,
      "length": 32,
      "code": {
        "startLine": 1502,
        "length": 32,
        "offset": 63,
        "surroundingCode": "        emoji=Emoji.gsuitelogo,\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "4899e1a25c7d8996a194498bbdb24d34a37a6cc8da0f6c07549ba9e5234cb4f5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1504,
      "offset": 60,
      "length": 25,
      "code": {
        "startLine": 1502,
        "length": 25,
        "offset": 97,
        "surroundingCode": "        emoji=Emoji.gsuitelogo,\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "5e029b8a176080fca10672818a798ce27ed2cea9a4f046dcc6506f580e2a72f2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1520,
      "offset": 19,
      "length": 32,
      "code": {
        "startLine": 1518,
        "length": 32,
        "offset": 47,
        "surroundingCode": "    )\n    async def confirm(\n            self, interaction: discord.Interaction, button: discord.ui.Button,\n    ):\n        self.value = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "1326603b4b3d3d511f794ff820c0c0118c425506ff9bce7a22fa1d416d7c8c40"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1520,
      "offset": 53,
      "length": 25,
      "code": {
        "startLine": 1518,
        "length": 25,
        "offset": 81,
        "surroundingCode": "    )\n    async def confirm(\n            self, interaction: discord.Interaction, button: discord.ui.Button,\n    ):\n        self.value = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "86f2aacd48fdcde8eca3faac6576aaa4ab8be3aea535f2c009a9a619c0bedf3f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1526,
      "offset": 62,
      "length": 25,
      "code": {
        "startLine": 1524,
        "length": 25,
        "offset": 143,
        "surroundingCode": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.send_message(\"Cancelling\", ephemeral=True)\n        self.value = False"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "22c1dc3ba636363d9e486b9abb818995bda0f5c953570eb9f828196aad790642"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1542,
      "offset": 61,
      "length": 25,
      "code": {
        "startLine": 1540,
        "length": 25,
        "offset": 113,
        "surroundingCode": "        custom_id=\"persistent_view:nitrofake\",\n    )\n    async def claim(self, interaction: discord.Interaction, button: discord.ui.Button):\n        try:\n            await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c63676b5fce3e5da8e9f91547ea9a68bf142771086485d517a2398604f3dc2b9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1568,
      "offset": 60,
      "length": 25,
      "code": {
        "startLine": 1566,
        "length": 25,
        "offset": 85,
        "surroundingCode": "        emoji=\"🔒\",\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        ch = self.bot.get_channel(interaction.channel_id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "621f693fc38a7e9b99eae48b79d6d12b0a6fdb814109b029389c83f2556e9bf5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'msg' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1573,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 1571,
        "length": 3,
        "offset": 59,
        "surroundingCode": "        TempConfirmInstance = TicketTempConfirm()\n\n        msg = await ch.send(\n            \"Are you sure you want to close this ticket?\", view=TempConfirmInstance\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "86ff3a0116c552b703e6cefadf1611c060077d6020fc57792b75dcbb0c90a284"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1590,
      "offset": 19,
      "length": 32,
      "code": {
        "startLine": 1588,
        "length": 32,
        "offset": 47,
        "surroundingCode": "    )\n    async def confirm(\n            self, interaction: discord.Interaction, button: discord.ui.Button,\n    ):\n        self.value = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "13e65ca937b3fac93cf172742b26fe8ed5a3d16c133dffcd980cfd11acfe74c0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1590,
      "offset": 53,
      "length": 25,
      "code": {
        "startLine": 1588,
        "length": 25,
        "offset": 81,
        "surroundingCode": "    )\n    async def confirm(\n            self, interaction: discord.Interaction, button: discord.ui.Button,\n    ):\n        self.value = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "e7ce61954c5c759a2bf877894b8fccf013d32e22084ce5987c353cd970192f4d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1596,
      "offset": 62,
      "length": 25,
      "code": {
        "startLine": 1594,
        "length": 25,
        "offset": 143,
        "surroundingCode": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.send_message(\"Cancelling\", ephemeral=True)\n        self.value = False"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "d81eed57f79ab336abea773dc7395dc256e5a7676c086bc89511ec2183f70bf7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'response' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1649,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 1647,
        "length": 8,
        "offset": 19,
        "surroundingCode": "        }\n\n        response = requests.post(url, headers=headers, data=str(data))\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "4c4a4704ab18a979af13e88e5594a31bfc76e7ac5f66b21b5046acd7020dd206"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1664,
      "offset": 53,
      "length": 25,
      "code": {
        "startLine": 1662,
        "length": 25,
        "offset": 89,
        "surroundingCode": "    )\n    async def feedback_button(\n            self, interaction: discord.Interaction, button: discord.ui.Button,\n    ):\n        modal = FeedbackModel()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "ee18bf3fdf57778a9fef63bbcaebc2c9bd518e3b5bf4f40ef635b0eb4b29b08c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'result' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1700,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 1698,
        "length": 6,
        "offset": 18,
        "surroundingCode": "    try:\n\n        result = subprocess.run(\n            f\"cd && cd {main_or_beta}\",\n            shell=True,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "dbdb04c596030624a9b52f2a02082e2693919ddf88329ed8d70e68b21e9a4030"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'request_id' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/docsapi.py",
      "language": "Python",
      "line": 21,
      "offset": 14,
      "length": 10,
      "code": {
        "startLine": 19,
        "length": 10,
        "offset": 15,
        "surroundingCode": "\n\ndef callback(request_id, response, exception):\n    if exception:\n        print(exception)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f1e4ab1f1cbf0572a077bc4847180a02a5b256c213b0e4ccdb48faa143c4b68a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'result' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/docsapi.py",
      "language": "Python",
      "line": 120,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 118,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    ]\n\n    result = (\n        drive_service.documents()\n        .batchUpdate(documentId=document_copy_id, body={\"requests\": requests})"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "0d3b8d2282ea39cf659f8fdbff2d45a3c17422e61ea5290887f2587730189dea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'exc' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 742,
      "offset": 15,
      "length": 3,
      "code": {
        "startLine": 740,
        "length": 3,
        "offset": 37,
        "surroundingCode": "\n@app.teardown_request\ndef _db_close(exc):\n    \"\"\"\n    This hook ensures that the connection is closed when we've finished"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "1a3c3c20f0efee9b66e3b2ef936923108849487b8a8d61affc1d3034c8d460d7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'object' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 123,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 121,
        "length": 6,
        "offset": 86,
        "surroundingCode": "        if r.status_code == 422:\n            raise InvalidAuth(r.status_code)\n        object = range(len(r.json()))\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "9fcfb700f19601b9845883a6a9a114b5bd555b1667e9fa69d73085320fc30257"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'object' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 175,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 173,
        "length": 6,
        "offset": 82,
        "surroundingCode": "            raise InvalidAuth(r.status_code)\n        print(r.status_code)\n        object = range(len(r.json()[\"data\"]))\n        pprint.pprint(r.json())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "a0ac9289f08aa09564a2033199a27d2e6a320c5c45f65f5c6c0f44da652a5119"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'page_size' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 109,
      "offset": 21,
      "length": 14,
      "code": {
        "startLine": 107,
        "length": 14,
        "offset": 65,
        "surroundingCode": "        \"\"\"List all tags in the database\"\"\"\n\n        def get_end(page_size: int):\n            database.db.connect(reuse_if_open=True)\n            tags: int = database.PunishmentTag.select().count()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "89d64d64b00a4e45c9157286c8b1abbd3aacbcc2e7f87a2cced5bb635cf6ffce"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'embed' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 128,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 126,
        "length": 5,
        "offset": 57,
        "surroundingCode": "\n        embed = discord.Embed(title=\"Tag List\")\n        embed = await common.paginate_embed(\n            self.bot, ctx, embed, populate_embed, get_end(10), page=page\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "9addfc782b5b0b65166d3ddc8de684bfba4e2e2d5470f58880d246bbc830f249"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'value' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 142,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 140,
        "length": 5,
        "offset": 51,
        "surroundingCode": "            user: discord.User = user\n\n            value = None\n            typeval = None\n            banreason = None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f9b63b4ebd3e75524b3e9d74336d40f9b1dbcde4037bd4902aa17dbe8c9d7b95"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'typeval' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 143,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 141,
        "length": 7,
        "offset": 38,
        "surroundingCode": "\n            value = None\n            typeval = None\n            banreason = None\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "81dc3a2706fcc4824ed210baed7cd6255681db63f7b7b5a661f599f0ee905a43"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'user' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 40,
      "offset": 42,
      "length": 4,
      "code": {
        "startLine": 38,
        "length": 4,
        "offset": 71,
        "surroundingCode": "\n    @commands.Cog.listener()\n    async def on_member_ban(self, guild, user):\n        \"\"\"\n        Pycord doesn't give us the information we need so we need to dig deeper and query the audit logs"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "55d471749eb4a1a174d8ff14ef73595b7673607080224083974ddb2692032a40"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'item' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 130,
      "offset": 48,
      "length": 21,
      "code": {
        "startLine": 128,
        "length": 21,
        "offset": 95,
        "surroundingCode": "            await self.message.edit(view=None)\n\n    async def on_error(self, error: Exception, item: discord.ui.Item, interaction: discord.Interaction) -> None:\n        if interaction.response.is_done():\n            await interaction.followup.send(f'An unknown error occurred, sorry {error}', ephemeral=True)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "20c21330719c9656eb1c650388da45e24f0ae382e295c1fdf0c03f3222e66300"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 150,
      "offset": 72,
      "length": 25,
      "code": {
        "startLine": 148,
        "length": 25,
        "offset": 138,
        "surroundingCode": "\n    @discord.ui.button(label='≪', style=discord.ButtonStyle.grey)\n    async def go_to_first_page(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        \"\"\"go to the first page\"\"\"\n        await self.show_page(interaction, 0)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "2aef98de0a67b5958e4dddb508fac3118fd4e6e2c953ac60b75b1e3d918c291b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 155,
      "offset": 75,
      "length": 25,
      "code": {
        "startLine": 153,
        "length": 25,
        "offset": 147,
        "surroundingCode": "\n    @discord.ui.button(label='Back', style=discord.ButtonStyle.blurple)\n    async def go_to_previous_page(self, interaction: discord.Interaction, button: discord.ui.Button):\n        \"\"\"go to the previous page\"\"\"\n        await self.show_checked_page(interaction, self.current_page - 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "78f9333e04e76e98b7efe6230d703da031caf8368506da7ce1c622b936a0b6c5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 164,
      "offset": 71,
      "length": 25,
      "code": {
        "startLine": 162,
        "length": 25,
        "offset": 143,
        "surroundingCode": "\n    @discord.ui.button(label='Next', style=discord.ButtonStyle.blurple)\n    async def go_to_next_page(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        \"\"\"go to the next page\"\"\"\n        await self.show_checked_page(interaction, self.current_page + 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "b39f9a5b34ba12267ae3b811587ef4b0bdb2d084f7bd52c9e94147d7734a4f6b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 169,
      "offset": 71,
      "length": 25,
      "code": {
        "startLine": 167,
        "length": 25,
        "offset": 137,
        "surroundingCode": "\n    @discord.ui.button(label='≫', style=discord.ButtonStyle.grey)\n    async def go_to_last_page(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        \"\"\"go to the last page\"\"\"\n        # The call here is safe because it's guarded by skip_if"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "5ba1568dc819d8694cdcc1b1877f174ad81eb985fc100305696033515be257eb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 175,
      "offset": 69,
      "length": 25,
      "code": {
        "startLine": 173,
        "length": 25,
        "offset": 149,
        "surroundingCode": "\n    @discord.ui.button(label='Skip to page...', style=discord.ButtonStyle.grey)\n    async def numbered_page(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        \"\"\"lets you type a page number to go to\"\"\"\n        if self.input_lock.locked():"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "606325eb16b3f813e74093fae5cbe9c339cf4e32ac942abc910639fbd9433cfb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 203,
      "offset": 66,
      "length": 25,
      "code": {
        "startLine": 201,
        "length": 25,
        "offset": 134,
        "surroundingCode": "\n    @discord.ui.button(label='Quit', style=discord.ButtonStyle.red)\n    async def stop_pages(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        \"\"\"stops the pagination session.\"\"\"\n        await interaction.response.defer()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "9aa97d195b2cd5613a506381c5073730225727c1ae0734ed197dd0733b3edc05"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'menu' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 373,
      "offset": 27,
      "length": 14,
      "code": {
        "startLine": 371,
        "length": 14,
        "offset": 47,
        "surroundingCode": "        return self\n\n    def format_page(self, menu: HelpMenu, page):\n        embed = discord.Embed(title='Bot Help', colour=discord.Colour.blurple())\n        embed.description = inspect.cleandoc("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "3275bd488d53f435c95313de1fc4ab0c7181fbf93d716304cff7bba0b997a649"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'page' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 373,
      "offset": 43,
      "length": 4,
      "code": {
        "startLine": 371,
        "length": 4,
        "offset": 63,
        "surroundingCode": "        return self\n\n    def format_page(self, menu: HelpMenu, page):\n        embed = discord.Embed(title='Bot Help', colour=discord.Colour.blurple())\n        embed.description = inspect.cleandoc("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "67949112c6907a016e1078a62955f0630544e5d933de28d0c979fff4eff694b4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'CheckDB' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 89,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 87,
        "length": 7,
        "offset": 62,
        "surroundingCode": "    @filters.command()\n    async def list(self, ctx):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f59d2b6a056b2dfeec5036aa05c8d95bf0bf1eb419f0c2b3cdefb04ab03cce48"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'result' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 521,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 519,
        "length": 6,
        "offset": 26,
        "surroundingCode": "        try:\n\n            result = subprocess.run(\n                f\"cd && cd {main_or_beta}\",\n                shell=True,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "032b6deb76544e5e7275ff3b77132b59ea1e777de1b0a2169c13bc32c16b5e5b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'i' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 21,
      "offset": 42,
      "length": 1,
      "code": {
        "startLine": 19,
        "length": 1,
        "offset": 74,
        "surroundingCode": "\n    rnd = random.SystemRandom()\n    return \"\".join(rnd.choice(chars) for i in range(length))\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "151f43711a9d970f6e11777977f224f588cf58cb6dc697cb260cf700d0672bd4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 92,
      "offset": 62,
      "length": 25,
      "code": {
        "startLine": 90,
        "length": 25,
        "offset": 87,
        "surroundingCode": "        emoji=\"📝\",\n    )\n    async def verify(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        modal = BotRequestModal(self.bot)\n        return await interaction.response.send_modal(modal)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "0f4eb2f75df68b9956267f763bb61895b088741dd668daf2148eabba62250fc0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 171,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 169,
        "length": 7,
        "offset": 40,
        "surroundingCode": "\n        guild = TECH_ID.g_tech\n        channel: discord.TextChannel = self.bot.get_channel(TECH_ID.ch_botreq)\n\n        thread = ...  # type: discord.Thread"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "e9bc1a6d5ab5973f1d17b6e1911459471672045176dad7c9f2d4d1cd89e8ed9a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'thread' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 173,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 171,
        "length": 6,
        "offset": 88,
        "surroundingCode": "        channel: discord.TextChannel = self.bot.get_channel(TECH_ID.ch_botreq)\n\n        thread = ...  # type: discord.Thread\n        for thread in guild.threads:\n            query = ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "fff52efb668acb4bee67cb6a66333d144801d2179e1aaf58dc8f64cbb1f6c7f6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 211,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 209,
        "length": 7,
        "offset": 61,
        "surroundingCode": "                    .get()\n                )\n                channel: discord.VoiceChannel = self.bot.get_channel(\n                    int(query.ChannelID)\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "498678fefdd20689b42eb715b3c9c73d97a3cf2219c0e3f59a96891c24855fff"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 271,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 269,
        "length": 7,
        "offset": 61,
        "surroundingCode": "                    .get()\n                )\n                channel: discord.VoiceChannel = self.bot.get_channel(\n                    q.ChannelID\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "eba2aac277aef8ba2e06ad32fdf1acdb5ced05edff5ae156ce02cf78b3c620c3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'team' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 537,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 535,
        "length": 4,
        "offset": 86,
        "surroundingCode": "    async def end(self, ctx):\n        database.db.connect(reuse_if_open=True)\n        team = discord.utils.get(ctx.guild.roles, name=self.AT)\n        member = ctx.guild.get_member(ctx.author.id)\n        timestamp2 = datetime.now(EST)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "5cf64e5a3ed53fff95d3d889911a5d18149f2cce5cf45115ef5f3c6955340da4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'timestamp2' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 539,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 537,
        "length": 10,
        "offset": 125,
        "surroundingCode": "        team = discord.utils.get(ctx.guild.roles, name=self.AT)\n        member = ctx.guild.get_member(ctx.author.id)\n        timestamp2 = datetime.now(EST)\n\n        voice_state = member.voice"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "7648b5733cbf3f0cfe365799fa3d520a81a863e0d10c2a9e1ce4b411e895bccd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'BOT' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 868,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 866,
        "length": 3,
        "offset": 62,
        "surroundingCode": "        member = ctx.guild.get_member(ctx.author.id)\n\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "bad35fa1660800e7a65298d87ae96b41c4ae08591cb8ab2461c9dca5f5abe5bf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'TMOD' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 870,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 868,
        "length": 4,
        "offset": 112,
        "surroundingCode": "        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "772e98bcdfa8158654b5647a07785ae38d67cd579ac488130a007096c6a4b4a1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'MOD' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 871,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 869,
        "length": 3,
        "offset": 125,
        "surroundingCode": "        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "2a1248aca48ff69aed3bd441ee5d0ceae27fdae2fa9073c161f0770d2db91b27"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'SMOD' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 872,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 870,
        "length": 4,
        "offset": 138,
        "surroundingCode": "        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "8f46b098a95b43fac2b9112d0f9119d503029db1e691eaef9d1067514a4f9bab"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'CO' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 873,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 871,
        "length": 2,
        "offset": 138,
        "surroundingCode": "        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "0950c297f360364bb97064c3af6eb4800cc0841039a544bf6762b06a69fef8c6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'VP' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 874,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 872,
        "length": 2,
        "offset": 136,
        "surroundingCode": "        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "e6ac16879b42e47e81bf99150bce1abfd6815e07803d11bfcf73bc99b0f84441"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'ST' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 875,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 873,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "70f2a47311fd0580503364aabc069e76fb462fb110ad226776a551b5ce6bf050"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'query' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1114,
      "offset": 21,
      "length": 5,
      "code": {
        "startLine": 1112,
        "length": 5,
        "offset": 53,
        "surroundingCode": "                    LOCK.save()\n\n                    query = (\n                        database.VCChannelInfo.select()\n                        .where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "161a97207f1e43525771471be2044ee3a45519c4559118befb0134fa1f97782c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'embed' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1460,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 1458,
        "length": 5,
        "offset": 86,
        "surroundingCode": "                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed(\n                    title=f\"{Emoji.warn} Unknown Channel\",\n                    description=\"You are not the owner of this voice channel nor is this a valid channel. \""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "455edd10cf173260715d8f28d6192ee41274a7fb9c3b88d1058129bd89bdd5ab"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local function 'check' is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 413,
      "offset": 21,
      "length": 5,
      "code": {
        "startLine": 411,
        "length": 5,
        "offset": 39,
        "surroundingCode": "            else:\n\n                def check(m):\n                    return (\n                        m.content is not None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "dfd34bd453345a03b7ff13e59bd66611221798f244ecb0b08917440df5838c90"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'lastReset' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 33,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 31,
        "length": 9,
        "offset": 127,
        "surroundingCode": "\n        if weekdayNow == 1 and (now - self.lastReset >= datetime.timedelta(days=7)) and timeNow >= self.midnight:\n            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(StudyVCLeaderboard.id == entry)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "540ee43691fd15b781dc4b1b00f8af4886e0b7a0bffdd8541eb7c4e83d24dd0c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'numberStr' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 96,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 94,
        "length": 9,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    numberStr = ...  # type: str\n\n    if number < 1000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "71c6f22cac44dcae84477f861239196bba4fcd869e1ad6e9b3a33255f1f25e02"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'now' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 85,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 83,
        "length": 3,
        "offset": 27,
        "surroundingCode": "\n    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "0567ab6580c0b12c9aac84e25f26cdb724d697c0329485b7e279310f48cb2d8e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'goal' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 168,
      "offset": 17,
      "length": 4,
      "code": {
        "startLine": 166,
        "length": 4,
        "offset": 148,
        "surroundingCode": "            query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "2980d55255c4adf4aacaa1e2fc705baab2d8edab1066ddd908d25c8466bea577"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'renewal' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 168,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 166,
        "length": 7,
        "offset": 154,
        "surroundingCode": "            query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "9a2e7fd9b9c097b5b3089fa94f9ea532a2a7794bb91b3b7a670fd2b5b08f097e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'val' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 176,
      "offset": 17,
      "length": 3,
      "code": {
        "startLine": 174,
        "length": 3,
        "offset": 105,
        "surroundingCode": "\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n\n                if datetime.now(EST) >= dateObj:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "3c0b9a6e4e23ed819f2af0c0a6380acdbb476de0dbb8112e14b94ea288f239c8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'i' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 61,
      "offset": 17,
      "length": 1,
      "code": {
        "startLine": 59,
        "length": 1,
        "offset": 64,
        "surroundingCode": "            else:\n                list_ten = []\n                i = 0\n                for entry in query:\n                    if not isinstance(entry.Date, datetime):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "df2c08b352eabe380a96e2b49afbef11ecdb8b446d12678ea21a845c311450d9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'i' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 151,
      "offset": 13,
      "length": 1,
      "code": {
        "startLine": 149,
        "length": 1,
        "offset": 52,
        "surroundingCode": "        else:\n            list_ten = []\n            i = 0\n            for entry in query:\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "bd1fe8a9be5d776880022a02bb54f63c930b7e57ff26fb144fea029934e17141"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 555,
      "offset": 30,
      "length": 32,
      "code": {
        "startLine": 553,
        "length": 32,
        "offset": 40,
        "surroundingCode": "        )\n\n    async def callback(self, interaction: discord.Interaction):\n        self.view.stop()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "8e37083857f407a188fc78ba360496c27694a2d12c01f08e55f6aa934ea7a209"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'nw' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 115,
      "offset": 17,
      "length": 2,
      "code": {
        "startLine": 113,
        "length": 2,
        "offset": 54,
        "surroundingCode": "                nextweek = old + new\n\n                nw = nextweek.strftime(\"%m/%d/%Y\")\n\n                query.Date = nextweek"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "86b7c27c029b98cdb0a8b752d68b8785a9674c621851b127771ab940c4c912af"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'self' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 25,
      "offset": 25,
      "length": 4,
      "code": {
        "startLine": 23,
        "length": 4,
        "offset": 26,
        "surroundingCode": "\n\nasync def roleNameCheck(self, name: str, guild: discord.Guild, user: discord.Member):\n    check = getEqualRank(name)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "239ec687121a450eab6b22fee4883a9317c0efe032bef58d03021bb257f9b7e1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'interaction' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 45,
      "offset": 28,
      "length": 32,
      "code": {
        "startLine": 43,
        "length": 32,
        "offset": 52,
        "surroundingCode": "        emoji=\"✅\",\n    )\n    async def verify(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "30b139d7e972a43cf0ceb558395b40055571ef5d0dbe1e32b705937452c65028"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'button' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 45,
      "offset": 62,
      "length": 25,
      "code": {
        "startLine": 43,
        "length": 25,
        "offset": 86,
        "surroundingCode": "        emoji=\"✅\",\n    )\n    async def verify(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f1c075f12a26461d1b62ba4d8490ec7357617f93877397949b93f666feb30560"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'InteractionResponse' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 65,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 63,
        "length": 19,
        "offset": 126,
        "surroundingCode": "    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c695ee93b5380a49a10383863026f508ec8de4110da09c253cfec2e94ecf79fc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'e' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 130,
      "offset": 37,
      "length": 1,
      "code": {
        "startLine": 128,
        "length": 1,
        "offset": 59,
        "surroundingCode": "                    )\n\n                except Exception as e:\n                    print(\"member not found\")\n                    continue"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "a963643c64931f04eaa6a92d4b34f86d025ffca98be10fc2e647833d204943e3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'directTranscript' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 98,
      "offset": 5,
      "length": 30,
      "code": {
        "startLine": 96,
        "length": 30,
        "offset": 90,
        "surroundingCode": "    user: discord.User = None,\n    responsesauthor: typing.List[discord.User] = None,\n    directTranscript: bool = False,\n):\n    transcript = await chat_exporter.export(channel, None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "8727dc65c312f32974d4d2935282be906d87bd19d4531a39bcfaaa320f56c8ba"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'self' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 159,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 157,
        "length": 4,
        "offset": 17,
        "surroundingCode": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "fd9dd46279f23d64e8a8daa09e562d1e57c77eeba78337389ea60a5bfab5a388"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'sandbox' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 277,
      "offset": 59,
      "length": 21,
      "code": {
        "startLine": 275,
        "length": 21,
        "offset": 72,
        "surroundingCode": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "b0282f71e05e812547385467af16e0a0167a1ffde5c2ddaa227b15575d4ebcb3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 340,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 338,
        "length": 7,
        "offset": 40,
        "surroundingCode": "            )\n        else:\n            channel = self.bot.get_channel(interaction.channel_id)\n            guild = interaction.message.guild\n            author = interaction.user"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "66e7c63f1d6b339d5cde69de9b90550fe4685cf8595357013365764e8b0dd063"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'e' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 368,
      "offset": 33,
      "length": 1,
      "code": {
        "startLine": 366,
        "length": 1,
        "offset": 80,
        "surroundingCode": "                    view=MSV,\n                )\n            except Exception as e:\n                await interaction.channel.send(\n                    f\"{interaction.user.mention} I can't send you messages, please check you're privacy settings!\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "5bb6785dea298e35d3b543d65ce97319a06210c25a0990b404151612abbcbac1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'e' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 402,
      "offset": 37,
      "length": 1,
      "code": {
        "startLine": 400,
        "length": 1,
        "offset": 129,
        "surroundingCode": "                try:\n                    await DMChannel.send(embed=embed, view=MiscOptList)\n                except Exception as e:\n                    await interaction.followup.send(embed=embed, view=MiscOptList)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "e12b4a85f8dfdab160a2dea22f5397e35d30ff9a6dff80c1d7039ec5e533c053"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'guild' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 779,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 777,
        "length": 5,
        "offset": 93,
        "surroundingCode": "        elif val == \"ch_lock\":\n            channel = interaction.message.channel\n            guild = interaction.message.guild\n            author = interaction.user\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "8328d8f0863026f85911f4f4bed5c2d96761891c9a00f799ff736fa72b1854f4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'query' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 782,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 780,
        "length": 5,
        "offset": 51,
        "surroundingCode": "            author = interaction.user\n\n            query = (\n                database.TicketInfo.select()\n                .where(database.TicketInfo.ChannelID == interaction.channel_id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "79cc4e32751c32d73f283a64303c5e4cf83242c8f85c924d9af8242a7ba4a9c5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 890,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 888,
        "length": 7,
        "offset": 80,
        "surroundingCode": "\n        elif InteractionResponse[\"custom_id\"] == \"ch_lock_CANCEL\":\n            channel = interaction.message.channel\n            author = interaction.user\n            await interaction.channel.send("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "1e088a8f5dfb7b42200f740f2e3dc43410f780c936add9898fb3d9cf0733933e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 898,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 896,
        "length": 7,
        "offset": 75,
        "surroundingCode": "\n        elif InteractionResponse[\"custom_id\"] == \"ch_lock_C\":\n            channel = self.bot.get_channel(interaction.channel_id)\n            author = interaction.user\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "93154fd76b3af6cd1d2c12e5cc286e9ccc231e8bdad9df331be817d07a584b51"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'msg' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 953,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 951,
        "length": 3,
        "offset": 68,
        "surroundingCode": "                )\n            author = interaction.user\n            msg = await interaction.channel.send(\n                f\"Please wait, creating your transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "d18b43fdc5fdb64180430c2bdb4e4ef3fa3013af0cc5746e5290beb016181357"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'query' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1092,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 1090,
        "length": 5,
        "offset": 49,
        "surroundingCode": "        )\n        if query.exists():\n            query = query.get()\n            embed = discord.Embed(\n                title=\"Confirm?\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "cc9b97843a5d9ee934acdc6e5d9786f7ffd52d68a3a5dbb6412bd50444c4f6f1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'e' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1129,
      "offset": 33,
      "length": 1,
      "code": {
        "startLine": 1127,
        "length": 1,
        "offset": 86,
        "surroundingCode": "                    entry.ChannelID\n                )\n            except Exception as e:\n                continue\n            fetchMessage = await channel.history(limit=1).flatten()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "e272bcca5a4f0322ebb40b4254927e8c5c9b55e1ed2053abf57e959f2bfcc19e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'LogCH' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1134,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 1132,
        "length": 5,
        "offset": 139,
        "surroundingCode": "            TicketOwner = self.bot.get_user(entry.authorID)\n            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "e249ff420b8632b5fd046e6007bee1fad7fd8c0f652a22915c554edbbcf26abd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'authorList' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1135,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 1133,
        "length": 10,
        "offset": 147,
        "surroundingCode": "            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:\n                continue"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "fb8f8f03bbbe383270afb96e44edc8a2e3506acdffb8066e133cca3d00e8205d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'val' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 45,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 43,
        "length": 3,
        "offset": 26,
        "surroundingCode": "\n        try:\n            val = InteractionResponse[\"custom_id\"]\n        except KeyError:\n            return"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "011ceafe698db24801aeede2f12e21b66d4e79a6c1db1cc61ce5f07bb7f1176e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'channel' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 58,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 56,
        "length": 7,
        "offset": 31,
        "surroundingCode": "                )\n\n            channel = self.bot.get_channel(interaction.channel_id)\n            guild = interaction.message.guild\n            author = interaction.user"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "49dc3876f776220d5fe9438091b8f783136f1b8c011e90c7cc64d0455d92a43f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'e' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 110,
      "offset": 41,
      "length": 1,
      "code": {
        "startLine": 108,
        "length": 1,
        "offset": 133,
        "surroundingCode": "                    try:\n                        self.flow.fetch_token(code=answer1.content)\n                    except Exception as e:\n                        return await dm_channel.send(\"Invalid code, try again later...\")\n                    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "ad83e3cabddfddd78211e41cbce2dc60021fbefe7c8ec99e492b00a1249d0297"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'reaction' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 95,
      "offset": 24,
      "length": 8,
      "code": {
        "startLine": 93,
        "length": 8,
        "offset": 50,
        "surroundingCode": "    emotes = [\"◀️\", \"▶️\"]\n\n    def check_reaction(reaction, user):\n        return user == ctx.author and str(reaction.emoji) in emotes\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "d45c6d974770160e37c85a7f4f1126a78a0abc06e62fde19ff6ec1b843b27dda"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'user' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 95,
      "offset": 34,
      "length": 4,
      "code": {
        "startLine": 93,
        "length": 4,
        "offset": 60,
        "surroundingCode": "    emotes = [\"◀️\", \"▶️\"]\n\n    def check_reaction(reaction, user):\n        return user == ctx.author and str(reaction.emoji) in emotes\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "952a46549f3b1030e923735c5940287f4444a1325b49c64533efbbae5c69e4f4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'embed' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 114,
      "offset": 34,
      "length": 5,
      "code": {
        "startLine": 112,
        "length": 5,
        "offset": 74,
        "surroundingCode": "            return math.ceil(tags / 10)\n\n        async def populate_embed(embed: discord.Embed, page: int):\n            \"\"\"Used to populate the embed in listtag command\"\"\"\n            tag_list = \"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "498c14e9ff6a0a13d9dac0abcd76b8032a215321be8aa643a515f9d80ed29599"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'page' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 114,
      "offset": 56,
      "length": 4,
      "code": {
        "startLine": 112,
        "length": 4,
        "offset": 96,
        "surroundingCode": "            return math.ceil(tags / 10)\n\n        async def populate_embed(embed: discord.Embed, page: int):\n            \"\"\"Used to populate the embed in listtag command\"\"\"\n            tag_list = \"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "ca7f28f9ff8cde32e4c082775029f23ebe0b28b5edbae2188b14fb12b3001dfc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'reaction' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 271,
      "offset": 20,
      "length": 8,
      "code": {
        "startLine": 269,
        "length": 8,
        "offset": 66,
        "surroundingCode": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                    str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "0a36e08522e602dd5757b75f2ec1dda55335a24716861a184cc710cf6cee11ad"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'user' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 271,
      "offset": 30,
      "length": 4,
      "code": {
        "startLine": 269,
        "length": 4,
        "offset": 76,
        "surroundingCode": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                    str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "bfed3ede4ffd88dc12ffbd07e32973bd4282bd3b6c2c87ee773a871f40b15319"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'reaction' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 584,
      "offset": 20,
      "length": 8,
      "code": {
        "startLine": 582,
        "length": 8,
        "offset": 66,
        "surroundingCode": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                    str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "bfc9b3f1555102e49c514ad9d50425f055da0a1e8cbd4ca5a245fe044ef975a1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'user' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 584,
      "offset": 30,
      "length": 4,
      "code": {
        "startLine": 582,
        "length": 4,
        "offset": 76,
        "surroundingCode": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                    str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "0b163bbf619aee3cfed3e0da6ba1e921c0885e9c96b82145c76b4157de4ba524"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'e' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 866,
      "offset": 30,
      "length": 1,
      "code": {
        "startLine": 864,
        "length": 1,
        "offset": 102,
        "surroundingCode": "            vc.play(\n                discord.FFmpegPCMAudio(\"text.mp3\"),\n                after=lambda e: print(f\"Finished playing: {e}\"),\n            )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "e6e74ec1bc834c31fbe30c4cd3b2dc57ee33ecb5323ee522cadb1e66f1391246"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 46,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 44,
        "length": 15,
        "offset": 8,
        "surroundingCode": "\n\nclass ConfigcatClient:\n    SET_ID_CC = configcatclient.create_client(os.getenv(\"SET_ID_CC\"))\n    MAIN_ID_CC = configcatclient.create_client(os.getenv(\"MAINID_CC\"))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "121dfb5bf3554b0fa94606ba3dc4079a44a0276261ddbb300f1c4b583d8fdaf9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 261,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 259,
        "length": 7,
        "offset": 8,
        "surroundingCode": "\n\nclass MAIN_ID:\n    \"\"\"\n    IDs of the SS Main server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "23ac78cc391c288a2061d0cc70f2888c0e57a6f931e08313df62e6c04f12b5fc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 418,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 416,
        "length": 8,
        "offset": 8,
        "surroundingCode": "\n\nclass STAFF_ID:\n    \"\"\"\n    IDs of the SS Staff Community server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "fa59b191582518f9690b443e6b2f14fb4cf9e27563213c3e1fe1b1e7822af69f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 523,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 521,
        "length": 10,
        "offset": 8,
        "surroundingCode": "\n\nclass DIGITAL_ID:\n    \"\"\"\n    IDs of the SS Staff Community server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "bdec721bae8257419974d7f38a1e6038112eff3dc593b61e41bf1d9b82dd6a26"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 583,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 581,
        "length": 7,
        "offset": 8,
        "surroundingCode": "\n\nclass TECH_ID:\n    \"\"\"\n    IDs of the 'The Department of Information & Technology' server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "100e849279b0f01674bc0b03fc4a037a586307a367d68389b9fa08d0a41197ee"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 646,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 644,
        "length": 13,
        "offset": 8,
        "surroundingCode": "\n\nclass SandboxConfig:\n    \"\"\"\n    IDs for the Sandbox Configuration."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "8639a74c359803e59ec74954508490c514ba257d5f35f3f615278044de07206e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 715,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 713,
        "length": 5,
        "offset": 8,
        "surroundingCode": "\n\nclass CH_ID:\n    \"\"\"\n    IDs of the Chat Helper server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "5bd0162a8a658bb2656ffad597c28bb3dc605a689514b7f6b7d28d7452673ae9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 735,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 733,
        "length": 6,
        "offset": 8,
        "surroundingCode": "\n\nclass MKT_ID:\n    \"\"\"\n    IDs of the SS Marketing Department server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "a77a52be33c575890efce608fcaa535ad8d7530c168338126945b174e25a537a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 813,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 811,
        "length": 6,
        "offset": 8,
        "surroundingCode": "\n\nclass TUT_ID:\n    \"\"\"\n    IDs of the SS Tutoring Division server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "74d155c868fc955644974a44c53fd2f3b89faf8d2f86cd15abf209c3c39c239d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 867,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 865,
        "length": 5,
        "offset": 8,
        "surroundingCode": "\n\nclass HR_ID:\n    \"\"\"\n    IDs of the SS HR Department server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "32073c4e6ac834fe34be47faabac80d44ca3ebf97fe414df0939e7e0027127dc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 894,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 892,
        "length": 9,
        "offset": 8,
        "surroundingCode": "\n\nclass LEADER_ID:\n    \"\"\"\n    IDs of the Leadership Lounge server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "9e95ef7c6e6beb325ecd609a6d68d9b2458af7fbf7fa0a0b15ef131def39c13d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 938,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 936,
        "length": 6,
        "offset": 8,
        "surroundingCode": "\n\nclass SET_ID:\n    \"\"\"\n    IDs of the SSD SET SERVER"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "869b5c10467deaf410be494bec2d85bbdb12720f35436fce687fece62ed12582"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 964,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 962,
        "length": 10,
        "offset": 8,
        "surroundingCode": "\n\nclass CheckDB_CC:\n    \"\"\"\n    Checks and Safeguards for the Bot."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "3eec6e9dde57850f4008ece40e83b2ee5afbc102d818fd9c8f73b8e80551f57f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1034,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 1032,
        "length": 5,
        "offset": 8,
        "surroundingCode": "\n\nclass Emoji:\n    \"\"\"\n    Emojis to use for the bot."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "2e8e787c423d6333834b82d901f07c19bcb8e29f8cb95965ce4c6193716e21ff"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1085,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 1083,
        "length": 6,
        "offset": 8,
        "surroundingCode": "\n\nclass Colors:\n    \"\"\"\n    Colors for the bot. Can be custom hex colors or built-in colors."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "4bb6351590e7c729be4e1a23aeabe8c02b54e4d4e3da0bbf80739f74b9b250b4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1105,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 1103,
        "length": 6,
        "offset": 8,
        "surroundingCode": "\n\nclass Others:\n    \"\"\"\n    Other things to use for the bot. (Images, characters, etc.)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "96bda04154628392903d5e02975fe516c9e4e0c3f08b0d840034fdec079f9e7d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1199,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 1197,
        "length": 7,
        "offset": 8,
        "surroundingCode": "\n\nclass bcolors:\n    HEADER = \"\\033[95m\"\n    OKBLUE = \"\\033[94m\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "d3914b16f65d85705d7170022d2a7d36b7d6eebd4d74bb23157c98794805cc80"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1211,
      "offset": 7,
      "length": 16,
      "code": {
        "startLine": 1209,
        "length": 16,
        "offset": 8,
        "surroundingCode": "\n\nclass EmbeddedActivity:\n    awkword = 879863881349087252\n    betrayal = 773336526917861400"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "04e0c3feee1fcb21432a91a85268951a04cae742b63750234d2e7b41029b13b2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 352,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 350,
        "length": 2,
        "offset": 8,
        "surroundingCode": "\n\nclass Me:\n    publicCH = [\n        MAIN_ID.cat_casual,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "38b6670f93cbf1d9163e6b09acffff1f1109d5373b2d3f32ade01952bd1722d7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 7,
      "offset": 7,
      "length": 16,
      "code": {
        "startLine": 5,
        "length": 16,
        "offset": 8,
        "surroundingCode": "\n\nclass SimulatorProfile:\n    @staticmethod\n    async def create_TicketSys(ctx: commands.Context):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "2d8652d7708877600dfc38cfb42aafbbe536b87c9c03293ee48c281becb12b24"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Non-optimal list declaration",
  "severity": "Moderate",
  "comment": "This list creation could be rewritten as a list literal",
  "detailsInfo": "Reports cases when a list declaration\ncan be rewritten with a list literal.\n\nThis ensures better performance of your application.\n\n**Example:**\n\n```\nl = [1]\nl.append(2)\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nl = [1, 2]\n```",
  "sources": [
    {
      "type": "file",
      "path": "cog_tests.py",
      "language": "Python",
      "line": 11,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 9,
        "length": 15,
        "offset": 27,
        "surroundingCode": "\ndef get_extensions():\n    extensions = []\n    extensions.append(\"jishaku\")\n    if sys.platform == \"win32\" or sys.platform == \"cygwin\":"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyListCreationInspection"
  },
  "hash": "6148fc3f9c70739e2ca8d0c36a7fcf0daf957c67f3ec6ae1eaf88100b7d8310e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 20,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 18,
        "length": 13,
        "offset": 6,
        "surroundingCode": "\n\ndef predicate_LV1(ctx) -> bool:\n    adminIDs = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "62f841ce9888cc03f5739196678f58e7dc92b3b6cbc0c76ffba235e078a991e1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 21,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 19,
        "length": 8,
        "offset": 37,
        "surroundingCode": "\ndef predicate_LV1(ctx) -> bool:\n    adminIDs = []\n\n    query = database.Administrators.select().where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d1b700f8d4655fa08e6119576ebc9a620e6571afdcad2dc5dd171af8cf5df2f9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 35,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 33,
        "length": 13,
        "offset": 6,
        "surroundingCode": "\n\ndef predicate_LV2(ctx) -> bool:\n    adminIDs = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f4b34ebae3dac985003decce326a26763f92394e77478f72eef383580b0aa5ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 36,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 34,
        "length": 8,
        "offset": 37,
        "surroundingCode": "\ndef predicate_LV2(ctx) -> bool:\n    adminIDs = []\n\n    query = database.Administrators.select().where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7fc918fb156859136b4faca8222a8300abff0a7910df4ef8f997214e943e8cc1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 50,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 48,
        "length": 13,
        "offset": 6,
        "surroundingCode": "\n\ndef predicate_LV3(ctx):\n    adminIDs = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5b553236608c0a31c2fde61baabf9c7ea3af47b22a6a0c7696a12e4444527a49"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 51,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 49,
        "length": 8,
        "offset": 29,
        "surroundingCode": "\ndef predicate_LV3(ctx):\n    adminIDs = []\n\n    query = database.Administrators.select().where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c8a0cba5c088816dfb213f4fbfc18c51297432d0fd917be9f91f9e7aefe6981b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 65,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 63,
        "length": 13,
        "offset": 6,
        "surroundingCode": "\n\ndef predicate_LV4(ctx):\n    adminIDs = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f406747314179bde9f72a1f4603b761b73b5eb076a01f1a2460ed3b9fc1a5565"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 66,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 64,
        "length": 8,
        "offset": 29,
        "surroundingCode": "\ndef predicate_LV4(ctx):\n    adminIDs = []\n\n    query = database.Administrators.select().where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "52ee8116e3f87c31d9671c73826a33fefab5534fe8c8c294694788e982b9bb81"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 140,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 138,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef mktCommissionAdd(ctx):\n    rolesID = [\n        MKT_ID.r_designManager,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "80075d7f28ef0ca67d031583e8cad0533e0d7e84be8379bbd3a3fdce47dcc5fe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 141,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 139,
        "length": 7,
        "offset": 32,
        "surroundingCode": "\ndef mktCommissionAdd(ctx):\n    rolesID = [\n        MKT_ID.r_designManager,\n        MKT_ID.r_designTeam,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "688ff36282c9d306d35725e715a772261bc82bbe23d1a29660830caf83b50840"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 155,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 153,
        "length": 13,
        "offset": 6,
        "surroundingCode": "\n\ndef TimmyBetaHost(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "77f01496ae5282c3c1c054cbdcd7dfa940fa9bd3f126c1f6b965104318861ca7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 156,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 154,
        "length": 7,
        "offset": 29,
        "surroundingCode": "\ndef TimmyBetaHost(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b8a6d1ad6416a2f56d77134ffa1d903c68d3f50d9c3157e677b3c461147f06ee"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 157,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 155,
        "length": 6,
        "offset": 69,
        "surroundingCode": "def TimmyBetaHost(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n\n    if runDir is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d5e58d7e47e8f7495a2f97a65c8d215587871d018dfa713f401e54569a87d4d1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 160,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 158,
        "length": 6,
        "offset": 36,
        "surroundingCode": "\n    if runDir is not None:\n        runDir = runDir.group(0)\n    else:\n        runDir = None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "62179ad6717e124fff210251ef68066d892b970611320f8dd14f6527d360215e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/checks.py",
      "language": "Python",
      "line": 162,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 160,
        "length": 6,
        "offset": 51,
        "surroundingCode": "        runDir = runDir.group(0)\n    else:\n        runDir = None\n\n    return runDir == \"/home/timmy-beta\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1a7cfb91a59b6ed99f245565afc0503d574725de37a493abf40c44c4cfd5c312"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 63,
      "offset": 11,
      "length": 9,
      "code": {
        "startLine": 61,
        "length": 9,
        "offset": 12,
        "surroundingCode": "\n\nasync def rawExport(channel, response, user: discord.User):\n    transcript = await chat_exporter.export(channel, None)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f3340e9ba11493627df06db5d01da7be6219f11fc5c989c12d9cd454e440616f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 228,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 226,
        "length": 14,
        "offset": 6,
        "surroundingCode": "\n\ndef S3_upload_file(file_name, bucket, object_name=None):\n    \"\"\"Upload a file to an S3 bucket\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a3c8f3e8773ff7ca663f5387b02ada4a9d66b2356f77ed5c57e849093e4c0676"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 261,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 259,
        "length": 7,
        "offset": 8,
        "surroundingCode": "\n\nclass MAIN_ID:\n    \"\"\"\n    IDs of the SS Main server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d21211c4daf2211cc2c71b700926eaa238e9d66693bdac6e1c6147233e9700d7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 418,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 416,
        "length": 8,
        "offset": 8,
        "surroundingCode": "\n\nclass STAFF_ID:\n    \"\"\"\n    IDs of the SS Staff Community server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "96e23c64916602ade93b2db802ecaa634e13988e8ca8aaeaca7aa02f6afba743"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 523,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 521,
        "length": 10,
        "offset": 8,
        "surroundingCode": "\n\nclass DIGITAL_ID:\n    \"\"\"\n    IDs of the SS Staff Community server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "65f6395a0fcd09fdde64fad0bd37db5172e50e8ba0c3de06eb203318308e27ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 583,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 581,
        "length": 7,
        "offset": 8,
        "surroundingCode": "\n\nclass TECH_ID:\n    \"\"\"\n    IDs of the 'The Department of Information & Technology' server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "74b2f899acd6d95dbb24597aa5d4c424eeda648da11f612fd9ecd0eb0da99d06"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 715,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 713,
        "length": 5,
        "offset": 8,
        "surroundingCode": "\n\nclass CH_ID:\n    \"\"\"\n    IDs of the Chat Helper server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4c97f92473e624ecdbc8329c0132c62efaeded17192fa8b7cb2f0759927f3332"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 735,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 733,
        "length": 6,
        "offset": 8,
        "surroundingCode": "\n\nclass MKT_ID:\n    \"\"\"\n    IDs of the SS Marketing Department server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0cbc9ad391a4b31cc0a1f4a96331b59b41405868593b2cc0b908b156e6ad4d9b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 813,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 811,
        "length": 6,
        "offset": 8,
        "surroundingCode": "\n\nclass TUT_ID:\n    \"\"\"\n    IDs of the SS Tutoring Division server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2099ee62a4f281dc688caa65522071ea1a3f4316364d6fe740ea9d3331e289ee"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 867,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 865,
        "length": 5,
        "offset": 8,
        "surroundingCode": "\n\nclass HR_ID:\n    \"\"\"\n    IDs of the SS HR Department server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d724539105487fb1ea1deb1684d7f45c6812abc279f0237b16238591606197c5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 894,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 892,
        "length": 9,
        "offset": 8,
        "surroundingCode": "\n\nclass LEADER_ID:\n    \"\"\"\n    IDs of the Leadership Lounge server."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d9ef081fd79e5b7172629f8f49da3ce4a82dfc088bb27e1abd1e3c1aa201a9b5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 938,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 936,
        "length": 6,
        "offset": 8,
        "surroundingCode": "\n\nclass SET_ID:\n    \"\"\"\n    IDs of the SSD SET SERVER"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c7a56c874c91fb8cc69723aef4d2f577dc0ede529900e9a2fee558c2084f5133"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 964,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 962,
        "length": 10,
        "offset": 8,
        "surroundingCode": "\n\nclass CheckDB_CC:\n    \"\"\"\n    Checks and Safeguards for the Bot."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5fb69321e0665ad0d693abb4f877d5447edf646202b7f51269c6e4a42ba1c001"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1022,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 1020,
        "length": 11,
        "offset": 90,
        "surroundingCode": "    user = os.getenv(\"CONFIG_CC_USER\")\n    password = os.getenv(\"CONFIG_CC_PASSWORD\")\n    jsonPayload = [{\"op\": \"replace\", \"path\": \"/value\", \"value\": str(value)}]\n\n    r = requests.patch("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1419a228b53da063d971df2ac310340a32e0f736ede48244a004dce1152bd8c7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1199,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 1197,
        "length": 7,
        "offset": 8,
        "surroundingCode": "\n\nclass bcolors:\n    HEADER = \"\\033[95m\"\n    OKBLUE = \"\\033[94m\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "51e161efe7bdf2a43e35db77aa18e517c5a9d9cccb443b7705e2002d01230c14"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1430,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 1428,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef getGuildList(bot: commands.Bot, exemptServer: List[int] = None) -> list:\n    guildList = []\n    for guild in bot.guilds:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0d3d49106efe08525b8784761b1840309070db483b4a4ba64b6d9732cb8da695"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1430,
      "offset": 37,
      "length": 30,
      "code": {
        "startLine": 1428,
        "length": 30,
        "offset": 38,
        "surroundingCode": "\n\ndef getGuildList(bot: commands.Bot, exemptServer: List[int] = None) -> list:\n    guildList = []\n    for guild in bot.guilds:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fa8f81e668e520e31701686e1a46824128a13b3a19426b1eb7b265361ba85552"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1431,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 1429,
        "length": 9,
        "offset": 82,
        "surroundingCode": "\ndef getGuildList(bot: commands.Bot, exemptServer: List[int] = None) -> list:\n    guildList = []\n    for guild in bot.guilds:\n        if guild.id in exemptServer:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b2955c942bad98c89e77822c5fae1cde8c25a3c16ff160fa3a794aadc4b8f033"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1455,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 1453,
        "length": 13,
        "offset": 94,
        "surroundingCode": "            self, interaction: discord.Interaction, button: discord.ui.Button,\n    ):\n        TranscriptLOG = self.bot.get_channel(TECH_ID.ch_ticketLog)\n        ch = self.bot.get_channel(interaction.channel_id)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fc31d49620fd6f9e4042dd4cd4683d65d8b5bf9606d95bce102b2210284f90f5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1486,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 1484,
        "length": 19,
        "offset": 92,
        "surroundingCode": "        self.value = True\n        ch = self.bot.get_channel(interaction.channel_id)\n        TempConfirmInstance = TechnicalCommissionConfirm(self.bot)\n\n        msg = await ch.send("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8ff802ec402394a80d2ba130bcfcc2f5e0f630eba676e5e0e2869f17a721c14c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1571,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 1569,
        "length": 19,
        "offset": 92,
        "surroundingCode": "        self.value = True\n        ch = self.bot.get_channel(interaction.channel_id)\n        TempConfirmInstance = TicketTempConfirm()\n\n        msg = await ch.send("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2193545a10b209447d91e92d817f00ee54ec8ab2e7bb2a67286626efc12634b8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1672,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1670,
        "length": 2,
        "offset": 86,
        "surroundingCode": "async def id_generator(size=3, chars=string.ascii_uppercase):\n    while True:\n        ID = \"\".join(random.choice(chars) for _ in range(size))\n        query = database.TutorBot_Sessions.select().where(\n            database.TutorBot_Sessions.SessionID == ID"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d8271225c15773e19e29e335c8deb655514e67d6bbda3236b1ca1d0bb96a8c04"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1709,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 1707,
        "length": 9,
        "offset": 73,
        "surroundingCode": "        theproc = subprocess.Popen([sys.executable, \"main.py\"])\n\n        runThread = Thread(target=theproc.communicate)\n        runThread.start()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "eb390fce88c431f4e4a750ff7d52898af5919e233ad4eae458212d3d075623a6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1737,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 1735,
        "length": 10,
        "offset": 6,
        "surroundingCode": "\n\ndef getHostDir():\n    \"\"\"\n    Get the directory of the current host."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7842933df10c00f7f49bb4354a5d97a771a7990b12301ef0ce728d3f875da77a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1748,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 1746,
        "length": 7,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n    print(runPath)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6d0b0735785c0f632bfea09662db85d1164c1381b49cbfa43eeceb866fd3677f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1749,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 1747,
        "length": 6,
        "offset": 46,
        "surroundingCode": "\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n    print(runPath)\n    if runDir is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5a11a2c0e5309d11ba79686cc00d28270946eb4c7058cadebe57b84a69d06137"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1752,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 1750,
        "length": 6,
        "offset": 54,
        "surroundingCode": "    print(runPath)\n    if runDir is not None:\n        runDir = runDir.group(0)\n    else:\n        runDir = None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f3500e373985fd779361fea577171506b104385bdf6d6dcf41ed80ca912b89fb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1754,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 1752,
        "length": 6,
        "offset": 51,
        "surroundingCode": "        runDir = runDir.group(0)\n    else:\n        runDir = None\n    print(runDir)\n    return runDir"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "51d25fc650f90590cc108c4e930d0c4b694ff3516647670941990df268c381b3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1759,
      "offset": 5,
      "length": 17,
      "code": {
        "startLine": 1757,
        "length": 17,
        "offset": 6,
        "surroundingCode": "\n\ndef stringTimeConvert(string: str):\n    \"\"\"\n    Filters out the different time units from a string (e.g. from '2d 4h 6m 7s') and returns a ``dict``."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9cf0069e95faa189c3bddb7f47a21dc116dc817ce18d55182c2b1b95f9d5c576"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1770,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 1768,
        "length": 8,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    timeDict: dict = {}\n\n    days = re.search(\"\\d+d\", string)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "84c91b916c00d6a6d920a05e43effe8df689d66c9553982766cd00bf450d3334"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1800,
      "offset": 5,
      "length": 17,
      "code": {
        "startLine": 1798,
        "length": 17,
        "offset": 6,
        "surroundingCode": "\n\ndef searchCustomEmoji(string: str):\n    \"\"\"\n    Searches for a custom emoji in a specific ``str`` and returns it or None if nothing found."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d573f75562f5b07fe265fff33ccce6a11bba520a81eb80023df9cd0b50b8cbde"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1811,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 1809,
        "length": 11,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    customEmoji = re.search(\"<[^:]*:[^:]*:(\\d)+>\", string)\n\n    if customEmoji is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ab256ecca9b683ef0c33b8644c799a4ab324151c25e27de0234b2b7067c7373a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1814,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 1812,
        "length": 11,
        "offset": 41,
        "surroundingCode": "\n    if customEmoji is not None:\n        customEmoji = customEmoji.group(0)\n    else:\n        customEmoji = None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "74aab2a70466ebf47694546001c3e5b78d5490f8399a269ff2a179a87fdc3b65"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 1816,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 1814,
        "length": 11,
        "offset": 61,
        "surroundingCode": "        customEmoji = customEmoji.group(0)\n    else:\n        customEmoji = None\n\n    return customEmoji"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "67ff1c15a4f9debf34eb4e63e8bd953e01a9a5f53cf6110baf4fc6222a757be4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 166,
      "offset": 7,
      "length": 24,
      "code": {
        "startLine": 164,
        "length": 24,
        "offset": 8,
        "surroundingCode": "\n\nclass TutorSession_GracePeriod(BaseModel):\n    \"\"\"\n    # IgnoreThis"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2fb3a9046e54192a27503df43c42ba2a88b387eab27be1b2f7d842e5d0bb604d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 441,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 439,
        "length": 17,
        "offset": 8,
        "surroundingCode": "\n\nclass TutorBot_Sessions(BaseModel):\n    \"\"\"\n    #TutorBot Sessions"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3bd3509464d05511c1999d849e09b522d8835f057158ab08329cb914e0faa343"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 84,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 82,
        "length": 8,
        "offset": 60,
        "surroundingCode": "        data = r.json()\n        data = data[\"data\"]\n        ListData = []\n        for object in range(len(data) - 1):\n            # object = object"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d3bb1d9e31afe85a19a2a4f9598c7fbf4e63dc3e997526eb271cfa5f6f59b644"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 87,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 85,
        "length": 7,
        "offset": 86,
        "surroundingCode": "        for object in range(len(data) - 1):\n            # object = object\n            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d25c66365b002e76fae13869dee2e7e2221a34c73322b4d52d982c3923d6488f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 88,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 86,
        "length": 12,
        "offset": 103,
        "surroundingCode": "            # object = object\n            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "368a9b63d6898db6a3b96684d879643b8b19502fc8a173965742794515803585"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 89,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 87,
        "length": 6,
        "offset": 118,
        "surroundingCode": "            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0a154760569e62c33bbe3e9be9b8301745a09bb0cdc71376549b81b894086e4f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 90,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 88,
        "length": 4,
        "offset": 98,
        "surroundingCode": "            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path\n\n            ListData.append("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7d822bee505b56e032920e99c5257e8185a68c42e967c05cf85eadae604dfc9f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 125,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 123,
        "length": 7,
        "offset": 47,
        "surroundingCode": "        object = range(len(r.json()))\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2f3acaa1d2441e79091a3cbcda9d4f2afa9a9097cf75d52652740f35821a3291"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 126,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 124,
        "length": 12,
        "offset": 65,
        "surroundingCode": "\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "356ac68809059ca167d6bf6d2544386513404746f3cb05aae0a6d364745f1c21"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 127,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 125,
        "length": 6,
        "offset": 105,
        "surroundingCode": "        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "66acdd6d67980b92f1395e69a925c6a52adb53d45e7b55ac09a7cf6093dedf80"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 128,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 126,
        "length": 4,
        "offset": 86,
        "surroundingCode": "        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n\n        return RedirectPizza("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "466accff80ea7ccda5e5c1f606467b474ca8070abe91299b9f11bbc180ca021f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 178,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 176,
        "length": 7,
        "offset": 41,
        "surroundingCode": "        pprint.pprint(r.json())\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "63b9d2aefc90c7a134ab5cc26f9b6ff915e2578010eeb353b82df835d07e9e5d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 179,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 177,
        "length": 12,
        "offset": 65,
        "surroundingCode": "\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3dc0970c9b190909c0ffe92137c84f20559d4f8fe1f072646be7bd33e9a0db5c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 180,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 178,
        "length": 6,
        "offset": 105,
        "surroundingCode": "        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c176a28695d03276fe0319ccc1d6de12d8b7f47054dbff47cf129c2cedfaaab3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/redirect_sdk.py",
      "language": "Python",
      "line": 181,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 179,
        "length": 4,
        "offset": 86,
        "surroundingCode": "        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n\n        return RedirectPizza("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1b6dced980e59175727af4b8e3f4504e0acd09fe0822ac7c2fd23e4373812c28"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 83,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 81,
        "length": 2,
        "offset": 42,
        "surroundingCode": "\n    if not os.getenv(\"USEREAL\"):\n        IP = os.getenv(\"IP\")\n        databaseField = (\n            f\"{bcolors.OKGREEN}Selected Database: External ({IP}){bcolors.ENDC}\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c423803d3e98e4f8b358c3927acc7363c41525b0866a6da0f87d13b57c57c963"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 84,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 82,
        "length": 13,
        "offset": 70,
        "surroundingCode": "    if not os.getenv(\"USEREAL\"):\n        IP = os.getenv(\"IP\")\n        databaseField = (\n            f\"{bcolors.OKGREEN}Selected Database: External ({IP}){bcolors.ENDC}\"\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "999316e23422300fd6d7da3878bfb8b8ff41da50f3aaa5204aa7b1e8900e069e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 88,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 86,
        "length": 13,
        "offset": 28,
        "surroundingCode": "        )\n    else:\n        databaseField = (\n            f\"{bcolors.FAIL}Selected Database: localhost{bcolors.ENDC}\\n{bcolors.WARNING}WARNING: Not \"\n            f\"recommended to use SQLite.{bcolors.ENDC} \""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "537c4a9b168a97388ff9b6bcae80d925fdb6ee781f490221b7c0a7ba1486b95c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 279,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 277,
        "length": 10,
        "offset": 66,
        "surroundingCode": "            data = \"\\n\".join([l.strip() for l in f])\n\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "965a3857b503b8b6c278f21337bcdbda133b15622e5bfdcc18f65c9143e5b16a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 280,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 278,
        "length": 9,
        "offset": 63,
        "surroundingCode": "\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\"\n            headers = {\"Authorization\": \"token %s\" % API_TOKEN}"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7a5ffaa747d1be8ebbd74592bb564d28a8ae0258ba1ead411723584a966a0e4e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 293,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 291,
        "length": 2,
        "offset": 63,
        "surroundingCode": "            )\n            j = json.loads(res.text)\n            ID = j[\"id\"]\n            gisturl = f\"https://gist.github.com/{ID}\"\n            print(gisturl)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ad8e55a9f1ff110bca2f5941feabe6f26c2eda7121e49328db9fb2d935b29009"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 375,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 373,
        "length": 8,
        "offset": 51,
        "surroundingCode": "        blacklisted_users.append(p.discordID)\n\n    adminIDs = []\n    query = database.Administrators.select().where(\n        database.Administrators.TierLevel == 4"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "da1400cc16e57d2f3339f6f848471f4a33adcb3a3a1c27266b12ed243e6af192"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 424,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 422,
        "length": 12,
        "offset": 45,
        "surroundingCode": "        return CheckDB_CC.elseSituation\n\ndef initializeDB(bot):\n    \"\"\"\n    Initializes the database, and creates the needed table data if they don't exist."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b0c9600615e187bc681d2c85c50472e05bafafb28662a4891bb7bbff370a3f5f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 429,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 427,
        "length": 3,
        "offset": 56,
        "surroundingCode": "    \"\"\"\n    database.db.connect(reuse_if_open=True)\n    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e5720e49db25e27b9865b7f963d141b7d91e56ed409fce7249d91f1da6b8e41e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 430,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 428,
        "length": 3,
        "offset": 114,
        "surroundingCode": "    database.db.connect(reuse_if_open=True)\n    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "262776d3df71e33c737106a59daafef9313f3fe48bf6c0f2a18d78b5e15077d8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 431,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 429,
        "length": 3,
        "offset": 156,
        "surroundingCode": "    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "82e1546f3fa7ba403df8ba6f8dc9cdb4a57b21102e354ec520d025c856476465"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 432,
      "offset": 5,
      "length": 2,
      "code": {
        "startLine": 430,
        "length": 2,
        "offset": 172,
        "surroundingCode": "    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)\n\n    if not UpQ.exists():"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "19162b91de03c652041fd48a112ccecd66839a4c7ac5af6ba80cbc89ec853397"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/mod.py",
      "language": "Python",
      "line": 156,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 154,
        "length": 8,
        "offset": 98,
        "surroundingCode": "            member = ctx.guild.get_member(user.id)\n            if member is None:\n                banEntry = await ctx.guild.fetch_ban(user)\n\n                if banEntry is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e7f2ab83ac7d0b1e3fad776fe5a8c317a6dc432e7a9ae8e75adf26cd6b383539"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 62,
      "offset": 17,
      "length": 14,
      "code": {
        "startLine": 60,
        "length": 14,
        "offset": 134,
        "surroundingCode": "            # We need to check who banned the person.\n            if moderator.id == 548410451818708993:  # Wick's ID\n                banReasonAUDIT = logs.reason\n\n                if \"No reason specified by\" in banReasonAUDIT:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1a2bf6519acfdc3ec686ea50f6ea58628b9bb8829ddec90962dc830bbc4bfe1f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 65,
      "offset": 29,
      "length": 15,
      "code": {
        "startLine": 63,
        "length": 15,
        "offset": 92,
        "surroundingCode": "\n                if \"No reason specified by\" in banReasonAUDIT:\n                    random, fullUsernameMOD = banReasonAUDIT.split(\n                        \"No reason specified by \"\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "289d6918afdb7ebe2bd49172e9532983379d5bb70270a6078ec1a7ee2fcaaeb9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 68,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 66,
        "length": 9,
        "offset": 92,
        "surroundingCode": "                        \"No reason specified by \"\n                    )\n                    banReason = \"None Specified\"\n\n                else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1b602777aaffc3c522d0c34fd9f2068881ec17ea67666df33dffaa2b95e207f0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 71,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 69,
        "length": 9,
        "offset": 43,
        "surroundingCode": "\n                else:\n                    banReason = re.match(r\"[^[]*\\[([^]]*)\\]\", banReasonAUDIT).groups()[\n                        0\n                    ]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "427c44cb7196e3d5bcd6bef9c2453a46680155a1ba836af8ea2105491a99b15f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 76,
      "offset": 33,
      "length": 15,
      "code": {
        "startLine": 74,
        "length": 15,
        "offset": 58,
        "surroundingCode": "\n                    try:\n                        random, fullUsernameMOD = banReasonAUDIT.split(\"- \")\n                    except ValueError:\n                        fullUsernameMOD = \"Wick\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "84deaffbb939c6a3935787b8d4bbdc231356814a9335121aa87292095e4149f7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 78,
      "offset": 25,
      "length": 15,
      "code": {
        "startLine": 76,
        "length": 15,
        "offset": 140,
        "surroundingCode": "                        random, fullUsernameMOD = banReasonAUDIT.split(\"- \")\n                    except ValueError:\n                        fullUsernameMOD = \"Wick\"\n\n            else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "21b42171de91566afb2dcca9ca4d612e797e975b81f6515e90be5b1daadd2983"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 81,
      "offset": 17,
      "length": 9,
      "code": {
        "startLine": 79,
        "length": 9,
        "offset": 35,
        "surroundingCode": "\n            else:\n                banReason = logs.reason\n                # Get full username with tag\n                fullUsernameMOD = f\"{moderator.display_name}#{moderator.discriminator}\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1d40fcc0d14f2357c769b609175846a9559512adb9be891814c093ad90764026"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 83,
      "offset": 17,
      "length": 15,
      "code": {
        "startLine": 81,
        "length": 15,
        "offset": 101,
        "surroundingCode": "                banReason = logs.reason\n                # Get full username with tag\n                fullUsernameMOD = f\"{moderator.display_name}#{moderator.discriminator}\"\n\n            # Okay now we got our reason, we need to get a few more things"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5e7e1aaa5da2b05f1f76ed907e48052cb7f85f5471a19c03991d62e1c6751ad0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 89,
      "offset": 13,
      "length": 18,
      "code": {
        "startLine": 87,
        "length": 18,
        "offset": 54,
        "surroundingCode": "\n            # Get full username with tag\n            fullUsernameTARGET = f\"{target.display_name}#{target.discriminator}\"\n\n            # Get everything into a list so we can bulk insert."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0c423f9bc66d15bc2bd57a0132fc9c834948cde30fa4f05559ad7969c7db85d3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/BanLogger.py",
      "language": "Python",
      "line": 105,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 103,
        "length": 10,
        "offset": 85,
        "surroundingCode": "            sheet.insert_row(row, 2)  # Insert data, and boom. We done!\n\n            ModChannel = self.bot.get_channel(self.ModLogID)\n\n            embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f5f14aa41dce65871a3706aebe6109491a9a9e4b906eb6a45c38101b89fc0eef"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 35,
      "offset": 40,
      "length": 19,
      "code": {
        "startLine": 33,
        "length": 19,
        "offset": 95,
        "surroundingCode": "\nclass TicTacToeButton(discord.ui.Button[\"TicTacToe\"]):\n    def __init__(self, x: int, y: int, xUser: discord.User, yUser: discord.User):\n        super().__init__(style=discord.ButtonStyle.secondary, label=\"\\u200b\", row=y)\n        self.x = x"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e2652319fc3a1369f0a4c32b22db62efb828787ffa189120b0526a4e4f175393"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 35,
      "offset": 61,
      "length": 19,
      "code": {
        "startLine": 33,
        "length": 19,
        "offset": 116,
        "surroundingCode": "\nclass TicTacToeButton(discord.ui.Button[\"TicTacToe\"]):\n    def __init__(self, x: int, y: int, xUser: discord.User, yUser: discord.User):\n        super().__init__(style=discord.ButtonStyle.secondary, label=\"\\u200b\", row=y)\n        self.x = x"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1b992062d46d02aa88fe02027365b6f9791128f73a1efd2300f9a0694acab0a4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 106,
      "offset": 24,
      "length": 7,
      "code": {
        "startLine": 104,
        "length": 7,
        "offset": 36,
        "surroundingCode": "    Tie = 2\n\n    def __init__(self, XPlayer, OPlayer):\n        super().__init__()\n        self.current_player = self.X"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2dad37373c6c13a76da2fadcebe251042f3f5454db615b4f2fd6c067a006d844"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 106,
      "offset": 33,
      "length": 7,
      "code": {
        "startLine": 104,
        "length": 7,
        "offset": 45,
        "surroundingCode": "    Tie = 2\n\n    def __init__(self, XPlayer, OPlayer):\n        super().__init__()\n        self.current_player = self.X"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5f73940aece7c8060d3e8d083bb69e8ad1ee15501330c1a8a62b8460d3cca60b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 321,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 319,
        "length": 17,
        "offset": 116,
        "surroundingCode": "    @commands.cooldown(1, 10, commands.BucketType.guild)\n    async def donate(self, ctx: commands.Context):\n        timmyDonation_png = discord.File(\n            Others.timmyDonation_path, filename=Others.timmyDonation_png\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8145b2359d58b569ea446843af85886172618fe3644ba02833aea33bf8ecb7d8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 325,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 323,
        "length": 11,
        "offset": 19,
        "surroundingCode": "        )\n\n        embedDonate = discord.Embed(\n            color=Colors.ss_blurple,\n            title=f\"Donate\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "10d53cc655e3ef6d5d1b1a50fd825cee31047303d2b4090a3c912f4285eff2ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 349,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 347,
        "length": 9,
        "offset": 124,
        "surroundingCode": "    @commands.has_any_role(\"Moderator\")\n    async def debateban(self, ctx, member: discord.Member, *, reason=None):\n        DebateBan = discord.utils.get(ctx.guild.roles, name=\"NoDebate\")\n\n        if member.id == self.bot.user.id:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "22936f132cbff03b0076eb4e133bd6df5697cbfefea9249a71e03e24e6e0e33f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 373,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 371,
        "length": 12,
        "offset": 44,
        "surroundingCode": "                    return\n\n                UpdateReason = f\"DebateBan requested by {ctx.author.display_name} | Reason: {reason}\"\n                await member.add_roles(DebateBan, reason=UpdateReason)\n            except Exception as e:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "149e4763565162fa67a7f7e47d0883111e9af4cd92a13df5fca3648163226400"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 392,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 390,
        "length": 12,
        "offset": 64,
        "surroundingCode": "                    reason = \"No Reason Given\"\n\n                UpdateReason = f\"Debate UnBan requested by {ctx.author.display_name} | Reason: {reason}\"\n                await member.remove_roles(DebateBan, reason=UpdateReason)\n            except Exception as e:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "40f1c041c7e473c2504e825a5632e0146b2e94ca89b51f5755793f28b45a1480"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 415,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 413,
        "length": 7,
        "offset": 123,
        "surroundingCode": "    @commands.has_any_role(\"Moderator\")\n    async def countban(self, ctx, member: discord.Member, *, reason=None):\n        NoCount = discord.utils.get(ctx.guild.roles, name=\"NoCounting\")\n\n        if member.id == self.bot.user.id:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "617142a9490db4e2fc7fa8b8bad008b5c351e63acb4e22f1ada6120e27004529"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 439,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 437,
        "length": 12,
        "offset": 44,
        "surroundingCode": "                    return\n\n                UpdateReason = f\"CountBan requested by {ctx.author.display_name} | Reason: {reason}\"\n                await member.add_roles(NoCount, reason=UpdateReason)\n            except Exception as e:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "426440231700ea7d3554cf1a1402e7b0cb542dbbf769c61eefcfeb08af7e8666"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 458,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 456,
        "length": 12,
        "offset": 64,
        "surroundingCode": "                    reason = \"No Reason Given\"\n\n                UpdateReason = f\"Count UnBan requested by {ctx.author.display_name} | Reason: {reason}\"\n                await member.remove_roles(NoCount, reason=UpdateReason)\n            except Exception as e:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7fba787d63b93311778e9b628d5147707eeab87a5ac109e0c357ed102b1c9ca6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 601,
      "offset": 17,
      "length": 2,
      "code": {
        "startLine": 599,
        "length": 2,
        "offset": 111,
        "surroundingCode": "                await message.delete()\n                database.db.connect(reuse_if_open=True)\n                NE = database.AdminLogging.create(\n                    discordID=ctx.author.id, action=\"KILL\"\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "258449d8b6075f5eab46714637732e36166583b7244276c244337594ca816f67"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 640,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 638,
        "length": 7,
        "offset": 34,
        "surroundingCode": "\n        userinput = None\n        userObj = None\n\n        await ctx.send("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c7b13742862d9cd8ad27101e685a44d09f62ca6b3c541df0b226d92234ae0734"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 647,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 645,
        "length": 8,
        "offset": 56,
        "surroundingCode": "\n        while userinput != str(randomnum):\n            inputMSG = await self.bot.wait_for(\"message\", check=check)\n            userinput = inputMSG.content\n            userObj = inputMSG.author"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0bcb9254037d55ad81d12a9002f49a97171cca26a5247b1d8bb03852c1d1eda6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 649,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 647,
        "length": 7,
        "offset": 124,
        "surroundingCode": "            inputMSG = await self.bot.wait_for(\"message\", check=check)\n            userinput = inputMSG.content\n            userObj = inputMSG.author\n\n        await ctx.send("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "31ee82180ec732fbb8f8e9ef1f333017133cfdc256e75829b8f1308c13ed283f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 705,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 703,
        "length": 8,
        "offset": 19,
        "surroundingCode": "        )\n\n        UserList = []\n        RoleList = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "34ee3652e5bf20d187dd0e3c3dd6cbd8e587445b16f01556912ccbd52c79cd10"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 706,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 704,
        "length": 8,
        "offset": 31,
        "surroundingCode": "\n        UserList = []\n        RoleList = []\n\n        for user in users:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2432a7f0cbc9279536ee42a44542e0ab89ee8d639161eb412456f4e5dd486544"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 713,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 711,
        "length": 8,
        "offset": 51,
        "surroundingCode": "            RoleList.append(role.mention)\n\n        UserList = \", \".join(UserList)\n        RoleList = \", \".join(RoleList)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "54626b6c300a9db08ef0980b443f4ff79b1d8d6827b765d0b58fb38a540de1da"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 714,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 712,
        "length": 8,
        "offset": 48,
        "surroundingCode": "\n        UserList = \", \".join(UserList)\n        RoleList = \", \".join(RoleList)\n\n        embed.add_field("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c285468becc81de571a4e05ee4478ea3dc224e248813eef89f1e6340477d37b0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 739,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 737,
        "length": 12,
        "offset": 61,
        "surroundingCode": "        await view.wait()\n        await msg.delete()\n        ViewResponse = str(view.children[0].values)\n        RoleID = self.decodeDict[ViewResponse]\n        await ctx.send(f\"<@&{RoleID}>\\n{message}\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f0c447fd3ad066495fc36d3db270da54dea72c84faf5d6953c9b50350f845ef9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 740,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 738,
        "length": 6,
        "offset": 87,
        "surroundingCode": "        await msg.delete()\n        ViewResponse = str(view.children[0].values)\n        RoleID = self.decodeDict[ViewResponse]\n        await ctx.send(f\"<@&{RoleID}>\\n{message}\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "067e45d2d0c212328955f2a390df8a096d631a40a7144e2b80908e93552bf464"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 812,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 810,
        "length": 2,
        "offset": 67,
        "surroundingCode": "    @is_botAdmin\n    async def say(self, ctx, *, message):\n        NE = database.AdminLogging.create(\n            discordID=ctx.author.id, action=\"SAY\", content=message\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "da85c14c2d0b06538c29b64982981d880dcdcb76ad52a65cc002cee2b06959ac"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 840,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 838,
        "length": 2,
        "offset": 28,
        "surroundingCode": "            return\n\n        NE = database.AdminLogging.create(\n            discordID=ctx.author.id, action=\"SAYVC\", content=text\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2abc30cf6a69274f4982ebfc9ae14e0c8a436c9d4e03928662e0ff220fc070d9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 846,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 844,
        "length": 9,
        "offset": 71,
        "surroundingCode": "\n        # Lets prepare our text, and then save the audio file\n        TTSClient = texttospeech.TextToSpeechClient(\n            credentials=access_secret(\"ttscreds\", True, 2)\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "dcd60e9cbf18be52f0bf0e4f1a0edcb5734d32151183731051e9961e774973fe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/todocommands.py",
      "language": "Python",
      "line": 88,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 86,
        "length": 8,
        "offset": 57,
        "surroundingCode": "        database.db.connect(reuse_if_open=True)\n\n        todoList = []\n        query = database.ToDo.select().where(database.ToDo.discordID == ctx.author.id)\n        for todo in query:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "134876b5a2ae60cf0dddf599445f791d1927d50cb32a2414dc7131cdd2dbbb01"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/todocommands.py",
      "language": "Python",
      "line": 93,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 91,
        "length": 9,
        "offset": 69,
        "surroundingCode": "            todoList.append(f\"{str(todo.id)}) {todo.item}\")\n\n        todoFinal = \"\\n\".join(todoList)\n\n        database.db.close()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2a7f9bdd8d8318fa4952db8dfcc49a5c81dd8d7195e5028635454c5313fedf7b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 44,
      "offset": 15,
      "length": 7,
      "code": {
        "startLine": 42,
        "length": 7,
        "offset": 56,
        "surroundingCode": "    @commands.command()\n    @is_botAdmin4\n    async def Fmodify(self, ctx, num: int, val: bool):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8487f5362df05419ee3e8121d690f5628ef7b3cd3ff15339d4f55160ebfaf948"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 45,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 43,
        "length": 7,
        "offset": 81,
        "surroundingCode": "    @is_botAdmin4\n    async def Fmodify(self, ctx, num: int, val: bool):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5cfc2db19eb2010ff32055031181d5800fbb410f89de95cdf8be0496b7419629"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 51,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 49,
        "length": 14,
        "offset": 19,
        "surroundingCode": "        )\n\n        databaseValues = {\n            1: \"CheckDB.MasterMaintenance\",\n            2: \"CheckDB.guildNone\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a6abaa5bbf227bfb38573487658f570e0170cfa6f7411f3ffc3a02c47e1c121e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 89,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 87,
        "length": 7,
        "offset": 62,
        "surroundingCode": "    @filters.command()\n    async def list(self, ctx):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e5c1e8f360a4efeac91057eceffb5c8c77472cc3bd36750c70c7429d776240e0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 119,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 117,
        "length": 17,
        "offset": 69,
        "surroundingCode": "    @is_botAdmin3\n    async def delete(self, ctx, num: int):\n        WhitelistedPrefix: database.WhitelistedPrefix = (\n            database.WhitelistedPrefix.select()\n                .where(database.WhitelistedPrefix.id == num)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5eb4e44263b351fd4c9307ab30591e8b96a1956e90c2be1180d9e4d461555ad5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 130,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 128,
        "length": 17,
        "offset": 64,
        "surroundingCode": "    @is_botAdmin3\n    async def add(self, ctx, prefix):\n        WhitelistedPrefix = database.WhitelistedPrefix.create(\n            prefix=prefix, status=True\n        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bc6089997a01c56b8cbf2271d6180f75df51efc60f8c248a522489bdd333c245"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 138,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 136,
        "length": 8,
        "offset": 40,
        "surroundingCode": "    async def list(self, ctx):\n\n        PrefixDB = database.WhitelistedPrefix\n        response = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "277a1f8e5464b051a9dba6abfc06f19481fd6416ebe1c34742311453e7a82b72"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 144,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 142,
        "length": 12,
        "offset": 54,
        "surroundingCode": "\n            if entry.status is True:\n                statusFilter = \"ACTIVE\"\n            else:\n                statusFilter = \"DISABLED\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9d67a3bbcadce232c8837982250449e8afd9d54a6c646d0c6a46df4460cf282a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 146,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 144,
        "length": 12,
        "offset": 74,
        "surroundingCode": "                statusFilter = \"ACTIVE\"\n            else:\n                statusFilter = \"DISABLED\"\n\n            response.append(f\"Prefix `{entry.prefix}`:\\n{Emoji.barrow} {statusFilter}\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9b1e12d8a4e69b36383c520ed95b5f7562f6cdab0f763bf5e9e78b72ee50a0c2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 253,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 251,
        "length": 7,
        "offset": 29,
        "surroundingCode": "        output = \"\"\n\n        hostDir = getHostDir()\n        if hostDir == \"/home/timmya\":\n            branch = \"origin/main\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c16423888497676ece4cd03188cbed01ab854e8dbfda2e5882e5e2830e2f4ecb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 315,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 313,
        "length": 7,
        "offset": 29,
        "surroundingCode": "        output = \"\"\n\n        hostDir = getHostDir()\n        if hostDir == \"/home/timmya\":\n            branch = \"origin/main\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4b2ac5c2e0945fee44e489eff79a7f602f0eea01b9bb0193be09c64732f9f7b6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 394,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 392,
        "length": 9,
        "offset": 56,
        "surroundingCode": "    @is_botAdmin\n    async def list(self, ctx):\n        adminList = []\n\n        query1 = database.Administrators.select().where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8bcc480a067ede7e800a4fd7246307ef42ea1512e1dc95a37a80b7f3b2480cba"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 403,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 401,
        "length": 11,
        "offset": 71,
        "surroundingCode": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL1 = \"\\n\".join(adminList)\n\n        adminList = []"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "58761befd114abf32f06d77f4bf67489eb82b5454f739c57deb9278629f897df"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 405,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 403,
        "length": 9,
        "offset": 52,
        "surroundingCode": "        adminLEVEL1 = \"\\n\".join(adminList)\n\n        adminList = []\n        query2 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 2"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b297ef759a2a1bcf753a7147414528db6dc8f069d9f9d4d5bf0c5fdfdadb5c5d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 413,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 411,
        "length": 11,
        "offset": 71,
        "surroundingCode": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL2 = \"\\n\".join(adminList)\n\n        adminList = []"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e2149b9acc47927f104511a5c7205bc1d1188ea22463415e53e4fe3be7052d02"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 415,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 413,
        "length": 9,
        "offset": 52,
        "surroundingCode": "        adminLEVEL2 = \"\\n\".join(adminList)\n\n        adminList = []\n        query3 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 3"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0476b4f99426dfada79b5b570c57a1b4f25f626ad68b714e7389b82c99aa26f8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 423,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 421,
        "length": 11,
        "offset": 71,
        "surroundingCode": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL3 = \"\\n\".join(adminList)\n\n        adminList = []"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4a074137cb852c38b066b7aa758a7fa5c01a1d57e3ab7ac03f245eaf036e79e6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 425,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 423,
        "length": 9,
        "offset": 52,
        "surroundingCode": "        adminLEVEL3 = \"\\n\".join(adminList)\n\n        adminList = []\n        query4 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 4"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0b2e20803394ad52ccfcbd16cc894b210e29958524472242b580c9f9da8f8ff4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 433,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 431,
        "length": 11,
        "offset": 71,
        "surroundingCode": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL4 = \"\\n\".join(adminList)\n\n        embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e5d3f12fa9e6d7fa1115a1b2299e7bde6c02134535fbb03fcf60ad241e65f857"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 456,
      "offset": 33,
      "length": 16,
      "code": {
        "startLine": 454,
        "length": 16,
        "offset": 67,
        "surroundingCode": "    @w.command()\n    @is_botAdmin4\n    async def remove(self, ctx, ID: discord.User):\n        database.db.connect(reuse_if_open=True)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b3a9896861474fb67da138f7a8bd0a8dec8b125af73d15db17b9d26a7676310d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 486,
      "offset": 30,
      "length": 16,
      "code": {
        "startLine": 484,
        "length": 16,
        "offset": 64,
        "surroundingCode": "    @w.command()\n    @is_botAdmin4\n    async def add(self, ctx, ID: discord.User, level: int):\n        database.db.connect(reuse_if_open=True)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2f5a3d6e98015a01f4b6a102c89bd652e2cb65aa607a334ab723a5f361726ee8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 530,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 528,
        "length": 9,
        "offset": 81,
        "surroundingCode": "            theproc = subprocess.Popen([sys.executable, \"main.py\"])\n\n            runThread = Thread(target=theproc.communicate)\n            runThread.start()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0e840783accd305efe10d1651f3f72531caf719f549e2222152f7e59c6d25a80"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 66,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 64,
        "length": 7,
        "offset": 86,
        "surroundingCode": "        organizationunit: Literal[\"Personal Account\", \"Team Account\"],\n    ):\n        HR_Role = discord.utils.get(interaction.user.guild.roles, id=HR_ID.r_hrStaff)\n        if HR_Role not in interaction.user.roles:\n            return await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cf9f2b1774fdccb8230ae347724bb7ef8ae438bc02242e7cffe2447888e98c83"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 102,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 100,
        "length": 7,
        "offset": 121,
        "surroundingCode": "    @app_commands.guilds(HR_ID.g_hr)\n    async def delete_gsuite(self, interaction: discord.Interaction, email):\n        HR_Role = discord.utils.get(interaction.guild.roles, id=HR_ID.r_hrStaff)\n        if HR_Role not in interaction.user.roles:\n            return await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "762dfaa068e785201913db375df7533255a6ddb0ad8f389ffa68c719c1435177"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/RedirectService.py",
      "language": "Python",
      "line": 35,
      "offset": 29,
      "length": 2,
      "code": {
        "startLine": 33,
        "length": 2,
        "offset": 114,
        "surroundingCode": "    @commands.command(alliases=[\"redirectremove\", \"removeredirect\"])\n    @is_botAdmin\n    async def rr(self, ctx, ID):\n        self.raOBJ.del_redirect(ID)\n        await ctx.send(f\"Redirect removed for {ID}\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "09499689c056c386fd5180d4720129773ad27badb5505f6a835ab5a1798f8b5e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 115,
      "offset": 15,
      "length": 9,
      "code": {
        "startLine": 113,
        "length": 9,
        "offset": 55,
        "surroundingCode": "    @commands.command()\n    @is_botAdmin\n    async def techEmbed(self, ctx):\n        embed = discord.Embed(\n            title=\"Bot Developer Commissions\", color=discord.Color.brand_green()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c7c956b3d5e23da5580dbe807ec419efbc4166b304e200891910df6cc5b017ff"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 132,
      "offset": 15,
      "length": 11,
      "code": {
        "startLine": 130,
        "length": 11,
        "offset": 39,
        "surroundingCode": "\n    @commands.command()\n    async def closeThread(self, ctx: commands.Context):\n        channel: discord.TextChannel = self.bot.get_channel(TECH_ID.ch_botreq)\n        thread: discord.Thread = ctx.channel"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "959f017fc9cf0c24dbe34de2169d475993e0d5f97b80dbe5cfabcb6b7273d79e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 146,
      "offset": 15,
      "length": 10,
      "code": {
        "startLine": 144,
        "length": 10,
        "offset": 39,
        "surroundingCode": "\n    @commands.command()\n    async def openThread(self, ctx: commands.Context):\n        channel: discord.TextChannel = self.bot.get_channel(TECH_ID.ch_botreq)\n        thread: discord.Thread = ctx.channel"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8f835b528c9976352be9faee5f110dd3a352acfb100a629317c189835d855f9d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/techCommissions.py",
      "language": "Python",
      "line": 165,
      "offset": 15,
      "length": 19,
      "code": {
        "startLine": 163,
        "length": 19,
        "offset": 45,
        "surroundingCode": "\n    @tasks.loop(seconds=60.0)\n    async def autoUnarchiveThread(self):\n        \"\"\"\n        Creates a task loop to make sure threads don't automatically archive due to inactivity."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8092a3407a814acb6f3b6439aea121d851a716089c8fae3c6bec2ad19c665132"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 38,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 36,
        "length": 14,
        "offset": 6,
        "surroundingCode": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "35b6bb5914c9cfd8adfd9a5e1706dc8dca842953777f7929e5c14c5ddc7c4fdd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 51,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 49,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b229beebff5eeb26f49c4dd6ba1e556f7d5609bb3017549322000fd3bf9c8022"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 51,
      "offset": 22,
      "length": 17,
      "code": {
        "startLine": 49,
        "length": 17,
        "offset": 23,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bd60cd5ae665eb92f16d484ecfc25d4dba96c8b14525c0b32958ac4589ac3200"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 54,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 52,
        "length": 9,
        "offset": 33,
        "surroundingCode": "    now = datetime.now(EST)\n\n    deltaTime = now - dateObj\n\n    minutes = str(deltaTime.total_seconds() // 60)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c91483b385bd8b4d0ab235f873de52cccd5b56c837b04018a3ce8ede2c93a7d2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 227,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 225,
        "length": 12,
        "offset": 96,
        "surroundingCode": "                timeout = await view.wait()\n                if not timeout:\n                    SelectedGame = var.view_response\n                else:\n                    return await ctx.send(\"Timed out, try again later.\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "599d914b35ba640f0130d2de984e32dcd8f7dfdf09e7646da53672719db30044"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 230,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 228,
        "length": 6,
        "offset": 111,
        "surroundingCode": "                else:\n                    return await ctx.send(\"Timed out, try again later.\")\n                GameID = GameDict[SelectedGame]\n                code = str(await self._create_invite(ctx.author.voice, GameID))\n                await ctx.send(\"Loading...\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a72dbae844fe1215ef2893d3e8cd3cb2cbb32fd6bb2179171c3580de09e6fd64"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 286,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 284,
        "length": 12,
        "offset": 96,
        "surroundingCode": "                timeout = await view.wait()\n                if not timeout:\n                    SelectedGame = var.view_response\n                else:\n                    return await ctx.send(\"Timed out, try again later.\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a8ff5a30f75e7de42d71bdd5f2a1015dce3bceaa46a1ec3e93ac1b8ec0be22a0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 290,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 288,
        "length": 6,
        "offset": 125,
        "surroundingCode": "                    return await ctx.send(\"Timed out, try again later.\")\n                print(SelectedGame)\n                GameID = GameDict[SelectedGame]\n                code = str(await self._create_invite(ctx.author.voice, GameID))\n                await ctx.send(f\"**Click the link to get started!**\\nhttps://discord.gg/{code}\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "db630f6e072be87d7b4699b7844a2ef624d65279704643872d8c282b5de168a0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 326,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 324,
        "length": 8,
        "offset": 75,
        "surroundingCode": "                    int(query.ChannelID)\n                )\n                GameLink = str(await channel.create_activity_invite(880218394199220334))\n                await ctx.send(f\"**Click the link to get started!**\\n{GameLink}\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a3e858fdd8efed1526d4a9d3b83d073eac8fc134f478e13777332669268792a4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 369,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 367,
        "length": 8,
        "offset": 35,
        "surroundingCode": "                )\n\n                GameLink = str(await channel.create_activity_invite(880218394199220334))\n                await ctx.send(f\"**Click the link to get started!**\\n{GameLink}\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3f71129b6c6700834aa8e2668e743a9ff0f1eb01b553d238130e46a76ca0edf8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 386,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 384,
        "length": 2,
        "offset": 103,
        "surroundingCode": "    async def rename(self, ctx, *, name=None):\n        database.db.connect(reuse_if_open=True)\n        SB = discord.utils.get(ctx.guild.roles, name=self.SB)\n        legend = discord.utils.get(ctx.guild.roles, name=self.Legend)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5b5df624b7e381a719ed7fbe59a49202d5ee65f7465928128d5e854e34e3a54d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 389,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 387,
        "length": 2,
        "offset": 79,
        "surroundingCode": "        legend = discord.utils.get(ctx.guild.roles, name=self.Legend)\n\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0fb1a0221eceb7def25735646e18e90b4458af95e481b0937537fbd5b9f7654f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 390,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 388,
        "length": 3,
        "offset": 72,
        "surroundingCode": "\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "51213228691983961c9a792dfe500fd4dd149a0b6d8b9f02fb072e3d324cf14e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 391,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 389,
        "length": 2,
        "offset": 135,
        "surroundingCode": "        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cabc7aeb3e190afcc290176b1ebdb55143632b541145b64d242d3ef85801089a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 392,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 390,
        "length": 2,
        "offset": 134,
        "surroundingCode": "        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ef0079c3ec75ae8d3f629e3189e4e031fd757ee3ef488bde1e28eaa150a6e367"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 393,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 391,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d12b8c145df4aa341774bb4650cb7828b7cad224592a78a13b74607d6145fc15"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 394,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 392,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ed15e81da28d9dbe0902a452a75906e734ab7c5c46cc54eed1cbd829377723ce"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 396,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 394,
        "length": 4,
        "offset": 71,
        "surroundingCode": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "23db0d46832395dea87e680f166a073edb4b7a770431ec2504758bb26bbb390c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 397,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 395,
        "length": 4,
        "offset": 75,
        "surroundingCode": "\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d820b34e9e2fcaa83702874bf98314006ff7c063a3df81f32b9d7ab333969e6c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 398,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 396,
        "length": 4,
        "offset": 140,
        "surroundingCode": "        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7ab4ac2bf5593b1a599d61a4b07cfc5ef76490ece916cd27171d3ac915be2465"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 399,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 397,
        "length": 3,
        "offset": 140,
        "surroundingCode": "        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "403a779d73fc62952d9189aa0c6ef1abacb39e46cf305c44f9d9b50fd2e13779"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 400,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 398,
        "length": 3,
        "offset": 138,
        "surroundingCode": "        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "58d018e277e1044c97667dfbab7e6c34293e14dca44f790d81fe4f03d459dae9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 401,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 399,
        "length": 3,
        "offset": 136,
        "surroundingCode": "        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d416f59f053255155530feb12d600260ff30ce787b35e247e6f5e76ec90b2904"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 402,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 400,
        "length": 3,
        "offset": 136,
        "surroundingCode": "        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a88e9c33644ec880412a1a91866726f2dd02082a691cb5771355d7af008d4c12"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 403,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 401,
        "length": 3,
        "offset": 136,
        "surroundingCode": "        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ac45be122b425cf19cd9fe03d79f9609cd8060054c0cdd8362e0933ca41ed9c9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 404,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 402,
        "length": 3,
        "offset": 136,
        "surroundingCode": "        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n\n        roleList = ["
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8f2d319a5535d3ce53dd7d054544253eec06eeb43a55e88d24c2ec9bcf5da537"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 406,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 404,
        "length": 8,
        "offset": 73,
        "surroundingCode": "        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n\n        roleList = [\n            SB,\n            AT,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4e3cd10e20038daf6678d54f4de6a1c43fbe8745f5c98fbad2da6073f1001f6f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 558,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 556,
        "length": 10,
        "offset": 89,
        "surroundingCode": "                )\n                print(f\"T: {query.TutorBotSessionID}\")\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(\n                    query.datetimeObj\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "88b6a42b5e1e303ce0cdc784249aa4602a4d141d3af2171869280eea9f5f5e48"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 563,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 561,
        "length": 6,
        "offset": 73,
        "surroundingCode": "\n                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "80cfbbcfae62fc7bf9794bf10d5fd4a9bcd057a3db5cfb52765453230a3425d4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 564,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 562,
        "length": 6,
        "offset": 125,
        "surroundingCode": "                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "004b0f2297c12e1054d563122b410da9f50244ea0d3a49f74afc53f887a81c71"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 583,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 581,
        "length": 12,
        "offset": 64,
        "surroundingCode": "\n                print(query.TutorBotSessionID)\n                tutorSession = database.TutorBot_Sessions.select().where(\n                    database.TutorBot_Sessions.SessionID == query.TutorBotSessionID\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "80cfd6926392afbbfeb8c2867b59f312b0e42eb4e913ccf4c8720fc8ac03f267"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 590,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 588,
        "length": 12,
        "offset": 63,
        "surroundingCode": "\n                if tutorSession.exists():\n                    tutorSession = tutorSession.get()\n\n                    student = self.bot.get_user(tutorSession.StudentID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "dd615d6db9be9a75b9ecf9779bf721e84106b2f4d4200ae66b0615a395ba5396"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 595,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 593,
        "length": 6,
        "offset": 89,
        "surroundingCode": "                    tutor = self.bot.get_user(tutorSession.TutorID)\n\n                    HOURCH = self.bot.get_channel(self.TutorLogID)\n\n                    hourlog = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c10ed3274b8ee7c63d21e3f7a1473a37c16f1bd78539277762bd1cbc9ffe7856"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 662,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 660,
        "length": 10,
        "offset": 61,
        "surroundingCode": "                )\n                tag.save()\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(q.datetimeObj)\n\n                day, now = showTotalMinutes(VCDatetime)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "22f079248006241dc84436b20e23c57edaa729ed3289d484a2fe1c01e2e6fb8f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 665,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 663,
        "length": 6,
        "offset": 73,
        "surroundingCode": "\n                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "caf12a5bbec2dfa2fa673f688c1a0ee5dc8ed93163976208ff5cc14e013eaa5c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 666,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 664,
        "length": 6,
        "offset": 125,
        "surroundingCode": "                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "981064e28206cf0318da3689e9220361cc5ff5d14aa758493d5e353d560c0760"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 683,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 681,
        "length": 12,
        "offset": 60,
        "surroundingCode": "\n                print(q.TutorBotSessionID)\n                tutorSession = database.TutorBot_Sessions.select().where(\n                    database.TutorBot_Sessions.SessionID == q.TutorBotSessionID\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b1828a7ee803cf2a90ae26fa8d986cac97a955853b56c79b356ff3edf87deada"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 687,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 685,
        "length": 12,
        "offset": 80,
        "surroundingCode": "                )\n                if tutorSession.exists():\n                    tutorSession = tutorSession.get()\n\n                    student = self.bot.get_user(tutorSession.StudentID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "69c74558271b5b7feb1560a2094b3cd2f475cf444d9be261477be57579f5891c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 692,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 690,
        "length": 6,
        "offset": 89,
        "surroundingCode": "                    tutor = self.bot.get_user(tutorSession.TutorID)\n\n                    HOURCH = self.bot.get_user(self.TutorLogID)\n\n                    hourlog = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "46720d7a23838cf5c2b84fe3aeb325451d529d83cbf2b4491c263430e955a7b1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 812,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 810,
        "length": 10,
        "offset": 61,
        "surroundingCode": "                    .get()\n                )\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(q.datetimeObj)\n\n                day, now = showTotalMinutes(VCDatetime)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ca2b283e58fb38e1138fcb3f232cbdca1ce99b8f34a836aa9d64b15ac76a6b80"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 868,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 866,
        "length": 3,
        "offset": 62,
        "surroundingCode": "        member = ctx.guild.get_member(ctx.author.id)\n\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0153eb90bdd5d650d5b572930fed84b772d5432d282a5b8047cf2083313ba4f1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 869,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 867,
        "length": 5,
        "offset": 62,
        "surroundingCode": "\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e1bf24d4e029b756802b027b0f7884605711e7ec42360c65928e0921d586c17f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 870,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 868,
        "length": 4,
        "offset": 112,
        "surroundingCode": "        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8bf77fca9ca987d5b95419987470977d084f4789c8b14806fc346e8e201d2c2a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 871,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 869,
        "length": 3,
        "offset": 125,
        "surroundingCode": "        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0a9d1399ca9f3084555cfd465440884e3da088e9ac86f9f37fc968ed7c475d2d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 872,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 870,
        "length": 4,
        "offset": 138,
        "surroundingCode": "        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8eb0583600650965694497c637f20e01bdde359da454d3735ce0262be9a27c39"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 873,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 871,
        "length": 2,
        "offset": 138,
        "surroundingCode": "        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0137b5bc77d0c548c7686a3998b6f9aa318a0b5b8c9638a7b7148e033a116eec"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 874,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 872,
        "length": 2,
        "offset": 136,
        "surroundingCode": "        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a10a2b1724c724e08d5fa199a0ba1e71b26dfb6833e1b49e67cd9a67326551d9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 875,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 873,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6afdca0ce9aa09409e0e816f1ceab3d5e9ea7cb3b93ff257a9bfabea8d4159bc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 877,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 875,
        "length": 2,
        "offset": 71,
        "surroundingCode": "        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "eafeeec498cefe3826feed245a59d0a6d83bcc87abf1f4ee4516d9fca69b0a72"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 878,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 876,
        "length": 2,
        "offset": 82,
        "surroundingCode": "\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")\n        roles = [BM, SE, E, OWNER]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ae4de89ab630c0ee97e2c8113aa9145f170299d223756fb22bca2922f06490d4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 879,
      "offset": 9,
      "length": 1,
      "code": {
        "startLine": 877,
        "length": 1,
        "offset": 150,
        "surroundingCode": "        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")\n        roles = [BM, SE, E, OWNER]\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "03fc9a1bedee8458e38d51ad16b0ed7f35f98b7f189c7bba7d419c1ae549abfa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 911,
      "offset": 21,
      "length": 4,
      "code": {
        "startLine": 909,
        "length": 4,
        "offset": 56,
        "surroundingCode": "\n                if query.exists():\n                    LOCK: database.VCChannelInfo = (\n                        database.VCChannelInfo.select()\n                        .where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "351bd1c97962162acc944be7cb6908ddc44d24f32b8a21f1f4433d983445a7e0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 990,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 988,
        "length": 2,
        "offset": 78,
        "surroundingCode": "    @commands.command()\n    async def settutor(self, ctx, tutorcode):\n        TR = discord.utils.get(ctx.guild.roles, name=self.TutorRole)\n\n        if TR not in ctx.author.roles or ctx.guild.id == STAFF_ID.g_staff:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "103a3b15ca967f1fe71bb05f59e6fcbfa2610cd3e9d068608ac734b736f0e75f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1007,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 1005,
        "length": 12,
        "offset": 64,
        "surroundingCode": "                return await ctx.send(embed=embed)\n\n            tutorSession = database.TutorBot_Sessions.select().where(\n                database.TutorBot_Sessions.SessionID == tutorcode\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a3f2890c1742060e6c6c4cebe7b04d0207f1612838697a38f6f776935ca6a628"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1011,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 1009,
        "length": 12,
        "offset": 68,
        "surroundingCode": "            )\n            if tutorSession.exists():\n                tutorSession = tutorSession.get()\n                if member.voice.channel.category_id in self.categoryID:\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "592939cba9492e5bd8eca10a0f2c6e9db447841974cb6874f0f1a6b76157ecf2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1099,
      "offset": 21,
      "length": 4,
      "code": {
        "startLine": 1097,
        "length": 4,
        "offset": 56,
        "surroundingCode": "\n                if query.exists():\n                    LOCK: database.VCChannelInfo = (\n                        database.VCChannelInfo.select()\n                        .where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f0586bd9abe56aca301d133a369d614d29b7b9eb65c0b1115cfe57a52af072d8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1179,
      "offset": 33,
      "length": 10,
      "code": {
        "startLine": 1177,
        "length": 10,
        "offset": 111,
        "surroundingCode": "    @commands.command()\n    @commands.cooldown(1, 5, commands.BucketType.user)\n    async def permit(self, ctx, typeAction, user: discord.Member = None):\n        database.db.connect(reuse_if_open=True)\n        member = ctx.guild.get_member(ctx.author.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bf6b4fb73567e56719fc111f50f1b572ea45585a5a97be6117a45b86136d97f4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1279,
      "offset": 29,
      "length": 9,
      "code": {
        "startLine": 1277,
        "length": 9,
        "offset": 99,
        "surroundingCode": "                                    randomlist.append(x.display_name)\n\n                            formatVer = \"\\n\".join(randomlist)\n\n                            embed = discord.Embed("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4e471e756824e544cc57499552d759aa2dd65e996c60f3973126faaa453673dc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1354,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1352,
        "length": 2,
        "offset": 62,
        "surroundingCode": "        member = ctx.guild.get_member(ctx.author.id)\n\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cb7da498ea95614b58f185047731b6b2a50fc08032aa6f676eed32eedc972b34"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1355,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 1353,
        "length": 3,
        "offset": 72,
        "surroundingCode": "\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "65630c391c08f4a1e10081bd8320d67955618c5baa64893b6d3a9147c03944f1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1356,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1354,
        "length": 2,
        "offset": 135,
        "surroundingCode": "        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a98da44fdceb919cf00101a94182b07dd523d3cff928e7b698e7545068793baf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1357,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1355,
        "length": 2,
        "offset": 134,
        "surroundingCode": "        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "84daff1370a27f3ff1caa7642afb5745618138b76449b6e90c47cf4ad930533a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1358,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1356,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bbd66f014315f4d2ed6b28588aaa69d1ea2fc85d14d3979a357727fb6d92d51f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1359,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 1357,
        "length": 2,
        "offset": 132,
        "surroundingCode": "        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        roleList = [MT, MAT, TT, AT, VP, CO]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6079f075bf6ec96b8848e51d4689a46265c24c013d4ab644a60e3fe95190ca13"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1361,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 1359,
        "length": 8,
        "offset": 71,
        "surroundingCode": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        roleList = [MT, MAT, TT, AT, VP, CO]\n\n        voice_state = member.voice"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6d728beaa37d53e7121ff71986f8010e6755a3f00b131bba380ceadb4547e34a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1393,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 1391,
        "length": 10,
        "offset": 84,
        "surroundingCode": "                if query.exists():\n                    try:\n                        voiceLIMIT = int(new_voice_limit)\n                    except:\n                        return await ctx.send(f\"{Emoji.deny} Not a valid number!\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b3aeee45c3eb5efb8c310b1610f88c10d2ed64960758445934cb755bdbee1617"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1550,
      "offset": 15,
      "length": 7,
      "code": {
        "startLine": 1548,
        "length": 7,
        "offset": 56,
        "surroundingCode": "\n    @commands.command(aliases=[\"start\"])\n    async def startVC(self, ctx):\n        embed = discord.Embed(\n            title=\"Private Channels\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "148b91856b4a4cccfcb510cd4d78ed0ff658b4ae179b7876e5520b3f65ea9305"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 27,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 25,
        "length": 14,
        "offset": 6,
        "surroundingCode": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c12a75dee80fd934e6b1bb6a977016d2d53152b7a987b36a73d1dca83a0c208e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 39,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 37,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6e8928b4a05ae71f66f301b7b203ebc66f682224c9ce5ed67ce3b9edd60c65c6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 39,
      "offset": 22,
      "length": 17,
      "code": {
        "startLine": 37,
        "length": 17,
        "offset": 23,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2a7468d0c1b1f87a935718b5384b2d19c0f5879d925f20d7e1c287c27fa98365"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 42,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 40,
        "length": 9,
        "offset": 33,
        "surroundingCode": "    now = datetime.now(EST)\n\n    deltaTime = now - dateObj\n\n    totalmin = deltaTime.total_seconds() // 60"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "42d1837afc461570025044c8700c7af4b27751752e8ec30199e1e2fa672a6c97"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 49,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 47,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f5123e5f4781d23c7ce815e765fa132561ad945f3f48bf07fce8e8849c37b9e4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 53,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 51,
        "length": 10,
        "offset": 94,
        "surroundingCode": "        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n    )\n    ColumnDict = {\n        0: q.ch_tv_console,\n        1: q.ch_tv_startvc,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "128fcfd27d21a508a7f9deb748b099c87b4bd595e33e36a14d3b7416bb77d24f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 127,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 125,
        "length": 10,
        "offset": 107,
        "surroundingCode": "        database.db.connect(reuse_if_open=True)\n        print(self.LobbyStartIDs[member.guild.id])\n        lobbyStart = member.guild.get_channel(self.LobbyStartIDs[member.guild.id])\n        if lobbyStart == None:\n            try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ccc52d3c1b3f967ada2f938b99666f0a4ddb3f3cf4ea3be18087733971e8c528"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 130,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 128,
        "length": 10,
        "offset": 64,
        "surroundingCode": "        if lobbyStart == None:\n            try:\n                lobbyStart = self.bot.get_channel(\n                    self.LobbyStartIDs[member.guild.id]\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "572f95cbe2160032f982ebc6f3faf4aef8758e4136c5ed4a2345bef3a65130ca"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 147,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 145,
        "length": 11,
        "offset": 24,
        "surroundingCode": "        ):\n\n            acadChannel = self.bot.get_channel(self.channel_id[member.guild.id])\n            query = database.VCChannelInfo.select().where(\n                (database.VCChannelInfo.authorID == member.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1901027ef3fff00896917f80cfab703345caf27c32a8091746efe6a4bcadebab"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 153,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 151,
        "length": 11,
        "offset": 104,
        "surroundingCode": "                & (database.VCChannelInfo.GuildID == before.channel.guild.id)\n            )\n            ignoreQuery = database.IgnoreThis.select().where(\n                (database.IgnoreThis.authorID == member.id)\n                & (database.IgnoreThis.channelID == before.channel.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "52623e4af2f35f9e5e91637ab5651be3ea7433fb2f664fb82d0d4b011b8b8105"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 183,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 181,
        "length": 12,
        "offset": 59,
        "surroundingCode": "                )\n                try:\n                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e1b8f0abddad5d359d369be90c68760023b19e4d2a7c0d199f08da87eebde7ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 185,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 183,
        "length": 12,
        "offset": 122,
        "surroundingCode": "                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None\n\n                if query.ChannelID == str(before.channel.id):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "12f2d72899a655f14e2be1d90f0ecd26412a354e780d5ba9fb43be2072cb788c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 244,
      "offset": 29,
      "length": 10,
      "code": {
        "startLine": 242,
        "length": 10,
        "offset": 97,
        "surroundingCode": "                                .get()\n                            )\n                            VCDatetime = pytz.timezone(\"America/New_York\").localize(\n                                query.datetimeObj\n                            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a48eeb69e253a39328547480e1e13002a0425e19a948421231c485bbd5c2fd4d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 249,
      "offset": 29,
      "length": 6,
      "code": {
        "startLine": 247,
        "length": 6,
        "offset": 97,
        "surroundingCode": "\n                            day, now = showTotalMinutes(VCDatetime)\n                            daySTR = int(VCDatetime.timestamp())\n                            nowSTR = int(now.timestamp())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "81370e173aee683a40bb09abc0f3666f552d845be8916a7418bea35b6da7262b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 250,
      "offset": 29,
      "length": 6,
      "code": {
        "startLine": 248,
        "length": 6,
        "offset": 161,
        "surroundingCode": "                            day, now = showTotalMinutes(VCDatetime)\n                            daySTR = int(VCDatetime.timestamp())\n                            nowSTR = int(now.timestamp())\n\n                            query.delete_instance()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "25d94eabe217b4ff0cfeab7a5742d971316498d9b7c3d7b884a29af391863931"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 273,
      "offset": 33,
      "length": 12,
      "code": {
        "startLine": 271,
        "length": 12,
        "offset": 138,
        "surroundingCode": "                                    content=member.mention, embed=embed\n                                )\n                                tutorSession = (\n                                    database.TutorBot_Sessions.select().where(\n                                        database.TutorBot_Sessions.SessionID"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "69b49e1e88fb6b4db226fc34952f889b43561b7d632675cbaf2f6c64ce5f2662"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 281,
      "offset": 37,
      "length": 12,
      "code": {
        "startLine": 279,
        "length": 12,
        "offset": 95,
        "surroundingCode": "                                if tutorSession.exists():\n\n                                    tutorSession = tutorSession.get()\n\n                                    student = self.bot.get_user("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "301602e03a614b4c515dfe540fe27dd07a376bfa78a6640760101c0e08ca2d43"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 289,
      "offset": 37,
      "length": 6,
      "code": {
        "startLine": 287,
        "length": 6,
        "offset": 135,
        "surroundingCode": "                                        tutorSession.TutorID\n                                    )\n                                    HOURCH = self.bot.get_channel(\n                                        self.TutorLogID\n                                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1f1378df85e89342329e2f86c4861c9fd66ccc33e8a4e4261867007589f0ad6c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 343,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 341,
        "length": 11,
        "offset": 54,
        "surroundingCode": "            and not member.bot\n        ):\n            acadChannel = self.bot.get_channel(\n                self.LobbyStartIDs[member.guild.id]\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "50428278042513909e0819611b56837f2c054eaa35f584612537055ba97558c4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 347,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 345,
        "length": 2,
        "offset": 81,
        "surroundingCode": "            )\n            print(acadChannel, after.channel.guild.id)\n            SB = discord.utils.get(member.guild.roles, name=self.SB)\n\n            legend = discord.utils.get(member.guild.roles, name=self.Legend)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d4282dda8db6cd8b56f2ba2c921d1e0e437f2c98014e0b73e945a4640294b741"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 351,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 349,
        "length": 2,
        "offset": 90,
        "surroundingCode": "            legend = discord.utils.get(member.guild.roles, name=self.Legend)\n\n            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "72483e5db4b3c24c50eb4489f49e2cde0478709c7d4712bca1b9d33240096d98"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 352,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 350,
        "length": 3,
        "offset": 83,
        "surroundingCode": "\n            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2001b9be0a35e271903d9b518315728bc60c149ac978d31ac8a65a46113cc65c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 353,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 351,
        "length": 2,
        "offset": 153,
        "surroundingCode": "            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e2d77d9870c332709005110160a7fed172371ef7ec1e22de4436ba20ff1395d1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 354,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 352,
        "length": 2,
        "offset": 152,
        "surroundingCode": "            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bc0175546f9e7dacadbe7280d3ca2ca9609714fa3daef130df016662e2d853fe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 355,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 353,
        "length": 2,
        "offset": 150,
        "surroundingCode": "            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d33021c7b250a672d8f1c29c2c07e3ed1417b279d87a7bf047fcd571e4972ec1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 356,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 354,
        "length": 2,
        "offset": 150,
        "surroundingCode": "            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)\n\n            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d1bed80cd0e7d67da745ab99b0db394b190f74abba58b6ba3f5fa58a277fb5ca"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 358,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 356,
        "length": 8,
        "offset": 82,
        "surroundingCode": "            CO = discord.utils.get(member.guild.roles, name=self.CO)\n\n            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]\n\n            TutorRole = discord.utils.get(member.guild.roles, name=self.TutorRole)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7f42571887ec8f0a0055cefbeb03e2fb7cecdfb9713e1a733d95f0af7e3b4746"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 360,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 358,
        "length": 9,
        "offset": 74,
        "surroundingCode": "            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]\n\n            TutorRole = discord.utils.get(member.guild.roles, name=self.TutorRole)\n\n            category = discord.utils.get("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "02f2c3aaaa22b430e74c4a18c709a83114e7aefe1e474d367386172dded4ce09"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 381,
      "offset": 17,
      "length": 13,
      "code": {
        "startLine": 379,
        "length": 13,
        "offset": 61,
        "surroundingCode": "            )\n            if query.exists():\n                moveToChannel = (\n                    database.VCChannelInfo.select()\n                    .where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f9b5211c38d09a89acc8b9f184e3c1a7eb2c6b844d75c307d2d0bcec5a481fe0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 397,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 395,
        "length": 12,
        "offset": 59,
        "surroundingCode": "                )\n                try:\n                    tutorChannel = self.bot.get_channel(\n                        int(moveToChannel.ChannelID)\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ba1b9512ff04f94bf678dc4aa312b9a6271479e34c1ea1938d9f39906322cc45"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 24,
      "offset": 15,
      "length": 12,
      "code": {
        "startLine": 22,
        "length": 12,
        "offset": 43,
        "surroundingCode": "\n    @tasks.loop(seconds=10)\n    async def TTSWeekCheck(self):\n        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3d8031e9c7e64a5798982a38b974ef29837c1ad746855ceaf98010a59ff36df0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 26,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 24,
        "length": 10,
        "offset": 88,
        "surroundingCode": "    async def TTSWeekCheck(self):\n        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()\n        timeNow = now.time()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c1c18a575dc706aa306ae09d3498527b942bf75156cca02c69be80f945f28c33"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 27,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 25,
        "length": 7,
        "offset": 92,
        "surroundingCode": "        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()\n        timeNow = now.time()\n\n        queryLeaderboard = StudyVCLeaderboard.select()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "65bdcbffb812948b30ca1a152a815c6a4b2717ec240feb26445f1d1e8f7d090d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 29,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 27,
        "length": 16,
        "offset": 38,
        "surroundingCode": "        timeNow = now.time()\n\n        queryLeaderboard = StudyVCLeaderboard.select()\n        entries = [entry.id for entry in queryLeaderboard]\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3415d2e664f9bce5037ae80f8187f6226f9843fbdd030d099e2326c98edc3b6e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 33,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 31,
        "length": 9,
        "offset": 127,
        "surroundingCode": "\n        if weekdayNow == 1 and (now - self.lastReset >= datetime.timedelta(days=7)) and timeNow >= self.midnight:\n            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(StudyVCLeaderboard.id == entry)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "63dc79142887b527f0ac12ed5e2420fb0737147edcd91d298060ea79ef7499fc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 35,
      "offset": 17,
      "length": 16,
      "code": {
        "startLine": 33,
        "length": 16,
        "offset": 78,
        "surroundingCode": "            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(StudyVCLeaderboard.id == entry)\n                queryLeaderboard = queryLeaderboard.get()\n                queryLeaderboard.TTSWeek = 0"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "708ba9e5119b53592cd53100a2271e0192c8f4a04a4181a03f36797ea58855fe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyLoop.py",
      "language": "Python",
      "line": 36,
      "offset": 17,
      "length": 16,
      "code": {
        "startLine": 34,
        "length": 16,
        "offset": 149,
        "surroundingCode": "            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(StudyVCLeaderboard.id == entry)\n                queryLeaderboard = queryLeaderboard.get()\n                queryLeaderboard.TTSWeek = 0\n                queryLeaderboard.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6186cc5d75d3320fd6995049157ce0506a0d1c6daf022f214336711b4488fd3a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 46,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 44,
        "length": 14,
        "offset": 6,
        "surroundingCode": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b445bb2b5d19e27030f504ac090dc24c4352dfa7aca1a12ef84d7acdb3f1e0e4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 58,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 56,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "59affadac68a1f050ec9eacd8f1fa2653c82c4ec774275f9006e2156e57005e8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 58,
      "offset": 22,
      "length": 17,
      "code": {
        "startLine": 56,
        "length": 17,
        "offset": 23,
        "surroundingCode": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0ba39427167f228a9a0820d9869ed4b2e4747f64e225019f997fae110f6a2c82"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 60,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 58,
        "length": 7,
        "offset": 73,
        "surroundingCode": "def showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)\n\n    deltaTime = now - dateObj"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7a9c0e6174cb635d8d0a115d58255afc52f08c1694f94a822c8a8b2f26ccc4f7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 62,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 60,
        "length": 9,
        "offset": 71,
        "surroundingCode": "    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)\n\n    deltaTime = now - dateObj\n\n    totalmin = deltaTime.total_seconds() // 60"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fc1f6439f1d5361e518f0ab725b23dfa9d2b833623b8f621b28f045b7c4cc889"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 69,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 67,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef _getXPForNextLvl(lvl: int):\n    \"\"\"\n    Get the XP the user needs to reach the next level."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6049c350b21631c455149dead9209fcec054a85ee7270106e2d314e6a5d6be90"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 78,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 76,
        "length": 8,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    xpNeeded = (5 * lvl * lvl) + (50 * lvl) + 100\n\n    return xpNeeded"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "91b78bac6e149c0e0d7699c08781e5c5a5732c6ffe0560b5d0933c3b5aeabb62"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 83,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 81,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef _shortNumber(number: int) -> str:\n    \"\"\"\n    Shorts a number and adds the number abbreviation to it."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ab8b48ce7e55e942299cb5114b820d6dfec4fad1867ea9aba172a8ab19594ecd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 96,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 94,
        "length": 9,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    numberStr = ...  # type: str\n\n    if number < 1000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a42132fa3bce9e67feaf65cc0e4bf9fae879bd9dce12545e1fbd7f1139f5b2c9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 99,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 97,
        "length": 9,
        "offset": 31,
        "surroundingCode": "\n    if number < 1000:\n        numberStr = f\"{number}\"\n\n    elif number < 1000000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b30c100fa853490c72c3e6c260f74402713e9bd571e6099b02f7800c24a9faeb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 104,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 102,
        "length": 9,
        "offset": 65,
        "surroundingCode": "        number /= 1000\n        number = round(number, 2)\n        numberStr = f\"{number}K\"\n\n    elif number < 1000000000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "29f074219146becb1e2c3900a930d0ffbebe06c5e32f107c516f8be39fc110a5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 109,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 107,
        "length": 9,
        "offset": 68,
        "surroundingCode": "        number /= 1000000\n        number = round(number, 2)\n        numberStr = f\"{number}M\"\n\n    elif number < 1000000000000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9803b22c89c3837cb3c1c12e4ea85e0c193e9bff99c0245bfb86dfb9d5d90b02"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 114,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 112,
        "length": 9,
        "offset": 71,
        "surroundingCode": "        number /= 1000000000\n        number = round(number, 2)\n        numberStr = f\"{number}B\"\n\n    elif number < 1000000000000000:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a4426a9ebd4c2edfe8588fd580a1e5e8394419e9aaf1fb88358e3c1d06c385c6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 119,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 117,
        "length": 9,
        "offset": 74,
        "surroundingCode": "        number /= 1000000000000\n        number = round(number, 2)\n        numberStr = f\"{number}T\"\n\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "86253463a15490e036e85c07cf6d00c1f19fba1cecf11b7cd092170fe5b5f816"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 127,
      "offset": 11,
      "length": 22,
      "code": {
        "startLine": 125,
        "length": 22,
        "offset": 12,
        "surroundingCode": "\n\nasync def addLeaderboardProgress(member: discord.Member):\n    \"\"\"\n    Updates the data in the database table `StudyVCLeaderboard` of a specific member and adds level roles to the member if needed."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a31cd391d803ec671b75f1cabb43f493acac23e88b0591547eaa3d0092ac9979"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 135,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 133,
        "length": 11,
        "offset": 80,
        "surroundingCode": "    :return: Whenever the user has been found in the database: bool\n    \"\"\"\n    xpPerMinute = 30\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9181449b1d0dac4e27ad6c6a115421cb85169074857ccc3812b51af51882a933"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 137,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 135,
        "length": 13,
        "offset": 26,
        "surroundingCode": "    xpPerMinute = 30\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3553ff4813e849e55cc0fdacd723799ccbdf1c5e4403929d00a8a7be563c2ecc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 139,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 137,
        "length": 13,
        "offset": 136,
        "surroundingCode": "    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "72d0c733c3396333af7ddc6d2a589af7477be858fc0e320461c6fd1a626bce7f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 141,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 139,
        "length": 16,
        "offset": 118,
        "surroundingCode": "        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where(\n            database.StudyVCLeaderboard.discordID == member.id)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f32c4036ff52dc7e78fc708c653d9410767cbec0947324e90bb83fd463c6c282"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 144,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 142,
        "length": 8,
        "offset": 73,
        "surroundingCode": "            database.StudyVCLeaderboard.discordID == member.id)\n\n        isNewLvl = False\n        if leaderboardQuery.exists():\n            leaderboardQuery = leaderboardQuery.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c4d32ff62af0c6c841c528ed805b99cbdbb6657fbe23e60b700ff9b7e53900ac"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 146,
      "offset": 13,
      "length": 16,
      "code": {
        "startLine": 144,
        "length": 16,
        "offset": 75,
        "surroundingCode": "        isNewLvl = False\n        if leaderboardQuery.exists():\n            leaderboardQuery = leaderboardQuery.get()\n            leaderboardQuery.TTS = totalmin + leaderboardQuery.TTS\n            leaderboardQuery.TTSWeek = totalmin + leaderboardQuery.TTSWeek"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "779d2e2a72f5ef9a1857751b3e97c0954faa1697e48f1623132e161c4af720bd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 151,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 149,
        "length": 10,
        "offset": 93,
        "surroundingCode": "            leaderboardQuery.totalSessions = leaderboardQuery.totalSessions + 1\n\n            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "644a5ad89e8d8895803a4594011a1f1ea395a31ab950d94af20fe2fdccebae73"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 152,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 150,
        "length": 9,
        "offset": 61,
        "surroundingCode": "\n            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bb6d2ac19de57dfd5b99b3f78cf8390b5a87265a71163b2001beb35293ecff12"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 153,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 151,
        "length": 14,
        "offset": 104,
        "surroundingCode": "            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP\n\n            xpNeeded = _getXPForNextLvl(currentLvl)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5a9f1df35ef1cab4dd853112630342fb1e0a110d79ee44596d196f1fe6bcc4a0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 155,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 153,
        "length": 8,
        "offset": 67,
        "surroundingCode": "            currentTotalXP = leaderboardQuery.totalXP\n\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c845c87f919d8a681228947f7a68f99157655de0a9a21c436f419f2a6a276893"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 156,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 154,
        "length": 8,
        "offset": 65,
        "surroundingCode": "\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c5c2f1cb0171fbe4e0ced53a34c54bc99c243b5940476af68c2aedc69aff19c6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 158,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 156,
        "length": 5,
        "offset": 59,
        "surroundingCode": "            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6e5737d6c54d743b54d5803a89201d0ac1a8783d2c24ed8c684ed9790a318328"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 159,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 157,
        "length": 10,
        "offset": 54,
        "surroundingCode": "\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "358b0b09a4fea991da9a768492d00fd1145fc676a4aa5e4cf2ecefea5ea0a1d0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 160,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 158,
        "length": 6,
        "offset": 104,
        "surroundingCode": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e58824eab5b798b1a063ccb48d5068c8edc3b106f5af07a903c6300ae02fff94"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 164,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 162,
        "length": 8,
        "offset": 51,
        "surroundingCode": "            if newXP >= xpNeeded:\n\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "96e60023d2daa3eb61df972edf67b8a98600e86394a071759f1d3ee7a50b7c54"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 165,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 163,
        "length": 11,
        "offset": 49,
        "surroundingCode": "\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:\n                    newXP -= newXPNeeded"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7f822056e960460e35e5c4327aa64b7876fe86d7c4125274c7a517a753c7d09a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 169,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 167,
        "length": 11,
        "offset": 93,
        "surroundingCode": "                    newXP -= newXPNeeded\n                    newLvl += 1\n                    newXPNeeded = _getXPForNextLvl(newLvl)\n\n            leaderboardQuery.xp = newXP"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2992f62b4243c958d002078f2334f1a12d217557a5082f8b1a45ad2fd1e2f399"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 178,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 176,
        "length": 10,
        "offset": 27,
        "surroundingCode": "\n        else:\n            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cecb977bede568a90012fef347b8efd52ca694a4c859961a2b7c212bb381c56e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 179,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 177,
        "length": 9,
        "offset": 53,
        "surroundingCode": "        else:\n            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8036be97e9768d0c9c4a7c6b7776c625fab9d47da4d53586bea415d72f5bba61"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 180,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 178,
        "length": 14,
        "offset": 65,
        "surroundingCode": "            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0\n\n            xpNeeded = _getXPForNextLvl(currentLvl)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6b80478dfbc052965fbdaa7e61c0890d5594b3e8e42d25411c3fc9474d1a507b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 182,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 180,
        "length": 8,
        "offset": 44,
        "surroundingCode": "            currentTotalXP = 0\n\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c192d9be8b113f45c9359e69ba0a17de037aeff72031305a340468b039114c13"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 183,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 181,
        "length": 8,
        "offset": 65,
        "surroundingCode": "\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5c41613e76ae1e3ce451eb3d4aa1df66281ba7da5f144725e92b25b2aab00058"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 185,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 183,
        "length": 5,
        "offset": 59,
        "surroundingCode": "            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "31e7252065f18ddcab1748a116fc24d601a3fe4db464352e70b5f2b8632e46b9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 186,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 184,
        "length": 10,
        "offset": 54,
        "surroundingCode": "\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6beac80dc03a81de3a939441eba84eff08676579d2415959758f7f6755425bd8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 187,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 185,
        "length": 6,
        "offset": 104,
        "surroundingCode": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0316d7471a7e63bd5ba3eb99e433d0b344f2b4c20b961f8533bd6b28d14cff83"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 191,
      "offset": 17,
      "length": 8,
      "code": {
        "startLine": 189,
        "length": 8,
        "offset": 51,
        "surroundingCode": "            if newXP >= xpNeeded:\n\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "94aed7eb5762f71b10107bc79e9539816ea5ec1774933c973cdbed2e42896ef9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 192,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 190,
        "length": 11,
        "offset": 49,
        "surroundingCode": "\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:\n                    newXP -= newXPNeeded"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1a5916f5912bcfecf478961d7bc1c355c980ba61e40d60c748674adcfb96a8f1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 196,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 194,
        "length": 11,
        "offset": 93,
        "surroundingCode": "                    newXP -= newXPNeeded\n                    newLvl += 1\n                    newXPNeeded = _getXPForNextLvl(newLvl)\n\n            q = database.StudyVCLeaderboard.create("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "db502d0394919b14a114e9b4260a4821d3cd22c1ba8b909d0251e00d9d9b31cf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 209,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 207,
        "length": 7,
        "offset": 30,
        "surroundingCode": "            q.save()\n\n        roleStr = \"\"\n        if newLvl < 5:\n            pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "35992c0bec3a8364f267e96f7b8f9627f7f47e77841855900ea31000912191ab"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 217,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 215,
        "length": 7,
        "offset": 48,
        "surroundingCode": "\n            if currentLvl < 5:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "845d6cd04bf4e3bd037866c8e173d83c42e6ae73f7bdf215600abd6645822ed5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 224,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 222,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 10:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6015897d453fe2e19547dfa00f850f2645edd6a206011f03c9340e04b794b3fb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 231,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 229,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 20:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5a9cc9887f0e2158b133bff89deec489c592c195a0babeb85b242fa86b27a8cf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 238,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 236,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 30:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f93ad0c8718d4515f79d07600e1f4e38cdae75e1cbc7e741b25f153f7e2d76e8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 245,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 243,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 40:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "710f6e907bd217105f88450b68f4913a2065a6dd9f98a2a0d2128d090f51aa09"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 252,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 250,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 50:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9d0266fedd4d00301460a186784470e74d31b2b91c4f2307a67712b4c1f650fb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 259,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 257,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 60:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "aee4e3b4288c70285e6c17270e877f8c152b89bece2fe415acfb11baec0981d9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 266,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 264,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 70:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3a8c9c9123f2e6186a235c05f88b3d83ace89a328118aa781267c5cd7644bffe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 273,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 271,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 80:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "aa6770916702b9b4f14e2aa02373b6c2c71014177b15f1939ad8ed86d6328959"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 280,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 278,
        "length": 7,
        "offset": 49,
        "surroundingCode": "\n            if currentLvl < 90:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f1ec024fe760fa9a5156ed470eb5d9aca3f119c974d99ef1f1b3b0dd15a4892f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 287,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 285,
        "length": 7,
        "offset": 50,
        "surroundingCode": "\n            if currentLvl < 100:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "08152a6655894110324ebf0f45089558f976370f537d16c673d0a97b54498787"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 292,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 290,
        "length": 5,
        "offset": 34,
        "surroundingCode": "        if isNewLvl:\n\n            dmMSG = f\"{member.mention}, you've reached level **{newLvl}** in Study VC!\" \\\n                    f\"{roleStr}\"\n            try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "02244935add574bcf87c45660c6372784078d3de5fa2a61c51229a6b26a4d9d1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 302,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 300,
        "length": 13,
        "offset": 26,
        "surroundingCode": "        return False\n\n    StudySessionQ = StudySessionQ.get()\n    StudySessionQ.StartTime = datetime.now(EST)\n    StudySessionQ.Paused = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c8fd2b7bcdbe7f06c53cf7c6a4cec27172223917821148fcb0c11a35465d8b1e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 310,
      "offset": 11,
      "length": 10,
      "code": {
        "startLine": 308,
        "length": 10,
        "offset": 12,
        "surroundingCode": "\n\nasync def endSession(member: discord.Member):\n    \"\"\"\n    Ends the session by kicking the user out of the voice channel and removing the user from the database table `StudyVCDB`."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9742ace7fcc576309227319821eb831da9e0ae1bde6ef44260763a28c8f5dbdf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 319,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 317,
        "length": 13,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "16e9c58537bff585beca1f953d4cc4f90a3b58cce19d39fc33c16d241dfa5981"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 321,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 319,
        "length": 13,
        "offset": 136,
        "surroundingCode": "    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        StudySessionQ.delete_instance()\n        StudySessionQ.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4b3b06e25eecc2c46abe362d7ced030bc3b2da4b022cf14e9491dd618e421723"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 391,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 389,
        "length": 12,
        "offset": 91,
        "surroundingCode": "        Removes an item from the study to-do list of the author/owner.\n        \"\"\"\n        isInDatabase = await addLeaderboardProgress(interaction.user)\n\n        if isInDatabase:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "02c4e3a0ef723ebb271490e4c1b87add0a9b4917c8ca419263e1023c3402bd8f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 425,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 423,
        "length": 6,
        "offset": 65,
        "surroundingCode": "        guild = self.bot.get_guild(self.StudyVCGuildID)\n\n        lbList = []\n        i = 1\n        for entry in database.StudyVCLeaderboard.select().order_by(database.StudyVCLeaderboard.totalXP.desc(),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c220d6e55006b8753034e819cbd550dc7966b7a002ba9751ffcdb517e57d9e62"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 445,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 443,
        "length": 10,
        "offset": 56,
        "surroundingCode": "                    place = f\"`{i}th`\"\n\n                totalXPStr = _shortNumber(entry.totalXP)\n                lbList.append(f\"{place} **{member}**: `{totalXPStr} XP`\")\n                i += 1"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "07c216cba4e3b3e51ce3674bb66aa8a9f8063ba1bbc5b22b95cc0c7e082ae0d0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 449,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 447,
        "length": 13,
        "offset": 53,
        "surroundingCode": "                i += 1\n        print(lbList)\n        FormattedList = \"\\n\".join(lbList)\n        embed = discord.Embed(\n            title=\"Study Leaderboard\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "716295dfa48867d1f3445392a700ec56182159631d06719c31bc9b83a666e1a9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 31,
      "offset": 11,
      "length": 15,
      "code": {
        "startLine": 29,
        "length": 15,
        "offset": 12,
        "surroundingCode": "\n\nasync def setNewStudyGoal(self, console, member: discord.Member, renew: bool):\n    now = datetime.now(EST)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "51308434d6c98e5cf751c47ac97dea5e5e14cba1fd1953496f1ae6e0f2775fa1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 37,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 35,
        "length": 3,
        "offset": 104,
        "surroundingCode": "        query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id).get()\n\n    MSV = discord.ui.View(timeout=60)\n    var = SelectMenuHandler(\n        SSTypes, \"temp_view:studybot_st1\", \"Select a duration for your study session\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "01359202fb74a93281cbbd21f5ff0ea820c5689a32c548e09d34db81c61d3757"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 43,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 41,
        "length": 7,
        "offset": 27,
        "surroundingCode": "    MSV.add_item(var)\n\n    msgView = await console.send(\n        f\"{member.mention} You have joined a study channel. Please choose the duration of your study session!\",\n        view=MSV"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b7262a21b59bd85b81e85c066d0e82f5b90ac1c57590afda01e1c02a0e3d31b0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 53,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 51,
        "length": 12,
        "offset": 19,
        "surroundingCode": "\n    else:\n        MSV_disabled = discord.ui.View()\n        var = SelectMenuHandler(\n            SSTypes, \"temp_view:studybot_st1\", \"Timed out\", disabled=True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d6ac1dfe283ecd861f0ce4a93ad3fcfe947796311b608f31dd3029b72582c26f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 104,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 102,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "eada4c6c3cc5878616dd5a0a27bdb4602ecfcc776c113aa410e4d4f606a88f27"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 108,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 106,
        "length": 10,
        "offset": 94,
        "surroundingCode": "        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n    )\n    ColumnDict = {\n        0: q.ch_tv_console,\n        1: q.ch_tv_startvc,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0b7b34ee7b96eb7f8c7c25559abc8ce63747d0fd1f172a46cce95b069c276c00"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 133,
      "offset": 15,
      "length": 13,
      "code": {
        "startLine": 131,
        "length": 13,
        "offset": 67,
        "surroundingCode": "\n    @commands.Cog.listener(\"on_voice_state_update\")\n    async def StudyVCModule(\n        self,\n        member: discord.Member,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9c268e2dd4c81655e26b3b0d5561302a71318421f64881c02558853bf8872ed9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 153,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 151,
        "length": 13,
        "offset": 24,
        "surroundingCode": "        ):\n\n            StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if StudySessionQ.exists():\n                await addLeaderboardProgress(member)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0aeeb591c6c5fab21d365bd98e742ec9336f9cb48cb318e624e3c3a23fc11440"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 175,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 173,
        "length": 7,
        "offset": 46,
        "surroundingCode": "                query.save()\n\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b9b542b351cb87eb04dce3016a94c1c57075a2efb8f8a00f0b6d374ae7a0ed92"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 200,
      "offset": 15,
      "length": 14,
      "code": {
        "startLine": 198,
        "length": 14,
        "offset": 84,
        "surroundingCode": "\n    @tasks.loop(seconds=10) # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\"\n        print(\"loop StudyVCChecker\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "105694faa3a2ca2f5a04f1d1baa46771a04c064b1ac1f986af1384dfffaa59e0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 204,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 202,
        "length": 15,
        "offset": 46,
        "surroundingCode": "        print(\"loop StudyVCChecker\")\n\n        StudyVCGuildObj = self.bot.get_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7a6b0f88f0b6b0d061ec08dd474775146c35542305977c2cbb7b1da4745f1b69"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 205,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 203,
        "length": 17,
        "offset": 73,
        "surroundingCode": "\n        StudyVCGuildObj = self.bot.get_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4a60aff32768d9bf85ec7d3acb9a2f54a350d94b6b48861e2285a8a1f1371cd6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 208,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 206,
        "length": 7,
        "offset": 50,
        "surroundingCode": "\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n\n            member = StudyVCGuildObj.get_member(q.discordID)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "55c283e2fb4daa88a8d1016723016a328173c76d02a9061847cfda3cd26bc629"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 17,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 15,
        "length": 2,
        "offset": 86,
        "surroundingCode": "async def id_generator(size=3, chars=string.ascii_uppercase):\n    while True:\n        ID = \"\".join(random.choice(chars) for _ in range(size))\n        query = database.TutorBot_Sessions.select().where(\n            database.TutorBot_Sessions.SessionID == ID"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2a89d1b2fbb474c4d0919b0996bfa5001676076553259ea912c6c5fa229f50e3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 562,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 560,
        "length": 13,
        "offset": 59,
        "surroundingCode": "    def __init__(self):\n        super().__init__()\n        DropdownClass = Dropdown()\n\n        self.add_item(DropdownClass)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "90e5afca42618c48219d626bb0ca04c7f27265ccac9c2e195ab345793de3aa80"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 25,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 23,
        "length": 12,
        "offset": 98,
        "surroundingCode": "        now = datetime.now(self.est)\n        for entry in database.TutorBot_Sessions:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.Date)\n            val = int((TutorSession - now).total_seconds())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b62561c9cb3b5ac0a929392251e8f1a77b171cf8a203d4d800126914519c3884"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 91,
      "offset": 17,
      "length": 7,
      "code": {
        "startLine": 89,
        "length": 7,
        "offset": 46,
        "surroundingCode": "                geten.save()\n\n                GP_DATE = old + new\n\n                gp_en: database.TutorSession_GracePeriod = ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3c353c0facc2682a69d1bfc53ff971b361a43f77d2452e21264fe4aedc5cc115"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 124,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 122,
        "length": 12,
        "offset": 105,
        "surroundingCode": "        now = datetime.now(self.est)\n        for entry in database.TutorSession_GracePeriod:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.GP_DATE)\n            val = int((TutorSession - now).total_seconds())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d5a39c2cdd8a637757809c44e9fb5392f5fbc750bdc2e5c236b7cb4e2bbdba11"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 9,
      "offset": 15,
      "length": 16,
      "code": {
        "startLine": 7,
        "length": 16,
        "offset": 56,
        "surroundingCode": "class SimulatorProfile:\n    @staticmethod\n    async def create_TicketSys(ctx: commands.Context):\n        # category = discord.utils.get(ctx.guild.categories, id=TECH_ID.cat_sandbox)\n        query: database.SandboxConfig = ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7b4c7db662964013ca3170eb2681f538aebc247ff75f7d828be07b549bc8f6fa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 17,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 15,
        "length": 9,
        "offset": 69,
        "surroundingCode": "\n        await ctx.guild.create_text_channel(\"🧧┃chat-help\")\n        ListofCat = [\n            [\"Math Tickets\", query.cat_mathticket],\n            [\"Science Tickets\", query.cat_scienceticket],"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7daee06a5440fe8b43ebc147fcf5dfc1a7cac1116bf8f50ada162dc3e552464c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 40,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 38,
        "length": 9,
        "offset": 106,
        "surroundingCode": "            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n        )\n        ListofCat = [\n            [\"Math Tickets\", query.cat_mathticket],\n            [\"Science Tickets\", query.cat_scienceticket],"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0aa0257c7d5d473723246223a11315ea5c68cd8aa0477b8ead2260421b3ceb60"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 59,
      "offset": 15,
      "length": 16,
      "code": {
        "startLine": 57,
        "length": 16,
        "offset": 33,
        "surroundingCode": "\n    @staticmethod\n    async def create_PrivVCSys(ctx: commands.Context):\n        category = discord.utils.get(ctx.guild.categories, id=SandboxConfig.cat_sandbox)\n        q: database.SandboxConfig = ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bc39b00a299861b29c2ad6cbb69e1b7d8ee017ce17397b70f9e112526ad155f1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 75,
      "offset": 15,
      "length": 17,
      "code": {
        "startLine": 73,
        "length": 17,
        "offset": 33,
        "surroundingCode": "\n    @staticmethod\n    async def cleanup_PrivVCSys(ctx: commands.Context):\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f4f345a14a3d666675fa666ff2c72ff8830d08d68ac673719b85f9de27d73d52"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 106,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 104,
        "length": 2,
        "offset": 87,
        "surroundingCode": "    @sim.command()\n    async def create(self, ctx: commands.Context, profile):\n        SP = SimulatorProfile()\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a82b00181b78f668fd09b0556f1475ee8f917be5fd976e49cbc128f0057bfe61"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
      "language": "Python",
      "line": 133,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 131,
        "length": 2,
        "offset": 77,
        "surroundingCode": "    @sim.command()\n    async def clear(self, ctx: commands.Context):\n        SP = SimulatorProfile()\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "eb2b263a741e79b410ad556e7b43ae0998448e1be0c27c7f4c4d7f711242c7cb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 18,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 16,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef getEqualRank(query):\n    if query not in config:\n        return None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "20430101a6e25da72c819a3bf8e41d232fbba479f81685a1a555653ec241ae31"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 25,
      "offset": 11,
      "length": 13,
      "code": {
        "startLine": 23,
        "length": 13,
        "offset": 12,
        "surroundingCode": "\n\nasync def roleNameCheck(self, name: str, guild: discord.Guild, user: discord.Member):\n    check = getEqualRank(name)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "12eae5bddf3593637315973a273dd332bdec25bb5ae55bf15efbcb098ce06b10"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 64,
      "offset": 15,
      "length": 17,
      "code": {
        "startLine": 62,
        "length": 17,
        "offset": 60,
        "surroundingCode": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "856ccf70d2d2569ff4d112ee033450f57901501d0e88cc1f9236ef9a6400913b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 65,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 63,
        "length": 19,
        "offset": 126,
        "surroundingCode": "    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "21c5cd7e7a59428dcd808af507c075dda6f21b292e41152111e10f9aa38a0191"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 76,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 74,
        "length": 11,
        "offset": 52,
        "surroundingCode": "            print(interaction.user.id)\n\n            staffServer: discord.Guild = self.bot.get_guild(\n                interaction.guild_id\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1dbfb209cdf583f9352396a94740ada362cea1d9cf1f2385a2ef82f0058d7d8c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 80,
      "offset": 13,
      "length": 17,
      "code": {
        "startLine": 78,
        "length": 17,
        "offset": 57,
        "surroundingCode": "            )\n            print(staffServer)\n            StaffServerMember: discord.Member = staffServer.get_member(\n                interaction.user.id\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0558841137f9da6b267eaac804751abbcb7db950b45538d46c498c4c6584a10a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 87,
      "offset": 17,
      "length": 17,
      "code": {
        "startLine": 85,
        "length": 17,
        "offset": 85,
        "surroundingCode": "            if StaffServerMember is None:\n                print(\"h\")\n                StaffServerMember: discord.Member = staffServer.get_member(\n                    interaction.user.id\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c059a0cb9aff1076ed3c4cbe1e23f841668865268f7ea5d5841ef97d9aad873b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 115,
      "offset": 13,
      "length": 19,
      "code": {
        "startLine": 113,
        "length": 19,
        "offset": 40,
        "surroundingCode": "                    return\n\n            VerificationChannel = interaction.channel\n            logchannel = self.bot.get_channel(\n                self.staffServer[interaction.guild_id]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "fbdd8eeebeb4f81f7eca51f421c1da3ad5ee860cfaef9355ec98bb36c602a3b6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 120,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 118,
        "length": 13,
        "offset": 27,
        "surroundingCode": "            )\n\n            VerifiedRoles = []\n            VerifiedGuilds = []\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7dba31a17ab0bba5e31332dd3cf8a4fb8fb7a0939d51505ef0f0739ba25e2137"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 121,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 119,
        "length": 14,
        "offset": 44,
        "surroundingCode": "\n            VerifiedRoles = []\n            VerifiedGuilds = []\n\n            for ID in self.ServerIDs:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "60107f390f229e1e396bb21ecf95bc6c12c7bd208715c7742b43c2ec4571bcf2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 126,
      "offset": 21,
      "length": 12,
      "code": {
        "startLine": 124,
        "length": 12,
        "offset": 104,
        "surroundingCode": "                server: discord.Guild = self.bot.get_guild(ID)\n                try:\n                    ServerMember: discord.Member = server.get_member(\n                        interaction.user.id\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4663f1501f300c9ebed538070dc62e4ef148f7eac8ea5f74937d1048b730464a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 135,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 133,
        "length": 9,
        "offset": 43,
        "surroundingCode": "\n                else:\n                    roleNames = [role for role in ServerMember.roles]\n\n                    for role in roleNames:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8daead9720428fdc32a98d31762ea193fa0dddf094037a951bcaa835412ca651"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 142,
      "offset": 29,
      "length": 8,
      "code": {
        "startLine": 140,
        "length": 8,
        "offset": 75,
        "surroundingCode": "\n                        if check is not None:\n                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "93be85597987d88a4548902f263320f229c0a05d3de612a4a4ccd9c4e6f9f484"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 143,
      "offset": 29,
      "length": 12,
      "code": {
        "startLine": 141,
        "length": 12,
        "offset": 130,
        "surroundingCode": "                        if check is not None:\n                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "bdfaa5234c9ebdbd602ad9d95b230999ef7ccb19c256bdea0783c538d65ee6a3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 144,
      "offset": 29,
      "length": 13,
      "code": {
        "startLine": 142,
        "length": 13,
        "offset": 162,
        "surroundingCode": "                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\"\n\n                            if markdownRole not in VerifiedRoles:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d4fd1edc011d5869d53017face9a8a7f79fe0b88dde495c13634bcf668f5cd5e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 153,
      "offset": 37,
      "length": 8,
      "code": {
        "startLine": 151,
        "length": 8,
        "offset": 169,
        "surroundingCode": "                            for elem in check:\n                                if elem in [role.name for role in staffServer.roles]:\n                                    jsonROLE = discord.utils.get(\n                                        staffServer.roles, name=elem\n                                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "294e4760a8008dc1446a87798f33ae77cc23e27774bb6fbfce8ea39cbb204557"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 182,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 180,
        "length": 12,
        "offset": 68,
        "surroundingCode": "                await logchannel.send(embed=embed)\n\n                VerifiedRole: discord.Role = discord.utils.get(\n                    staffServer.roles, name=\"Member\"\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8b957187a8a7d8c419ce2524443dd8c385416298b971acb6c5cb322b9d2299bf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 245,
      "offset": 15,
      "length": 23,
      "code": {
        "startLine": 243,
        "length": 23,
        "offset": 39,
        "surroundingCode": "\n    @commands.command()\n    async def pasteVerificationButton(self, ctx):\n        button = VerifyButton()\n        await ctx.send(\"Click here to verify\", view=button)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e6875360d278376da70ceeb03ca8064e8c02ee15d4e899f3af41b177a2161507"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 250,
      "offset": 15,
      "length": 22,
      "code": {
        "startLine": 248,
        "length": 22,
        "offset": 39,
        "surroundingCode": "\n    @commands.command()\n    async def pasteVerificationEmbed(self, ctx: commands.Context):\n        embed = discord.Embed(\n            title=\"Verification\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "129eb2a996a15dfefcda2270ef5121eaa155f4ca6b59a6c7b6e78a68a2530e69"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 92,
      "offset": 11,
      "length": 12,
      "code": {
        "startLine": 90,
        "length": 12,
        "offset": 12,
        "surroundingCode": "\n\nasync def TicketExport(\n    self,\n    channel: discord.TextChannel,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2721e883d8f3074959f4cee0a6b71ffd3965a60d87ed7b4dcdd5a1ec4fd20f1c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 98,
      "offset": 5,
      "length": 30,
      "code": {
        "startLine": 96,
        "length": 30,
        "offset": 90,
        "surroundingCode": "    user: discord.User = None,\n    responsesauthor: typing.List[discord.User] = None,\n    directTranscript: bool = False,\n):\n    transcript = await chat_exporter.export(channel, None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9b1c76a953f5f45ced0658fa4ffae830454e23da560fa56b0e86262f1a3d5c06"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 106,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 104,
        "length": 11,
        "offset": 25,
        "surroundingCode": "        .get()\n    )\n    TicketOwner = self.bot.get_user(query.authorID)\n\n    if transcript is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3f1e16e9389c9c8f442f0cd17e63171d9487fe7509b6e2d5bc8425efc6337067"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 127,
      "offset": 5,
      "length": 4,
      "code": {
        "startLine": 125,
        "length": 4,
        "offset": 11,
        "surroundingCode": "    )\n\n    myIO = BytesIO()\n    myIO.write(var)\n    with open(f\"transcript-{channel.name}.html\", \"wb\") as f:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "09375c7f63da02f6b809c09057718c63c0f41db026aa3b5afe75c1ff10efce80"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 133,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 131,
        "length": 6,
        "offset": 80,
        "surroundingCode": "\n    S3_upload_file(f\"transcript-{channel.name}.html\", \"ch-transcriptlogs\")\n    S3_URL = f\"[Direct Transcript Link](https://acad-transcripts.schoolsimplified.org/transcript-{channel.name}.html)\"\n    embed.add_field(name=\"Transcript Link\", value=S3_URL)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "9422cf2b468df30eb57cd0af95f6d6caf8cfc6038f886bd59b1e7067e8b132df"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 159,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 157,
        "length": 10,
        "offset": 6,
        "surroundingCode": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "21174bd1753fc9fb2db20e45e174901578807f88386083afdb9e9bcce741dbb8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 169,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 167,
        "length": 12,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    EssayOptions = [\n        discord.SelectOption(label=\"Essay Reviser\"),\n        discord.SelectOption(label=\"Other\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "13eab29e70fce1eddc6ce550b45bdb61ba651a7a27a38f79dee7eff29aed5fac"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 174,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 172,
        "length": 14,
        "offset": 11,
        "surroundingCode": "    ]\n\n    EnglishOptions = [\n        discord.SelectOption(label=\"English Language\"),\n        discord.SelectOption(label=\"English Literature\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "32d518240a3d086e71576be6edbcc5981dfa92a267ddc1dd7a964c33f78d1e09"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 180,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 178,
        "length": 11,
        "offset": 11,
        "surroundingCode": "    ]\n\n    MathOptions = [\n        discord.SelectOption(label=\"Algebra\"),\n        discord.SelectOption(label=\"Geometry\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "09f97de8e8c56af399473842b6feb70493690c23584f21150dad34712848c5e2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 189,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 187,
        "length": 14,
        "offset": 11,
        "surroundingCode": "    ]\n\n    ScienceOptions = [\n        discord.SelectOption(label=\"Biology\"),\n        discord.SelectOption(label=\"Chemistry\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "35ecb7fc53cb75e2876b76e9081ea9f67aa91815b6def970683879cd34c2f3e2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 197,
      "offset": 5,
      "length": 20,
      "code": {
        "startLine": 195,
        "length": 20,
        "offset": 11,
        "surroundingCode": "    ]\n\n    SocialStudiesOptions = [\n        discord.SelectOption(label=\"World History\"),\n        discord.SelectOption(label=\"US History\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "77a6998a4aedd9f885820dc471466f1a73529cd087b247dff1ecc3f974415ae8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 207,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 205,
        "length": 15,
        "offset": 11,
        "surroundingCode": "    ]\n\n    LanguageOptions = [\n        discord.SelectOption(label=\"French\"),\n        discord.SelectOption(label=\"Chinese\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c67e9fb003a7f010188710bcb523c4962ebd468db82701541bcb8f22ec82be61"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 215,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 213,
        "length": 12,
        "offset": 11,
        "surroundingCode": "    ]\n\n    OtherOptions = [\n        discord.SelectOption(label=\"Computer Science\"),\n        discord.SelectOption(label=\"Fine Arts\"),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1f5facde602947d40fce93ced364588b0a6a63d7115f3a2e4d52e33d44887e3a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 222,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 220,
        "length": 10,
        "offset": 11,
        "surroundingCode": "    ]\n\n    decodeName = {\n        \"['Math Helpers']\": \"Math Helpers\",\n        \"['Science Helpers']\": \"Science Helpers\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "87b91b7d76e1b4ffb1cc966423e9cbaa7994b3c30fe8ce0be1e4c415f971ec4e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 232,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 230,
        "length": 13,
        "offset": 11,
        "surroundingCode": "    }\n\n    decodeOptList = {\n        \"['Math Helpers']\": MathOptions,\n        \"['Science Helpers']\": ScienceOptions,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4653205490aa1feaf94c77277c5148695bfd504d14b71dcf2553a1639c227ded"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 246,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 244,
        "length": 8,
        "offset": 106,
        "surroundingCode": "            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n        )\n        decodeID = {\n            \"['Math Helpers']\": q.cat_mathticket,\n            \"['Science Helpers']\": q.cat_scienceticket,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3e2d0ceebc7a581900baeef17758f45ac1ada48573a71cc6bae860ea59549c1b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 256,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 254,
        "length": 8,
        "offset": 28,
        "surroundingCode": "        }\n    else:\n        decodeID = {\n            \"['Math Helpers']\": MAIN_ID.cat_mathTicket,\n            \"['Science Helpers']\": MAIN_ID.cat_scienceTicket,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3309ac2a38a914486c827f7809ab093ce99fd1f2b0a127a01f47fc6cb3fad6c2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 267,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 265,
        "length": 10,
        "offset": 34,
        "surroundingCode": "\n    name = decodeName[value]\n    CategoryID = decodeID[value]\n    if type(decodeOptList[value]) == int:\n        OptList = name"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3d19c69b0f96c8e188d5d96c3937a1e29cf0f4e5fda7b8a3f52bdee976e903f7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 269,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 267,
        "length": 7,
        "offset": 83,
        "surroundingCode": "    CategoryID = decodeID[value]\n    if type(decodeOptList[value]) == int:\n        OptList = name\n    else:\n        OptList = decodeOptList[value]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "673fd970293dac1816dc9fd382fb918d025f71c57b9f6b2b7e21e1515a73b159"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 271,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 269,
        "length": 7,
        "offset": 41,
        "surroundingCode": "        OptList = name\n    else:\n        OptList = decodeOptList[value]\n\n    return name, CategoryID, OptList"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a85f14280defab2eadf607dfe8104c1209ba70990103c63319cb26a17d5f212a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 276,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 274,
        "length": 7,
        "offset": 6,
        "surroundingCode": "\n\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "476e4dead5b13742d4a7c5dd47dea16e3d5ed23d3177e729e3140e8f919cf3ab"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 277,
      "offset": 27,
      "length": 16,
      "code": {
        "startLine": 275,
        "length": 16,
        "offset": 40,
        "surroundingCode": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8f03549957c7f3fa41c1d6891c62f20f239a8a3dddb50e49f43c4f0cdf8eac96"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 290,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 288,
        "length": 11,
        "offset": 13,
        "surroundingCode": "    \"\"\"\n\n    mainSubject = mainSubject.title()\n    subject = subject.title()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "18221d5f3a9d7f5d1f1f721df4afd71757896685114180da478eeb72c870af15"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 328,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 326,
        "length": 7,
        "offset": 73,
        "surroundingCode": "\n    async def callback(self, interaction: discord.Interaction):\n        Sandbox = False\n        if interaction.message.guild.id == TECH_ID.g_tech:\n            Sandbox = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "05ca347f2174943eee7109e37a75e4d874770b66baff0e7481da7e8142541422"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 330,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 328,
        "length": 7,
        "offset": 95,
        "surroundingCode": "        Sandbox = False\n        if interaction.message.guild.id == TECH_ID.g_tech:\n            Sandbox = True\n\n        bucket = self.view.cd_mapping.get_bucket(interaction.message)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6a5854ca20ab9db6e8084fd2ad9fee854d9a72124c45e80142c18a2fdee6389f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 343,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 341,
        "length": 9,
        "offset": 96,
        "surroundingCode": "            guild = interaction.message.guild\n            author = interaction.user\n            DMChannel = await author.create_dm()\n            try:\n                await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "39ec07b5c864afb6c1ff008356b2002ec1ce08cb6ef9eb906107691da19a6de0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 358,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 356,
        "length": 3,
        "offset": 31,
        "surroundingCode": "                )\n\n            MSV = discord.ui.View()\n            var = SelectMenuHandler(\n                MasterSubjectOptions, \"persistent_view:ticketdrop\", \"Click a subject!\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d005e3348896e664265792eace603bbcb6c2c560497e1eaa97c864ff969b90bd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 375,
      "offset": 17,
      "length": 17,
      "code": {
        "startLine": 373,
        "length": 17,
        "offset": 83,
        "surroundingCode": "            timeout = await MSV.wait()\n            if not timeout:\n                MasterSubjectView = var.view_response\n            else:\n                return await DMChannel.send(\"Timed out, try again later.\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "855fbf49212d1b8f61bec18a6b1c3581112b35ed908e7170b3b8a61f0667a606"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 379,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 377,
        "length": 12,
        "offset": 88,
        "surroundingCode": "                return await DMChannel.send(\"Timed out, try again later.\")\n\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3a7a9ee81153a285d886e0910a9ec2b44c5faa61cd3059a6085edd624e46ab3b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 380,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 378,
        "length": 11,
        "offset": 63,
        "surroundingCode": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1ab7823136064b1308cd682e1372a84a1597dd78cba23e5d0d96f95820a66785"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 380,
      "offset": 26,
      "length": 10,
      "code": {
        "startLine": 378,
        "length": 10,
        "offset": 76,
        "surroundingCode": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2ef1986e7fc945747d0c82828f10770ceefef92f0c3741382ee372772a821ab1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 380,
      "offset": 38,
      "length": 7,
      "code": {
        "startLine": 378,
        "length": 7,
        "offset": 88,
        "surroundingCode": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4bf55d1ae3f3795bfd5c9157d891ce3d7bd432d7bd81af8d32885db8f6d41067"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 386,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 384,
        "length": 11,
        "offset": 60,
        "surroundingCode": "\n            if not TypeSubject == OptList:\n                MiscOptList = discord.ui.View()\n                MiscOptList.add_item(\n                    SelectMenuHandler("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8c13f6ea545169578efa265b2d2b8463890941e9f7e828eb8f4245aafd4341d0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 510,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 508,
        "length": 10,
        "offset": 90,
        "surroundingCode": "                        return await DMChannel.send(\"No attachments found.\")\n\n            CounterNum = (\n                database.BaseTickerInfo.select()\n                .where(database.BaseTickerInfo.guildID == guild.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "aa656774fc4f69d30b958e9e49717af1a3c6095978e2b141db5a52c99396a949"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 515,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 513,
        "length": 4,
        "offset": 49,
        "surroundingCode": "                .get()\n            )\n            TNUM = CounterNum.counter\n            CounterNum.counter = CounterNum.counter + 1\n            CounterNum.save()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a0b479e37d57c8a01919c7925d161dcf67faa43ebe218b4bb65f99f737334f7c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 519,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 517,
        "length": 3,
        "offset": 43,
        "surroundingCode": "            CounterNum.save()\n\n            LDC = await DMChannel.send(\n                f\"Please wait, creating your ticket {Emoji.loadingGIF}\"\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "99d16f1618b9d1e378099fdd0c5662c8891bfbc7e623fb1f6f9fe9b767198016"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 524,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 522,
        "length": 11,
        "offset": 67,
        "surroundingCode": "\n            if TypeSubject == \"Language Helpers\":\n                mainSubject = \"languages\"\n            else:\n                mainSubject = ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "57a012384076bbfddd6a3f2935e01009ef9bf6b2b83eeef7e823fa9e4b715201"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 526,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 524,
        "length": 11,
        "offset": 76,
        "surroundingCode": "                mainSubject = \"languages\"\n            else:\n                mainSubject = (\n                    c.name.replace(\"═\", \"\")\n                    .replace(\"⁃\", \"\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "82e023a8fecbd21a2e66a51543a11654106bdacc3a32f8cecb4f85253fd48335"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 565,
      "offset": 21,
      "length": 7,
      "code": {
        "startLine": 563,
        "length": 7,
        "offset": 73,
        "surroundingCode": "                ]\n                for role in roles:\n                    RoleOBJ = discord.utils.get(\n                        interaction.message.guild.roles, name=role\n                    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f01eeaba3108b2151ff59b3f1c57ad0d8c8d2240069a4a3536235b49a3f43491"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 576,
      "offset": 21,
      "length": 7,
      "code": {
        "startLine": 574,
        "length": 7,
        "offset": 89,
        "surroundingCode": "                        reason=\"Ticket Perms\",\n                    )\n                    RoleOBJ = discord.utils.get(guild.roles, name=role)\n                    if (\n                        not ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "c565028ded0f395dfe4edeeb6c17948659caaf7fbae18378b859dcf9c375f130"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 608,
      "offset": 25,
      "length": 7,
      "code": {
        "startLine": 606,
        "length": 7,
        "offset": 109,
        "surroundingCode": "                    roles = [\"Essay Reviser\"]\n                    for role in roles:\n                        RoleOBJ = discord.utils.get(\n                            interaction.message.guild.roles, name=role\n                        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "53581c1b5def12c72e75a55b3c667ef023519808203d031deacede0a45d4d6f6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 620,
      "offset": 25,
      "length": 7,
      "code": {
        "startLine": 618,
        "length": 7,
        "offset": 122,
        "surroundingCode": "                    roles = [\"Chat Helper\", \"Lead Helper\"]\n                    for role in roles:\n                        RoleOBJ = discord.utils.get(\n                            interaction.message.guild.roles, name=role\n                        )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "70b49f0b167c6ecdecfc185eb9a13131fcb05d690791735e61106a756ad8f155"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 642,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 640,
        "length": 13,
        "offset": 27,
        "surroundingCode": "            )\n\n            controlTicket = discord.Embed(\n                title=\"Control Panel\",\n                description=\"To end this ticket, click the lock button!\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "100f436710e7e9e8b7209651366729007544500f47fb07593c266b2b3dac3dc8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 647,
      "offset": 13,
      "length": 17,
      "code": {
        "startLine": 645,
        "length": 17,
        "offset": 71,
        "surroundingCode": "                color=discord.Colour.gold(),\n            )\n            LockControlButton = discord.ui.View()\n            LockControlButton.add_item(\n                ButtonHandler("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8e1e3c0579954b373ca6eeb85380f75227ac356c81e24c511876872cab1517e4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 659,
      "offset": 13,
      "length": 3,
      "code": {
        "startLine": 657,
        "length": 3,
        "offset": 27,
        "surroundingCode": "            )\n\n            LCM = await channel.send(\n                interaction.user.mention, embed=controlTicket, view=LockControlButton\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "cc9e609d72a24e10c4c689f5dd55557871da4123381fc436a3ae3603794d916d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 700,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 698,
        "length": 11,
        "offset": 39,
        "surroundingCode": "                    )\n\n                mentionRole = getRole(interaction.guild, mainSubject, selection_str)\n\n                await channel.send(mentionRole.mention, embed=embed)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a32a6209307d2eff983956f7af1a194d31d28dc4d15dec47ab02c1e51ddd1d8e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 760,
      "offset": 15,
      "length": 14,
      "code": {
        "startLine": 758,
        "length": 14,
        "offset": 60,
        "surroundingCode": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def TicketDropdown(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6afe02ed5c934ee6cb54290637cdae5f6417750fef0045b785eb3fdd77835e58"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 761,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 759,
        "length": 19,
        "offset": 123,
        "surroundingCode": "    @commands.Cog.listener(\"on_interaction\")\n    async def TicketDropdown(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "eec2b55ecddf49419dd19b2a84aed7ff2e6e051bee2ba486c63d6a4ad014bfd1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 792,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 790,
        "length": 11,
        "offset": 70,
        "surroundingCode": "                color=discord.Colour.red(),\n            )\n            ButtonViews = discord.ui.View()\n            ButtonViews.add_item(\n                ButtonHandler("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "87a1d8b5982e6717e2e04bbe7804fd391c9c8d87c886728b1688fa4507581b76"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 836,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 834,
        "length": 11,
        "offset": 34,
        "surroundingCode": "\n            try:\n                TicketOwner = guild.get_member(query.authorID)\n            except discord.NotFound:\n                await channel.send("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5d1b67eccda272f11840190941f1331e1606b6f1e48c607254cc88edfb765161"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 852,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 850,
        "length": 12,
        "offset": 92,
        "surroundingCode": "            )\n            embed.set_footer(text=\"This ticket has been closed!\")\n            ButtonViews2 = discord.ui.View()\n\n            ButtonViews2.add_item("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1317761e9cfc77f1a3fc64338623b86448b926b7866dc63fabf4c9ba93f6c331"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 924,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 922,
        "length": 11,
        "offset": 47,
        "surroundingCode": "            )\n            try:\n                TicketOwner = guild.get_member(query.authorID)\n            except discord.NotFound:\n                await channel.send("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e24c8f782c695c05e8b99fb1d72af9236a0b5c23b29cd649bd9e25f6b9575d05"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 945,
      "offset": 17,
      "length": 18,
      "code": {
        "startLine": 943,
        "length": 18,
        "offset": 113,
        "surroundingCode": "            channel = interaction.channel\n            if interaction.guild.id == MAIN_ID.g_main:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    MAIN_ID.ch_transcriptLogs\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "aea72f67ebff3e8993a1407f8b09c4361a4be52121c4f2b73a1d5dbfdc7950d0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 949,
      "offset": 17,
      "length": 18,
      "code": {
        "startLine": 947,
        "length": 18,
        "offset": 52,
        "surroundingCode": "                )\n            else:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    TECH_ID.ch_ticketLog\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "af55ed2ed4d4c1bf9dca653d73488511da0d86f8f924608e7a54e7c6a3125c65"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 957,
      "offset": 24,
      "length": 6,
      "code": {
        "startLine": 955,
        "length": 6,
        "offset": 38,
        "surroundingCode": "            )\n\n            msg, file, S3_URL = await TicketExport(\n                self, channel, ResponseLogChannel, author, None, True\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "352f6136b295bced6bec3a6368080404181ac4dda9064ca52063a4238afa24a8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1007,
      "offset": 17,
      "length": 18,
      "code": {
        "startLine": 1005,
        "length": 18,
        "offset": 109,
        "surroundingCode": "            author = interaction.user\n            if interaction.guild.id == MAIN_ID.g_main:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    MAIN_ID.ch_transcriptLogs\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1454861c72d9b91d6db290e2c7436458824e4328c7ace0226c77c91dc8564087"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1011,
      "offset": 17,
      "length": 18,
      "code": {
        "startLine": 1009,
        "length": 18,
        "offset": 52,
        "surroundingCode": "                )\n            else:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    TECH_ID.ch_ticketLog\n                )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "4b51cf351a8271743abdb68bfae2ef625b83c1dd6accf94ebfbf391b9ce185d6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1019,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 1017,
        "length": 4,
        "offset": 49,
        "surroundingCode": "                .get()\n            )\n            msgO = await interaction.channel.send(\n                f\"{author.mention}\\nPlease wait, generating a transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "08813934c9724d16d6c3c74b6eff85e3b34af090436979cb5b54b313fc489a7c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1022,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 1020,
        "length": 11,
        "offset": 149,
        "surroundingCode": "                f\"{author.mention}\\nPlease wait, generating a transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )\n            TicketOwner = self.bot.get_user(query.authorID)\n\n            messages = await channel.history(limit=None).flatten()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "f9aeee88c41fd016466c238e2a43dcb036f86f0d251562364058d0cbebf6aa0d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1025,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 1023,
        "length": 10,
        "offset": 80,
        "surroundingCode": "\n            messages = await channel.history(limit=None).flatten()\n            authorList = []\n\n            for msg in messages:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6f41d4b372e5add6581c1e2ab7c97ab8e79d7dae60569889a400450472370503"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1098,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 1096,
        "length": 11,
        "offset": 70,
        "surroundingCode": "                color=discord.Colour.red(),\n            )\n            ButtonViews = discord.ui.View()\n            ButtonViews.add_item(\n                ButtonHandler("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "88bdd1d1de7f9a032eb6f833a39cc8259dc8bf922c262d35627370141e6988c4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1122,
      "offset": 15,
      "length": 14,
      "code": {
        "startLine": 1120,
        "length": 14,
        "offset": 44,
        "surroundingCode": "\n    @tasks.loop(minutes=1.0)\n    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        for entry in TicketInfoTB:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "307188b884bc3e30bc5a6163f325bfa265e52fcc8c98e0f1da339b6089ba6084"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1123,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 1121,
        "length": 12,
        "offset": 73,
        "surroundingCode": "    @tasks.loop(minutes=1.0)\n    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        for entry in TicketInfoTB:\n            try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "3a1a745db69542e1a82324dcd1c58bea8ff38bb25e821e0d2b597ab5d2c03475"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1131,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 1129,
        "length": 12,
        "offset": 72,
        "surroundingCode": "            except Exception as e:\n                continue\n            fetchMessage = await channel.history(limit=1).flatten()\n            TicketOwner = self.bot.get_user(entry.authorID)\n            messages = await channel.history(limit=None).flatten()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "d902727e93336f8790205ae91d5bf61b0205785df8cd4af4c9bb498f6c9717a0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1132,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 1130,
        "length": 11,
        "offset": 105,
        "surroundingCode": "                continue\n            fetchMessage = await channel.history(limit=1).flatten()\n            TicketOwner = self.bot.get_user(entry.authorID)\n            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "1594c6f38fce8fa0cacb81294d32e93ca7e201c3ae9d84b5433452fb11b02da0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1134,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 1132,
        "length": 5,
        "offset": 139,
        "surroundingCode": "            TicketOwner = self.bot.get_user(entry.authorID)\n            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "0964b2e2f2e2b1e5d8a478ee0654a54f15f8ef1f8d46e840f3e7818a42c91b98"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1135,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 1133,
        "length": 10,
        "offset": 147,
        "surroundingCode": "            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:\n                continue"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "256483d4e29d884e45ff1ee37c8113ee2ac450a9cba9caa68df96b5d8ccfe7a3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1143,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 1141,
        "length": 12,
        "offset": 94,
        "surroundingCode": "                - timedelta(minutes=self.TICKET_INACTIVE_TIME)\n            ):\n                ButtonViews2 = discord.ui.View()\n\n                ButtonViews2.add_item("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "5f0a8f42de0d0d65ed82aa2d98d4dc4dc13743c45e9b772da0ccc92bd6ebdbf3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1214,
      "offset": 15,
      "length": 13,
      "code": {
        "startLine": 1212,
        "length": 13,
        "offset": 55,
        "surroundingCode": "    @commands.command()\n    @is_botAdmin\n    async def sendCHTKTView(self, ctx):\n        MasterSubjectView = discord.ui.View()\n        MasterSubjectView.add_item("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "ab579e51079f8b5e388688173bdd4cf53e3f2bf2ec96b1a343771d8b6e841b52"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1215,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 1213,
        "length": 17,
        "offset": 65,
        "surroundingCode": "    @is_botAdmin\n    async def sendCHTKTView(self, ctx):\n        MasterSubjectView = discord.ui.View()\n        MasterSubjectView.add_item(\n            SelectMenuHandler("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "342f11850b30f27a4ef5cfcffc490003d041daf13c3224751355ca40d6938bce"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 39,
      "offset": 15,
      "length": 12,
      "code": {
        "startLine": 37,
        "length": 12,
        "offset": 60,
        "surroundingCode": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def GSuiteVerify(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n        if interaction.message is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "e0db664ed9d3a6f977b746e007a78d2934da1019901ff8d31e58cd2edf3cd1a3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 40,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 38,
        "length": 19,
        "offset": 121,
        "surroundingCode": "    @commands.Cog.listener(\"on_interaction\")\n    async def GSuiteVerify(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n        if interaction.message is None:\n            return"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2c96d0baada745254d3dd55f28008f844776e1737d120c2f32a4b3f8415da2a7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 177,
      "offset": 15,
      "length": 17,
      "code": {
        "startLine": 175,
        "length": 17,
        "offset": 55,
        "surroundingCode": "    @commands.command()\n    @is_botAdmin\n    async def pasteGSuiteButton(self, ctx):\n        embed = discord.Embed(\n            title=\"Alternate Verification Method\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b3e67bb850947ed992a12e03e7c9c0896f95f4ed4c398e17fcbd715da4bcf89c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/verifystaffGsuite.py",
      "language": "Python",
      "line": 184,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 182,
        "length": 12,
        "offset": 59,
        "surroundingCode": "            color=discord.Color.green(),\n        )\n        GSuiteButton = GSuiteVerify()\n        await ctx.send(embed=embed, view=GSuiteButton)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "66d3e5794585cedd98f0eab98a4498e9de048faf3043bba40b16e2e085f543dc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "An instance attribute is defined outside `__init__`",
  "severity": "Moderate",
  "comment": "Instance attribute index defined outside __init__",
  "detailsInfo": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 370,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 368,
        "length": 10,
        "offset": 99,
        "surroundingCode": "    async def get_page(self, page_number: int) -> Any:\n        # The front page is a dummy\n        self.index = page_number\n        return self\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyAttributeOutsideInitInspection"
  },
  "hash": "b0e7aa1b7c9bc7a5d1a805f7a3a9daf7bc186449ee390ab4148813299366af1f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "An instance attribute is defined outside `__init__`",
  "severity": "Moderate",
  "comment": "Instance attribute style defined outside __init__",
  "detailsInfo": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 58,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 56,
        "length": 10,
        "offset": 98,
        "surroundingCode": "\n        elif view.current_player == view.O and self.yUser.id == interaction.user.id:\n            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyAttributeOutsideInitInspection"
  },
  "hash": "7ab6f11654ad037d778b407d05a5d1b61bd54052695c8a837909a729568fb136"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "An instance attribute is defined outside `__init__`",
  "severity": "Moderate",
  "comment": "Instance attribute label defined outside __init__",
  "detailsInfo": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 59,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 57,
        "length": 10,
        "offset": 150,
        "surroundingCode": "        elif view.current_player == view.O and self.yUser.id == interaction.user.id:\n            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True\n            view.board[self.y][self.x] = view.O"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyAttributeOutsideInitInspection"
  },
  "hash": "98e41187b425283a26c3228edf0c06981fcf1c786d0e8ecc122f2525c3c65fb7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "An instance attribute is defined outside `__init__`",
  "severity": "Moderate",
  "comment": "Instance attribute disabled defined outside __init__",
  "detailsInfo": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/MiscCommands.py",
      "language": "Python",
      "line": 60,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 58,
        "length": 13,
        "offset": 94,
        "surroundingCode": "            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True\n            view.board[self.y][self.x] = view.O\n            view.current_player = view.X"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyAttributeOutsideInitInspection"
  },
  "hash": "de4838714fb5ab020c29bbd5f2fc32c701a40b06d1dfe11b1afdd0e29aa8ca24"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "core/common.py",
      "language": "Python",
      "line": 222,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 220,
        "length": 6,
        "offset": 61,
        "surroundingCode": "        try:\n            os.remove(\"cred_file.json\")\n        except:\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "8bb0092fba7ff25907c027f52201381b910d9fd7623d997e574c565e3b95ec1b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/Blacklist.py",
      "language": "Python",
      "line": 77,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 75,
        "length": 6,
        "offset": 126,
        "surroundingCode": "                user = self.bot.get_user(p.id)\n                empty_list.append(f\"`{user.name}` -> `{user.id}`\")\n            except:\n                empty_list.append(f\"`{p}`\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "c2cf99823f2516ef1bf61dd9a42f02c0c8a209b014a3f82ee32480cd6a9300d2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
      "language": "Python",
      "line": 110,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 108,
        "length": 6,
        "offset": 81,
        "surroundingCode": "        try:\n            service.users().delete(userKey=email).execute()\n        except:\n            return await interaction.response.send_message(\n                f\"{interaction.user.mention} The account **{email}** does not exist.\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "b53be494f55a7e3f2a8a1c3f00aac371f542a2395e12aa5a5e249008dfa84660"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 29,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 27,
        "length": 6,
        "offset": 69,
        "surroundingCode": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "f8e463e657a8aa0d97f42b873341ff85df8b83a4fc76abc23722433dd45569ca"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 747,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 745,
        "length": 6,
        "offset": 69,
        "surroundingCode": "                        .get()\n                    )\n                except:\n                    embed = discord.Embed(\n                        title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "a5dc720f53f523fff1e4b678ea1071760d6d0ac9da15c788d00fed0c4d1fe793"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 960,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 958,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "b93a3f12283e9ec724d6e90c90b15719332e8791d00d1ab39f7638fb19e0d50e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1148,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1146,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "143374aaa145a6939b0d5e9d4bd164028094f9926e91e08d0aa924c692bb9114"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1323,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1321,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "dbee009b7c07dc521350d7af3b81549536e0b9912ab0c59e9b8030783c36f824"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1394,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1392,
        "length": 6,
        "offset": 103,
        "surroundingCode": "                    try:\n                        voiceLIMIT = int(new_voice_limit)\n                    except:\n                        return await ctx.send(f\"{Emoji.deny} Not a valid number!\")\n                    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "2e987645934f3d8b904880f9062027c4519a35e80505b746a26b926c427d11ef"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1444,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1442,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "7ec52ffe1647b47a81b1220c9f0007e94918e658bb33a539e4e9fd4bda5819ea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcCommands.py",
      "language": "Python",
      "line": 1523,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1521,
        "length": 6,
        "offset": 81,
        "surroundingCode": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "c605fab9d860c5fa93fe39972f8f00b06d8964b32e8819b5bc4c285a492db3e1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 18,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 16,
        "length": 6,
        "offset": 69,
        "surroundingCode": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "159971b27ac743f358ee38e65887311cd688f6b476e0bc9febe7f1512452660a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 184,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 182,
        "length": 6,
        "offset": 115,
        "surroundingCode": "                try:\n                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "187234edd894c166f807f329d6c9a705e0dd30bb1cff109eb24caf3e795512a1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 201,
      "offset": 25,
      "length": 6,
      "code": {
        "startLine": 199,
        "length": 6,
        "offset": 139,
        "surroundingCode": "                                tutorChannel, reason=\"Hogging the VC Start Channel.\"\n                            )\n                        except:\n                            await member.move_to(\n                                None, reason=\"Hogging the VC Start Channel.\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "d070aedfee0cf909233b4c8814bf9faccedb8cbf2785d46ba8b7b670b57b15ea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
      "language": "Python",
      "line": 404,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 402,
        "length": 6,
        "offset": 115,
        "surroundingCode": "                        reason=\"Maximum Channel Ownership Allowance [TRUE]\",\n                    )\n                except:\n                    await member.move_to(\n                        None, reason=\"Maximum Channel Ownership Allowance [FAIL]\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "a24e5169f46adddbf1194388b010f39e07355a9cbb8bfe1d36609f3b92aa6e61"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 37,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 35,
        "length": 6,
        "offset": 69,
        "surroundingCode": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "194920a7f2ee1ed3e876956dba15ca56bc95668113e85136fe2525a9d63288dc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/StudyMain.py",
      "language": "Python",
      "line": 296,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 294,
        "length": 6,
        "offset": 70,
        "surroundingCode": "            try:\n                await member.send(dmMSG)\n            except:\n                pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "7e65be52cd4f32e131fc05ba8b732f972205dbb3a0331826308863b56f32661c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 84,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 82,
        "length": 6,
        "offset": 98,
        "surroundingCode": "            try:\n                await interaction.response.send_message(embed=embed)\n            except:\n                await interaction.channel.send(embed=embed)\n        else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "ebfd927f83c27bc056b79e86bc71c3d932bc6806ff60b3b169cda606411e1072"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 115,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 113,
        "length": 6,
        "offset": 110,
        "surroundingCode": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n            else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "0d87961c3a93fd7cd590cd1f1549ff0fd15768abd2cde1fbd5603dd24a74685c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 125,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 123,
        "length": 6,
        "offset": 110,
        "surroundingCode": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "582aa720621352b3354c795d2c36456fb7138ebc93c63e23030fb03d2f905e6d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 55,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 53,
        "length": 6,
        "offset": 87,
        "surroundingCode": "                try:\n                    await tutor.send(embed=embed)\n                except:\n                    await botch.send(\n                        f\"Unable to send a reminder DM to you {tutor.mention}!\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "0f4c204441033f3f3fe467393b7ba44111febd72a0bc91cebd41bf337c01f764"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 62,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 60,
        "length": 6,
        "offset": 89,
        "surroundingCode": "                try:\n                    await student.send(embed=embed)\n                except:\n                    print(f\"Unable to Send a Reminder DM to: {student.id}\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "4f47dd558be55bf82be53b550bc49bb2329b50bdaa0a8af62e30c0110766f508"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 105,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 103,
        "length": 6,
        "offset": 90,
        "surroundingCode": "                            ephemeral=True,\n                        )\n                    except:\n                        await interaction.channel.send(\n                            f\"{interaction.user.mention} An error occurred while \""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "85aa932550d587c95acfaee6f17809cb71e27545e00f8175682a0cfb8610559e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 198,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 196,
        "length": 6,
        "offset": 116,
        "surroundingCode": "                            \"You have been verified!\", ephemeral=True\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} You have been verified!\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "c8362882c7e301e934822ba6214ecc0fc0511d1eb75f08f7c4fb59f2cfeff53b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/VerificationStaff.py",
      "language": "Python",
      "line": 237,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 235,
        "length": 6,
        "offset": 90,
        "surroundingCode": "                            ephemeral=True,\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} I didn't seem to find any roles to give you, please try \""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "b7ecb7f2b53e72bd2604fd9802e8de04c9d0b4641ea371ea6bb73ab5063a5f71"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 151,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 149,
        "length": 6,
        "offset": 66,
        "surroundingCode": "    try:\n        os.remove(f\"transcript-{channel.name}.html\")\n    except:\n        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "2efcefb693ef7faa942f2753157c17a5a678b475520b2bf41943cd42e752dcde"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 815,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 813,
        "length": 6,
        "offset": 103,
        "surroundingCode": "                    f\"{author.mention}\\n\", embed=embed, view=ButtonViews\n                )\n            except:\n                try:\n                    await interaction.response.send_message("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "056131b5d9844b403ca12761baff15954e38ba7b1f6970d32246438a5c85c009"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 820,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 818,
        "length": 6,
        "offset": 115,
        "surroundingCode": "                        f\"{author.mention}\\n\", embed=embed, view=ButtonViews\n                    )\n                except:\n                    await channel.send(\n                        f\"{author.mention}\\n\", embed=embed, view=ButtonViews"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "76f2e5ebb194a83eb0bbbe38428ea89dcd2c5930e7e6158c58bb1ebdc96a52de"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _meta of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/database.py",
      "language": "Python",
      "line": 75,
      "offset": 27,
      "length": 21,
      "code": {
        "startLine": 73,
        "length": 21,
        "offset": 83,
        "surroundingCode": "        else:\n            db.connect(reuse_if_open=True)\n            for column in model_dict[key]._meta.sorted_fields:\n                if not db.column_exists(key, column.name):\n                    db.create_column(key, column.name)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "6197070ee6850c7385951d1322326ea03f294f311cb74208b291d7d2461f0549"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _prepare_once of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 143,
      "offset": 15,
      "length": 25,
      "code": {
        "startLine": 141,
        "length": 25,
        "offset": 34,
        "surroundingCode": "            return\n\n        await self.source._prepare_once()\n        page = await self.source.get_page(0)\n        kwargs = await self._get_kwargs_from_page(page)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "ef6ecbe5d07b62634ded88ddf48c0903e64ad0bd3896397a5c11217e89a4b71a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _prepare_once of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/help.py",
      "language": "Python",
      "line": 351,
      "offset": 15,
      "length": 25,
      "code": {
        "startLine": 349,
        "length": 25,
        "offset": 45,
        "surroundingCode": "        self.current_page = 0\n\n        await self.source._prepare_once()\n        page = await self.source.get_page(0)\n        kwargs = await self._get_kwargs_from_page(page)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "d16273dd06f8f2c9678c7164f0b972268a11f40eb86581b26d3c5ea3cc8459af"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[Blacklist\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "core/special_methods.py",
      "language": "Python",
      "line": 372,
      "offset": 14,
      "length": 12,
      "code": {
        "startLine": 370,
        "length": 12,
        "offset": 100,
        "surroundingCode": "    blacklisted_users = []\n    db_blacklist: collections.Iterable = database.Blacklist\n    for p in db_blacklist:\n        blacklisted_users.append(p.discordID)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "417d3820d8e55470f1b60ccf55457b0fda13da08bd047691dc69fd0309cc89ee"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[WhitelistedPrefix\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/ModBot/cogs/CommandsOnly.py",
      "language": "Python",
      "line": 21,
      "offset": 22,
      "length": 26,
      "code": {
        "startLine": 19,
        "length": 26,
        "offset": 129,
        "surroundingCode": "        if message.channel.id == MAIN_ID.ch_modCommands and not message.author.bot:\n            prefix = []\n            for p in database.WhitelistedPrefix:\n                prefix.append(p.prefix)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "72ae0a2837a00abd7af94793d28f40b41306caa327be2fb045284925c0fa633b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[Blacklist\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/Blacklist.py",
      "language": "Python",
      "line": 73,
      "offset": 18,
      "length": 18,
      "code": {
        "startLine": 71,
        "length": 18,
        "offset": 97,
        "surroundingCode": "        await interaction.response.defer(thinking=True)\n        empty_list = []\n        for p in database.Blacklist:\n            try:\n                user = self.bot.get_user(p.id)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "5e4c05d08dcfdab7fa7c15ef4b2c6da8337e16262f062c5f77362d4be8268c7a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[WhitelistedPrefix\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
      "language": "Python",
      "line": 141,
      "offset": 22,
      "length": 8,
      "code": {
        "startLine": 139,
        "length": 8,
        "offset": 44,
        "surroundingCode": "        response = []\n\n        for entry in PrefixDB:\n\n            if entry.status is True:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "fb01adae0ecc1d128030d6b1c086ae7b11534b5b0ba02d7f4102bdf55150ab04"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[StudyVCDB\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
      "language": "Python",
      "line": 207,
      "offset": 18,
      "length": 18,
      "code": {
        "startLine": 205,
        "length": 18,
        "offset": 95,
        "surroundingCode": "        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "d0fd5e13aee61c62b2d4ee29a7fd97339835b9d12ffa9e787f6512452b7c1978"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 62,
      "offset": 30,
      "length": 5,
      "code": {
        "startLine": 60,
        "length": 5,
        "offset": 81,
        "surroundingCode": "                list_ten = []\n                i = 0\n                for entry in query:\n                    if not isinstance(entry.Date, datetime):\n                        entry.Date = datetime.fromisoformat(entry.Date)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "1c8c42973f42e4896d1a7fc556587644c21cd13f980fa27a0367b04b9a091bc8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/Tutor.py",
      "language": "Python",
      "line": 152,
      "offset": 26,
      "length": 5,
      "code": {
        "startLine": 150,
        "length": 5,
        "offset": 69,
        "surroundingCode": "            list_ten = []\n            i = 0\n            for entry in query:\n\n                if not isinstance(entry.Date, datetime):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "6408d8219cb428ea28068fedfc57a1f21db85b2f11c0ea513ca5e40da40f1b09"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[TutorBot_Sessions\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 24,
      "offset": 22,
      "length": 26,
      "code": {
        "startLine": 22,
        "length": 26,
        "offset": 92,
        "surroundingCode": "    async def tutorsession(self):\n        now = datetime.now(self.est)\n        for entry in database.TutorBot_Sessions:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.Date)\n            val = int((TutorSession - now).total_seconds())"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "755647e1ad1a8c4604de15082fd4f1b3000c6c7f042942daca15e5b869a9a72e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[TutorSession_GracePeriod\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/TutorBot/cogs/TutorLoop.py",
      "language": "Python",
      "line": 123,
      "offset": 22,
      "length": 33,
      "code": {
        "startLine": 121,
        "length": 33,
        "offset": 104,
        "surroundingCode": "    async def tutorsession_graceperiod(self):\n        now = datetime.now(self.est)\n        for entry in database.TutorSession_GracePeriod:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.GP_DATE)\n            val = int((TutorSession - now).total_seconds())"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "78a1b9dd7bcd0f0bf4a68d3bf8dfcdbfca7b338f4d744e10f2e71944cd0e5fe9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[ResponseSpamBlacklist\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/set.py",
      "language": "Python",
      "line": 21,
      "offset": 20,
      "length": 30,
      "code": {
        "startLine": 19,
        "length": 30,
        "offset": 65,
        "surroundingCode": "def reload_blacklist():\n    blacklist.clear()\n    for user_id in database.ResponseSpamBlacklist:\n        blacklist.append(user_id)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "c3c0e605f0f44dd40059a17dfe6e4ecc7ae43f577290771720e4ac408c89d716"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[ResponseSpamBlacklist\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/bots/StudentEngadgement/cogs/set.py",
      "language": "Python",
      "line": 410,
      "offset": 24,
      "length": 30,
      "code": {
        "startLine": 408,
        "length": 30,
        "offset": 62,
        "surroundingCode": "\n    async def cog_load(self) -> None:\n        for user_id in database.ResponseSpamBlacklist:\n            blacklist.append(user_id)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "8acd7707bc6e411c72ee446551cb6a753fe1058d3ac03565f0c0303229fac8dd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type '{__ne__}', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 958,
      "offset": 60,
      "length": 4,
      "code": {
        "startLine": 956,
        "length": 4,
        "offset": 112,
        "surroundingCode": "\n            msg, file, S3_URL = await TicketExport(\n                self, channel, ResponseLogChannel, author, None, True\n            )\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "46df87eb0721b973e51bfe975747602514b68eb407f72a4db8f2c270ffe272fd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'collections.Iterable', got 'Type\\[TicketInfo\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "utils/events/TicketDropdown.py",
      "language": "Python",
      "line": 1124,
      "offset": 22,
      "length": 12,
      "code": {
        "startLine": 1122,
        "length": 12,
        "offset": 100,
        "surroundingCode": "    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        for entry in TicketInfoTB:\n            try:\n                channel: discord.TextChannel = self.bot.get_channel("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "94db1eedecd8ad2bdf77c611407eb6cfa5770f49a99c0baf382ba5a286df5de4"
}]}