{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "QDPY",
          "fullName": "Qodana for Python",
          "version": "213.7331.182",
          "rules": [],
          "taxa": [
            {
              "id": "EditorConfig",
              "name": "EditorConfig"
            },
            {
              "id": "Jupyter",
              "name": "Jupyter"
            },
            {
              "id": "Python",
              "name": "Python"
            },
            {
              "id": "XML",
              "name": "XML"
            },
            {
              "id": "JSON and JSON5",
              "name": "JSON and JSON5"
            },
            {
              "id": "RegExp",
              "name": "RegExp"
            },
            {
              "id": "Properties files",
              "name": "Properties files"
            },
            {
              "id": "Django",
              "name": "Django"
            },
            {
              "id": "HTML",
              "name": "HTML"
            },
            {
              "id": "General",
              "name": "General"
            },
            {
              "id": "Structural search",
              "name": "Structural search"
            },
            {
              "id": "RELAX NG",
              "name": "RELAX NG"
            },
            {
              "id": "Pyramid",
              "name": "Pyramid"
            },
            {
              "id": "Proofreading",
              "name": "Proofreading"
            },
            {
              "id": "Internationalization",
              "name": "Internationalization"
            },
            {
              "id": "Version control",
              "name": "Version control"
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        },
        "extensions": [
          {
            "name": "org.editorconfig.editorconfigjetbrains",
            "version": "213.7331",
            "rules": [
              {
                "id": "EditorConfigCharClassRedundancy",
                "shortDescription": {
                  "text": "Unnecessary character class"
                },
                "fullDescription": {
                  "text": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example '[a]'→'a'.",
                  "markdown": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example `[a]`→`a`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigDeprecatedDescriptor",
                "shortDescription": {
                  "text": "Deprecated property"
                },
                "fullDescription": {
                  "text": "Reports EditorConfig properties that are no longer supported.",
                  "markdown": "Reports EditorConfig properties that are no longer supported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationUniqueness",
                "shortDescription": {
                  "text": "Extra top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple top-level declarations. There can be only one optional “root=true” top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed.",
                  "markdown": "Reports multiple top-level declarations. There can be only one optional \"root=true\" top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNumerousWildcards",
                "shortDescription": {
                  "text": "Too many wildcards"
                },
                "fullDescription": {
                  "text": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues.",
                  "markdown": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigWildcardRedundancy",
                "shortDescription": {
                  "text": "Redundant wildcard"
                },
                "fullDescription": {
                  "text": "Reports wildcards that become redundant when the “**” wildcard is used in the same section. The “**” wildcard defines a broader set of files than any other wildcard. That is why, any other wildcard used in the same section has no affect and can be removed.",
                  "markdown": "Reports wildcards that become redundant when the \"\\*\\*\" wildcard is used in the same section.\n\n\nThe \"\\*\\*\" wildcard defines a broader set of files than any other wildcard.\nThat is why, any other wildcard used in the same section has no affect and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPartialOverride",
                "shortDescription": {
                  "text": "Overlapping sections"
                },
                "fullDescription": {
                  "text": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: '[{foo,bar}]' and '[{foo,bas}]' both contain “foo”.",
                  "markdown": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: `[{foo,bar}]` and `[{foo,bas}]` both contain \"foo\"."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptySection",
                "shortDescription": {
                  "text": "Empty section"
                },
                "fullDescription": {
                  "text": "Reports sections that do not contain any EditorConfig properties.",
                  "markdown": "Reports sections that do not contain any EditorConfig properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigHeaderUniqueness",
                "shortDescription": {
                  "text": "EditorConfig section is not unique"
                },
                "fullDescription": {
                  "text": "Reports sections that define the same file pattern as other sections.",
                  "markdown": "Reports sections that define the same file pattern as other sections."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowingOption",
                "shortDescription": {
                  "text": "Overriding property"
                },
                "fullDescription": {
                  "text": "Reports properties that override the same properties defined earlier in the file. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes the same files as '[*.java]' but also sets indent_size to value 2. Thus the first declaration 'indent_size=4'will be ignored.",
                  "markdown": "Reports properties that override the same properties defined earlier in the file.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes the same files as `[*.java]` but also sets indent_size to value 2. Thus the first declaration `indent_size=4`will be ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigListAcceptability",
                "shortDescription": {
                  "text": "Unexpected value list"
                },
                "fullDescription": {
                  "text": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified.",
                  "markdown": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowedOption",
                "shortDescription": {
                  "text": "Overridden property"
                },
                "fullDescription": {
                  "text": "Reports properties that are already defined in other sections. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes all '*.java' files too but it also redefines indent_size. As a result the value 2 will be used for files matching '*.java'.",
                  "markdown": "Reports properties that are already defined in other sections.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes all `*.java` files too but it also redefines indent_size. As a result the value 2 will be used for files matching `*.java`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptyHeader",
                "shortDescription": {
                  "text": "Empty header"
                },
                "fullDescription": {
                  "text": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by 'gitignore'.",
                  "markdown": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by `gitignore`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueCorrectness",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports property values that do not meet value restrictions. For example, some properties may be only “true” or “false”, others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them.",
                  "markdown": "Reports property values that do not meet value restrictions. For example, some properties may be only \"true\" or \"false\", others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueUniqueness",
                "shortDescription": {
                  "text": "Non-unique list value"
                },
                "fullDescription": {
                  "text": "Reports duplicates in lists of values.",
                  "markdown": "Reports duplicates in lists of values."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigMissingRequiredDeclaration",
                "shortDescription": {
                  "text": "Required declarations are missing"
                },
                "fullDescription": {
                  "text": "Reports properties that miss the required declarations. Refer to the documentation for more information.",
                  "markdown": "Reports properties that miss the required declarations. Refer to the documentation for more information."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigCharClassLetterRedundancy",
                "shortDescription": {
                  "text": "Duplicate character class letter"
                },
                "fullDescription": {
                  "text": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example '[aa]'.",
                  "markdown": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example `[aa]`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigKeyCorrectness",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not supported by the IDE. Note: some “ij” domain properties may require specific language plugins.",
                  "markdown": "Reports properties that are not supported by the IDE. Note: some \"ij\" domain properties may require specific language plugins."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternEnumerationRedundancy",
                "shortDescription": {
                  "text": "Unnecessary braces"
                },
                "fullDescription": {
                  "text": "Reports pattern lists that are either empty '{}' or contain just one pattern, for example '{foo}'. The braces are needed only if there are two and more, for example: '{foo,bar}'",
                  "markdown": "Reports pattern lists that are either empty `{}` or contain just one pattern, for example `{foo}`. The braces are needed only if there are two and more, for example: `{foo,bar}`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigSpaceInHeader",
                "shortDescription": {
                  "text": "Space in file pattern"
                },
                "fullDescription": {
                  "text": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed.",
                  "markdown": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigOptionRedundancy",
                "shortDescription": {
                  "text": "Redundant property"
                },
                "fullDescription": {
                  "text": "Reports properties that are redundant when another applicable section already contains the same property and value. For example: '[*]\nindent_size=4\n[*.java]\nindent_size=4' are both applicable to '*.java' files and define the same 'indent_size' value.",
                  "markdown": "Reports properties that are redundant when another applicable section already contains the same property and value.\n\n\nFor example:\n\n\n    [*]\n    indent_size=4\n    [*.java]\n    indent_size=4\n\nare both applicable to `*.java` files and define the same `indent_size` value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationCorrectness",
                "shortDescription": {
                  "text": "Unexpected top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports unexpected top-level declarations. Top-level declarations other than “root=true” are not allowed in the EditorConfig file.",
                  "markdown": "Reports unexpected top-level declarations. Top-level declarations other than \"root=true\" are not allowed in the EditorConfig file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigReferenceCorrectness",
                "shortDescription": {
                  "text": "Invalid reference"
                },
                "fullDescription": {
                  "text": "Reports identifiers that are either unknown or have a wrong type.",
                  "markdown": "Reports identifiers that are either unknown or have a wrong type."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnusedDeclaration",
                "shortDescription": {
                  "text": "Unused declaration"
                },
                "fullDescription": {
                  "text": "Reports unused declarations. Such declarations can be removed.",
                  "markdown": "Reports unused declarations. Such declarations can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPairAcceptability",
                "shortDescription": {
                  "text": "Unexpected key-value pair"
                },
                "fullDescription": {
                  "text": "Reports key-value pairs that are not allowed in the current context.",
                  "markdown": "Reports key-value pairs that are not allowed in the current context."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternRedundancy",
                "shortDescription": {
                  "text": "Duplicate or redundant pattern"
                },
                "fullDescription": {
                  "text": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in '[{*.java,*}]' the first '*.java' pattern defines a narrower scope compared to '*'. That is why it is redundant and can be removed.",
                  "markdown": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in `[{*.java,*}]` the first `*.java` pattern defines a narrower scope compared to `*`. That is why it is redundant and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNoMatchingFiles",
                "shortDescription": {
                  "text": "No matching files"
                },
                "fullDescription": {
                  "text": "Reports sections with wildcard patterns that do not match any files under the directory in which the '.editorconfig' file is located.",
                  "markdown": "Reports sections with wildcard patterns that do not match any files under the directory in which the `.editorconfig` file is located."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnexpectedComma",
                "shortDescription": {
                  "text": "Unexpected comma"
                },
                "fullDescription": {
                  "text": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists.",
                  "markdown": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "Pythonid",
            "version": "213.7331",
            "rules": [
              {
                "id": "JupyterPackageInspection",
                "shortDescription": {
                  "text": "The 'jupyter' package is not installed"
                },
                "fullDescription": {
                  "text": "Reports cases when the 'jupyter' package is not installed for the selected Python interpreter. Without a properly installed 'jupyter' package, you cannot execute Jupyter notebooks. Click the corresponding link on the warning banner to install the missing package. You can also install the package in the Project Settings/Preferences or in the Python Packages tool window. See Installing Python package for more details.",
                  "markdown": "Reports cases when the `jupyter` package is not installed for the selected\nPython interpreter. Without a properly installed `jupyter` package, you cannot\nexecute Jupyter notebooks.\n\nClick the corresponding link on the warning banner to install the missing\npackage. You can also install the package in the Project **Settings/Preferences** or in the\n**Python Packages** tool window.\n\nSee [Installing Python package](https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html) for more details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Jupyter",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySetFunctionToLiteralInspection",
                "shortDescription": {
                  "text": "Function call can be replaced with set literal"
                },
                "fullDescription": {
                  "text": "Reports calls to the 'set' function that can be replaced with the 'set' literal. Example: def do_mult(a, b):\n    c = a * b\n    return set([c, a, b])\n When the quick-fix is applied, the code changes to: def do_mult(a, b):\n    c = a * b\n    return {c, a, b}",
                  "markdown": "Reports calls to the `set` function that can be replaced with\nthe `set` literal.\n\n**Example:**\n\n```\ndef do_mult(a, b):\n    c = a * b\n    return set([c, a, b])\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef do_mult(a, b):\n    c = a * b\n    return {c, a, b}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStatementEffectInspection",
                "shortDescription": {
                  "text": "Statement has no effect"
                },
                "fullDescription": {
                  "text": "Reports statements that have no effect. Example: class Car:\n    def __init__(self, speed=0):\n        self.speed = speed\n        self.time # has no effect\n\n2 + 3 # has no effect\n In this example, you can either add a field 'time' to the 'Car' class or introduce variables for the problematic statements.",
                  "markdown": "Reports statements that have no effect.\n\n**Example:**\n\n```\nclass Car:\n    def __init__(self, speed=0):\n        self.speed = speed\n        self.time # has no effect\n\n2 + 3 # has no effect\n```\n\nIn this example, you can either add a field `time` to the `Car` class or\nintroduce variables for the problematic statements."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMandatoryEncodingInspection",
                "shortDescription": {
                  "text": "No encoding specified for file"
                },
                "fullDescription": {
                  "text": "Reports a missing encoding comment in Python 2. Example: class Book(object):\n    def __init__(self):\n        pass\n When the quick-fix is applied, the missing comment is added: # coding=utf-8\nclass Book(object):\n    def __init__(self):\n        pass",
                  "markdown": "Reports a missing encoding comment in Python 2.\n\n**Example:**\n\n```\nclass Book(object):\n    def __init__(self):\n        pass\n```\n\nWhen the quick-fix is applied, the missing comment is added:\n\n```\n# coding=utf-8\nclass Book(object):\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInconsistentIndentationInspection",
                "shortDescription": {
                  "text": "Inconsistent indentation"
                },
                "fullDescription": {
                  "text": "Reports inconsistent indentation in Python source files when, for example, you use a mixture of tabs and spaces in your code.",
                  "markdown": "Reports inconsistent indentation in Python source files when, for example,\nyou use a mixture of tabs and spaces in your code."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAttributeOutsideInitInspection",
                "shortDescription": {
                  "text": "An instance attribute is defined outside `__init__`"
                },
                "fullDescription": {
                  "text": "Reports a problem when instance attribute definition is outside '__init__' method. Example:     class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n When the quick-fix is applied, the code sample changes to:     class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass",
                  "markdown": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypedDictInspection",
                "shortDescription": {
                  "text": "Invalid TypedDict definition and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid definition and usage of TypedDict. Example: from typing import TypedDict\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n    rate: int = 10  # Right-hand side values are not supported\n\n    def method(self): # Invalid statement in TypedDict\n        pass\n\n\nm = Movie(name=\"name\", year=1000, rate=9)\nprint(m[\"director\"])  # There is no the 'director' key in 'Movie'\ndel m[\"name\"]  # The 'name' key cannot be deleted\nm[\"year\"] = \"1001\"  # Expected 'int', got 'str'",
                  "markdown": "Reports invalid definition and usage of\n[TypedDict](https://www.python.org/dev/peps/pep-0589/).\n\n**Example:**\n\n```\nfrom typing import TypedDict\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n    rate: int = 10  # Right-hand side values are not supported\n\n    def method(self): # Invalid statement in TypedDict\n        pass\n\n\nm = Movie(name=\"name\", year=1000, rate=9)\nprint(m[\"director\"])  # There is no the 'director' key in 'Movie'\ndel m[\"name\"]  # The 'name' key cannot be deleted\nm[\"year\"] = \"1001\"  # Expected 'int', got 'str'\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPep8Inspection",
                "shortDescription": {
                  "text": "PEP 8 coding style violation"
                },
                "fullDescription": {
                  "text": "Reports violations of the PEP 8 coding style guide by running the bundled pycodestyle.py tool.",
                  "markdown": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingTypeHintsInspection",
                "shortDescription": {
                  "text": "Missing type hinting for function definition"
                },
                "fullDescription": {
                  "text": "Reports missing type hints for function declaration in one of the two formats: parameter annotations or a type comment. Select the Only when types are known checkbox if you want the inspection check the types collected from runtime or inferred.",
                  "markdown": "Reports missing type hints for function declaration in\none of the two formats: parameter annotations or a type comment.\n\nSelect the **Only when types are known** checkbox if you want the inspection check\nthe types collected from runtime or inferred."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTupleItemAssignmentInspection",
                "shortDescription": {
                  "text": "Tuple item assignment is prohibited"
                },
                "fullDescription": {
                  "text": "Reports assignments to a tuple item. t = ('red', 'blue', 'green', 'white')\nt[3] = 'black'\n A quick-fix offers to replace the tuple with a list.",
                  "markdown": "Reports assignments to a tuple item.\n\n```\nt = ('red', 'blue', 'green', 'white')\nt[3] = 'black'\n```\n\nA quick-fix offers to replace the tuple with a list."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedUrlInspection",
                "shortDescription": {
                  "text": "Django {% url %} tag arguments are unresolved"
                },
                "fullDescription": {
                  "text": "Reports a missing url in the 'url' tag. Example: {% url 'url_name' %}\n The IDE shows a warning if 'url_name' is not defined in the 'urls' file.",
                  "markdown": "Reports a missing url in the `url` tag.\n\n**Example:**\n\n```\n{% url 'url_name' %}\n```\n\nThe IDE shows a warning if `url_name` is not defined in the `urls` file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedStaticReferenceInspection",
                "shortDescription": {
                  "text": "Unresolved static reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved references to static resources. Example: {% load staticfiles %}\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'polls/style.css' %}\" />\n In this example, 'style.css' is highlighted if there is no such a file in the 'static/poll' directory.",
                  "markdown": "Reports unresolved references to static resources.\n\n**Example:**\n\n```\n{% load staticfiles %}\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'polls/style.css' %}\" />\n```\n\nIn this example, `style.css` is highlighted if there is no such a file in the `static/poll`\ndirectory."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInitNewSignatureInspection",
                "shortDescription": {
                  "text": "Incompatible signatures of __new__ and __init__"
                },
                "fullDescription": {
                  "text": "Reports incompatible signatures of the '__new__' and '__init__' methods. Example: class MyClass(object):\n    def __new__(cls, arg1):\n        return super().__new__(cls)\n\n    def __init__(self):\n        pass\n If the '__new__' and '__init__' have different arguments, then the 'MyClass' cannot be instantiated. As a fix, the IDE offers to apply the Change Signature refactoring.",
                  "markdown": "Reports incompatible signatures of the `__new__` and `__init__` methods.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def __new__(cls, arg1):\n        return super().__new__(cls)\n\n    def __init__(self):\n        pass\n```\n\nIf the `__new__` and `__init__` have different arguments, then the `MyClass`\ncannot be instantiated.\n\nAs a fix, the IDE offers to apply the Change Signature refactoring."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDunderSlotsInspection",
                "shortDescription": {
                  "text": "Invalid usages of classes with  '__slots__' definitions"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of a class with '__slots__' definitions. Example: class Foo:\n    __slots__ = ['foo', 'bar']\n\n\nfoo = Foo()\nfoo.baz = 'spam'",
                  "markdown": "Reports invalid usages of a class with `__slots__` definitions.\n\n**Example:**\n\n```\nclass Foo:\n    __slots__ = ['foo', 'bar']\n\n\nfoo = Foo()\nfoo.baz = 'spam'\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EndBlockNamesInspection",
                "shortDescription": {
                  "text": "Django endblock name doesn't match the block name"
                },
                "fullDescription": {
                  "text": "Reports incorrect names of the closing blocks. Example:   {% block my_block %}\n  {% endblock not_correct %}",
                  "markdown": "Reports incorrect names of the closing blocks.\n\n**Example:**\n\n```\n  {% block my_block %}\n  {% endblock not_correct %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingConstructorInspection",
                "shortDescription": {
                  "text": "Missed call to '__init__' of the super class"
                },
                "fullDescription": {
                  "text": "Reports cases when a call to the 'super' constructor in a class is missed. Example: class Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        pass\n The 'Pear' class should have a 'super' call in the '__init__' method. When the quick-fix is applied, the code changes to: class Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        super().__init__()",
                  "markdown": "Reports cases when a call to the `super` constructor in a class is missed.\n\n**Example:**\n\n```\nclass Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        pass\n```\n\nThe `Pear` class should have a `super` call in the `__init__`\nmethod.\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nclass Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        super().__init__()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDefaultArgumentInspection",
                "shortDescription": {
                  "text": "The default argument is mutable"
                },
                "fullDescription": {
                  "text": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for an argument. Default argument values are evaluated only once at function definition time, which means that modifying the default value of the argument will affect all subsequent calls of that function. Example: def func(s, cache={}):\n    cache[s] = None\n When the quick-fix is applied, the code changes to: def func(s, cache=None):\n    if cache is None:\n        cache = {}\n    cache[s] = None",
                  "markdown": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for\nan argument.   \n\nDefault argument values are evaluated only once at function definition time,\nwhich means that modifying the\ndefault value of the argument will affect all subsequent calls of that function.\n\n**Example:**\n\n```\ndef func(s, cache={}):\n    cache[s] = None\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef func(s, cache=None):\n    if cache is None:\n        cache = {}\n    cache[s] = None\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyShadowingBuiltinsInspection",
                "shortDescription": {
                  "text": "Shadowing built-in names"
                },
                "fullDescription": {
                  "text": "Reports shadowing built-in names, such as 'len' or 'list'. Example: def len(a, b, c):\n    d = a + b + c\n    return d\n In this code fragment, the 'len' built-in name is used. The IDE offers to apply the Rename refactoring as a fix.",
                  "markdown": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySimplifyBooleanCheckInspection",
                "shortDescription": {
                  "text": "Redundant boolean variable check"
                },
                "fullDescription": {
                  "text": "Reports equality comparison with a boolean literal. Example: def func(s):\n    if s.isdigit() == True:\n        return int(s)\n With the quick-fix applied, the code fragment will be simplified to: def func(s):\n    if s.isdigit():\n        return int(s)",
                  "markdown": "Reports equality comparison with a boolean literal.\n\n**Example:**\n\n```\ndef func(s):\n    if s.isdigit() == True:\n        return int(s)\n```\n\nWith the quick-fix applied, the code fragment will be simplified to:\n\n```\ndef func(s):\n    if s.isdigit():\n        return int(s)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodOverridingInspection",
                "shortDescription": {
                  "text": "Method signature does not match signature of overridden method"
                },
                "fullDescription": {
                  "text": "Reports inconsistencies in overriding method signatures. Example: class Book:\n    def add_title(self):\n        pass\n\n\nclass Novel(Book):\n    def add_title(self, text):\n        pass\n Parameters of the 'add_title' method in the 'Novel' class do not match the method signature specified in the 'Book' class. As a fix, the IDE offers to apply the Change Signature refactoring.",
                  "markdown": "Reports inconsistencies in overriding method signatures.\n\n**Example:**\n\n```\nclass Book:\n    def add_title(self):\n        pass\n\n\nclass Novel(Book):\n    def add_title(self, text):\n        pass\n```\n\nParameters of the `add_title` method in the `Novel` class do not match the method\nsignature specified in the `Book` class. As a fix, the IDE offers to apply the Change Signature\nrefactoring."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTestParametrizedInspection",
                "shortDescription": {
                  "text": "Incorrect arguments in @pytest.mark.parametrize"
                },
                "fullDescription": {
                  "text": "Reports functions that are decorated with @pytest.mark.parametrize but do not have arguments to accept parameters of the decorator.",
                  "markdown": "Reports functions that are decorated with [@pytest.mark.parametrize](https://docs.pytest.org/en/stable/parametrize.html) but do not have arguments to accept\nparameters of the decorator."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDecoratorInspection",
                "shortDescription": {
                  "text": "Class-specific decorator is used outside the class"
                },
                "fullDescription": {
                  "text": "Reports usages of '@classmethod' or '@staticmethod' decorators in methods outside a class. Example: class State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\n@classmethod\ndef change_state(self):\n    pass\n The 'change_state' method should not use the '@classmethod' decorator or it should be moved to the 'State' class declaration. If you apply the 'Remove decorator' action, the code changes to: class State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\ndef change_state(self):\n    pass",
                  "markdown": "Reports usages of `@classmethod` or `@staticmethod` decorators\nin methods outside a class.\n\n**Example:**\n\n```\nclass State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\n@classmethod\ndef change_state(self):\n    pass\n```\n\nThe `change_state` method should not use the `@classmethod` decorator or it should be\nmoved to the `State` class declaration.\n\nIf you apply the `Remove decorator` action, the code changes to:\n\n```\nclass State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\ndef change_state(self):\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAsyncCallInspection",
                "shortDescription": {
                  "text": "Missing `await` syntax in coroutine calls"
                },
                "fullDescription": {
                  "text": "Reports coroutines that were called without using the 'await' syntax. Example: async def bar():\n    pass\n\n\nasync def foo():\n    bar()\n After the quick-fix is applied, the code changes to: async def bar():\n    pass\n\n\nasync def foo():\n    await bar()",
                  "markdown": "Reports coroutines that were called\nwithout using the `await` syntax.\n\n**Example:**\n\n```\nasync def bar():\n    pass\n\n\nasync def foo():\n    bar()\n```\n\nAfter the quick-fix is applied, the code changes to:\n\n```\nasync def bar():\n    pass\n\n\nasync def foo():\n    await bar()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyComparisonWithNoneInspection",
                "shortDescription": {
                  "text": "Using equality operators to compare with None"
                },
                "fullDescription": {
                  "text": "Reports comparisons with 'None'. That type of comparisons should always be done with 'is' or 'is not', never the equality operators. Example: a = 2\n\n\nif a == None:\n    print(\"Success\")\n Once the quick-fix is applied, the code changes to: a = 2\n\n\nif a is None:\n    print(\"Success\")",
                  "markdown": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CommandLineInspection",
                "shortDescription": {
                  "text": "Incorrect CLI syntax"
                },
                "fullDescription": {
                  "text": "Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies that option names and arguments are correct. Do not disable the inspection if you are going to use command-line interfaces like manage.py in Django.",
                  "markdown": "Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies\nthat option names and arguments are correct.\n\nDo not disable the inspection if you are going to use command-line interfaces like [manage.py in Django](https://www.jetbrains.com/help/pycharm/running-manage-py.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyCallingNonCallableInspection",
                "shortDescription": {
                  "text": "Attempt to call a non-callable object"
                },
                "fullDescription": {
                  "text": "Reports a problem when you are trying to call objects that are not callable, like, for example, properties: class Record:\n    @property\n    def as_json(self):\n\njson = Record().as_json()",
                  "markdown": "Reports a problem when you are trying\nto call objects that are not callable, like, for example, properties:\n\n```\nclass Record:\n    @property\n    def as_json(self):\n\njson = Record().as_json()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnreachableCodeInspection",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports code fragments that cannot be normally reached. Example: if True:\n    print('Yes')\nelse:\n    print('No')\n As a fix, you might want to check and modify the algorithm to ensure it implements the expected logic.",
                  "markdown": "Reports code fragments that cannot be normally reached.\n\n**Example:**\n\n```\nif True:\n    print('Yes')\nelse:\n    print('No')\n```\n\nAs a fix, you might want to check and modify the algorithm to ensure it implements\nthe expected logic."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyChainedComparisonsInspection",
                "shortDescription": {
                  "text": "Too complex chained comparisons"
                },
                "fullDescription": {
                  "text": "Reports chained comparisons that can be simplified. Example: 'def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if x >= xmin and x <= xmax:\n          pass' The IDE offers to simplify 'if x >= xmin and x <= xmax'. When the quick-fix is applied, the code changes to: 'def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if xmin <= x <= xmax:\n          pass'",
                  "markdown": "Reports chained comparisons that can be simplified.\n\n**Example:**\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if x >= xmin and x <= xmax:\n              pass\n\nThe IDE offers to simplify `if x >= xmin and x <= xmax`.\nWhen the quick-fix is applied, the code changes to:\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if xmin <= x <= xmax:\n              pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodParametersInspection",
                "shortDescription": {
                  "text": "Improper first parameter"
                },
                "fullDescription": {
                  "text": "Reports methods that lack the first parameter that is usually named 'self'. Example: class Movie:\n\n   def show():\n       pass\n When the quick-fix is applied, the code changes to: class Movie:\n\n   def show(self):\n       pass\n The inspection also reports naming issues in class methods. Example: class Movie:\n    @classmethod\n    def show(abc):\n        pass\n Since the first parameter of a class method should be 'cls', the IDE provides a quick-fix to rename it.",
                  "markdown": "Reports methods that lack the first parameter that is usually\nnamed `self`.\n\n**Example:**\n\n```\nclass Movie:\n\n   def show():\n       pass\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nclass Movie:\n\n   def show(self):\n       pass\n```\n\nThe inspection also reports naming issues in class methods.\n\n**Example:**\n\n```\nclass Movie:\n    @classmethod\n    def show(abc):\n        pass\n```\n\nSince the first parameter of a class method should be `cls`, the IDE provides a quick-fix\nto rename it."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDocstringTypesInspection",
                "shortDescription": {
                  "text": "Type in docstring does not match inferred type"
                },
                "fullDescription": {
                  "text": "Reports types in docstring that do not match dynamically inferred types.",
                  "markdown": "Reports types in docstring that do not match dynamically inferred types."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoBrokenLineCommentInspection",
                "shortDescription": {
                  "text": "Broken line comment"
                },
                "fullDescription": {
                  "text": "Reports '#}' line comment ends in Django templates that do not have a matching line comment start. Example: comment #}\n The IDE highlights '#}' as it requires the corresponding '{#' token.",
                  "markdown": "Reports `#}` line comment ends in Django templates that do not have a\nmatching line comment start.\n\n**Example:**\n\n```\ncomment #}\n```\n\nThe IDE highlights `#}` as it requires the corresponding `{#` token."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyCompatibilityInspection",
                "shortDescription": {
                  "text": "Code is incompatible with specific Python versions"
                },
                "fullDescription": {
                  "text": "Reports incompatibility with the specified versions of Python. Enable this inspection if you need your code to be compatible with a range of Python versions, for example, if you are building a library. To define the range of the inspected Python versions, select the corresponding checkboxes in the Options section. For more information about the Python versions supported by the IDE, see the web help.",
                  "markdown": "Reports incompatibility with the specified versions of Python.\nEnable this inspection if you need your code to be compatible with a range of Python versions, for example,\nif you are building a library.\n\nTo define the range of the inspected Python versions, select the corresponding checkboxes in the **Options**\nsection.\n\nFor more information about the Python versions supported by the IDE, see the\n[web help](https://www.jetbrains.com/help/pycharm/python.html#support)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyGlobalUndefinedInspection",
                "shortDescription": {
                  "text": "Global variable is not defined at the module level"
                },
                "fullDescription": {
                  "text": "Reports problems when a variable defined through the 'global' statement is not defined in the module scope. Example: def foo():\n    global bar\n    print(bar)\n\nfoo()\n As a fix, you can move the global variable declaration: global bar\n\n\ndef foo():\n    print(bar)",
                  "markdown": "Reports problems when a variable defined through the `global`\nstatement is not defined in the module scope.\n\n**Example:**\n\n```\ndef foo():\n    global bar\n    print(bar)\n\nfoo()\n```\n\nAs a fix, you can move the global variable declaration:\n\n```\nglobal bar\n\n\ndef foo():\n    print(bar)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodFirstArgAssignmentInspection",
                "shortDescription": {
                  "text": "First argument of the method is reassigned"
                },
                "fullDescription": {
                  "text": "Reports cases when the first parameter, such as 'self' or 'cls', is reassigned in a method. Because in most cases, there are no objectives in such reassignment, the IDE indicates an error. Example: class Account:\n    def calc(self, balance):\n        if balance == 0:\n            self = balance\n        return self\n As a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct, you can invoke intention actions for this code and opt to ignore the warning.",
                  "markdown": "Reports cases when the first parameter,\nsuch as `self` or `cls`, is reassigned in a method.\nBecause in most cases, there are no objectives in such reassignment, the\nIDE indicates an error.\n\n**Example:**\n\n```\nclass Account:\n    def calc(self, balance):\n        if balance == 0:\n            self = balance\n        return self\n```\n\nAs a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct,\nyou can invoke intention actions for this code and opt to ignore the warning."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyProtocolInspection",
                "shortDescription": {
                  "text": "Invalid protocol definitions and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid definitions and usages of protocols introduced in PEP-544. Example: from typing import Protocol\n\n\nclass MyProtocol(Protocol):\n    def method(self, p: int) -> str:\n        pass\n\n\nclass MyClass(MyProtocol):\n    def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n        pass\n\n\nclass MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n    pass",
                  "markdown": "Reports invalid definitions and usages of protocols introduced in\n[PEP-544](https://www.python.org/dev/peps/pep-0544/).\n\n**Example:**\n\n```\nfrom typing import Protocol\n\n\nclass MyProtocol(Protocol):\n    def method(self, p: int) -> str:\n        pass\n\n\nclass MyClass(MyProtocol):\n    def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n        pass\n\n\nclass MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n    pass\n\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypeHintsInspection",
                "shortDescription": {
                  "text": "Invalid type hints definitions and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of type hints. Example: from typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n Available quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
                  "markdown": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodMayBeStaticInspection",
                "shortDescription": {
                  "text": "Method is not declared static"
                },
                "fullDescription": {
                  "text": "Reports any methods that do not require a class instance creation and can be made static. Example: class MyClass(object):\n    def my_method(self, x):\n        print(x)\n If a Make function from method quick-fix is applied, the code changes to: def my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n If you select the Make method static quick-fix, the '@staticmethod' decorator is added: class MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)",
                  "markdown": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTupleAssignmentBalanceInspection",
                "shortDescription": {
                  "text": "Tuple assignment balance is incorrect"
                },
                "fullDescription": {
                  "text": "Reports cases when the number of expressions on the right-hand side and targets on the left-hand side are not the same. Example: t = ('red', 'blue', 'green', 'white')\n(c1, c2, c3) = t\n As a quick-fix, you can modify the highlighted code fragment to restore the tuple balance.",
                  "markdown": "Reports cases when the number of expressions on the right-hand side\nand targets on the left-hand side are not the same.\n\n**Example:**\n\n```\nt = ('red', 'blue', 'green', 'white')\n(c1, c2, c3) = t\n```\n\nAs a quick-fix, you can modify the highlighted code fragment to restore the tuple\nbalance."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassHasNoInitInspection",
                "shortDescription": {
                  "text": "Class has no `__init__` method"
                },
                "fullDescription": {
                  "text": "Reports cases in Python 2 when a class has no '__init__' method, neither its parent classes. Example: class Book():\n    pass\n The quick-fix adds the '__init__' method: class Book():\n    def __init__(self):\n        pass",
                  "markdown": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyArgumentEqualDefaultInspection",
                "shortDescription": {
                  "text": "The function argument is equal to the default parameter value"
                },
                "fullDescription": {
                  "text": "Reports a problem when an argument passed to the function is equal to the default parameter value. This inspection is disabled by default to avoid performance degradation. Example: def my_function(a: int = 2):\n    print(a)\n\n\nmy_function(2)",
                  "markdown": "Reports a problem when an argument\npassed to the function is equal to the default parameter value.\n\nThis inspection is disabled by default to avoid performance degradation.\n\n**Example:**\n\n```\ndef my_function(a: int = 2):\n    print(a)\n\n\nmy_function(2)\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CythonUsageBeforeDeclarationInspection",
                "shortDescription": {
                  "text": "Cython variable is used before its declaration"
                },
                "fullDescription": {
                  "text": "Reports Cython variables being referenced before declaration. Example: cdef int c_x\n\nprint(c_x, c_y)  # Variable 'c_y' is used before its declaration\n\ncdef int c_y = 0",
                  "markdown": "Reports Cython variables being referenced before declaration.\n\n**Example:**\n\n```\ncdef int c_x\n\nprint(c_x, c_y)  # Variable 'c_y' is used before its declaration\n\ncdef int c_y = 0\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDictCreationInspection",
                "shortDescription": {
                  "text": "Dictionary creation can be rewritten by dictionary literal"
                },
                "fullDescription": {
                  "text": "Reports situations when you can rewrite dictionary creation by using a dictionary literal. This approach brings performance improvements. Example: dic = {}\ndic['var'] = 1\n When the quick-fix is applied, the code changes to: dic = {'var': 1}",
                  "markdown": "Reports situations when you can rewrite dictionary creation\nby using a dictionary literal.\n\nThis approach brings performance improvements.\n\n**Example:**\n\n```\ndic = {}\ndic['var'] = 1\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndic = {'var': 1}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStringFormatInspection",
                "shortDescription": {
                  "text": "Errors in string formatting operations"
                },
                "fullDescription": {
                  "text": "Reports errors in string formatting operations. Example 1: \"Hello {1}\".format(\"people\")\n Example 2: def bar():\n    return 1\n\n\n\"%s %s\" % bar()\n As a fix, you need to rewrite string formatting fragments to adhere to the formatting syntax.",
                  "markdown": "Reports errors in string formatting operations.\n\n**Example 1:**\n\n```\n\"Hello {1}\".format(\"people\")\n```\n\n**Example 2:**\n\n```\ndef bar():\n    return 1\n\n\n\"%s %s\" % bar()\n```\n\nAs a fix, you need to rewrite string formatting fragments to\nadhere to the [formatting syntax](https://docs.python.org/3/library/string.html#format-string-syntax)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyExceptionInheritInspection",
                "shortDescription": {
                  "text": "Exceptions do not inherit from standard 'Exception' class"
                },
                "fullDescription": {
                  "text": "Reports cases when a custom exception class is raised but does not inherit from the builtin Exception class. Example: class A:\n    pass\n\n\ndef me_exception():\n    raise A()\n The proposed quick-fix changes the code to: class A(Exception):\n    pass\n\n\ndef me_exception():\n    raise A()",
                  "markdown": "Reports cases when a custom exception class is\nraised but does not inherit from the\n[builtin Exception class](https://docs.python.org/3/library/exceptions.html).\n\n**Example:**\n\n```\nclass A:\n    pass\n\n\ndef me_exception():\n    raise A()\n```\n\nThe proposed quick-fix changes the code to:\n\n```\nclass A(Exception):\n    pass\n\n\ndef me_exception():\n    raise A()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAssignmentToLoopOrWithParameterInspection",
                "shortDescription": {
                  "text": "Assignments to 'for' loop or 'with' statement parameter"
                },
                "fullDescription": {
                  "text": "Reports the cases when you rewrite a loop variable with an inner loop:     for i in range(5):\n      for i in range(20, 25):\n          print(\"Inner\", i)\n      print(\"Outer\", i)\n  It also warns you if a variable declared in the 'with' statement is redeclared inside of the statement body:     with open(\"file\") as f:\n      f.read()\n      with open(\"file\") as f:",
                  "markdown": "Reports the cases when you rewrite a loop variable with an inner loop:\n\n```\n    for i in range(5):\n      for i in range(20, 25):\n          print(\"Inner\", i)\n      print(\"Outer\", i)\n  \n```\n\nIt also warns you if a variable declared in the `with` statement is redeclared inside of the statement body:\n\n```\n    with open(\"file\") as f:\n      f.read()\n      with open(\"file\") as f:\n  \n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedFilterInspection",
                "shortDescription": {
                  "text": "Unresolved filter"
                },
                "fullDescription": {
                  "text": "Reports unresolved filters in Django templates. Example:   {{ my_value|cool_filter:\"arg\" }}",
                  "markdown": "Reports unresolved filters in Django templates.\n\n**Example:**\n\n```\n  {{ my_value|cool_filter:\"arg\" }}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoRelationInspection",
                "shortDescription": {
                  "text": "Incorrect comparison expression in Django templates"
                },
                "fullDescription": {
                  "text": "Reports missing whitespaces before and after comparison operators in Django templates. Example: {% if my_var==1 %}\n{% endif %}",
                  "markdown": "Reports missing whitespaces before and after comparison operators in Django templates.\n\n**Example:**\n\n```\n{% if my_var==1 %}\n{% endif %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedTagInspection",
                "shortDescription": {
                  "text": "Unresolved tag"
                },
                "fullDescription": {
                  "text": "Reports unresolved tags in Django templates. Example: <h1>{{ question.question_text }}</h1>\n<start>\n The IDE highlights '<start>'. You can either remove the tag or apply the quick-fix to add '<start>' to custom HTML tags.",
                  "markdown": "Reports unresolved tags in Django templates.\n\n**Example:**\n\n```\n<h1>{{ question.question_text }}</h1>\n<start>\n```\n\nThe IDE highlights `<start>`. You can either remove the tag or apply the quick-fix to\nadd `<start>` to custom HTML tags."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyFromFutureImportInspection",
                "shortDescription": {
                  "text": "Improper position of from __future__ import"
                },
                "fullDescription": {
                  "text": "Reports 'from __future__ import' statements that are used not at the beginning of a file. Example: a = 1\nfrom __future__ import print_function\nprint()\n When the quick-fix is applied, the code changes to: from __future__ import print_function\n\na = 1\nprint()",
                  "markdown": "Reports `from __future__ import`\nstatements that are used not at\nthe beginning of a file.\n\n**Example:**\n\n```\na = 1\nfrom __future__ import print_function\nprint()\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nfrom __future__ import print_function\n\na = 1\nprint()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnresolvedReferencesInspection",
                "shortDescription": {
                  "text": "Unresolved references"
                },
                "fullDescription": {
                  "text": "Reports references in your code that cannot be resolved. In a dynamically typed language, this is possible in a limited number of cases. If a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be: def print_string(s):\n  print(s.abc())\n In this code fragment 's' is always a string and 'abc' should be highlighted as unresolved. However, 's' type is inferred as 'Any' and no warning is reported. The IDE provides quick-fix actions to add missing references on-the-fly.",
                  "markdown": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySuperArgumentsInspection",
                "shortDescription": {
                  "text": "Wrong arguments to call super"
                },
                "fullDescription": {
                  "text": "Reports cases when any call to 'super(A, B)' does not meet the following requirements: 'B' is an instance of 'A' 'B' a subclass of 'A' Example: class Figure:\n    def color(self):\n        pass\n\n\nclass Rectangle(Figure):\n    def color(self):\n        pass\n\n\nclass Square(Figure):\n    def color(self):\n        return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle\n As a fix, you can make the 'Square' an instance of the 'Rectangle' class.",
                  "markdown": "Reports cases when any call to `super(A, B)` does not meet the\nfollowing requirements:\n\n* `B` is an instance of `A`\n* `B` a subclass of `A`\n\n**Example:**\n\n```\nclass Figure:\n    def color(self):\n        pass\n\n\nclass Rectangle(Figure):\n    def color(self):\n        pass\n\n\nclass Square(Figure):\n    def color(self):\n        return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle\n```\n\nAs a fix, you can make the `Square` an instance of the `Rectangle` class."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPackageRequirementsInspection",
                "shortDescription": {
                  "text": "Unsatisfied package requirements"
                },
                "fullDescription": {
                  "text": "Reports packages mentioned in requirements files (for example, 'requirements.txt' or 'Pipfile') but not installed, or imported but not mentioned in requirements files. The IDE shows a quick-fix banner so that you can install the missing packages in one click.",
                  "markdown": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoOrmInspection",
                "shortDescription": {
                  "text": "Django ORM error"
                },
                "fullDescription": {
                  "text": "Reports several methods that may not be called due to some ORM reasons. Example: class Choice:\n    question = ForeignKey(Question, null=False)\n\n\nchoice_set = Question.objects.get(id=1).choice_set.remove()\n The 'remove' function can not be called if the foreign key has 'null=False'.",
                  "markdown": "Reports several methods that may not be called due to some ORM reasons.\n\n**Example:**\n\n```\nclass Choice:\n    question = ForeignKey(Question, null=False)\n\n\nchoice_set = Question.objects.get(id=1).choice_set.remove()\n```\n\nThe `remove` function can not be called if the foreign key has `null=False`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedTemplateReferenceInspection",
                "shortDescription": {
                  "text": "Unresolved template reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved file references in string literals of 'extends'> and 'include'> Django tags. Example: {% extends \"../DjangoApp/templatetags/base.html\"%}\n In this example, the 'base.html' tag is highlighted, because it is not available in the specified location.",
                  "markdown": "Reports unresolved file references in string literals of\n`extends`\\> and `include`\\> Django tags.\n\n**Example:**\n\n```\n{% extends \"../DjangoApp/templatetags/base.html\"%}\n```\n\nIn this example, the `base.html` tag is highlighted, because it is not available in the\nspecified location."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNonAsciiCharInspection",
                "shortDescription": {
                  "text": "File contains non-ASCII character"
                },
                "fullDescription": {
                  "text": "Reports cases in Python 2 when a file contains non-ASCII characters and does not have an encoding declaration at the top. Example: class A(object):\n# №5\n    def __init__(self):\n        pass\n In this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding declaration. Apply the proposed quick-fix to add a missing encoding declaration: # coding=utf-8\nclass A(object)\n# №5\n    def __init__(self):\n        pass",
                  "markdown": "Reports cases in Python 2 when a file contains non-ASCII characters and does not\nhave an encoding declaration at the top.\n\n**Example:**\n\n```\nclass A(object):\n# №5\n    def __init__(self):\n        pass\n```\n\nIn this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding\ndeclaration. Apply the proposed quick-fix to add a missing encoding declaration:\n\n```\n# coding=utf-8\nclass A(object)\n# №5\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTrailingSemicolonInspection",
                "shortDescription": {
                  "text": "Prohibited trailing semicolon in a statement"
                },
                "fullDescription": {
                  "text": "Reports trailing semicolons in statements. Example: def my_func(a):\n    c = a ** 2;\n    return c\n IDE provides a quick-fix that removes a trailing semicolon. When you apply it, the code changes to: def my_func(a):\n    c = a ** 2\n    return c",
                  "markdown": "Reports trailing semicolons in statements.\n\n**Example:**\n\n```\ndef my_func(a):\n    c = a ** 2;\n    return c\n```\n\nIDE provides a quick-fix that removes a trailing semicolon. When you\napply it, the code changes to:\n\n```\ndef my_func(a):\n    c = a ** 2\n    return c\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRedundantParenthesesInspection",
                "shortDescription": {
                  "text": "Redundant parentheses"
                },
                "fullDescription": {
                  "text": "Reports about redundant parentheses in expressions. The IDE provides the quick-fix action to remove the redundant parentheses.",
                  "markdown": "Reports about redundant parentheses in expressions.\n\nThe IDE provides the quick-fix action to remove the redundant parentheses."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAbstractClassInspection",
                "shortDescription": {
                  "text": "Class must implement all abstract methods"
                },
                "fullDescription": {
                  "text": "Reports cases when not all abstract properties or methods are defined in a subclass. Example: from abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_triangle(self):\n        pass\n When the quick-fix is applied, the IDE implements an abstract method for the 'Triangle' class: from abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_figure(self):\n        pass\n\n    def do_triangle(self):\n        pass",
                  "markdown": "Reports cases when not all abstract properties or methods are defined in\na subclass.\n\n**Example:**\n\n```\nfrom abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_triangle(self):\n        pass\n```\n\nWhen the quick-fix is applied, the IDE implements an abstract method for the `Triangle` class:\n\n```\nfrom abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_figure(self):\n        pass\n\n    def do_triangle(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOldStyleClassesInspection",
                "shortDescription": {
                  "text": "Old-style class contains new-style class features"
                },
                "fullDescription": {
                  "text": "Reports occurrences of new-style class features in old-style classes. The inspection highlights '__slots__', '__getattribute__', and 'super()' inside old-style classes.",
                  "markdown": "Reports occurrences of\n[new-style class features](https://www.python.org/doc/newstyle/)\nin old-style classes. The inspection highlights\n`__slots__`, `__getattribute__`, and `super()`\ninside old-style classes."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoIncompatibleInspection",
                "shortDescription": {
                  "text": "Incompatible code in Django templates"
                },
                "fullDescription": {
                  "text": "Reports features that are not available in the current Django version. Example: {% if my_var is True %}\n{% endif %}\n Available since 1.10. The IDE shows warning when discovered in the earlier versions.",
                  "markdown": "Reports features that are not available in the current Django version.\n\n**Example:**\n\n```\n{% if my_var is True %}\n{% endif %}\n```\n\nAvailable since 1.10. The IDE shows warning when discovered in the earlier versions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExtendsTagPositionInspection",
                "shortDescription": {
                  "text": "Misplaced {% extends %} tag"
                },
                "fullDescription": {
                  "text": "Reports the '{% extends %}' tag that is not the first tag in a Django template. Example: {% load my_custom_tags %}\n{% extends \"../DjangoApp/templatetags/my_custom_tags.py\"%}\n In this example, the '{% extends %}' tag is highlighted, because it should be placed before the '{% load %}' tag.",
                  "markdown": "Reports the `{% extends %}` tag that is not the first tag in a\nDjango template.\n\n**Example:**\n\n```\n{% load my_custom_tags %}\n{% extends \"../DjangoApp/templatetags/my_custom_tags.py\"%}\n```\n\nIn this example, the `{% extends %}` tag is highlighted, because it should be placed before\nthe `{% load %}` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyArgumentListInspection",
                "shortDescription": {
                  "text": "Incorrect call arguments"
                },
                "fullDescription": {
                  "text": "Reports discrepancies between declared parameters and actual arguments, as well as incorrect arguments, for example, duplicate named arguments, and incorrect argument order. Example: class Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n The correct code fragment looks at follows: class Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")",
                  "markdown": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInterpreterInspection",
                "shortDescription": {
                  "text": "An invalid interpreter"
                },
                "fullDescription": {
                  "text": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly configured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features. The IDE provides quick access to the interpreter settings.",
                  "markdown": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly\nconfigured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features.\n\nThe IDE provides quick access to the interpreter settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyBroadExceptionInspection",
                "shortDescription": {
                  "text": "Unclear exception clauses"
                },
                "fullDescription": {
                  "text": "Reports exception clauses that do not provide specific information about the problem. Example: Clauses that do not specify an exception class Clauses that are specified as 'Exception'",
                  "markdown": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypeCheckerInspection",
                "shortDescription": {
                  "text": "Incorrect type"
                },
                "fullDescription": {
                  "text": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases. Types of function parameters can be specified in docstrings or in Python 3 function annotations. Example: def foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n With the quick-fix, you can modify the problematic types: def foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()",
                  "markdown": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPropertyAccessInspection",
                "shortDescription": {
                  "text": "Inappropriate access to properties"
                },
                "fullDescription": {
                  "text": "Reports cases when properties are accessed inappropriately: Read-only properties are set Write-only properties are read Non-deletable properties are deleted Example: class MyClass:\n    @property\n    def read_only(self): return None\n\n    def __write_only_setter(self, value): pass\n\n    write_only = property(None, __write_only_setter)\n\n\na = MyClass()\na.read_only = 10 # property cannot be set\ndel a.read_only # property cannot be deleted\nprint(a.write_only) # property cannot be read",
                  "markdown": "Reports cases when properties are accessed inappropriately:\n\n* Read-only properties are set\n* Write-only properties are read\n* Non-deletable properties are deleted\n\n**Example:**\n\n```\nclass MyClass:\n    @property\n    def read_only(self): return None\n\n    def __write_only_setter(self, value): pass\n\n    write_only = property(None, __write_only_setter)\n\n\na = MyClass()\na.read_only = 10 # property cannot be set\ndel a.read_only # property cannot be deleted\nprint(a.write_only) # property cannot be read\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStubPackagesAdvertiser",
                "shortDescription": {
                  "text": "Stub packages advertiser"
                },
                "fullDescription": {
                  "text": "Reports availability of stub packages. Stub package is a package that contains type information for the corresponding runtime package. Using stub packages ensures better coding assistance for the corresponding python package.",
                  "markdown": "Reports availability of stub packages.\n\n\n[Stub package](https://www.python.org/dev/peps/pep-0561/) is a package that contains type information for the corresponding\nruntime package.\n\nUsing stub packages ensures better coding assistance for the corresponding python package."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyByteLiteralInspection",
                "shortDescription": {
                  "text": "A byte literal contains a non-ASCII character"
                },
                "fullDescription": {
                  "text": "Reports characters in byte literals that are outside ASCII range. Example: 's = b'№5''",
                  "markdown": "Reports characters in byte literals that are outside ASCII range.\n\n**Example:**\n`s = b'№5'`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRelativeImportInspection",
                "shortDescription": {
                  "text": "Suspicious relative imports"
                },
                "fullDescription": {
                  "text": "Reports usages of relative imports inside plain directories, for example, directories neither containing '__init__.py' nor explicitly marked as namespace packages.",
                  "markdown": "Reports usages of relative imports inside plain directories, for example, directories neither containing `__init__.py` nor\nexplicitly marked as namespace packages."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAugmentAssignmentInspection",
                "shortDescription": {
                  "text": "Assignment can be replaced with augmented assignment"
                },
                "fullDescription": {
                  "text": "Reports assignments that can be replaced with augmented assignments. Example: a = 23\nb = 3\na = a + b\n After the quick-fix is applied, the code changes to: a = 23\nb = 3\na += b",
                  "markdown": "Reports assignments that can be replaced with augmented assignments.\n\n**Example:**\n\n```\na = 23\nb = 3\na = a + b\n```\n\nAfter the quick-fix is applied, the code changes to:\n\n```\na = 23\nb = 3\na += b\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated function, class, or module"
                },
                "fullDescription": {
                  "text": "Reports usages of Python functions, or methods that are marked as deprecated and raise the 'DeprecationWarning' or 'PendingDeprecationWarning' warning. Also, this inspection highlights usages of 'abc.abstractstaticmethod', 'abc.abstractproperty', and 'abc.abstractclassmethod' decorators. Example: class Foo:\n    @property\n    def bar(self):\n        import warnings\n        warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n        return 5\n\n\nfoo = Foo()\nprint(foo.bar)",
                  "markdown": "Reports usages of Python functions, or methods that are marked as\ndeprecated and raise the `DeprecationWarning` or `PendingDeprecationWarning` warning.\n\nAlso, this inspection highlights usages of `abc.abstractstaticmethod`, `abc.abstractproperty`, and `abc.abstractclassmethod`\ndecorators.\n\n**Example:**\n\n```\nclass Foo:\n    @property\n    def bar(self):\n        import warnings\n        warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n        return 5\n\n\nfoo = Foo()\nprint(foo.bar)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnnecessaryBackslashInspection",
                "shortDescription": {
                  "text": "Unnecessary backslash"
                },
                "fullDescription": {
                  "text": "Reports backslashes in places where line continuation is implicit inside '()', '[]', and '{}'. Example: a = ('first', \\\n     'second', 'third')\n When the quick-fix is applied, the redundant backslash is deleted.",
                  "markdown": "Reports backslashes in places where line continuation is implicit inside `()`,\n`[]`, and `{}`.\n\n**Example:**\n\n```\na = ('first', \\\n     'second', 'third')\n```\n\nWhen the quick-fix is applied, the redundant backslash is deleted."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRedeclarationInspection",
                "shortDescription": {
                  "text": "Redeclared names without usages"
                },
                "fullDescription": {
                  "text": "Reports unconditional redeclarations of names without being used in between. Example: def x(): pass\n\n\nx = 2\n It applies to function and class declarations, and top-level assignments. When the warning is shown, you can try a recommended action, for example, you might be prompted to rename the variable.",
                  "markdown": "Reports unconditional redeclarations of names without being used in between.\n\n**Example:**\n\n```\ndef x(): pass\n\n\nx = 2\n```\n\nIt applies to function and class declarations, and top-level assignments.\n\nWhen the warning is shown, you can try a recommended action, for example, you might be prompted to\nrename the variable."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyShadowingNamesInspection",
                "shortDescription": {
                  "text": "Shadowing names from outer scopes"
                },
                "fullDescription": {
                  "text": "Reports shadowing names defined in outer scopes. Example: def outer(p):\n    def inner(p):\n        pass\n As a quick-fix, the IDE offers to remove a parameter or rename it.",
                  "markdown": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyFinalInspection",
                "shortDescription": {
                  "text": "Invalid usages of final classes, methods, and variables"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of final classes, methods and variables. Example: from typing import final\n\n\n@final\nclass A:\n    def a_method(self):\n        pass\n\n\nclass B(A):\n    def a_method(self):\n        pass",
                  "markdown": "Reports invalid usages of final classes,\nmethods and variables.\n\n**Example:**\n\n```\nfrom typing import final\n\n\n@final\nclass A:\n    def a_method(self):\n        pass\n\n\nclass B(A):\n    def a_method(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyramidSetupInspection",
                "shortDescription": {
                  "text": "Project is not installed for development"
                },
                "fullDescription": {
                  "text": "Reports cases when no 'python setup.py develop' command was executed for the Pyramid project. You need to execute this command to install the newly created project for development.",
                  "markdown": "Reports cases when no `python setup.py develop` command was executed for the Pyramid project.\n\nYou need to execute this command to install the newly created project for development."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Pyramid",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStubPackagesCompatibilityInspection",
                "shortDescription": {
                  "text": "Incompatible stub packages"
                },
                "fullDescription": {
                  "text": "Reports stub packages that do not support the version of the corresponding runtime package. A stub package contains type information for some runtime package.",
                  "markdown": "Reports stub packages that do not support the version of the corresponding runtime package.\n\nA [stub package](https://www.python.org/dev/peps/pep-0561/) contains type information for some runtime package."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoCloseTagInspection",
                "shortDescription": {
                  "text": "Mismatched opening and closing tags"
                },
                "fullDescription": {
                  "text": "Reports cases when opening tags in Django templates are not correctly matched by closing tags. Example: {% if error_message %}<p><strong>{{ error_message }}</p>{% endif %}\n The IDE reports an error on the 'strong' tag not being closed.",
                  "markdown": "Reports cases when opening tags in Django templates are not correctly matched by closing tags.\n\n**Example:**\n\n```\n{% if error_message %}<p><strong>{{ error_message }}</p>{% endif %}\n```\n\nThe IDE reports an error on the `strong` tag not being closed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyProtectedMemberInspection",
                "shortDescription": {
                  "text": "Accessing a protected member of a class or a module"
                },
                "fullDescription": {
                  "text": "Reports cases when a protected member is accessed outside the class, a descendant of the class where it is defined, or a module. class Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method",
                  "markdown": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnboundLocalVariableInspection",
                "shortDescription": {
                  "text": "Unbound local variables"
                },
                "fullDescription": {
                  "text": "Reports local variables referenced before assignment. Example: x = 0\nif x > 10:\n    b = 3\nprint(b)\n The IDE reports a problem for 'print(b)'. A possible fix is: x = 0\nif x > 10:\n    b = 3\n    print(b)",
                  "markdown": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNamedTupleInspection",
                "shortDescription": {
                  "text": "Invalid definition of 'typing.NamedTuple'"
                },
                "fullDescription": {
                  "text": "Reports invalid definition of a typing.NamedTuple. Example: import typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    last: str = \"\"\n    middle: str\n As a fix, place the field with the default value after the fields without default values: import typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    middle: str\n    last: str = \"\"",
                  "markdown": "Reports invalid definition of a\n[typing.NamedTuple](https://docs.python.org/3/library/typing.html#typing.NamedTuple).\n\n**Example:**\n\n```\nimport typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    last: str = \"\"\n    middle: str\n```\n\nAs a fix, place the field with the default value after the fields without default values:\n\n```\nimport typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    middle: str\n    last: str = \"\"\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySingleQuotedDocstringInspection",
                "shortDescription": {
                  "text": "Single quoted docstring"
                },
                "fullDescription": {
                  "text": "Reports docstrings that do not adhere to the triple double-quoted string format. Example: def calc(self, balance=0):\n    'param: balance'\n    self.balance = balance\n When the quick-fix is applied, the code changes to: def calc(self, balance=0):\n    \"\"\"param: balance\"\"\"\n    self.balance = balance",
                  "markdown": "Reports docstrings that do not adhere to the triple double-quoted string format.\n\n**Example:**\n\n```\ndef calc(self, balance=0):\n    'param: balance'\n    self.balance = balance\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef calc(self, balance=0):\n    \"\"\"param: balance\"\"\"\n    self.balance = balance\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnusedLocalInspection",
                "shortDescription": {
                  "text": "Unused local symbols"
                },
                "fullDescription": {
                  "text": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
                  "markdown": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyReturnFromInitInspection",
                "shortDescription": {
                  "text": "__init__ method that returns a value"
                },
                "fullDescription": {
                  "text": "Reports occurrences of 'return' statements with a return value inside '__init__' methods of classes. Example: class Sum:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.sum = a + b\n        return self.sum\n A constructor should not return any value. The '__init__' method should only initialize the values of instance members for news objects. As a quick-fix, the IDE offers to remove the 'return' statement.",
                  "markdown": "Reports occurrences of `return` statements with a return value inside\n`__init__` methods of classes.\n\n**Example:**\n\n```\nclass Sum:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.sum = a + b\n        return self.sum\n```\n\nA constructor should not return any value. The `__init__` method should\nonly initialize the values of instance members for news objects.\n\nAs a quick-fix, the IDE offers to remove the `return` statement."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNestedDecoratorsInspection",
                "shortDescription": {
                  "text": "Problematic nesting of decorators"
                },
                "fullDescription": {
                  "text": "Reports problems with nesting decorators. The inspection highlights the cases when 'classmethod' or 'staticmethod' is applied before another decorator. Example: def innocent(f):\n    return f\n\n\nclass A:\n    @innocent  # Decorator will not receive a callable it may expect\n    @classmethod\n    def f2(cls):\n        pass\n\n    @innocent  # Decorator will not receive a callable it may expect\n    @staticmethod\n    def f1():\n        pass\n As a quick-fix, the IDE offers to remove the decorator.",
                  "markdown": "Reports problems with nesting decorators. The inspection highlights the cases when `classmethod` or `staticmethod`\nis applied before another decorator.\n\n**Example:**\n\n```\ndef innocent(f):\n    return f\n\n\nclass A:\n    @innocent  # Decorator will not receive a callable it may expect\n    @classmethod\n    def f2(cls):\n        pass\n\n    @innocent  # Decorator will not receive a callable it may expect\n    @staticmethod\n    def f1():\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove the decorator."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingOrEmptyDocstringInspection",
                "shortDescription": {
                  "text": "Missing or empty docstring"
                },
                "fullDescription": {
                  "text": "Reports missing and empty docstrings. Example of a missing docstring def demo(a):\n    c = a ** 2\n Example of an empty docstring def demo(a):\n    \"\"\"\n    \"\"\"\n    c = a ** 2\n When the quick-fix is applied, the code fragments change to: def demo(a):\n    \"\"\"\n\n    :param a:\n    \"\"\"\n    c = a ** 2\n You need to provide some details about the parameter in the generated template.",
                  "markdown": "Reports missing and empty docstrings.\n\n**Example of a missing docstring**\n\n```\ndef demo(a):\n    c = a ** 2\n```\n\n**Example of an empty docstring**\n\n```\ndef demo(a):\n    \"\"\"\n    \"\"\"\n    c = a ** 2\n```\n\nWhen the quick-fix is applied, the code fragments change to:\n\n```\ndef demo(a):\n    \"\"\"\n\n    :param a:\n    \"\"\"\n    c = a ** 2\n```\n\nYou need to provide some details about the parameter in the generated template."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedBlockNamesInspection",
                "shortDescription": {
                  "text": "Duplicated block names"
                },
                "fullDescription": {
                  "text": "Reports duplicated block names in Django templates. Example: <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>{% block title %}My amazing site{% endblock %}</title>\n</head>\n\n<body>\n    <div id=\"sidebar\">\n        {% block title %}\n        <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/blog/\">Blog</a></li>\n        </ul>\n        {% endblock %}\n    </div>\n\n    <div id=\"content\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>",
                  "markdown": "Reports duplicated block names in Django templates.\n\n**Example:**\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>{% block title %}My amazing site{% endblock %}</title>\n</head>\n\n<body>\n    <div id=\"sidebar\">\n        {% block title %}\n        <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/blog/\">Blog</a></li>\n        </ul>\n        {% endblock %}\n    </div>\n\n    <div id=\"content\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOverloadsInspection",
                "shortDescription": {
                  "text": "Overloads in regular Python files"
                },
                "fullDescription": {
                  "text": "Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are not compatible with the implementation. Example: from typing import overload\n\n\n@overload\ndef foo(p1, p2): # Overload signature is not compatible with the implementation\n    pass\n\n\n@overload\ndef foo(p1): # Overload signature is not compatible with the implementation\n    pass\n\n\ndef foo(p1, p2, p3):\n    print(p1, p2, p3)",
                  "markdown": "Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are\nnot compatible with the implementation.\n\n**Example:**\n\n```\nfrom typing import overload\n\n\n@overload\ndef foo(p1, p2): # Overload signature is not compatible with the implementation\n    pass\n\n\n@overload\ndef foo(p1): # Overload signature is not compatible with the implementation\n    pass\n\n\ndef foo(p1, p2, p3):\n    print(p1, p2, p3)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPep8NamingInspection",
                "shortDescription": {
                  "text": "PEP 8 naming convention violation"
                },
                "fullDescription": {
                  "text": "Reports violations of the PEP8 naming conventions. Example: class mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n In this code fragment, IDE offers to rename 'mammalia' to 'Mammalia'. When the quick-fix is applied, the code change to: class Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")",
                  "markdown": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedLoadInspection",
                "shortDescription": {
                  "text": "Unresolved library inspection"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in Django load tags. Example:   {% load something_nonexistent %}",
                  "markdown": "Reports unresolved references in Django load tags.\n\n**Example:**\n\n```\n  {% load something_nonexistent %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDictDuplicateKeysInspection",
                "shortDescription": {
                  "text": "Dictionary contains duplicate keys"
                },
                "fullDescription": {
                  "text": "Reports using the same value as the dictionary key twice. Example: dic = {\"a\": [1, 2], \"a\": [3, 4]}",
                  "markdown": "Reports using the same value as the dictionary key twice.\n\n**Example:**\n\n```\ndic = {\"a\": [1, 2], \"a\": [3, 4]}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyExceptClausesOrderInspection",
                "shortDescription": {
                  "text": "Wrong order of 'except' clauses"
                },
                "fullDescription": {
                  "text": "Reports cases when 'except' clauses are not in the proper order, from the more specific to the more generic, or one exception class is caught twice. If you do not fix the order, some exceptions may not be caught by the most specific handler. Example: try:\n    call()\nexcept ValueError:\n    pass\nexcept UnicodeError:\n    pass\n The IDE recommends moving the clause up. When the quick-fix is applied, the code changes to: try:\n    call()\nexcept UnicodeError:\n    pass\nexcept ValueError:\n    pass",
                  "markdown": "Reports cases when `except` clauses are not in the proper order,\nfrom the more specific to the more generic, or one exception class is caught twice.\n\n\nIf you do not fix the order, some exceptions may not be caught by the most specific handler.\n\n**Example:**\n\n```\ntry:\n    call()\nexcept ValueError:\n    pass\nexcept UnicodeError:\n    pass\n```\n\nThe IDE recommends moving the clause up. When the quick-fix is applied, the code changes to:\n\n```\ntry:\n    call()\nexcept UnicodeError:\n    pass\nexcept ValueError:\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDataclassInspection",
                "shortDescription": {
                  "text": "Invalid definition and usage of Data Classes"
                },
                "fullDescription": {
                  "text": "Reports invalid definitions and usages of classes created with 'dataclasses' or 'attr' modules. Example: import dataclasses\n\n\n@dataclasses.dataclass\nclass FullName:\n    first: str\n    middle: str = \"\"\n    last: str",
                  "markdown": "Reports invalid definitions and usages of classes created with\n`dataclasses` or `attr` modules.\n\n**Example:**\n\n```\nimport dataclasses\n\n\n@dataclasses.dataclass\nclass FullName:\n    first: str\n    middle: str = \"\"\n    last: str\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassicStyleClassInspection",
                "shortDescription": {
                  "text": "Classic style class usage"
                },
                "fullDescription": {
                  "text": "Reports classic style classes usage. This inspection applies only to Python 2. Example: class A:\n    pass\n With quick-fixes provided by the IDE, this code fragment changes to: class A(object):\n    def __init__(self):\n        pass",
                  "markdown": "Reports [classic style classes](https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes) usage. This inspection applies only to Python 2.\n\n**Example:**\n\n```\nclass A:\n    pass\n```\n\nWith quick-fixes provided by the IDE, this code fragment changes to:\n\n```\nclass A(object):\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUrlArgumentsInspection",
                "shortDescription": {
                  "text": "Incorrect arguments in the ' {% url %}' tag"
                },
                "fullDescription": {
                  "text": "Reports missing parameters in the template file if the 'url()' function has parameters in its URL path. Example: In the 'url.py' file url(r'^(?P<question_id>[0-9]+)/', views.detail, name='detail')\n In the template file {% url 'polls:detail' %}",
                  "markdown": "Reports missing parameters in the template file if the `url()`\nfunction has parameters in its URL path.\n\n**Example:**\n\nIn the `url.py` file\n\n```\nurl(r'^(?P<question_id>[0-9]+)/', views.detail, name='detail')\n```\n\nIn the template file\n\n```\n{% url 'polls:detail' %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNoneFunctionAssignmentInspection",
                "shortDescription": {
                  "text": "Assigning function calls that don't return anything"
                },
                "fullDescription": {
                  "text": "Reports cases when an assignment is done on a function that does not return anything. This inspection is similar to pylint inspection E1111. Example: def just_print():\n    print(\"Hello!\")\n\n\naction = just_print()\n As a quick-fix, the IDE offers to remove the assignment.",
                  "markdown": "Reports cases when an assignment is done on a function that does not return anything.\nThis inspection is similar to [pylint inspection E1111](https://docs.pylint.org/en/1.6.0/features.html#id6).\n\n\n**Example:**\n\n```\ndef just_print():\n    print(\"Hello!\")\n\n\naction = just_print()\n```\n\nAs a quick-fix, the IDE offers to remove the assignment."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPropertyDefinitionInspection",
                "shortDescription": {
                  "text": "Incorrect property definition"
                },
                "fullDescription": {
                  "text": "Reports problems with the arguments of 'property()' and functions annotated with '@property'. class C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass\n A quick-fix offers to update parameters.",
                  "markdown": "Reports problems with the arguments of `property()` and functions\nannotated with `@property`.\n\n```\nclass C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass\n```\n\nA quick-fix offers to update parameters."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyIncorrectDocstringInspection",
                "shortDescription": {
                  "text": "Incorrect docstring"
                },
                "fullDescription": {
                  "text": "Reports mismatched parameters in a docstring. For example, 'b' is highlighted, because there is no such a parameter in the 'add' function.     def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n The inspection does not warn you of missing parameters if none of them is mentioned in a docstring: def mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass",
                  "markdown": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JupyterKernelInspection",
                "shortDescription": {
                  "text": "Notebook kernel doesn't match the Python interpreter"
                },
                "fullDescription": {
                  "text": "Reports cases when the Python interpreter is not configured as a notebook kernel. This inspection prevents discrepancies between Code Insight and runtime behavior of the Jupyter notebook code cells. If you see the following warning, the kernel of the newly configured server doesn't match your current Python interpreter. For example, it might have a different set of the installed packages. You can register your Python interpreter by clicking the corresponding link on the warning banner. After that, you can see the interpreter in the list of the configured server kernels. See Manage Jupyter notebook servers for more details.",
                  "markdown": "Reports cases when the Python interpreter is not configured as a notebook kernel.\nThis inspection prevents discrepancies between Code Insight and runtime behavior of the\nJupyter notebook code cells.\n\nIf you see the following warning, the kernel of the newly configured server doesn't match your current Python interpreter.\nFor example, it might have a different set of the installed packages.\n\nYou can register your Python interpreter by clicking the corresponding\nlink on the warning banner. After that, you can see the interpreter in the list of the configured server kernels.\n\nSee [Manage Jupyter notebook servers](https://www.jetbrains.com/help/pycharm/configuring-jupyter-notebook.html) for more details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Jupyter",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyListCreationInspection",
                "shortDescription": {
                  "text": "Non-optimal list declaration"
                },
                "fullDescription": {
                  "text": "Reports cases when a list declaration can be rewritten with a list literal. This ensures better performance of your application. Example: l = [1]\nl.append(2)\n When the quick-fix is applied, the code changes to: l = [1, 2]",
                  "markdown": "Reports cases when a list declaration\ncan be rewritten with a list literal.\n\nThis ensures better performance of your application.\n\n**Example:**\n\n```\nl = [1]\nl.append(2)\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nl = [1, 2]\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij",
            "version": "213.7331.182",
            "rules": [
              {
                "id": "XmlHighlighting",
                "shortDescription": {
                  "text": "XML highlighting"
                },
                "fullDescription": {
                  "text": "Reports XML validation problems in the results of a batch code inspection.",
                  "markdown": "Reports XML validation problems in the results of a batch code inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDuplicatedId",
                "shortDescription": {
                  "text": "Duplicate 'id' attribute"
                },
                "fullDescription": {
                  "text": "Reports a duplicate 'id' attribute in XML.",
                  "markdown": "Reports a duplicate `id` attribute in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated JSON property"
                },
                "fullDescription": {
                  "text": "Reports a deprecated property in a JSON file. Note that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'.",
                  "markdown": "Reports a deprecated property in a JSON file.  \nNote that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateCharacterInClass",
                "shortDescription": {
                  "text": "Duplicate character in character class"
                },
                "fullDescription": {
                  "text": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex. Example: '[aabc]' After the quick-fix is applied: '[abc]'",
                  "markdown": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\n**Example:**\n\n\n      [aabc]\n\nAfter the quick-fix is applied:\n\n\n      [abc]\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaRefReference",
                "shortDescription": {
                  "text": "Unresolved '$ref' and '$schema' references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved '$ref' or '$schema' path in a JSON schema.",
                  "markdown": "Reports an unresolved `$ref` or `$schema` path in a JSON schema.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownBooleanAttribute",
                "shortDescription": {
                  "text": "Incorrect boolean attribute"
                },
                "fullDescription": {
                  "text": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlInvalidId",
                "shortDescription": {
                  "text": "Unresolved 'id' reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved 'id' reference in XML.",
                  "markdown": "Reports an unresolved `id` reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnboundNsPrefix",
                "shortDescription": {
                  "text": "Unbound namespace prefix"
                },
                "fullDescription": {
                  "text": "Reports an unbound namespace prefix in XML.",
                  "markdown": "Reports an unbound namespace prefix in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedCode",
                "shortDescription": {
                  "text": "Duplicated code fragment"
                },
                "fullDescription": {
                  "text": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in File | Settings | Editor | Duplicates.",
                  "markdown": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in [File \\| Settings \\| Editor \\| Duplicates](settings://duplicates.index)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredAttributes",
                "shortDescription": {
                  "text": "Missing required attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentLineSeparators",
                "shortDescription": {
                  "text": "Inconsistent line separators"
                },
                "fullDescription": {
                  "text": "Reports files with line separators different from the ones that are specified in the project's settings. For example, the inspection will be triggered if you set the line separator to '\\n' in Settings | Editor | Code Style | Line separator, while the file you are editing uses '\\r\\n' as a line separator. The inspection also warns you about mixed line separators within a file.",
                  "markdown": "Reports files with line separators different from the ones that are specified in the project's settings.\n\nFor example, the inspection will be triggered if you set the line separator to `\\n` in **Settings \\| Editor \\| Code Style \\| Line separator** ,\nwhile the file you are editing uses `\\r\\n` as a line separator.\n\nThe inspection also warns you about mixed line separators within a file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSuppression",
                "shortDescription": {
                  "text": "Redundant suppression"
                },
                "fullDescription": {
                  "text": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context: '@SuppressWarning' annotation, or '// noinspection' line comment, or '/** noinspection */' JavaDoc comment Example: 'public class C {\n // symbol is already private,\n // but annotation is still around\n  @SuppressWarnings({\"WeakerAccess\"})\n private boolean CONST = true;\n void f() {\n    CONST = false;\n  }\n}'",
                  "markdown": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\n* `@SuppressWarning` annotation, or\n* `// noinspection` line comment, or\n* `/** noinspection */` JavaDoc comment\n\nExample:\n\n\n    public class C {\n     // symbol is already private,\n     // but annotation is still around\n      @SuppressWarnings({\"WeakerAccess\"})\n     private boolean CONST = true;\n     void f() {\n        CONST = false;\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ProblematicWhitespace",
                "shortDescription": {
                  "text": "Problematic whitespace"
                },
                "fullDescription": {
                  "text": "Reports the following problems: Tabs used for indentation when the code style is configured to use only spaces. Spaces used for indentation when the code style is configured to use only tabs. Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs.",
                  "markdown": "Reports the following problems:\n\n* Tabs used for indentation when the code style is configured to use only spaces.\n* Spaces used for indentation when the code style is configured to use only tabs.\n* Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file in a link.",
                  "markdown": "Reports an unresolved file in a link."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SSBasedInspection",
                "shortDescription": {
                  "text": "Structural search inspection"
                },
                "fullDescription": {
                  "text": "Allows configuring Structural Search/Structural Replace templates that you can apply to the file you are editing. All matches will be highlighted and marked with the template name that you have configured. If you configure the Structural Replace pattern as well, the corresponding replace option will be available as a quick-fix.",
                  "markdown": "Allows configuring **Structural Search/Structural Replace** templates that you can apply to the file you are editing.\n\nAll matches will be highlighted and marked with the template name that you have configured.\nIf you configure the **Structural Replace** pattern as well, the corresponding replace option will be available as a quick-fix."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Structural search",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LongLine",
                "shortDescription": {
                  "text": "The line is longer than allowed by code style"
                },
                "fullDescription": {
                  "text": "Reports lines that are longer than the right margin parameter specified in the Code Style settings.",
                  "markdown": "Reports lines that are longer than the **right margin** parameter specified in the **Code Style** settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnusedNamespaceDeclaration",
                "shortDescription": {
                  "text": "Unused schema declaration"
                },
                "fullDescription": {
                  "text": "Reports an unused namespace declaration or location hint in XML.",
                  "markdown": "Reports an unused namespace declaration or location hint in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlWrongRootElement",
                "shortDescription": {
                  "text": "Wrong root element"
                },
                "fullDescription": {
                  "text": "Reports a root tag name different from the name specified in the '<doctype>' tag.",
                  "markdown": "Reports a root tag name different from the name specified in the `<doctype>` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEmptyAlternationBranch",
                "shortDescription": {
                  "text": "Empty branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation. Example: '(alpha||bravo)' After the quick-fix is applied: '(alpha|bravo)' New in 2017.2",
                  "markdown": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation.\n\n**Example:**\n\n\n      (alpha||bravo)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo)\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathEvaluateUnknownKey",
                "shortDescription": {
                  "text": "Unknown property key used for JSONPath evaluate expression"
                },
                "fullDescription": {
                  "text": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate.",
                  "markdown": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckValidXmlInScriptTagBody",
                "shortDescription": {
                  "text": "Malformed content of 'script' tag"
                },
                "fullDescription": {
                  "text": "Reports invalid XML contents of a 'script' tag.",
                  "markdown": "Reports invalid XML contents of a `script` tag.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Annotator",
                "shortDescription": {
                  "text": "Annotator"
                },
                "fullDescription": {
                  "text": "Reports problems that are found by language annotators in the result of a batch code inspection run.",
                  "markdown": "Reports problems that are found by language annotators in the result of a batch code inspection run."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlPathReference",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in XML.",
                  "markdown": "Reports an unresolved file reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSingleCharAlternation",
                "shortDescription": {
                  "text": "Single character alternation"
                },
                "fullDescription": {
                  "text": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance. Example: 'a|b|c|d' After the quick-fix is applied: '[abcd]' New in 2017.1",
                  "markdown": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance.\n\n**Example:**\n\n\n      a|b|c|d\n\nAfter the quick-fix is applied:\n\n\n      [abcd]\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnnecessaryNonCapturingGroup",
                "shortDescription": {
                  "text": "Unnecessary non-capturing group"
                },
                "fullDescription": {
                  "text": "Reports unnecessary non-capturing groups, which have no influence on the match result. Example: 'Everybody be cool, (?:this) is a robbery!' After the quick-fix is applied: 'Everybody be cool, this is a robbery!' New in 2021.1",
                  "markdown": "Reports unnecessary non-capturing groups, which have no influence on the match result.\n\n**Example:**\n\n\n      Everybody be cool, (?:this) is a robbery!\n\nAfter the quick-fix is applied:\n\n\n      Everybody be cool, this is a robbery!\n\nNew in 2021.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TodoComment",
                "shortDescription": {
                  "text": "TODO comment"
                },
                "fullDescription": {
                  "text": "Reports TODO comments in your code. You can configure the format for TODO comments in Settings | Editor | TODO. Since syntax highlighting for TODO comments is already provided, this inspection is efficient if you run it in the batch mode.",
                  "markdown": "Reports **TODO** comments in your code.\n\nYou can configure the format for **TODO** comments in [Settings \\| Editor \\| TODO](settings://preferences.toDoOptions). Since\nsyntax highlighting for **TODO** comments is already provided, this inspection is efficient if you run it in the batch mode."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAttribute",
                "shortDescription": {
                  "text": "Unknown attribute"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckTagEmptyBody",
                "shortDescription": {
                  "text": "Empty element content"
                },
                "fullDescription": {
                  "text": "Reports an element with empty contents.",
                  "markdown": "Reports an element with empty contents."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantEscape",
                "shortDescription": {
                  "text": "Redundant character escape"
                },
                "fullDescription": {
                  "text": "Reports character escapes that are replaceable with the unescaped character without a change in meaning. Note that inside the square brackets of a character class, many escapes are unnecessary that would be necessary outside of a character class. Example: '\\-\\;[\\.]' After the quick-fix is applied: '-;[.]' New in 2017.3",
                  "markdown": "Reports character escapes that are replaceable with the unescaped character without a change in meaning. Note that inside the square brackets of a character class, many escapes are unnecessary that would be necessary outside of a character class.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\nNew in 2017.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Json5StandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON5 standard"
                },
                "fullDescription": {
                  "text": "Reports inconsistency with the language specification in a JSON5 file.",
                  "markdown": "Reports inconsistency with [the language specification](http://json5.org) in a JSON5 file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonDuplicatePropertyKeys",
                "shortDescription": {
                  "text": "Duplicate keys in object literals"
                },
                "fullDescription": {
                  "text": "Reports a duplicate key in an object literal.",
                  "markdown": "Reports a duplicate key in an object literal."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a named pattern ('define') in RELAX-NG files that use XML syntax. Suggests creating the referenced 'define' element.",
                  "markdown": "Reports an unresolved reference to a named pattern (`define`) in RELAX-NG files that use XML syntax. Suggests creating the referenced `define` element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownFunction",
                "shortDescription": {
                  "text": "Unknown JSONPath function"
                },
                "fullDescription": {
                  "text": "Reports an unknown name in a JSONPath function call instead of known standard function names: 'concat', 'keys', 'length', 'min', 'max', 'avg', 'stddev', 'sum'.",
                  "markdown": "Reports an unknown name in a JSONPath function call instead of known standard function names: `concat`, `keys`, `length`, `min`, `max`, `avg`, `stddev`, `sum`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlMissingClosingTag",
                "shortDescription": {
                  "text": "Missing closing tag"
                },
                "fullDescription": {
                  "text": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional. Example: '<html>\n    <body>\n      <p>Behold!\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <p>Behold!</p>\n    </body>\n  </html>'",
                  "markdown": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <p>Behold!\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <p>Behold!</p>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantNestedCharacterClass",
                "shortDescription": {
                  "text": "Redundant nested character class"
                },
                "fullDescription": {
                  "text": "Reports unnecessary nested character classes. Example: '[a-c[x-z]]' After the quick-fix is applied: '[a-cx-z]' New in 2020.2",
                  "markdown": "Reports unnecessary nested character classes.\n\n**Example:**\n\n\n      [a-c[x-z]]\n\nAfter the quick-fix is applied:\n\n\n      [a-cx-z]\n\nNew in 2020.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDeprecatedElement",
                "shortDescription": {
                  "text": "Deprecated symbol"
                },
                "fullDescription": {
                  "text": "Reports a deprecated XML element or attribute. Symbols can be marked by XML comment or documentation tag with text 'deprecated'.",
                  "markdown": "Reports a deprecated XML element or attribute.\n\nSymbols can be marked by XML comment or documentation tag with text 'deprecated'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDefaultAttributeValue",
                "shortDescription": {
                  "text": "Redundant attribute with default value"
                },
                "fullDescription": {
                  "text": "Reports a redundant assignment of the default value to an XML attribute.",
                  "markdown": "Reports a redundant assignment of the default value to an XML attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlExtraClosingTag",
                "shortDescription": {
                  "text": "Redundant closing tag"
                },
                "fullDescription": {
                  "text": "Reports a redundant closing tag for an empty element, for example, 'img' or 'br'. Example: '<html>\n    <body>\n      <br></br>\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <br>\n    </body>\n  </html>'",
                  "markdown": "Reports a redundant closing tag for an empty element, for example, `img` or `br`.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <br></br>\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <br>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpOctalEscape",
                "shortDescription": {
                  "text": "Octal escape"
                },
                "fullDescription": {
                  "text": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion. Example: '\\07' After the quick-fix is applied: '\\x07' New in 2017.1",
                  "markdown": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion.\n\n**Example:**\n\n\n      \\07\n\nAfter the quick-fix is applied:\n\n\n      \\x07\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedDefine",
                "shortDescription": {
                  "text": "Unused define"
                },
                "fullDescription": {
                  "text": "Reports an unused named pattern ('define') in a RELAX-NG file (XML or Compact Syntax). 'define' elements that are used through an include in another file are ignored.",
                  "markdown": "Reports an unused named pattern (`define`) in a RELAX-NG file (XML or Compact Syntax). `define` elements that are used through an include in another file are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAnchorTarget",
                "shortDescription": {
                  "text": "Unresolved fragment in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved last part of an URL after the '#' sign.",
                  "markdown": "Reports an unresolved last part of an URL after the `#` sign."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistence between a JSON file and the JSON schema that is assigned to it.",
                  "markdown": "Reports inconsistence between a JSON file and the [JSON schema](https://json-schema.org) that is assigned to it.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnexpectedAnchor",
                "shortDescription": {
                  "text": "Begin or end anchor in unexpected position"
                },
                "fullDescription": {
                  "text": "Reports '^' or '\\A' anchors not at the beginning of the pattern and '$', '\\Z' or '\\z' anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the '^' and '$' anchors, most likely the literal character was meant and the escape forgotten. Example: '(Price $10)' New in 2018.1",
                  "markdown": "Reports `^` or `\\A` anchors not at the beginning of the pattern and `$`, `\\Z` or `\\z` anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the `^` and `$` anchors, most likely the literal character was meant and the escape forgotten.\n\n**Example:**\n\n\n      (Price $10)\n\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SyntaxError",
                "shortDescription": {
                  "text": "Syntax error"
                },
                "fullDescription": {
                  "text": "Reports syntax errors that have been found in the result of a batch code inspection run.",
                  "markdown": "Reports syntax errors that have been found in the result of a batch code inspection run."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpAnonymousGroup",
                "shortDescription": {
                  "text": "Anonymous capturing group or numeric back reference"
                },
                "fullDescription": {
                  "text": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. '(?:xxx)' instead of '(xxx)'. Example: '(\\d\\d\\d\\d)\\1' A better regex pattern could look like this: '(?<quad>\\d\\d\\d\\d)\\k<quad>' New in 2017.2",
                  "markdown": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. `(?:xxx)` instead of `(xxx)`.\n\n**Example:**\n\n\n      (\\d\\d\\d\\d)\\1\n\nA better regex pattern could look like this:\n\n\n      (?<quad>\\d\\d\\d\\d)\\k<quad>\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckDtdRefs",
                "shortDescription": {
                  "text": "Unresolved DTD reference"
                },
                "fullDescription": {
                  "text": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files.",
                  "markdown": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpellCheckingInspection",
                "shortDescription": {
                  "text": "Typo"
                },
                "fullDescription": {
                  "text": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click.",
                  "markdown": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "TYPO",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckXmlFileWithXercesValidator",
                "shortDescription": {
                  "text": "Failed external validation"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.",
                  "markdown": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonAsciiCharacters",
                "shortDescription": {
                  "text": "Non-ASCII characters"
                },
                "fullDescription": {
                  "text": "Reports code elements that uses non-ASCII symbols in an unusual context. Example: Non-ASCII characters used in identifiers, strings, or comments. Identifiers written in different languages, such as 'myCollection' with the letter 'C' written in Cyrillic. Comments or strings containing Unicode symbols, such as long dashes and arrows.",
                  "markdown": "Reports code elements that uses non-ASCII symbols in an unusual context.\n\nExample:\n\n* Non-ASCII characters used in identifiers, strings, or comments.\n* Identifiers written in different languages, such as `my`**C**`ollection` with the letter **C** written in Cyrillic.\n* Comments or strings containing Unicode symbols, such as long dashes and arrows."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTag",
                "shortDescription": {
                  "text": "Unknown tag"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported.",
                  "markdown": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LossyEncoding",
                "shortDescription": {
                  "text": "Lossy encoding"
                },
                "fullDescription": {
                  "text": "Reports characters that cannot be displayed because of the current document encoding. Examples: If you type international characters in a document with the US-ASCII charset, some characters will be lost on save. If you load a UTF-8-encoded file using the ISO-8859-1 one-byte charset, some characters will be displayed incorrectly. You can fix this by changing the file encoding either by specifying the encoding directly in the file, e.g. by editing 'encoding=' attribute in the XML prolog of XML file, or by changing the corresponding options in Settings | Editor | File Encodings.",
                  "markdown": "Reports characters that cannot be displayed because of the current document encoding.\n\nExamples:\n\n* If you type international characters in a document with the **US-ASCII** charset, some characters will be lost on save.\n* If you load a **UTF-8** -encoded file using the **ISO-8859-1** one-byte charset, some characters will be displayed incorrectly.\n\nYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing `encoding=` attribute in the XML prolog of XML file,\nor by changing the corresponding options in **Settings \\| Editor \\| File Encodings**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEscapedMetaCharacter",
                "shortDescription": {
                  "text": "Escaped meta character"
                },
                "fullDescription": {
                  "text": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character '[', ']' and '^', because those would need additional escaping inside a character class. Example: '\\d+\\.\\d+' After the quick-fix is applied: '\\d+[.]\\d+' New in 2017.1",
                  "markdown": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character `[`, `]` and `^`, because those would need additional escaping inside a character class.\n\n**Example:**\n\n\n      \\d+\\.\\d+\n\nAfter the quick-fix is applied:\n\n\n      \\d+[.]\\d+\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRepeatedSpace",
                "shortDescription": {
                  "text": "Consecutive spaces"
                },
                "fullDescription": {
                  "text": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier. Example: '(     )' After the quick-fix is applied: '( {5})' New in 2017.1",
                  "markdown": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateAlternationBranch",
                "shortDescription": {
                  "text": "Duplicate branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression. Example: '(alpha|bravo|charlie|alpha)' After the quick-fix is applied: '(alpha|bravo|charlie)' New in 2017.1",
                  "markdown": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression.\n\n**Example:**\n\n\n      (alpha|bravo|charlie|alpha)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo|charlie)\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IgnoreFileDuplicateEntry",
                "shortDescription": {
                  "text": "Ignore file duplicates"
                },
                "fullDescription": {
                  "text": "Reports duplicate entries (patters) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed. Example:     # Output directories\n    /out/\n    /target/\n    /out/",
                  "markdown": "Reports duplicate entries (patters) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed.\n\nExample:\n\n```\n    # Output directories\n    /out/\n    /target/\n    /out/\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Version control",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonStandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON standard"
                },
                "fullDescription": {
                  "text": "Reports the following discrepancies of a JSON file with the language specification: A line or block comment (configurable). Multiple top-level values (expect for JSON Lines files, configurable for others). A trailing comma in an object or array (configurable). A single quoted string. A property key is a not a double quoted strings. A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).",
                  "markdown": "Reports the following discrepancies of a JSON file with [the language specification](https://tools.ietf.org/html/rfc7159):\n\n* A line or block comment (configurable).\n* Multiple top-level values (expect for JSON Lines files, configurable for others).\n* A trailing comma in an object or array (configurable).\n* A single quoted string.\n* A property key is a not a double quoted strings.\n* A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckEmptyScriptTag",
                "shortDescription": {
                  "text": "Empty tag"
                },
                "fullDescription": {
                  "text": "Reports an empty tag (such as 'script') that does not work in some browsers.",
                  "markdown": "Reports an empty tag (such as `script`) that does not work in some browsers."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownOperator",
                "shortDescription": {
                  "text": "Unknown JSONPath operator"
                },
                "fullDescription": {
                  "text": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: 'in', 'nin', 'subsetof', 'anyof', 'noneof', 'size', 'empty', 'contains'.",
                  "markdown": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: `in`, `nin`, `subsetof`, `anyof`, `noneof`, `size`, `empty`, `contains`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.properties",
            "version": "213.7331",
            "rules": [
              {
                "id": "DuplicatePropertyInspection",
                "shortDescription": {
                  "text": "Duplicate property"
                },
                "fullDescription": {
                  "text": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values. Example: 'property1=value;\nproperty2=value;' The Options list allows selecting the area in which the inspection should search for duplicates.",
                  "markdown": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values.\n\nExample:\n\n\n    property1=value;\n    property2=value;\n\nThe **Options** list allows selecting the area in which the inspection should search for duplicates."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseEllipsisInPropertyInspection",
                "shortDescription": {
                  "text": "Three dot characters instead of the ellipsis"
                },
                "fullDescription": {
                  "text": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files.",
                  "markdown": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AlphaUnsortedPropertiesFile",
                "shortDescription": {
                  "text": "Properties file or resource bundle is alphabetically unsorted"
                },
                "fullDescription": {
                  "text": "Reports alphabetically unsorted resource bundles or .properties files.",
                  "markdown": "Reports alphabetically unsorted resource bundles or .properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFO",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrailingSpacesInProperty",
                "shortDescription": {
                  "text": "Trailing spaces in property"
                },
                "fullDescription": {
                  "text": "Reports all properties whose keys or values end with a whitespace.",
                  "markdown": "Reports all properties whose keys or values end with a whitespace.   "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedProperty",
                "shortDescription": {
                  "text": "Unused property"
                },
                "fullDescription": {
                  "text": "Reports all properties that are not referenced from the outside of the .properties file.",
                  "markdown": "Reports all properties that are not referenced from the outside of the .properties file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WrongPropertyKeyValueDelimiter",
                "shortDescription": {
                  "text": "Property key/value delimiter doesn't match code style settings"
                },
                "fullDescription": {
                  "text": "Reports properties in which key or value delimiters do not match code style settings.",
                  "markdown": "Reports properties in which key or value delimiters do not match code style settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.intelliLang",
            "version": "213.7331",
            "rules": [
              {
                "id": "InjectedReferences",
                "shortDescription": {
                  "text": "Injected references"
                },
                "fullDescription": {
                  "text": "Reports unresolved references injected by Language Injections. Example:     @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist",
                  "markdown": "Reports unresolved references injected by [Language Injections](https://www.jetbrains.com/help/idea/using-language-injections.html).\n\nExample:\n\n```\n    @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.plugins.staticAnalysis",
            "version": "213.7331",
            "rules": [
              {
                "id": "QodanaServiceMessage",
                "shortDescription": {
                  "text": "Qodana service message"
                },
                "fullDescription": {
                  "text": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems.",
                  "markdown": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          }
        ]
      },
      "invocations": [
        {
          "exitCode": 0,
          "toolExecutionNotifications": [
            {
              "message": {
                "text": "Reporting from [\"An invalid interpreter\"] 'sanity' inspections was suspended due to high problems count."
              },
              "level": "error"
            }
          ],
          "executionSuccessful": true
        }
      ],
      "language": "en-US",
      "versionControlProvenance": [
        {
          "repositoryUri": "https://github.com/School-Simplified/Timmy-SchoolSimplified",
          "revisionId": "b8ba70ea2c265dbaebad27ade016a2e8e70acc96",
          "branch": "beta",
          "properties": {
            "lastAuthorName": "SpaceT0",
            "vcsType": "Git",
            "lastAuthorEmail": "space@spaceturtle.tech",
            "tags": [
              "lastAuthorEmail",
              "lastAuthorName",
              "vcsType"
            ]
          }
        }
      ],
      "results": [
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'creds' might be referenced before assignment",
            "markdown": "Local variable 'creds' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 16,
                  "charOffset": 7459,
                  "charLength": 5,
                  "snippet": {
                    "text": "creds"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 215,
                  "startColumn": 1,
                  "charOffset": 7426,
                  "charLength": 40,
                  "snippet": {
                    "text": "            pass\n\n        return creds\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "96e9d4645e7b84191fa72a587c32bde302f5c223bccd8ecca7a2df34836eb19b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'datetime' might be referenced before assignment",
            "markdown": "Local variable 'datetime' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 38,
                  "charOffset": 7164,
                  "charLength": 8,
                  "snippet": {
                    "text": "datetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 294,
                  "startColumn": 1,
                  "charOffset": 7087,
                  "charLength": 94,
                  "snippet": {
                    "text": "    content = TextField(default=\"N/A\")\n\n    datetime = DateTimeField(default=datetime.now())\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ef0b717cdf916cb5cd979c4944bff600fa4391c7ab6df5a8ac615ffe682476c3"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'value' might be referenced before assignment",
            "markdown": "Local variable 'value' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 12,
                  "charOffset": 588,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "charOffset": 543,
                  "charLength": 94,
                  "snippet": {
                    "text": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5c14b59ee554e57b80982e2b850c8d6a6f4d2d6f28ff55d98abb12c2bfc4f8cc"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 773,
                  "startColumn": 42,
                  "charOffset": 30868,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 771,
                  "startColumn": 1,
                  "charOffset": 30780,
                  "charLength": 143,
                  "snippet": {
                    "text": "                    )\n                finally:\n                    await ctx.send(embed=embed)\n        else:\n            embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d175a9d6d12fec0b22ab875aa50172b9081fa224785da20ae9471c528803a03a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 996,
                  "startColumn": 46,
                  "charOffset": 40676,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 994,
                  "startColumn": 1,
                  "charOffset": 40576,
                  "charLength": 163,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "163129c353001544156af78a21126068260e7687dd9702fdea4ca49d5d5e235f"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1184,
                  "startColumn": 46,
                  "charOffset": 49287,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1182,
                  "startColumn": 1,
                  "charOffset": 49187,
                  "charLength": 125,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n\n            else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "936b926f92760c3b4611489d757ece2568797258fcbb0593cc960e2c12747eb8"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1359,
                  "startColumn": 46,
                  "charOffset": 58008,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1357,
                  "startColumn": 1,
                  "charOffset": 57908,
                  "charLength": 163,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d23ecbab6b64e25f00f8df3dcaf1e9af4b414b296ab977edee625523cf6c3d1c"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1485,
                  "startColumn": 46,
                  "charOffset": 64015,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1483,
                  "startColumn": 1,
                  "charOffset": 63915,
                  "charLength": 163,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6eed2afe40c4277176eed18aef0f51bf6b6e99011029bbfbd74e276e4d23e2f9"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1566,
                  "startColumn": 46,
                  "charOffset": 67771,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1564,
                  "startColumn": 1,
                  "charOffset": 67671,
                  "charLength": 163,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d8940f024b28b7f78858db9b309e7bc0364cf0db3ef76629aeb1a6f00a2f57ab"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'value' might be referenced before assignment",
            "markdown": "Local variable 'value' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 12,
                  "charOffset": 486,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 441,
                  "charLength": 94,
                  "snippet": {
                    "text": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9bffcc9217c74ddbc6cb22666aaf57208d019b0cb03cb41df8c73833540d0f06"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'value' might be referenced before assignment",
            "markdown": "Local variable 'value' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 12,
                  "charOffset": 935,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 890,
                  "charLength": 94,
                  "snippet": {
                    "text": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "35b2e62b7538a201134977a1076bd64fa366bc4d319407212496cea0a8f2d02b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'query' might be referenced before assignment",
            "markdown": "Local variable 'query' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 13,
                  "charOffset": 2286,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "charOffset": 2246,
                  "charLength": 99,
                  "snippet": {
                    "text": "        )\n        if renew:\n            query.delete_instance()\n\n        await member.move_to(None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "62043cce2a1fba9a389a282e4e8f1e061ebb5f6c8d5d2738ed416ca8a91c6b02"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'query' might be referenced before assignment",
            "markdown": "Local variable 'query' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 9,
                  "charOffset": 2771,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 1,
                  "charOffset": 2717,
                  "charLength": 128,
                  "snippet": {
                    "text": "        await addLeaderboardProgress(member)\n\n        query.goal = goal\n        query.RenewalTime = renewal\n        query.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b05c56c2aeb18037d8098a7deaed17ed585658377b7c3e524dfd77e3326ac969"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'msg' might be referenced before assignment",
            "markdown": "Local variable 'msg' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 12,
                  "charOffset": 4599,
                  "charLength": 3,
                  "snippet": {
                    "text": "msg"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 156,
                  "startColumn": 1,
                  "charOffset": 4542,
                  "charLength": 87,
                  "snippet": {
                    "text": "    if response == None:\n        msg = S3_URL\n    return msg, transcript_file, S3_URL\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4bc7894a7b623300c198d2ee06e82cfaccdcead4ba00236d0325bf701f475a97"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/gh_modals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 5,
                  "charOffset": 293,
                  "charLength": 24,
                  "snippet": {
                    "text": "\"ISSUE\", \"FEEDBACK\","
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "charOffset": 199,
                  "charLength": 120,
                  "snippet": {
                    "text": "QuestionListType = List[Dict[str, Union[bool, str, None]]]\nGithubActionLiteral = Literal[\n    \"ISSUE\",\n    \"FEEDBACK\",\n]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e784aafe053a19eed0458bc8d82701f9a6fdb3db546b4c814ef9ca280da6d31e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/gh_modals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 31,
                  "charOffset": 350,
                  "charLength": 57,
                  "snippet": {
                    "text": "\"Command\", \"Slash Command\", \"Dropdown or Button\", \"Other\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "charOffset": 302,
                  "charLength": 125,
                  "snippet": {
                    "text": "    \"FEEDBACK\",\n]\nIssueFeatureLiteral = Literal[\"Command\", \"Slash Command\", \"Dropdown or Button\", \"Other\"]\n\nif TYPE_CHECKING:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "957ab2575a11de791d08c16619ea0e8a3b22f7738ce4d0c6a71de169ae9e203b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 23,
                  "charOffset": 12296,
                  "charLength": 27,
                  "snippet": {
                    "text": "\"debate\", \"count\", \"ticket\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 355,
                  "startColumn": 1,
                  "charOffset": 12202,
                  "charLength": 150,
                  "snippet": {
                    "text": "        interaction: discord.Interaction,\n        user: discord.Member,\n        role: Literal[\"debate\", \"count\", \"ticket\"],\n        reason: str\n    ):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d10a72a2037cc0cd3e3a00e66993ffb48dd4a2ab99aa78a4f62728d2a850a94"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 23,
                  "charOffset": 10258,
                  "charLength": 10,
                  "snippet": {
                    "text": "\"-a\", \"-c\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 323,
                  "startColumn": 1,
                  "charOffset": 10180,
                  "charLength": 149,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        mode: Literal[\"-a\", \"-c\"] = \"-a\",\n        sync_commands: bool = False,\n    ) -> None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d10022c1a597df14b2bdde33cad6f4e46708d16477998b299c8a3fc8c5682f5"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 35,
                  "charOffset": 1713,
                  "charLength": 34,
                  "snippet": {
                    "text": "\"Personal Account\", \"Team Account\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 1,
                  "charOffset": 1632,
                  "charLength": 210,
                  "snippet": {
                    "text": "        firstname: str,\n        lastname: str,\n        organizationunit: Literal[\"Personal Account\", \"Team Account\"],\n    ):\n        HR_Role = discord.utils.get(interaction.user.guild.roles, id=HRID.r_hr_staff)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d5e650c8ef10456cd81b1d01e1a2f31abb3514d70b39908f18f4cc5c361f722"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/github_commands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 31,
                  "charOffset": 389,
                  "charLength": 57,
                  "snippet": {
                    "text": "\"Command\", \"Slash Command\", \"Dropdown or Button\", \"Other\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 331,
                  "charLength": 118,
                  "snippet": {
                    "text": "    from main import Timmy\n\nIssueFeatureLiteral = Literal[\"Command\", \"Slash Command\", \"Dropdown or Button\", \"Other\"]\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a2d2e27dcde3ee159ed1caa5ded6444075158f90760952d378adccaaa3cc06ff"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 65,
                  "charOffset": 4658,
                  "charLength": 7,
                  "snippet": {
                    "text": "\"close\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 4484,
                  "charLength": 273,
                  "snippet": {
                    "text": "    @app_commands.checks.cooldown(1, 300, key=lambda i: (i.guild_id, i.channel.id))\n    async def commission(\n        self, interaction: discord.Interaction, action: Literal[\"close\"]\n    ):\n        channel: discord.TextChannel = self.bot.get_channel(TechID.ch_bot_requests)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "169d4439f904fbe90ceca5e1628b5e8fae4f2735fa96540d67811adbc05b4270"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/commands_manager.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 60,
                  "charOffset": 463,
                  "charLength": 8,
                  "snippet": {
                    "text": "\"global\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 366,
                  "charLength": 175,
                  "snippet": {
                    "text": "    @is_botAdmin4\n    async def sync(\n        self, ctx: commands.Context, action: Union[Literal[\"global\"], discord.Guild]\n    ):\n        if isinstance(action, discord.Guild):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f6369c1d1b6a234ccb9cf65e4f9381c3f3c30ed1a5e5b23509cdf96feb9a68c"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 23,
                  "charOffset": 7843,
                  "charLength": 10,
                  "snippet": {
                    "text": "\"AM\", \"PM\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 204,
                  "startColumn": 1,
                  "charOffset": 7783,
                  "charLength": 128,
                  "snippet": {
                    "text": "        date: str,\n        time: str,\n        ampm: Literal[\"AM\", \"PM\"],\n        student: discord.Member,\n        repeats: bool,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2fb51fb657858fd6dcf2d2d564dce8e6857fbda52c6479c6e7174aa786b0c25e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 23,
                  "charOffset": 12522,
                  "charLength": 10,
                  "snippet": {
                    "text": "\"AM\", \"PM\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 336,
                  "startColumn": 1,
                  "charOffset": 12462,
                  "charLength": 117,
                  "snippet": {
                    "text": "        date: str,\n        time: str,\n        ampm: Literal[\"AM\", \"PM\"],\n        student: str,\n        repeats: bool,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f8b155863afd41abf1b4d7b57ffce7ca09247f5f5f29fa78917097e195ce681"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 5,
                  "charOffset": 428,
                  "charLength": 154,
                  "snippet": {
                    "text": "\"Book\", \"Movie\", \"TV Show\", \"Meme\", \"Pickup Line\", \"Puzzle\", \"Daily Question..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 338,
                  "charLength": 125,
                  "snippet": {
                    "text": "QuestionLiteral = List[Dict[str, Union[str, bool, None]]]\nMediaLiteralType = Literal[\n    \"Book\",\n    \"Movie\",\n    \"TV Show\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f5bb3d6d28f1106c45bacce929dd169c10f5bc39639ee6278d0d380221ddb183"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter r_id in docstring",
            "markdown": "Missing parameter r_id in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 30,
                  "charOffset": 2794,
                  "charLength": 9,
                  "snippet": {
                    "text": "r_id: str"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 2740,
                  "charLength": 114,
                  "snippet": {
                    "text": "        return ListData\n\n    def fetch_redirect(self, r_id: str) -> RedirectPizza:\n        \"\"\"Fetches a redirect.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c540045d85522766746c949e9a5261efd023dacebdd4914b71ce152c48ca0f7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unexpected parameter url_code in docstring",
            "markdown": "Unexpected parameter url_code in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 13,
                  "charOffset": 2881,
                  "charLength": 8,
                  "snippet": {
                    "text": "url_code"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 105,
                  "startColumn": 1,
                  "charOffset": 2854,
                  "charLength": 139,
                  "snippet": {
                    "text": "\n        Args:\n            url_code (str): The URL code to fetch.\n            domain (str, optional): The domain to use. Defaults to None.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d581e9081f0f36734fea24c3f63c6b04ceb0e38ac4c8793aa9a247bf7864bff"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unexpected parameter domain in docstring",
            "markdown": "Unexpected parameter domain in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 13,
                  "charOffset": 2932,
                  "charLength": 6,
                  "snippet": {
                    "text": "domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 2855,
                  "charLength": 154,
                  "snippet": {
                    "text": "        Args:\n            url_code (str): The URL code to fetch.\n            domain (str, optional): The domain to use. Defaults to None.\n\n        Raises:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d304b43cdf8c4609b3368f98473928da2e76dc5965cf16ffe059c6ec55ebc45b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter r_id in docstring",
            "markdown": "Missing parameter r_id in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 28,
                  "charOffset": 5551,
                  "charLength": 9,
                  "snippet": {
                    "text": "r_id: str"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 1,
                  "charOffset": 5513,
                  "charLength": 108,
                  "snippet": {
                    "text": "        )\n\n    def del_redirect(self, r_id: str) -> typing.Union[dict, int]:\n        \"\"\"Deletes a redirect.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7ab3119540bca93e8f2b94d0b71de38d0053027e745bc15807957592b61c7e76"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unexpected parameter redirect_url in docstring",
            "markdown": "Unexpected parameter redirect_url in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 13,
                  "charOffset": 5648,
                  "charLength": 12,
                  "snippet": {
                    "text": "redirect_url"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 191,
                  "startColumn": 1,
                  "charOffset": 5621,
                  "charLength": 139,
                  "snippet": {
                    "text": "\n        Args:\n            redirect_url (str): The URL to delete.\n            domain (str, optional): The domain to use. Defaults to None.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b6da01cc331009d8b24a7fb05a46a3eed0f2b0c04cd85a281877556ccef3bc55"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unexpected parameter domain in docstring",
            "markdown": "Unexpected parameter domain in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 13,
                  "charOffset": 5699,
                  "charLength": 6,
                  "snippet": {
                    "text": "domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 192,
                  "startColumn": 1,
                  "charOffset": 5622,
                  "charLength": 154,
                  "snippet": {
                    "text": "        Args:\n            redirect_url (str): The URL to delete.\n            domain (str, optional): The domain to use. Defaults to None.\n\n        Raises:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e28a13feb9f243db20a5eec69b47d2ef2fca02d6c521bdb3f177e2261adf03b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter self in docstring",
            "markdown": "Missing parameter self in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 16,
                  "charOffset": 4645,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 159,
                  "startColumn": 1,
                  "charOffset": 4628,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f08cf9445e9d1c5e8bcb7d836cd988fd8f5f9f3521dd178a699ca44b681648ec"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter sandbox in docstring",
            "markdown": "Missing parameter sandbox in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 34,
                  "charOffset": 4663,
                  "charLength": 21,
                  "snippet": {
                    "text": "sandbox: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 159,
                  "startColumn": 1,
                  "charOffset": 4628,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "819c15cecc632f7eae0439042f6aac91a27c86b59f7ca34cf6765866b9f88b55"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter sandbox in docstring",
            "markdown": "Missing parameter sandbox in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 59,
                  "charOffset": 8752,
                  "charLength": 21,
                  "snippet": {
                    "text": "sandbox: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 277,
                  "startColumn": 1,
                  "charOffset": 8680,
                  "charLength": 152,
                  "snippet": {
                    "text": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ad119649d9089a6b27dd2ac9cf85b1d64224a66717ff2cc245df9435437a0715"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 12,
                  "charOffset": 3372,
                  "charLength": 18,
                  "snippet": {
                    "text": "lobbyStart == None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 3227,
                  "charLength": 268,
                  "snippet": {
                    "text": "        print(self.LobbyStartIDs[member.guild.id])\n        lobbyStart = member.guild.get_channel(self.LobbyStartIDs[member.guild.id])\n        if lobbyStart == None:\n            try:\n                lobbyStart = self.bot.get_channel(self.LobbyStartIDs[member.guild.id])"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e6eaf9717ec4eb0cd6bd98320a6ba33e3195a21236defff7b8ca5e4153706721"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 8,
                  "charOffset": 4044,
                  "charLength": 16,
                  "snippet": {
                    "text": "response != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 3978,
                  "charLength": 162,
                  "snippet": {
                    "text": "    embed.add_field(name=\"Transcript Link\", value=S3_URL)\n\n    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0c7b89475cde1549088d87386c46348265229531140599e4c572ad9fe21551b3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 8,
                  "charOffset": 4116,
                  "charLength": 23,
                  "snippet": {
                    "text": "responsesauthor != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 138,
                  "startColumn": 1,
                  "charOffset": 4037,
                  "charLength": 160,
                  "snippet": {
                    "text": "    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:\n        for UAuthor in responsesauthor:\n            try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "907017deedc5d63f6549430067e4cbfa8acece0839170649900ead81695301b1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 8,
                  "charOffset": 4549,
                  "charLength": 16,
                  "snippet": {
                    "text": "response == None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "charOffset": 4528,
                  "charLength": 99,
                  "snippet": {
                    "text": "        pass\n\n    if response == None:\n        msg = S3_URL\n    return msg, transcript_file, S3_URL"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "db29d02eb7ea4f08e7d5653c6b8d3cc67f877081e87b47c438572947387a59f4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'is_paginating' may be 'static'",
            "markdown": "Method `is_paginating` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 501,
                  "startColumn": 9,
                  "charOffset": 17431,
                  "charLength": 13,
                  "snippet": {
                    "text": "is_paginating"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 499,
                  "startColumn": 1,
                  "charOffset": 17381,
                  "charLength": 165,
                  "snippet": {
                    "text": "\nclass FrontPageSource(menus.PageSource):\n    def is_paginating(self) -> bool:\n        # This forces the buttons to appear even in the front page\n        return True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d2c8657b8519e9e83ef7008ec4bb66a40ee0a9069f19f588a33eb23f1949aa5d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'get_max_pages' may be 'static'",
            "markdown": "Method `get_max_pages` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 9,
                  "charOffset": 17556,
                  "charLength": 13,
                  "snippet": {
                    "text": "get_max_pages"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 503,
                  "startColumn": 1,
                  "charOffset": 17527,
                  "charLength": 184,
                  "snippet": {
                    "text": "        return True\n\n    def get_max_pages(self) -> Optional[int]:\n        # There's only one actual page in the front page\n        # However we need at least 2 to show all the buttons"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a7077b8a8255830f4db3336e1026d338bb3579149e1749bf45e178677912f70a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method '_filter_commands' may be 'static'",
            "markdown": "Method `_filter_commands` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 566,
                  "startColumn": 15,
                  "charOffset": 19684,
                  "charLength": 16,
                  "snippet": {
                    "text": "_filter_commands"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 564,
                  "startColumn": 1,
                  "charOffset": 19646,
                  "charLength": 106,
                  "snippet": {
                    "text": "        self.bot = bot\n\n    async def _filter_commands(\n        self,\n        _commands: CommandsListType,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dae7803107c4badb9be7ec0db6f4a4f306659434552f16baa211b71e714a50bd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'interaction_check' may be 'static'",
            "markdown": "Method `interaction_check` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 15,
                  "charOffset": 1207,
                  "charLength": 17,
                  "snippet": {
                    "text": "interaction_check"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 1138,
                  "charLength": 215,
                  "snippet": {
                    "text": "        return self.bot.get_cog(\"Student Engagement\")\n\n    async def interaction_check(self, interaction: discord.Interaction) -> bool:\n        return interaction.user.id in [752984497259151370, 747126643587416174]\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5f9c7c6d564ff2a86a159de88dcbc063cc83bda4ead2c98a5d7bd580ec31dc62"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'cog_load' may be 'static'",
            "markdown": "Method `cog_load` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 15,
                  "charOffset": 14442,
                  "charLength": 8,
                  "snippet": {
                    "text": "cog_load"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 399,
                  "startColumn": 1,
                  "charOffset": 14393,
                  "charLength": 169,
                  "snippet": {
                    "text": "        return Emoji.turtle_smirk\n\n    async def cog_load(self) -> None:\n        for item in database.ResponseSpamBlacklist:\n            blacklist.append(item.discordID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e2952ee90423a553189c136adeda1f002163f32c13c674a04e9aad979a35300"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'interaction_check' may be 'static'",
            "markdown": "Method `interaction_check` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 15,
                  "charOffset": 1291,
                  "charLength": 17,
                  "snippet": {
                    "text": "interaction_check"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 1253,
                  "charLength": 230,
                  "snippet": {
                    "text": "        self.bot = bot\n\n    async def interaction_check(self, interaction: discord.Interaction, /) -> bool:\n        blacklisted_users = [p.discordID for p in database.Blacklist]\n        if interaction.user.id in blacklisted_users:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eeac45a0420ec7c784ce1542661ec2928ffbd0b60f774927590a3a441c79ab6e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'before_invoke' may be 'static'",
            "markdown": "Method `before_invoke` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 15,
                  "charOffset": 2708,
                  "charLength": 13,
                  "snippet": {
                    "text": "before_invoke"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 2643,
                  "charLength": 143,
                  "snippet": {
                    "text": "        await on_command_error_(self, ctx, error)\n\n    async def before_invoke(self, ctx: commands.Context):\n        await before_invoke_(ctx)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "019b21d7f1e94c42c5daa0ba58d353eb14c06d67857c5ddf22492d1139b77790"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'check' may be 'static'",
            "markdown": "Method `check` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 15,
                  "charOffset": 2801,
                  "charLength": 5,
                  "snippet": {
                    "text": "check"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2752,
                  "charLength": 121,
                  "snippet": {
                    "text": "        await before_invoke_(ctx)\n\n    async def check(self, ctx: commands.Context):\n        await main_mode_check_(ctx)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7ed2aebb11bdbe01c53f511d60013297fd3c83690e2f7618a66001b509d722fe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'setup_hook' may be 'static'",
            "markdown": "Method `setup_hook` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 15,
                  "charOffset": 2888,
                  "charLength": 10,
                  "snippet": {
                    "text": "setup_hook"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 2837,
                  "charLength": 139,
                  "snippet": {
                    "text": "        await main_mode_check_(ctx)\n\n    async def setup_hook(self) -> None:\n        with alive_bar(\n                len(get_extensions()),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5fa31cf860ad0f41449a4b84901388632c63046d03a52cd48d63819590dc2988"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'ctx' value is not used",
            "markdown": "Parameter 'ctx' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 21,
                  "charOffset": 3044,
                  "charLength": 3,
                  "snippet": {
                    "text": "ctx"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 1,
                  "charOffset": 3022,
                  "charLength": 115,
                  "snippet": {
                    "text": "\n\ndef timmy_beta_host(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fc08b8007d2a000432f94f40d4f2c3705507ca6aeb3b634b1704a43c357d56b7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'response' value is not used",
            "markdown": "Local variable 'response' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 9,
                  "charOffset": 8190,
                  "charLength": 8,
                  "snippet": {
                    "text": "response"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 243,
                  "startColumn": 1,
                  "charOffset": 8167,
                  "charLength": 99,
                  "snippet": {
                    "text": "    )\n    try:\n        response = s3_client.upload_file(\n            file_name,\n            bucket,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb3d47780a8e62ec3b4923ef3e8a7ee7ca91fc25460c3079ee00f2534abad503"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1164,
                  "startColumn": 9,
                  "charOffset": 53302,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1162,
                  "startColumn": 1,
                  "charOffset": 53238,
                  "charLength": 165,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        transcript_log = self.bot.get_channel(TechID.ch_ticket_log)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59ff367013dc9b7ad52f44a2a50d8773278934016783b5f7e21da03f591737c9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1173,
                  "startColumn": 62,
                  "charOffset": 53695,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1171,
                  "startColumn": 1,
                  "charOffset": 53552,
                  "charLength": 312,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.message.delete()\n        await interaction.response.send_message( \"ok, not removing this channel.\", ephemeral=True)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0f31a9a26838fd88210631c14068c490bb902780b7fc86c1fa20eff621075e2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1187,
                  "startColumn": 60,
                  "charOffset": 54242,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1185,
                  "startColumn": 1,
                  "charOffset": 54066,
                  "charLength": 287,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label=\"Lock\", style=discord.ButtonStyle.green, custom_id=\"persistent_view:lock\", emoji=\"🔒\")\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        ch = self.bot.get_channel(interaction.channel_id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "02fc86aff12232cf94bec650f18dcb52366b1ffd55cac552c499b31b004d5289"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1206,
                  "startColumn": 25,
                  "charOffset": 54865,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1204,
                  "startColumn": 1,
                  "charOffset": 54803,
                  "charLength": 150,
                  "snippet": {
                    "text": "        emoji=Emoji.gsuite_logo\n    )\n    async def lock(self,interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "305323f8538389c40ee4f400c557410882ad21f26b8160c15bb722bdaca26320"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1206,
                  "startColumn": 59,
                  "charOffset": 54899,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1204,
                  "startColumn": 1,
                  "charOffset": 54803,
                  "charLength": 150,
                  "snippet": {
                    "text": "        emoji=Emoji.gsuite_logo\n    )\n    async def lock(self,interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c47af3c71b62d8cdce8d16ee342e01b5611c93ded48a418d4f1951e46ec4d0f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1221,
                  "startColumn": 29,
                  "charOffset": 55261,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1219,
                  "startColumn": 1,
                  "charOffset": 55178,
                  "charLength": 191,
                  "snippet": {
                    "text": "        custom_id=\"persistent_view:tempconfirm\",\n    )\n    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n        self.stop()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e06afe01749feda90cbf9f2793feb92d9c7df2b64a8e28e703a038637d92477e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1221,
                  "startColumn": 63,
                  "charOffset": 55295,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1219,
                  "startColumn": 1,
                  "charOffset": 55178,
                  "charLength": 191,
                  "snippet": {
                    "text": "        custom_id=\"persistent_view:tempconfirm\",\n    )\n    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n        self.stop()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9c54a9a1f664b9a15a25859e269fc7e06dea0b4ffb1ebf3548ab8c293487b6d7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1226,
                  "startColumn": 62,
                  "charOffset": 55513,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1224,
                  "startColumn": 1,
                  "charOffset": 55370,
                  "charLength": 275,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.send_message(\"Cancelling\", ephemeral=True)\n        self.value = False"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e778bc7ea8a04eed7869ece81d2d8bce534925771d62786760443175e9c4ccd4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1242,
                  "startColumn": 61,
                  "charOffset": 55988,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1240,
                  "startColumn": 1,
                  "charOffset": 55875,
                  "charLength": 206,
                  "snippet": {
                    "text": "        custom_id=\"persistent_view:nitrofake\",\n    )\n    async def claim(self, interaction: discord.Interaction, button: discord.ui.Button):\n        try:\n            await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4f110fb6d553647b6f593b0947afaa9e37af40fdb94d4b04c367a8acab399f60"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1272,
                  "startColumn": 60,
                  "charOffset": 57240,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1270,
                  "startColumn": 1,
                  "charOffset": 57155,
                  "charLength": 196,
                  "snippet": {
                    "text": "        emoji=\"🔒\",\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        ch = self.bot.get_channel(interaction.channel_id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "75d0938f5c7d5d24780f2a0ded3495943938448975626c8ed6bc3e8aa15bf8dc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1291,
                  "startColumn": 29,
                  "charOffset": 57812,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1289,
                  "startColumn": 1,
                  "charOffset": 57729,
                  "charLength": 191,
                  "snippet": {
                    "text": "        custom_id=\"persistent_view:tempconfirm\",\n    )\n    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n        self.stop()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "885ee831ddb6802472d26919ccae47d83f47f8cbb35a18e95f42566cd01a8751"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1291,
                  "startColumn": 63,
                  "charOffset": 57846,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1289,
                  "startColumn": 1,
                  "charOffset": 57729,
                  "charLength": 191,
                  "snippet": {
                    "text": "        custom_id=\"persistent_view:tempconfirm\",\n    )\n    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n        self.stop()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d0e0f3775b33b918733432e8847a1a5575af4f10c6f2f8c03658f6c8fd696ff7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1296,
                  "startColumn": 62,
                  "charOffset": 58064,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1294,
                  "startColumn": 1,
                  "charOffset": 57921,
                  "charLength": 275,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.send_message(\"Cancelling\", ephemeral=True)\n        self.value = False"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "de4a01e27431e3833a85c1db9df5732d51903323bc934d22174721dd1db0bd34"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'result' value is not used",
            "markdown": "Local variable 'result' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1362,
                  "startColumn": 9,
                  "charOffset": 60543,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1360,
                  "startColumn": 1,
                  "charOffset": 60488,
                  "charLength": 143,
                  "snippet": {
                    "text": "    msg = await ctx.send(embed=embed)\n    try:\n        result = subprocess.run(\n            f\"cd && cd {main_or_beta}\",\n            shell=True,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "579ee5a65de81b4d942d06ed6836c1712dfd0e643bfbe7015fba11cc54222006"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'request_id' value is not used",
            "markdown": "Parameter 'request_id' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/docsapi.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 14,
                  "charOffset": 514,
                  "charLength": 10,
                  "snippet": {
                    "text": "request_id"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 499,
                  "charLength": 91,
                  "snippet": {
                    "text": "\n\ndef callback(request_id, response, exception):\n    if exception:\n        print(exception)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f1e4ab1f1cbf0572a077bc4847180a02a5b256c213b0e4ccdb48faa143c4b68a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'result' value is not used",
            "markdown": "Local variable 'result' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/docsapi.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 5,
                  "charOffset": 3346,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "charOffset": 3335,
                  "charLength": 134,
                  "snippet": {
                    "text": "    ]\n\n    result = (\n        drive_service.documents()\n        .batchUpdate(documentId=document_copy_id, body={\"requests\": requests})"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d3b8d2282ea39cf659f8fdbff2d45a3c17422e61ea5290887f2587730189dea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'exc' value is not used",
            "markdown": "Parameter 'exc' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 739,
                  "startColumn": 15,
                  "charOffset": 16569,
                  "charLength": 3,
                  "snippet": {
                    "text": "exc"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 737,
                  "startColumn": 1,
                  "charOffset": 16532,
                  "charLength": 122,
                  "snippet": {
                    "text": "\n@app.teardown_request\ndef _db_close(exc):\n    \"\"\"\n    This hook ensures that the connection is closed when we've finished"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72e35d92da92ea85f68bbe5e25fb780d9acedf040037a74b60e2dbc8236ab68e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/gh_modals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 13,
                  "charOffset": 7223,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 194,
                  "startColumn": 1,
                  "charOffset": 7147,
                  "charLength": 163,
                  "snippet": {
                    "text": "            self,\n            interaction: discord.Interaction,\n            button: discord.ui.Button,\n    ):\n        return await interaction.response.send_modal("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a397515d498b8787d4ce09b5b35a89853a780b99f2a78ec0cc8e2ac8d5b27a64"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'object' value is not used",
            "markdown": "Local variable 'object' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 9,
                  "charOffset": 3427,
                  "charLength": 6,
                  "snippet": {
                    "text": "object"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 3341,
                  "charLength": 172,
                  "snippet": {
                    "text": "        if r.status_code == 422:\n            raise InvalidAuth(r.status_code)\n        object = range(len(r.json()))\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9fcfb700f19601b9845883a6a9a114b5bd555b1667e9fa69d73085320fc30257"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'object' value is not used",
            "markdown": "Local variable 'object' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 9,
                  "charOffset": 5081,
                  "charLength": 6,
                  "snippet": {
                    "text": "object"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 1,
                  "charOffset": 4995,
                  "charLength": 156,
                  "snippet": {
                    "text": "        if r.status_code == 422:\n            raise InvalidAuth(r.status_code)\n        object = range(len(r.json()[\"data\"]))\n        pprint.pprint(r.json())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1926c12e3851e1555507eada7a760e6157415da0ffa06901561e93c2c92ae7f8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 9,
                  "charOffset": 1096,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "charOffset": 1052,
                  "charLength": 119,
                  "snippet": {
                    "text": "    async def verify(\n        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b408ec512c2f2c56852adf4862ae7ebf1a3cbfa833a8659923bc956f8b0169f4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 9,
                  "charOffset": 1138,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1074,
                  "charLength": 123,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        self.value = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23657d0686e03c4f4432bbd3789248e57f5f75b85d7efbccd3b138f26e5f74eb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'page_size' value is not used",
            "markdown": "Parameter 'page_size' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 21,
                  "charOffset": 3758,
                  "charLength": 14,
                  "snippet": {
                    "text": "page_size: int"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 3693,
                  "charLength": 197,
                  "snippet": {
                    "text": "        \"\"\"List all tags in the database\"\"\"\n\n        def get_end(page_size: int):\n            database.db.connect(reuse_if_open=True)\n            tags: int = database.PunishmentTag.select().count()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d18ac70b89729e3cb54700aa3c40f76064798d1fe6d6c32edcc589d3e27882ef"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'embed' value is not used",
            "markdown": "Local variable 'embed' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 9,
                  "charOffset": 4615,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 4558,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n        embed = discord.Embed(title=\"Tag List\")\n        embed = await common.paginate_embed(\n            self.bot, ctx, embed, populate_embed, get_end(10), page=page\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "597769b4c6213fedbb1cb9aebcd9adec01d7018771659f506aa954c481b0807a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'value' value is not used",
            "markdown": "Local variable 'value' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 13,
                  "charOffset": 5365,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 148,
                  "startColumn": 1,
                  "charOffset": 5314,
                  "charLength": 119,
                  "snippet": {
                    "text": "            user: discord.User = user\n\n            value = None\n            typeval = None\n            banreason = None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c644ec7be5c2fd7f2a8c0ca35baa563b410f6a6f34039a8f9b529bf4e03e826b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'typeval' value is not used",
            "markdown": "Local variable 'typeval' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 13,
                  "charOffset": 5390,
                  "charLength": 7,
                  "snippet": {
                    "text": "typeval"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 5352,
                  "charLength": 82,
                  "snippet": {
                    "text": "\n            value = None\n            typeval = None\n            banreason = None\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "267fe6f6b28bac44333426b889fc1dfb0db9290f1f90b51d8373341557f40415"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'user' value is not used",
            "markdown": "Parameter 'user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 57,
                  "charOffset": 1098,
                  "charLength": 4,
                  "snippet": {
                    "text": "user"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1012,
                  "charLength": 209,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener()\n    async def on_member_ban(self, guild: discord.Guild, user):\n        \"\"\"\n        Pycord doesn't give us the information we need so we need to dig deeper and query the audit logs"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "713fb88e72a65aa16d8ed39034687834e7d93ef6dfdffc46f0b7e961251d3d22"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 9,
                  "charOffset": 7283,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 201,
                  "startColumn": 1,
                  "charOffset": 7219,
                  "charLength": 132,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        \"\"\"go to the first page\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "24c16010e4834417d63eaa55053c4b17945c8f0e44c0114f2d0a82ec6de0fab5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 49,
                  "charOffset": 7553,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 208,
                  "startColumn": 1,
                  "charOffset": 7398,
                  "charLength": 225,
                  "snippet": {
                    "text": "    @discord.ui.button(label=\"Back\", style=discord.ButtonStyle.blurple)\n    async def go_to_previous_page(\n        self, interaction: discord.Interaction, button: discord.ui.Button\n    ):\n        \"\"\"go to the previous page\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6d81c843975d1830d0b19008118a606edb840f818c2010e4986dc05593d94ca8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 9,
                  "charOffset": 8081,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 223,
                  "startColumn": 1,
                  "charOffset": 8017,
                  "charLength": 131,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        \"\"\"go to the next page\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ead3e23231a0e620f62d08ffdfbc21727438c0e644db94b2a36d95ae1230425d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 9,
                  "charOffset": 8384,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 232,
                  "startColumn": 1,
                  "charOffset": 8320,
                  "charLength": 131,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        \"\"\"go to the last page\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c31cde1f24602106ba3cf727b445ff044d845ef93306216c0af38150e1c3f9bc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 9,
                  "charOffset": 8765,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 242,
                  "startColumn": 1,
                  "charOffset": 8701,
                  "charLength": 148,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        \"\"\"lets you type a page number to go to\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7a1e8d798caf8398152ab84708264d691a905de2407221606101a3be3655f7da"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 9,
                  "charOffset": 10217,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 284,
                  "startColumn": 1,
                  "charOffset": 10153,
                  "charLength": 141,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        \"\"\"stops the pagination session.\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fc22ebd44a4f2c8a643e8d04def4e37f6ed9a081ae3b931b2fbf733f7f32cf92"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'menu' value is not used",
            "markdown": "Parameter 'menu' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 27,
                  "charOffset": 17901,
                  "charLength": 14,
                  "snippet": {
                    "text": "menu: HelpMenu"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 513,
                  "startColumn": 1,
                  "charOffset": 17854,
                  "charLength": 196,
                  "snippet": {
                    "text": "        return self\n\n    def format_page(self, menu: HelpMenu, page):\n        embed = discord.Embed(title=\"Bot Help\", colour=discord.Colour.blurple())\n        embed.description = inspect.cleandoc("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac80a668dfc0b0c5f67d9bf536719caf1f7abf2fcae1138472ddb7e611a39fbe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'page' value is not used",
            "markdown": "Parameter 'page' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 43,
                  "charOffset": 17917,
                  "charLength": 4,
                  "snippet": {
                    "text": "page"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 513,
                  "startColumn": 1,
                  "charOffset": 17854,
                  "charLength": 196,
                  "snippet": {
                    "text": "        return self\n\n    def format_page(self, menu: HelpMenu, page):\n        embed = discord.Embed(title=\"Bot Help\", colour=discord.Colour.blurple())\n        embed.description = inspect.cleandoc("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4db2ffe2d1aebe17a539945cf079ce6664b9c022cd686857c1fd796dc1ab0728"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 9,
                  "charOffset": 19761,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 567,
                  "startColumn": 1,
                  "charOffset": 19702,
                  "charLength": 123,
                  "snippet": {
                    "text": "        self,\n        _commands: CommandsListType,\n        interaction: discord.Interaction,\n        *,\n        sort=False,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aa723d419236f1b2e184eddebf3c26b31894a1cb248009c7b26d369b4ae09cee"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'CheckDB' value is not used",
            "markdown": "Local variable 'CheckDB' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 9,
                  "charOffset": 2579,
                  "charLength": 7,
                  "snippet": {
                    "text": "CheckDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2517,
                  "charLength": 201,
                  "snippet": {
                    "text": "    @filters.command()\n    async def list(self, ctx):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n            .where(database.CheckInformation.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "feaf1becd29304b7f67fac9e0d61fdf3ec39185a63690129df85d7620f73aca8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'result' value is not used",
            "markdown": "Local variable 'result' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 13,
                  "charOffset": 17325,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 538,
                  "startColumn": 1,
                  "charOffset": 17299,
                  "charLength": 122,
                  "snippet": {
                    "text": "        try:\n\n            result = subprocess.run(\n                f\"cd && cd {main_or_beta}\",\n                shell=True,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "91da6e4ab367ec26697e4a676a992013728270e44721a5829c1e1ab2957d12c9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'i' value is not used",
            "markdown": "Local variable 'i' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 42,
                  "charOffset": 486,
                  "charLength": 1,
                  "snippet": {
                    "text": "i"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 412,
                  "charLength": 95,
                  "snippet": {
                    "text": "\n    rnd = random.SystemRandom()\n    return \"\".join(rnd.choice(chars) for i in range(length))\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "990c82df3ad52450773c7a402fd258f5bcc5ee3be5157c2517b973cd94cb4fec"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 9,
                  "charOffset": 3033,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 1,
                  "charOffset": 2969,
                  "charLength": 139,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        modal = BotRequestModal(self.bot)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34e2db5cc4557cea4133b1f357f369fd4aabfb6215bb1c0e2f24c8de64847ab9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 17,
                  "charOffset": 6692,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 219,
                  "startColumn": 1,
                  "charOffset": 6631,
                  "charLength": 173,
                  "snippet": {
                    "text": "                    .get()\n                )\n                channel: discord.VoiceChannel = self.bot.get_channel(\n                    int(query.ChannelID)\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "907500020b5aefcfa0c3e6a4830619fa2a1433f3054d472a41be4fbd6bc0fb15"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 17,
                  "charOffset": 9467,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 281,
                  "startColumn": 1,
                  "charOffset": 9406,
                  "charLength": 168,
                  "snippet": {
                    "text": "                    .get()\n                )\n                channel: discord.VoiceChannel = self.bot.get_channel(q.ChannelID)\n\n                view = discord.ui.View()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d6e77ee284722aba337fe63a5d19f771f6dc13ac560254d4b23e5cde702b7d81"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'team' value is not used",
            "markdown": "Local variable 'team' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 548,
                  "startColumn": 9,
                  "charOffset": 20819,
                  "charLength": 4,
                  "snippet": {
                    "text": "team"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 546,
                  "startColumn": 1,
                  "charOffset": 20733,
                  "charLength": 233,
                  "snippet": {
                    "text": "    async def end(self, ctx):\n        database.db.connect(reuse_if_open=True)\n        team = discord.utils.get(ctx.guild.roles, name=self.AT)\n        member = ctx.guild.get_member(ctx.author.id)\n        timestamp2 = datetime.now(EST)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9ef146b035f39e5d2341d04e8529beeb51e2b7b1064d0d88f733caae08a9eb62"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'timestamp2' value is not used",
            "markdown": "Local variable 'timestamp2' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 9,
                  "charOffset": 20936,
                  "charLength": 10,
                  "snippet": {
                    "text": "timestamp2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 548,
                  "startColumn": 1,
                  "charOffset": 20811,
                  "charLength": 191,
                  "snippet": {
                    "text": "        team = discord.utils.get(ctx.guild.roles, name=self.AT)\n        member = ctx.guild.get_member(ctx.author.id)\n        timestamp2 = datetime.now(EST)\n\n        voice_state = member.voice"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e70f2198901f8ca2ad33ea702fb27528120b40b7a0e2d3ddc834e6c5d0ec9fca"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'BOT' value is not used",
            "markdown": "Local variable 'BOT' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 9,
                  "charOffset": 35497,
                  "charLength": 3,
                  "snippet": {
                    "text": "BOT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 887,
                  "startColumn": 1,
                  "charOffset": 35435,
                  "charLength": 223,
                  "snippet": {
                    "text": "        member = ctx.guild.get_member(ctx.author.id)\n\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f20235492300e02e72cfe5201b1fb66a8a0ed48a284c7f7c661e4a988981a530"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'TMOD' value is not used",
            "markdown": "Local variable 'TMOD' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 891,
                  "startColumn": 9,
                  "charOffset": 35601,
                  "charLength": 4,
                  "snippet": {
                    "text": "TMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 889,
                  "startColumn": 1,
                  "charOffset": 35489,
                  "charLength": 299,
                  "snippet": {
                    "text": "        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a9605c3230ce7f925dccf898f3f7b4d11dca2f4f912cf572006664d04e19f299"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'MOD' value is not used",
            "markdown": "Local variable 'MOD' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 9,
                  "charOffset": 35667,
                  "charLength": 3,
                  "snippet": {
                    "text": "MOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 890,
                  "startColumn": 1,
                  "charOffset": 35542,
                  "charLength": 308,
                  "snippet": {
                    "text": "        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "060a8d74c4a8e1d4e144be776ec7588258c348859e88389ec681ea8652ca50a7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'SMOD' value is not used",
            "markdown": "Local variable 'SMOD' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 893,
                  "startColumn": 9,
                  "charOffset": 35731,
                  "charLength": 4,
                  "snippet": {
                    "text": "SMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 891,
                  "startColumn": 1,
                  "charOffset": 35593,
                  "charLength": 319,
                  "snippet": {
                    "text": "        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "486c8ade2ea5e9fe4dea6f94d7972d68c5bc4f029f70d16c3a276f2fbfdd483a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'CO' value is not used",
            "markdown": "Local variable 'CO' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 9,
                  "charOffset": 35797,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 892,
                  "startColumn": 1,
                  "charOffset": 35659,
                  "charLength": 315,
                  "snippet": {
                    "text": "        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6536429fe318f42478d59510ca4b3d6825ed00cdc6cc8dc089fc6e540719c392"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'VP' value is not used",
            "markdown": "Local variable 'VP' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 895,
                  "startColumn": 9,
                  "charOffset": 35859,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 893,
                  "startColumn": 1,
                  "charOffset": 35723,
                  "charLength": 252,
                  "snippet": {
                    "text": "        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71fb8df07385672faaac02a1b1d87bc353c574508930bca62d9a06844c528e26"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'ST' value is not used",
            "markdown": "Local variable 'ST' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 896,
                  "startColumn": 9,
                  "charOffset": 35921,
                  "charLength": 2,
                  "snippet": {
                    "text": "ST"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 894,
                  "startColumn": 1,
                  "charOffset": 35789,
                  "charLength": 259,
                  "snippet": {
                    "text": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9b8a10520648a08ee21510025f1f73b2f3dbc095861b052573b62aab594496db"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'query' value is not used",
            "markdown": "Local variable 'query' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1135,
                  "startColumn": 21,
                  "charOffset": 46893,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1133,
                  "startColumn": 1,
                  "charOffset": 46840,
                  "charLength": 150,
                  "snippet": {
                    "text": "                    LOCK.save()\n\n                    query = (\n                        database.VCChannelInfo.select()\n                        .where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "11ad85a85fb56fef269f7ccf7b0a74f5d58262ca1d1ce7f1c75ee6b7724c387a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local function 'check' is not used",
            "markdown": "Local function 'check' is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 21,
                  "charOffset": 16930,
                  "charLength": 5,
                  "snippet": {
                    "text": "check"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 399,
                  "startColumn": 1,
                  "charOffset": 16891,
                  "charLength": 123,
                  "snippet": {
                    "text": "            else:\n\n                def check(m):\n                    return (\n                        m.content is not None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "393355a92b121ce3bbf108e2d4b3ca35fe306fff06154964fbec4f0f4cbc107d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'lastReset' value is not used",
            "markdown": "Local variable 'lastReset' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 13,
                  "charOffset": 1098,
                  "charLength": 9,
                  "snippet": {
                    "text": "lastReset"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 1034,
                  "charLength": 181,
                  "snippet": {
                    "text": "            and timeNow >= self.midnight\n        ):\n            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d310f81ff874d7b8057cbaed4d0776498124d1f5a5cd901be04862d04e6e6ac9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'numberStr' value is not used",
            "markdown": "Local variable 'numberStr' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 5,
                  "charOffset": 2115,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2102,
                  "charLength": 64,
                  "snippet": {
                    "text": "    \"\"\"\n\n    numberStr = ...  # type: str\n\n    if number < 1000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d50ba0c0319043585b339c10806aa0243a35484de69feaac81d4f5cb03cb4bee"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'now' value is not used",
            "markdown": "Local variable 'now' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 9,
                  "charOffset": 2487,
                  "charLength": 3,
                  "snippet": {
                    "text": "now"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 2460,
                  "charLength": 122,
                  "snippet": {
                    "text": "\n    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(\n            discordID=member.id,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "13062a74a2f41b0033eea8e119c9e0c858c4dc914820843ba267d19ec8a44d89"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'goal' value is not used",
            "markdown": "Local variable 'goal' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 17,
                  "charOffset": 5175,
                  "charLength": 4,
                  "snippet": {
                    "text": "goal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 1,
                  "charOffset": 5110,
                  "charLength": 186,
                  "snippet": {
                    "text": "            )\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "db75f03a7e70d08cdeac02fe63001e2df728658dbf0611a33550fb68d2db9c3c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'renewal' value is not used",
            "markdown": "Local variable 'renewal' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 23,
                  "charOffset": 5181,
                  "charLength": 7,
                  "snippet": {
                    "text": "renewal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 1,
                  "charOffset": 5110,
                  "charLength": 186,
                  "snippet": {
                    "text": "            )\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8a4d3c09f17a4492a5b6a0374826d296718d425a0464f2b0a054897ada63d237"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'val' value is not used",
            "markdown": "Local variable 'val' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 17,
                  "charOffset": 5520,
                  "charLength": 3,
                  "snippet": {
                    "text": "val"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 5415,
                  "charLength": 211,
                  "snippet": {
                    "text": "\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n\n                if datetime.now(EST) >= dateObj:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2860c6e6d03838b44f2cd4d453d932d4e1587c656c275c1d516cdefc0ff3df60"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'i' value is not used",
            "markdown": "Local variable 'i' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 17,
                  "charOffset": 1889,
                  "charLength": 1,
                  "snippet": {
                    "text": "i"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 1825,
                  "charLength": 166,
                  "snippet": {
                    "text": "            else:\n                list_ten = []\n                i = 0\n                for entry in query:\n                    if not isinstance(entry.Date, datetime):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5fdc1c3edc64bd34c7f1a25cc9ce5517f7a342aaa90dd11ec1733f26afbb20ea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'i' value is not used",
            "markdown": "Local variable 'i' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 13,
                  "charOffset": 5817,
                  "charLength": 1,
                  "snippet": {
                    "text": "i"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 5765,
                  "charLength": 90,
                  "snippet": {
                    "text": "        else:\n            list_ten = []\n            i = 0\n            for entry in query:\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a7bcbe360c3b238a7dc775ba0137c95b12a4fbe982cf90f90772059f20ac2cc7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 30,
                  "charOffset": 20545,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 556,
                  "startColumn": 1,
                  "charOffset": 20505,
                  "charLength": 100,
                  "snippet": {
                    "text": "        )\n\n    async def callback(self, interaction: discord.Interaction):\n        self.view.stop()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8bfe66f0fbd4ec801c5f9912280d13f8d21320aac1cf2f16e7ab412513374be"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'nw' value is not used",
            "markdown": "Local variable 'nw' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 17,
                  "charOffset": 4130,
                  "charLength": 2,
                  "snippet": {
                    "text": "nw"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 4076,
                  "charLength": 127,
                  "snippet": {
                    "text": "                nextweek = old + new\n\n                nw = nextweek.strftime(\"%m/%d/%Y\")\n\n                query.Date = nextweek"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "82650238ef3d33a8c9c4054edb4c1eddb4ac6d237dd3578531bc5a60a198ca10"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'self' value is not used",
            "markdown": "Parameter 'self' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 25,
                  "charOffset": 373,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 347,
                  "charLength": 119,
                  "snippet": {
                    "text": "\n\nasync def roleNameCheck(self, name: str, guild: discord.Guild, user: discord.Member):\n    check = getEqualRank(name)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "10e55f89b38158dc388775b429187198445455e2c46461fdf0c3916b5a018d33"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'InteractionResponse' value is not used",
            "markdown": "Local variable 'InteractionResponse' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 9,
                  "charOffset": 1257,
                  "charLength": 19,
                  "snippet": {
                    "text": "InteractionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 1131,
                  "charLength": 205,
                  "snippet": {
                    "text": "    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f58e0da836b9fb8130c0d8bc0b6c8e7d43609e542e3a2873732dd28461243631"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 37,
                  "charOffset": 3719,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "charOffset": 3660,
                  "charLength": 136,
                  "snippet": {
                    "text": "                    )\n\n                except Exception as e:\n                    print(\"member not found\")\n                    continue"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3269a2edf006eb8bef4885e791dc7402355d24176563216b878c3c6b1ecec874"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'directTranscript' value is not used",
            "markdown": "Parameter 'directTranscript' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 5,
                  "charOffset": 2583,
                  "charLength": 30,
                  "snippet": {
                    "text": "directTranscript: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 2493,
                  "charLength": 183,
                  "snippet": {
                    "text": "    user: discord.User = None,\n    responsesauthor: typing.List[discord.User] = None,\n    directTranscript: bool = False,\n):\n    transcript = await chat_exporter.export(channel, None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f1f1ec77aa85b9beb37d2a6f9451c55d1dca5c069387b2b462d132057010dc94"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'self' value is not used",
            "markdown": "Parameter 'self' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 16,
                  "charOffset": 4645,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 159,
                  "startColumn": 1,
                  "charOffset": 4628,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "caeb218d0f0be78bb98fe7d526200ad5838b7ddac704c1e3e20c3fcb1918d285"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'sandbox' value is not used",
            "markdown": "Parameter 'sandbox' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 59,
                  "charOffset": 8752,
                  "charLength": 21,
                  "snippet": {
                    "text": "sandbox: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 277,
                  "startColumn": 1,
                  "charOffset": 8680,
                  "charLength": 152,
                  "snippet": {
                    "text": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a408b96af2e999add8d0c59907ddfa035d8fe6f1b2af11d50e8af4d87e4d446"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 13,
                  "charOffset": 10639,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 340,
                  "startColumn": 1,
                  "charOffset": 10599,
                  "charLength": 178,
                  "snippet": {
                    "text": "            )\n        else:\n            channel = self.bot.get_channel(interaction.channel_id)\n            guild = interaction.message.guild\n            author = interaction.user"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d032cc1732d4619bc8522834f60abdea98a311b1bf234f2b0581d5ebbc15c187"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 33,
                  "charOffset": 11755,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 368,
                  "startColumn": 1,
                  "charOffset": 11675,
                  "charLength": 247,
                  "snippet": {
                    "text": "                    view=MSV,\n                )\n            except Exception as e:\n                await interaction.followup.send(\n                    f\"{interaction.user.mention} I can't send you messages, please check you're privacy settings!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "955fdc9a60f3e99edfd5b00bc9c6ca5f87d247c511a5224fd48e705a38e2429e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 37,
                  "charOffset": 13144,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 402,
                  "startColumn": 1,
                  "charOffset": 13015,
                  "charLength": 215,
                  "snippet": {
                    "text": "                try:\n                    await DMChannel.send(embed=embed, view=MiscOptList)\n                except Exception as e:\n                    await interaction.followup.send(embed=embed, view=MiscOptList)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca38969d2699cb02a6c5251f5aa06299ac7c6396e371d04be3d56f61f4fdc6f4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 780,
                  "startColumn": 13,
                  "charOffset": 28502,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 778,
                  "startColumn": 1,
                  "charOffset": 28442,
                  "charLength": 181,
                  "snippet": {
                    "text": "            pass\n        elif val == \"ch_lock\":\n            channel = interaction.message.channel\n            guild = interaction.message.guild\n            author = interaction.user"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b76194a2f4e7a16b68a8ab2a5f7794e6bb0252b3317b7520be11ae099e379a20"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'guild' value is not used",
            "markdown": "Local variable 'guild' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 781,
                  "startColumn": 13,
                  "charOffset": 28552,
                  "charLength": 5,
                  "snippet": {
                    "text": "guild"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 779,
                  "startColumn": 1,
                  "charOffset": 28459,
                  "charLength": 165,
                  "snippet": {
                    "text": "        elif val == \"ch_lock\":\n            channel = interaction.message.channel\n            guild = interaction.message.guild\n            author = interaction.user\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4970a31e23502fbda9db29291b6f302cfc67dc7156b72c1853c9c5a8444f75fb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'query' value is not used",
            "markdown": "Local variable 'query' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 784,
                  "startColumn": 13,
                  "charOffset": 28637,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 782,
                  "startColumn": 1,
                  "charOffset": 28586,
                  "charLength": 185,
                  "snippet": {
                    "text": "            author = interaction.user\n\n            query = (\n                database.TicketInfo.select()\n                .where(database.TicketInfo.ChannelID == interaction.channel_id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "48f5dc1a571137cfd8a3bd0dcd1120a17f4a931e96013af3d2bfab255420483a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 893,
                  "startColumn": 13,
                  "charOffset": 32770,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 891,
                  "startColumn": 1,
                  "charOffset": 32690,
                  "charLength": 172,
                  "snippet": {
                    "text": "\n        elif InteractionResponse[\"custom_id\"] == \"ch_lock_CANCEL\":\n            channel = interaction.message.channel\n            author = interaction.user\n            try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d40274fc999994a5752b2fb135a54a73f4142301d963805f534839db7c69bf52"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 904,
                  "startColumn": 13,
                  "charOffset": 33291,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 902,
                  "startColumn": 1,
                  "charOffset": 33216,
                  "charLength": 168,
                  "snippet": {
                    "text": "\n        elif InteractionResponse[\"custom_id\"] == \"ch_lock_C\":\n            channel = self.bot.get_channel(interaction.channel_id)\n            author = interaction.user\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d37f6cc261af46e724ec2b1eac741615070068e8b1a45b5ebd585f157932209"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'msg' value is not used",
            "markdown": "Local variable 'msg' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 969,
                  "startColumn": 13,
                  "charOffset": 36013,
                  "charLength": 3,
                  "snippet": {
                    "text": "msg"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 967,
                  "startColumn": 1,
                  "charOffset": 35945,
                  "charLength": 225,
                  "snippet": {
                    "text": "                )\n            author = interaction.user\n            msg = await interaction.channel.send(\n                f\"Please wait, creating your transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "07243b1ce5d7cd4d391e9ff24338fda2a786263755ea2467c8c7a2220977a6c5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'query' value is not used",
            "markdown": "Local variable 'query' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1120,
                  "startColumn": 13,
                  "charOffset": 42776,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1118,
                  "startColumn": 1,
                  "charOffset": 42727,
                  "charLength": 137,
                  "snippet": {
                    "text": "        )\n        if query.exists():\n            query = query.get()\n            embed = discord.Embed(\n                title=\"Confirm?\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6e10f053eb65c059675949103d7cec9d58d36444ec8c389ab356e1dbbf6e83f9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'LogCH' value is not used",
            "markdown": "Local variable 'LogCH' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1161,
                  "startColumn": 13,
                  "charOffset": 44357,
                  "charLength": 5,
                  "snippet": {
                    "text": "LogCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1159,
                  "startColumn": 1,
                  "charOffset": 44204,
                  "charLength": 270,
                  "snippet": {
                    "text": "            TicketOwner = guild.get_member(entry.authorID)\n            messages = [message async for message in channel.history(limit=None)]\n            LogCH = self.bot.get_channel(MainID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8d80a407906744b031fb30fef42da4e21749741f73742756fc93117d76207c88"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'authorList' value is not used",
            "markdown": "Local variable 'authorList' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1162,
                  "startColumn": 13,
                  "charOffset": 44424,
                  "charLength": 10,
                  "snippet": {
                    "text": "authorList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1160,
                  "startColumn": 1,
                  "charOffset": 44263,
                  "charLength": 236,
                  "snippet": {
                    "text": "            messages = [message async for message in channel.history(limit=None)]\n            LogCH = self.bot.get_channel(MainID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:\n                continue"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3dc9b67f1412dee80f03ec5230d1da76fc8a9bbb317b76151745a7fa16b7770"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'val' value is not used",
            "markdown": "Local variable 'val' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 13,
                  "charOffset": 1404,
                  "charLength": 3,
                  "snippet": {
                    "text": "val"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1378,
                  "charLength": 108,
                  "snippet": {
                    "text": "\n        try:\n            val = InteractionResponse[\"custom_id\"]\n        except KeyError:\n            return"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "011ceafe698db24801aeede2f12e21b66d4e79a6c1db1cc61ce5f07bb7f1176e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 13,
                  "charOffset": 1789,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 1758,
                  "charLength": 169,
                  "snippet": {
                    "text": "                )\n\n            channel = self.bot.get_channel(interaction.channel_id)\n            guild = interaction.message.guild\n            author = interaction.user"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49dc3876f776220d5fe9438091b8f783136f1b8c011e90c7cc64d0455d92a43f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 41,
                  "charOffset": 4207,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 4074,
                  "charLength": 250,
                  "snippet": {
                    "text": "                    try:\n                        self.flow.fetch_token(code=answer1.content)\n                    except Exception as e:\n                        return await dm_channel.send(\"Invalid code, try again later...\")\n                    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ad83e3cabddfddd78211e41cbce2dc60021fbefe7c8ec99e492b00a1249d0297"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'command' value is not used",
            "markdown": "Parameter 'command' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 13,
                  "charOffset": 1800,
                  "charLength": 62,
                  "snippet": {
                    "text": "command: Union[app_commands.Command, app_commands.ContextMenu]"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 1724,
                  "charLength": 194,
                  "snippet": {
                    "text": "            self,\n            interaction: discord.Interaction,\n            command: Union[app_commands.Command, app_commands.ContextMenu],\n            error: app_commands.AppCommandError\n    ):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "007126223d6fc53654f2415fad63c141d6a17c4ec2bad7216eb3d7b81a2575b9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'reaction' from outer scope",
            "markdown": "Shadows name 'reaction' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 24,
                  "charOffset": 2900,
                  "charLength": 8,
                  "snippet": {
                    "text": "reaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 2850,
                  "charLength": 135,
                  "snippet": {
                    "text": "    emotes = [\"◀️\", \"▶️\"]\n\n    def check_reaction(reaction, user):\n        return user == ctx.author and str(reaction.emoji) in emotes\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1dbda703d302b6b9d78efd3eb1fb3b6fb8f985b3cab1b523ae9f2afb3aad7d90"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'user' from outer scope",
            "markdown": "Shadows name 'user' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 34,
                  "charOffset": 2910,
                  "charLength": 4,
                  "snippet": {
                    "text": "user"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 2850,
                  "charLength": 135,
                  "snippet": {
                    "text": "    emotes = [\"◀️\", \"▶️\"]\n\n    def check_reaction(reaction, user):\n        return user == ctx.author and str(reaction.emoji) in emotes\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d9084790c0754b26a20caa9ceebf32be5ec203f3b86f348ff42ac1f055e0576"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'embed' from outer scope",
            "markdown": "Shadows name 'embed' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 34,
                  "charOffset": 3965,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 3891,
                  "charLength": 197,
                  "snippet": {
                    "text": "            return math.ceil(tags / 10)\n\n        async def populate_embed(embed: discord.Embed, page: int):\n            \"\"\"Used to populate the embed in listtag command\"\"\"\n            tag_list = \"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2e6c92cd968ef351f1dc07c959ccd1bfe91607a6688f01934a090a4e36ea3ea2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'page' from outer scope",
            "markdown": "Shadows name 'page' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 56,
                  "charOffset": 3987,
                  "charLength": 4,
                  "snippet": {
                    "text": "page"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 3891,
                  "charLength": 197,
                  "snippet": {
                    "text": "            return math.ceil(tags / 10)\n\n        async def populate_embed(embed: discord.Embed, page: int):\n            \"\"\"Used to populate the embed in listtag command\"\"\"\n            tag_list = \"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f69eac15718fdd608b2604aa62fc1679cc8264c3809056c604bee4d485f90b63"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'reaction' from outer scope",
            "markdown": "Shadows name 'reaction' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 20,
                  "charOffset": 8921,
                  "charLength": 8,
                  "snippet": {
                    "text": "reaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "charOffset": 8855,
                  "charLength": 199,
                  "snippet": {
                    "text": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "53e76333e6971f78dba475de1f8ddf350781725e66bd96054e806464bcfff7e9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'user' from outer scope",
            "markdown": "Shadows name 'user' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 30,
                  "charOffset": 8931,
                  "charLength": 4,
                  "snippet": {
                    "text": "user"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "charOffset": 8855,
                  "charLength": 199,
                  "snippet": {
                    "text": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3eb0d5faefac21bf411c712105b102d59b129b4d2afa66225f40e61b70e3ef48"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'reaction' from outer scope",
            "markdown": "Shadows name 'reaction' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 20,
                  "charOffset": 17576,
                  "charLength": 8,
                  "snippet": {
                    "text": "reaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 491,
                  "startColumn": 1,
                  "charOffset": 17510,
                  "charLength": 199,
                  "snippet": {
                    "text": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3c5df0f7ce9df7b047f43700a565fb98ca44951f449ee5613474aecdf41d18c4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'user' from outer scope",
            "markdown": "Shadows name 'user' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 30,
                  "charOffset": 17586,
                  "charLength": 4,
                  "snippet": {
                    "text": "user"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 491,
                  "startColumn": 1,
                  "charOffset": 17510,
                  "charLength": 199,
                  "snippet": {
                    "text": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e759a417deefc9f9dc0900a6cc971c8463601fb3b19b4684319fb5a9d9048b30"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'e' from outer scope",
            "markdown": "Shadows name 'e' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 709,
                  "startColumn": 30,
                  "charOffset": 25095,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 707,
                  "startColumn": 1,
                  "charOffset": 24993,
                  "charLength": 152,
                  "snippet": {
                    "text": "            vc.play(\n                discord.FFmpegPCMAudio(\"text.mp3\"),\n                after=lambda e: print(f\"Finished playing: {e}\"),\n            )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "76e109b7bb50e29aeca46eecf55bf8d7a1ed7fa270ed77ddebb3fb14fd1cc234"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'bot' from outer scope",
            "markdown": "Shadows name 'bot' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 24,
                  "charOffset": 1217,
                  "charLength": 3,
                  "snippet": {
                    "text": "bot"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1143,
                  "charLength": 132,
                  "snippet": {
                    "text": "\nclass TimmyCommandTree(app_commands.CommandTree):\n    def __init__(self, bot):\n        super().__init__(bot)\n        self.bot = bot"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "61064bd3b7503a41374b4e927d7b8ca84993a7570347ac3df0b2421675c52da7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 7,
                  "charOffset": 989,
                  "charLength": 15,
                  "snippet": {
                    "text": "ConfigCatClient"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 981,
                  "charLength": 162,
                  "snippet": {
                    "text": "\n\nclass ConfigCatClient:\n    PS_ID_CC = configcatclient.create_client(os.getenv(\"PS_ID_CC\"))\n    SET_ID_CC = configcatclient.create_client(os.getenv(\"SET_ID_CC\"))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f5a0b66db86245243846fce990bcf4e75209c087c528b64c61f1beed3cda9778"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 7,
                  "charOffset": 8760,
                  "charLength": 6,
                  "snippet": {
                    "text": "MainID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 258,
                  "startColumn": 1,
                  "charOffset": 8752,
                  "charLength": 54,
                  "snippet": {
                    "text": "\n\nclass MainID:\n    \"\"\"\n    IDs of the SS Main server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4c312c18b9ca2f1da85fd8e1b394999a35ca1ff0df7eb47c1a96b1834359e252"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 7,
                  "charOffset": 14579,
                  "charLength": 7,
                  "snippet": {
                    "text": "StaffID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 361,
                  "startColumn": 1,
                  "charOffset": 14571,
                  "charLength": 66,
                  "snippet": {
                    "text": "\n\nclass StaffID:\n    \"\"\"\n    IDs of the SS Staff Community server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bead9804a7453aa729bf28a135f1ba4181ac056603473e105e4d8cbe5b5c0c77"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 7,
                  "charOffset": 18224,
                  "charLength": 6,
                  "snippet": {
                    "text": "TechID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 415,
                  "startColumn": 1,
                  "charOffset": 18216,
                  "charLength": 91,
                  "snippet": {
                    "text": "\n\nclass TechID:\n    \"\"\"\n    IDs of the 'The Department of Information & Technology' server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb050b767411389df17f214c86257ba2ab78ad689fe088d8e2f462db2332da90"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 450,
                  "startColumn": 7,
                  "charOffset": 20093,
                  "charLength": 13,
                  "snippet": {
                    "text": "SandboxConfig"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 448,
                  "startColumn": 1,
                  "charOffset": 20085,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\nclass SandboxConfig:\n    \"\"\"\n    IDs for the Sandbox Configuration."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cec5ee6cd39fe05784ff07ac6f524e8395b57c4e97321cba6d9805c3fdf61279"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 482,
                  "startColumn": 7,
                  "charOffset": 21856,
                  "charLength": 4,
                  "snippet": {
                    "text": "ChID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 480,
                  "startColumn": 1,
                  "charOffset": 21848,
                  "charLength": 56,
                  "snippet": {
                    "text": "\n\nclass ChID:\n    \"\"\"\n    IDs of the Chat Helper server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8e970bc1d1250664588111b544c08f160585a57532fe9e32cdb3e8ea1cd9f3e0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 501,
                  "startColumn": 7,
                  "charOffset": 22474,
                  "charLength": 5,
                  "snippet": {
                    "text": "MktID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 499,
                  "startColumn": 1,
                  "charOffset": 22466,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\nclass MktID:\n    \"\"\"\n    IDs of the SS Marketing Department server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "64eea538a5ce8cead2e276f4130a25a9b271a87cbbfff328f6dbe53a19dc1ee5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 7,
                  "charOffset": 24685,
                  "charLength": 5,
                  "snippet": {
                    "text": "TutID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 538,
                  "startColumn": 1,
                  "charOffset": 24677,
                  "charLength": 66,
                  "snippet": {
                    "text": "\n\nclass TutID:\n    \"\"\"\n    IDs of the SS Tutoring Division server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ff34c641d567cca4f1107055c63a4dc7a8efdaec51fecb158626e3c8f5d1cb38"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 7,
                  "charOffset": 26339,
                  "charLength": 4,
                  "snippet": {
                    "text": "HRID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 568,
                  "startColumn": 1,
                  "charOffset": 26331,
                  "charLength": 61,
                  "snippet": {
                    "text": "\n\nclass HRID:\n    \"\"\"\n    IDs of the SS HR Department server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e6dc2f3d2a019ed3942c5e749c14cc5c9f7ae3d38b3990e1cf5b7acba191e65"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 598,
                  "startColumn": 7,
                  "charOffset": 27549,
                  "charLength": 4,
                  "snippet": {
                    "text": "PSID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 596,
                  "startColumn": 1,
                  "charOffset": 27541,
                  "charLength": 67,
                  "snippet": {
                    "text": "\n\nclass PSID:\n    \"\"\"\n    IDs of the Programming Simplified server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "da4d31bd7df5a8c613f9f34bcff82c18e4587466f312db2ad601c7d5d3a736c1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 618,
                  "startColumn": 7,
                  "charOffset": 28103,
                  "charLength": 8,
                  "snippet": {
                    "text": "LeaderID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 616,
                  "startColumn": 1,
                  "charOffset": 28095,
                  "charLength": 66,
                  "snippet": {
                    "text": "\n\nclass LeaderID:\n    \"\"\"\n    IDs of the Leadership Lounge server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7361785f615996e153889ab5b8b03f26280a8e76e4c08ccb41465951ce7a899f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 666,
                  "startColumn": 7,
                  "charOffset": 31255,
                  "charLength": 5,
                  "snippet": {
                    "text": "SETID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 664,
                  "startColumn": 1,
                  "charOffset": 31247,
                  "charLength": 52,
                  "snippet": {
                    "text": "\n\nclass SETID:\n    \"\"\"\n    IDs of the SSD SET SERVER"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "92698ae9ff719728dbaa50f00e15b09d3049aeb98ec7a370616ebe36fa7a16b3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 702,
                  "startColumn": 7,
                  "charOffset": 32291,
                  "charLength": 10,
                  "snippet": {
                    "text": "CheckDB_CC"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 700,
                  "startColumn": 1,
                  "charOffset": 32283,
                  "charLength": 66,
                  "snippet": {
                    "text": "\n\nclass CheckDB_CC:\n    \"\"\"\n    Checks and Safeguards for the Bot."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "05cc399251c0244d42464211ad2cf324fa3248a7c31b6c6c283a71a3e6b85601"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 744,
                  "startColumn": 7,
                  "charOffset": 33926,
                  "charLength": 5,
                  "snippet": {
                    "text": "Emoji"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 742,
                  "startColumn": 1,
                  "charOffset": 33918,
                  "charLength": 53,
                  "snippet": {
                    "text": "\n\nclass Emoji:\n    \"\"\"\n    Emojis to use for the bot."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d97e7f7c79302e4b2f8f2b88710532cbbdd974e4bd13fd2677dc19b550312e8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 7,
                  "charOffset": 36009,
                  "charLength": 6,
                  "snippet": {
                    "text": "Colors"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 793,
                  "startColumn": 1,
                  "charOffset": 36001,
                  "charLength": 92,
                  "snippet": {
                    "text": "\n\nclass Colors:\n    \"\"\"\n    Colors for the bot. Can be custom hex colors or built-in colors."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c15e6773ccc8c431e10f61b602cd517e8d36b8113d235646f2195c2795e4065b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 815,
                  "startColumn": 7,
                  "charOffset": 36483,
                  "charLength": 6,
                  "snippet": {
                    "text": "Others"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 813,
                  "startColumn": 1,
                  "charOffset": 36475,
                  "charLength": 87,
                  "snippet": {
                    "text": "\n\nclass Others:\n    \"\"\"\n    Other things to use for the bot. (Images, characters, etc.)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e581b304ee5876e1f2982eaf6bc48f5187372103eb516c9b2cfd27b43e2937e4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 919,
                  "startColumn": 7,
                  "charOffset": 43899,
                  "charLength": 16,
                  "snippet": {
                    "text": "EmbeddedActivity"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 917,
                  "startColumn": 1,
                  "charOffset": 43890,
                  "charLength": 93,
                  "snippet": {
                    "text": "]\n\nclass EmbeddedActivity:\n    awkword = 879863881349087252\n    betrayal = 773336526917861400"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eff19ad40e0f2f0fca39e718a2e9c9cbd0e775a25b5c8aa082139589fb425a87"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 7,
                  "charOffset": 18657,
                  "charLength": 2,
                  "snippet": {
                    "text": "Me"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 506,
                  "startColumn": 1,
                  "charOffset": 18649,
                  "charLength": 55,
                  "snippet": {
                    "text": "\n\nclass Me:\n    publicCH = [\n        MainID.cat_casual,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5c29ee56532503b22820b9240387fd7fda63660fb273e4565be49c4868dce6d2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 7,
                  "charOffset": 144,
                  "charLength": 16,
                  "snippet": {
                    "text": "SimulatorProfile"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 1,
                  "charOffset": 136,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\nclass SimulatorProfile:\n    @staticmethod\n    async def create_TicketSys(ctx: commands.Context):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "813801be468bcdf1019557c39b3de65bda4fc235093ebbe615edbcb6c3a779e3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 5,
                  "charOffset": 375,
                  "charLength": 13,
                  "snippet": {
                    "text": "predicate_LV1"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 369,
                  "charLength": 52,
                  "snippet": {
                    "text": "\n\ndef predicate_LV1(ctx) -> bool:\n    adminIDs = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "823fbb08d9b2bf845da3ce0409bd2e6a76845445fed6fea6c7b70cb00510e5a1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 5,
                  "charOffset": 407,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 370,
                  "charLength": 142,
                  "snippet": {
                    "text": "\ndef predicate_LV1(ctx) -> bool:\n    adminIDs = []\n\n    query = database.Administrators.select().where(database.Administrators.TierLevel >= 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "70435e359fd67614bd795c05e833e114dbc27097cf57cb8dadcaac9522e35d1e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 5,
                  "charOffset": 667,
                  "charLength": 13,
                  "snippet": {
                    "text": "predicate_LV2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 661,
                  "charLength": 52,
                  "snippet": {
                    "text": "\n\ndef predicate_LV2(ctx) -> bool:\n    adminIDs = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "356710dcd5bef4dcd6d67b61daa1f006cfe9dc3c4aaeb00bd6a9dcbab503660c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 5,
                  "charOffset": 699,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "charOffset": 662,
                  "charLength": 142,
                  "snippet": {
                    "text": "\ndef predicate_LV2(ctx) -> bool:\n    adminIDs = []\n\n    query = database.Administrators.select().where(database.Administrators.TierLevel >= 2)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3ca4fca2190dad2c339457ed1ee5c8ce80a5cfff9027199de00e91d41a11da7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 5,
                  "charOffset": 960,
                  "charLength": 13,
                  "snippet": {
                    "text": "predicate_LV3"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 954,
                  "charLength": 44,
                  "snippet": {
                    "text": "\n\ndef predicate_LV3(ctx):\n    adminIDs = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f0d4252075039fb4f6f46399f320271c21f9e8b440ad460fb4aa635c6d117fcf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 5,
                  "charOffset": 984,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "charOffset": 955,
                  "charLength": 134,
                  "snippet": {
                    "text": "\ndef predicate_LV3(ctx):\n    adminIDs = []\n\n    query = database.Administrators.select().where(database.Administrators.TierLevel >= 3)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9e5b1c5fb9950bc316ab1f27fe0b7dfda1f6be7089bda2f4d8d701519f5543fa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 5,
                  "charOffset": 1245,
                  "charLength": 13,
                  "snippet": {
                    "text": "predicate_LV4"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 1239,
                  "charLength": 44,
                  "snippet": {
                    "text": "\n\ndef predicate_LV4(ctx):\n    adminIDs = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "50a63893ee726572df5bcfeea917ae57f2fa886da8d23431c3e74853788a4198"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 5,
                  "charOffset": 1269,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 1,
                  "charOffset": 1240,
                  "charLength": 134,
                  "snippet": {
                    "text": "\ndef predicate_LV4(ctx):\n    adminIDs = []\n\n    query = database.Administrators.select().where(database.Administrators.TierLevel >= 4)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "238776bdc004d785cfe05a58b359b65513ba96131ae0d06be3c1fe03c4fc60a0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 5,
                  "charOffset": 3054,
                  "charLength": 7,
                  "snippet": {
                    "text": "runPath"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "charOffset": 3023,
                  "charLength": 115,
                  "snippet": {
                    "text": "\ndef timmy_beta_host(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d6e38125ea146bfd4449ea1f4a3b7ff217df001d6b8cb7d525977e4d3ed9c68"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 5,
                  "charOffset": 3095,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 119,
                  "startColumn": 1,
                  "charOffset": 3024,
                  "charLength": 141,
                  "snippet": {
                    "text": "def timmy_beta_host(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n\n    if runDir is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a3f7f44dafe53a47632a58e11c4203c5a4647dfd66c5fa326838a5351df33af"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 9,
                  "charOffset": 3174,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 122,
                  "startColumn": 1,
                  "charOffset": 3138,
                  "charLength": 92,
                  "snippet": {
                    "text": "\n    if runDir is not None:\n        runDir = runDir.group(0)\n    else:\n        runDir = None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0fe8b3022307e9a195b63270b9e44100110f22902d673584af5a427de51c7ae0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 9,
                  "charOffset": 3217,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 3166,
                  "charLength": 105,
                  "snippet": {
                    "text": "        runDir = runDir.group(0)\n    else:\n        runDir = None\n\n    return runDir == \"/home/timmy-beta\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c8d1e8aefd0b47ace6350ed1ae71396e480d8cbc6c7de0394f55e45d00db6684"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 5,
                  "charOffset": 7471,
                  "charLength": 14,
                  "snippet": {
                    "text": "S3_upload_file"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 218,
                  "startColumn": 1,
                  "charOffset": 7465,
                  "charLength": 56,
                  "snippet": {
                    "text": "\n\ndef S3_upload_file(\n        file_name,\n        bucket,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d89fb615797f5539d1ef8d89d0b0657abcd15f7a0c7eef522b8e16d5fe1d8abf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 702,
                  "startColumn": 7,
                  "charOffset": 32291,
                  "charLength": 10,
                  "snippet": {
                    "text": "CheckDB_CC"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 700,
                  "startColumn": 1,
                  "charOffset": 32283,
                  "charLength": 66,
                  "snippet": {
                    "text": "\n\nclass CheckDB_CC:\n    \"\"\"\n    Checks and Safeguards for the Bot."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fca0f17dd3405ae9457ca3512e948287b4d811f45c836b6a44d7c4d0eea30ced"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1275,
                  "startColumn": 9,
                  "charOffset": 57360,
                  "charLength": 19,
                  "snippet": {
                    "text": "TempConfirmInstance"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1273,
                  "startColumn": 1,
                  "charOffset": 57268,
                  "charLength": 229,
                  "snippet": {
                    "text": "        self.value = True\n        ch = self.bot.get_channel(interaction.channel_id)\n        TempConfirmInstance = TicketTempConfirm()\n\n        await ch.send(\"Are you sure you want to close this ticket?\", view=TempConfirmInstance)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "868c6a46c05ea122f0ca15fc05d490e4ea5efc4d5081ff7333d046e44685ba4a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1341,
                  "startColumn": 9,
                  "charOffset": 59849,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1339,
                  "startColumn": 1,
                  "charOffset": 59763,
                  "charLength": 244,
                  "snippet": {
                    "text": "async def id_generator(size=3, chars=string.ascii_uppercase):\n    while True:\n        ID = \"\".join(random.choice(chars) for _ in range(size))\n        query = database.TutorBot_Sessions.select().where(database.TutorBot_Sessions.SessionID == ID)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1754e230b935d9b38166100105d917b433ede907addff161cae033c8c5c22c02"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 7,
                  "charOffset": 4703,
                  "charLength": 24,
                  "snippet": {
                    "text": "TutorSession_GracePeriod"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 4695,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\nclass TutorSession_GracePeriod(BaseModel):\n    \"\"\"\n    # IgnoreThis"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4b46b58a175c87e1ad54cb75d1f455f6f8492a14162173e564bfa881a383c2e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 7,
                  "charOffset": 10303,
                  "charLength": 17,
                  "snippet": {
                    "text": "TutorBot_Sessions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 438,
                  "startColumn": 1,
                  "charOffset": 10295,
                  "charLength": 68,
                  "snippet": {
                    "text": "\n\nclass TutorBot_Sessions(BaseModel):\n    \"\"\"\n    #TutorBot Sessions"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dd92eade9cf6d3f44a6493bece4658f0b3a66ddbc44a067d96ede0fd7259d892"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 9,
                  "charOffset": 2148,
                  "charLength": 8,
                  "snippet": {
                    "text": "ListData"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 2088,
                  "charLength": 147,
                  "snippet": {
                    "text": "        data = r.json()\n        data = data[\"data\"]\n        ListData = []\n        for object in range(len(data) - 1):\n            # object = object"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d3bb1d9e31afe85a19a2a4f9598c7fbf4e63dc3e997526eb271cfa5f6f59b644"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 13,
                  "charOffset": 2248,
                  "charLength": 7,
                  "snippet": {
                    "text": "FullURL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "charOffset": 2162,
                  "charLength": 220,
                  "snippet": {
                    "text": "        for object in range(len(data) - 1):\n            # object = object\n            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d25c66365b002e76fae13869dee2e7e2221a34c73322b4d52d982c3923d6488f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 13,
                  "charOffset": 2309,
                  "charLength": 12,
                  "snippet": {
                    "text": "ParsedDomain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 2206,
                  "charLength": 213,
                  "snippet": {
                    "text": "            # object = object\n            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "368a9b63d6898db6a3b96684d879643b8b19502fc8a173965742794515803585"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 13,
                  "charOffset": 2354,
                  "charLength": 6,
                  "snippet": {
                    "text": "Domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2236,
                  "charLength": 184,
                  "snippet": {
                    "text": "            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a154760569e62c33bbe3e9be9b8301745a09bb0cdc71376549b81b894086e4f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 13,
                  "charOffset": 2395,
                  "charLength": 4,
                  "snippet": {
                    "text": "Path"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 1,
                  "charOffset": 2297,
                  "charLength": 152,
                  "snippet": {
                    "text": "            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path\n\n            ListData.append("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d822bee505b56e032920e99c5257e8185a68c42e967c05cf85eadae604dfc9f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 9,
                  "charOffset": 3466,
                  "charLength": 7,
                  "snippet": {
                    "text": "FullURL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 1,
                  "charOffset": 3419,
                  "charLength": 172,
                  "snippet": {
                    "text": "        object = range(len(r.json()))\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f3acaa1d2441e79091a3cbcda9d4f2afa9a9097cf75d52652740f35821a3291"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 9,
                  "charOffset": 3522,
                  "charLength": 12,
                  "snippet": {
                    "text": "ParsedDomain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 3457,
                  "charLength": 167,
                  "snippet": {
                    "text": "\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "356ac68809059ca167d6bf6d2544386513404746f3cb05aae0a6d364745f1c21"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 9,
                  "charOffset": 3563,
                  "charLength": 6,
                  "snippet": {
                    "text": "Domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "charOffset": 3458,
                  "charLength": 167,
                  "snippet": {
                    "text": "        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66acdd6d67980b92f1395e69a925c6a52adb53d45e7b55ac09a7cf6093dedf80"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 9,
                  "charOffset": 3600,
                  "charLength": 4,
                  "snippet": {
                    "text": "Path"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 3514,
                  "charLength": 141,
                  "snippet": {
                    "text": "        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n\n        return RedirectPizza("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "466accff80ea7ccda5e5c1f606467b474ca8070abe91299b9f11bbc180ca021f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 9,
                  "charOffset": 5160,
                  "charLength": 7,
                  "snippet": {
                    "text": "FullURL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 1,
                  "charOffset": 5119,
                  "charLength": 166,
                  "snippet": {
                    "text": "        pprint.pprint(r.json())\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "29da3a5356d9d87ff4b3621d8c000307be3ba9acb55901562b2072694a999a8e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 9,
                  "charOffset": 5216,
                  "charLength": 12,
                  "snippet": {
                    "text": "ParsedDomain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 175,
                  "startColumn": 1,
                  "charOffset": 5151,
                  "charLength": 167,
                  "snippet": {
                    "text": "\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e58996d024a7b09cfc38ab21c871bd21a16baae4f042dbbb83ece1b715e70564"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 9,
                  "charOffset": 5257,
                  "charLength": 6,
                  "snippet": {
                    "text": "Domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "charOffset": 5152,
                  "charLength": 167,
                  "snippet": {
                    "text": "        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1113b60d02549a1875f2dd5d5d8975c1c4bb57d8f93daca76c8a28a2c80bf131"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 9,
                  "charOffset": 5294,
                  "charLength": 4,
                  "snippet": {
                    "text": "Path"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 5208,
                  "charLength": 141,
                  "snippet": {
                    "text": "        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n\n        return RedirectPizza("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2007e6f218109c0199d68167dc226a213b87865e4a01239183a7c92c9683c843"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 9,
                  "charOffset": 2793,
                  "charLength": 2,
                  "snippet": {
                    "text": "IP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 2751,
                  "charLength": 169,
                  "snippet": {
                    "text": "\n    if not os.getenv(\"USEREAL\"):\n        IP = os.getenv(\"IP\")\n        databaseField = (\n            f\"{bcolors.OKGREEN}Selected Database: External ({IP}){bcolors.ENDC}\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9149bf4d24a1db320cc0fe724c133b48e6178787188f51e61247d89cab029f7f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 9,
                  "charOffset": 2822,
                  "charLength": 13,
                  "snippet": {
                    "text": "databaseField"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 2752,
                  "charLength": 178,
                  "snippet": {
                    "text": "    if not os.getenv(\"USEREAL\"):\n        IP = os.getenv(\"IP\")\n        databaseField = (\n            f\"{bcolors.OKGREEN}Selected Database: External ({IP}){bcolors.ENDC}\"\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5a7970ebf264698a3a4449ee064e462bf5e206380c5b2dabd723975fdd7a4d40"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 9,
                  "charOffset": 2949,
                  "charLength": 13,
                  "snippet": {
                    "text": "databaseField"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 2921,
                  "charLength": 206,
                  "snippet": {
                    "text": "        )\n    else:\n        databaseField = (\n            f\"{bcolors.FAIL}Selected Database: localhost{bcolors.ENDC}\\n{bcolors.WARNING}WARNING: Not \"\n            f\"recommended to use SQLite.{bcolors.ENDC} \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "523e65a4c9bfd805eab15117db57d61dedec9bf464d581c73439b7bc6e59cdc6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 13,
                  "charOffset": 10548,
                  "charLength": 10,
                  "snippet": {
                    "text": "GITHUB_API"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 306,
                  "startColumn": 1,
                  "charOffset": 10482,
                  "charLength": 185,
                  "snippet": {
                    "text": "            data = \"\\n\".join([l.strip() for l in f])\n\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c02dd60e0cbe94e5a5f135538bc452fba812c35fa3bf316ced1c96a61895142"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 13,
                  "charOffset": 10598,
                  "charLength": 9,
                  "snippet": {
                    "text": "API_TOKEN"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 307,
                  "startColumn": 1,
                  "charOffset": 10535,
                  "charLength": 196,
                  "snippet": {
                    "text": "\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\"\n            headers = {\"Authorization\": \"token %s\" % API_TOKEN}"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a99c08aa43df7269ba36e2011df9ca11bbcbdde2338dcb2f2811d230e4508d41"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 13,
                  "charOffset": 11140,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 320,
                  "startColumn": 1,
                  "charOffset": 11077,
                  "charLength": 156,
                  "snippet": {
                    "text": "            )\n            j = json.loads(res.text)\n            ID = j[\"id\"]\n            gisturl = f\"https://gist.github.com/{ID}\"\n            print(gisturl)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8403792b40a1fa7102a1610162c5cd1f0617112ff5b7a2afa029777198cd07bc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 13,
                  "charOffset": 14897,
                  "charLength": 10,
                  "snippet": {
                    "text": "GITHUB_API"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 422,
                  "startColumn": 1,
                  "charOffset": 14831,
                  "charLength": 185,
                  "snippet": {
                    "text": "            data = \"\\n\".join([l.strip() for l in f])\n\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a82f63e86bdef906003596f562a546c6e790f40f66b4166650acce6730123357"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 13,
                  "charOffset": 14947,
                  "charLength": 9,
                  "snippet": {
                    "text": "API_TOKEN"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 423,
                  "startColumn": 1,
                  "charOffset": 14884,
                  "charLength": 196,
                  "snippet": {
                    "text": "\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\"\n            headers = {\"Authorization\": \"token %s\" % API_TOKEN}"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ef7d00a06e9b9e1664bb13b0ceda3e0267b66cbfd71f2e4f4467754cf6180d8f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 13,
                  "charOffset": 15489,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 436,
                  "startColumn": 1,
                  "charOffset": 15426,
                  "charLength": 130,
                  "snippet": {
                    "text": "            )\n            j = json.loads(res.text)\n            ID = j[\"id\"]\n            gisturl = f\"https://gist.github.com/{ID}\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c99bb82ede9bf495c338d9665b8734b420dbff1473e350008a8aa8f41b7b4435"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 531,
                  "startColumn": 5,
                  "charOffset": 19359,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 529,
                  "startColumn": 1,
                  "charOffset": 19308,
                  "charLength": 163,
                  "snippet": {
                    "text": "        blacklisted_users.append(p.discordID)\n\n    adminIDs = []\n    query = database.Administrators.select().where(\n        database.Administrators.TierLevel == 4"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e716c75e538327d087dec13563bf64f3d1b642466f8ad82c978b911908a4fde"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 5,
                  "charOffset": 20682,
                  "charLength": 12,
                  "snippet": {
                    "text": "initializeDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 579,
                  "startColumn": 1,
                  "charOffset": 20676,
                  "charLength": 117,
                  "snippet": {
                    "text": "\n\ndef initializeDB(bot):\n    \"\"\"\n    Initializes the database, and creates the needed table data if they don't exist."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "554eb5e47a710effa8de92eeabb1081f228d86c1b69a4a51a331d1e55002b049"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 586,
                  "startColumn": 5,
                  "charOffset": 20850,
                  "charLength": 3,
                  "snippet": {
                    "text": "UpQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 584,
                  "startColumn": 1,
                  "charOffset": 20794,
                  "charLength": 285,
                  "snippet": {
                    "text": "    \"\"\"\n    database.db.connect(reuse_if_open=True)\n    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "372edbab11e0a4dfefdcc595f6a500d76d8b82326d8f0b4191834d0f27b0b98e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 587,
                  "startColumn": 5,
                  "charOffset": 20916,
                  "charLength": 3,
                  "snippet": {
                    "text": "CIQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 585,
                  "startColumn": 1,
                  "charOffset": 20802,
                  "charLength": 356,
                  "snippet": {
                    "text": "    database.db.connect(reuse_if_open=True)\n    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a7a31e8ae582e009081ba0b7a66a12dc9ffc9c98d01b6ab17ec3b44d2fd684c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 5,
                  "charOffset": 21002,
                  "charLength": 3,
                  "snippet": {
                    "text": "BTE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 586,
                  "startColumn": 1,
                  "charOffset": 20846,
                  "charLength": 313,
                  "snippet": {
                    "text": "    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f137d4731d4f12842c4f01af4374cc6a1f096fd699cb012c5ad6d81022677db5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 589,
                  "startColumn": 5,
                  "charOffset": 21084,
                  "charLength": 2,
                  "snippet": {
                    "text": "SM"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 587,
                  "startColumn": 1,
                  "charOffset": 20912,
                  "charLength": 272,
                  "snippet": {
                    "text": "    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)\n\n    if not UpQ.exists():"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8304846e090fd85f3b6e4525574f4544afc95490ef95e4f7cbc2d6c750823def"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 17,
                  "charOffset": 5883,
                  "charLength": 8,
                  "snippet": {
                    "text": "banEntry"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 5835,
                  "charLength": 132,
                  "snippet": {
                    "text": "\n            if member is None:\n                banEntry = await ctx.guild.fetch_ban(user)\n\n                if banEntry is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ee792d680cabf526002bf6a462494cef7f53c0198ad5fdfceeace9c61448ea3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 17,
                  "charOffset": 1762,
                  "charLength": 14,
                  "snippet": {
                    "text": "banReasonAUDIT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 1628,
                  "charLength": 226,
                  "snippet": {
                    "text": "            # We need to check who banned the person.\n            if moderator.id == 548410451818708993:  # Wick's ID\n                banReasonAUDIT = logs.reason\n\n                if \"No reason specified by\" in banReasonAUDIT:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5375f111cb5b002c87712c9beb866a9f5b465d12e38ce6d3d36f6bb01afe463c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 29,
                  "charOffset": 1883,
                  "charLength": 15,
                  "snippet": {
                    "text": "fullUsernameMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 1791,
                  "charLength": 203,
                  "snippet": {
                    "text": "\n                if \"No reason specified by\" in banReasonAUDIT:\n                    random, fullUsernameMOD = banReasonAUDIT.split(\n                        \"No reason specified by \"\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37843a16b06c92df0288950f328f63271c6b37c7fcf443d2303a7e0c156bfe35"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 21,
                  "charOffset": 2015,
                  "charLength": 9,
                  "snippet": {
                    "text": "banReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 1923,
                  "charLength": 143,
                  "snippet": {
                    "text": "                        \"No reason specified by \"\n                    )\n                    banReason = \"None Specified\"\n\n                else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a7a9524509f181b8e4ab1164181c88ea407aba5e60ad37265d78ae4d78d904b4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 21,
                  "charOffset": 2087,
                  "charLength": 9,
                  "snippet": {
                    "text": "banReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "charOffset": 2044,
                  "charLength": 158,
                  "snippet": {
                    "text": "\n                else:\n                    banReason = re.match(r\"[^[]*\\[([^]]*)\\]\", banReasonAUDIT).groups()[\n                        0\n                    ]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fbe4ef955517ed2ca337f07a194b3cfd8b0440a1a77617d05b26c793415394e4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 33,
                  "charOffset": 2261,
                  "charLength": 15,
                  "snippet": {
                    "text": "fullUsernameMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "charOffset": 2203,
                  "charLength": 190,
                  "snippet": {
                    "text": "\n                    try:\n                        random, fullUsernameMOD = banReasonAUDIT.split(\"- \")\n                    except ValueError:\n                        fullUsernameMOD = \"Wick\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ff434b3c4e2cdd4c294eaa1de44fe4434fadc65d5747f884a60de09e01562ff6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 25,
                  "charOffset": 2369,
                  "charLength": 15,
                  "snippet": {
                    "text": "fullUsernameMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 1,
                  "charOffset": 2229,
                  "charLength": 183,
                  "snippet": {
                    "text": "                        random, fullUsernameMOD = banReasonAUDIT.split(\"- \")\n                    except ValueError:\n                        fullUsernameMOD = \"Wick\"\n\n            else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5702156c54b0f30b9a1560e6b4f3be9ba7cffade104d5c92fda6ce8377519a63"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 17,
                  "charOffset": 2429,
                  "charLength": 9,
                  "snippet": {
                    "text": "banReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "charOffset": 2394,
                  "charLength": 191,
                  "snippet": {
                    "text": "\n            else:\n                banReason = logs.reason\n                # Get full username with tag\n                fullUsernameMOD = f\"{moderator.display_name}#{moderator.discriminator}\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "86c09c70b7bf42a8558e128178a123ef366614112c2d4155da659ede876dc04a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 17,
                  "charOffset": 2514,
                  "charLength": 15,
                  "snippet": {
                    "text": "fullUsernameMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 2413,
                  "charLength": 248,
                  "snippet": {
                    "text": "                banReason = logs.reason\n                # Get full username with tag\n                fullUsernameMOD = f\"{moderator.display_name}#{moderator.discriminator}\"\n\n            # Okay now we got our reason, we need to get a few more things"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e23212e34a0e73e4462c9f612f53859dc8f96de8acfcbb783ef415dba8d685c7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 13,
                  "charOffset": 2795,
                  "charLength": 18,
                  "snippet": {
                    "text": "fullUsernameTARGET"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2741,
                  "charLength": 187,
                  "snippet": {
                    "text": "\n            # Get full username with tag\n            fullUsernameTARGET = f\"{target.display_name}#{target.discriminator}\"\n\n            # Get everything into a list so we can bulk insert."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4684a9489663a0b14957cb86e4f6ceba21e9850f19d2fe6e8095a0cf0eb1d59a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 13,
                  "charOffset": 3264,
                  "charLength": 10,
                  "snippet": {
                    "text": "ModChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "charOffset": 3179,
                  "charLength": 169,
                  "snippet": {
                    "text": "            sheet.insert_row(row, 2)  # Insert data, and boom. We done!\n\n            ModChannel = self.bot.get_channel(self.ModLogID)\n\n            embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e4e6b76725c38688965f44f85a08d55ebc0ea555833a2f7676321f9ac5020b3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 9,
                  "charOffset": 4614,
                  "charLength": 9,
                  "snippet": {
                    "text": "msgIDList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 4564,
                  "charLength": 135,
                  "snippet": {
                    "text": "\n        query = database.Voting.select()\n        msgIDList = [msg.msgID for msg in query]\n\n        interMsgID = interaction.message.id"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c80ef5811d296c9dcf581ba63bf43d75e74741cfcef099db5e6cb5416c4a9d24"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 9,
                  "charOffset": 4664,
                  "charLength": 10,
                  "snippet": {
                    "text": "interMsgID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 4606,
                  "charLength": 172,
                  "snippet": {
                    "text": "        msgIDList = [msg.msgID for msg in query]\n\n        interMsgID = interaction.message.id\n        print(f\"interMsgID: {interMsgID}\")\n        if interMsgID in msgIDList:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "323082e3ad2b30b46b27315f6e83d27cb39814778fa1bfb72f46a0a5e68e30b4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 13,
                  "charOffset": 4791,
                  "charLength": 13,
                  "snippet": {
                    "text": "componentsStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "charOffset": 4700,
                  "charLength": 209,
                  "snippet": {
                    "text": "        print(f\"interMsgID: {interMsgID}\")\n        if interMsgID in msgIDList:\n            componentsStr = (\n                database.Voting.select()\n                .where(database.Voting.msgID == interMsgID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f28df3bf782a1b897eff164f75ab3b578ce42228fa1f8311c89ed166ccdf095"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 13,
                  "charOffset": 4987,
                  "charLength": 14,
                  "snippet": {
                    "text": "componentsDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 1,
                  "charOffset": 4933,
                  "charLength": 150,
                  "snippet": {
                    "text": "                .components\n            )\n            componentsDict = ast.literal_eval(componentsStr)\n            interactionData = interaction.data\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d01438f9153bc5e3262f1a001bcffd588e9b4f687a4b4e683937cffe9315439e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 13,
                  "charOffset": 5048,
                  "charLength": 15,
                  "snippet": {
                    "text": "interactionData"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 138,
                  "startColumn": 1,
                  "charOffset": 4961,
                  "charLength": 178,
                  "snippet": {
                    "text": "            )\n            componentsDict = ast.literal_eval(componentsStr)\n            interactionData = interaction.data\n\n            print(componentsDict, type(componentsDict))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9bc6b92a3e7162893fb1d58700cb5c267daae4debd5eed50587d856dfaa70810"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 9,
                  "charOffset": 5705,
                  "charLength": 19,
                  "snippet": {
                    "text": "acceptedChannelsStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 162,
                  "startColumn": 1,
                  "charOffset": 5645,
                  "charLength": 165,
                  "snippet": {
                    "text": "    async def create(self, ctx: commands.Context):\n\n        acceptedChannelsStr = \"\"\n        noneChannels = []\n        for channelID in self.acceptedAnnouncementCHs:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bd235abebf4ff6846351a8d465fb996ad3f834ca4ca2c931c8ec179fd3aa5ac9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 9,
                  "charOffset": 5738,
                  "charLength": 12,
                  "snippet": {
                    "text": "noneChannels"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 5696,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n        acceptedChannelsStr = \"\"\n        noneChannels = []\n        for channelID in self.acceptedAnnouncementCHs:\n            acceptedChannel = self.bot.get_channel(channelID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f79b676a0a44c7b561f804d3293668e1b42e18fabfe792fc4edd978d3ef30aa9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 13,
                  "charOffset": 5823,
                  "charLength": 15,
                  "snippet": {
                    "text": "acceptedChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 165,
                  "startColumn": 1,
                  "charOffset": 5730,
                  "charLength": 187,
                  "snippet": {
                    "text": "        noneChannels = []\n        for channelID in self.acceptedAnnouncementCHs:\n            acceptedChannel = self.bot.get_channel(channelID)\n\n            if acceptedChannel is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e54cd0ab0f09ad433fad4d2edef2b13cc7a723200baf6b1ab31f8178a19fa08"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 9,
                  "charOffset": 6166,
                  "charLength": 8,
                  "snippet": {
                    "text": "randomID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 1,
                  "charOffset": 6110,
                  "charLength": 254,
                  "snippet": {
                    "text": "        print(f\"noneChannels: {noneChannels}\")\n\n        randomID = \"\".join(random.choices(string.ascii_uppercase + string.digits, k=6))\n        tempVoteCHsPath = f\"./TEMP_voteCHS_{randomID}.txt\"\n        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6f018304536095fcae545ba91a2fd89e6eb46b0da7317b18fd8c66c83ac81600"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 9,
                  "charOffset": 6254,
                  "charLength": 15,
                  "snippet": {
                    "text": "tempVoteCHsPath"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 175,
                  "startColumn": 1,
                  "charOffset": 6157,
                  "charLength": 208,
                  "snippet": {
                    "text": "\n        randomID = \"\".join(random.choices(string.ascii_uppercase + string.digits, k=6))\n        tempVoteCHsPath = f\"./TEMP_voteCHS_{randomID}.txt\"\n        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cfdb016645d3f8a3dda71d66b9e18f13fcae0eba9820b6eec1f47e835d300783"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 9,
                  "charOffset": 6313,
                  "charLength": 19,
                  "snippet": {
                    "text": "tempVoteCHsFilename"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "charOffset": 6158,
                  "charLength": 266,
                  "snippet": {
                    "text": "        randomID = \"\".join(random.choices(string.ascii_uppercase + string.digits, k=6))\n        tempVoteCHsPath = f\"./TEMP_voteCHS_{randomID}.txt\"\n        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\"\n\n        tempVoteCHsFileWrite = open(tempVoteCHsPath, \"w+\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89b97be8516847daabb8405dfbf71cd68338dcc9a9328384891790c07c49b9ba"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 9,
                  "charOffset": 6374,
                  "charLength": 20,
                  "snippet": {
                    "text": "tempVoteCHsFileWrite"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 6305,
                  "charLength": 241,
                  "snippet": {
                    "text": "        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\"\n\n        tempVoteCHsFileWrite = open(tempVoteCHsPath, \"w+\")\n        tempVoteCHsFileWrite.write(f\"Accepted channels:\" f\"\\n{acceptedChannelsStr}\")\n        tempVoteCHsFileWrite.close()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "51385c5416bd34ad73cb9a5e18e507a278278bc7d39355776d471a6c3bbfdac4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 9,
                  "charOffset": 6555,
                  "charLength": 15,
                  "snippet": {
                    "text": "tempVoteCHsFile"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 181,
                  "startColumn": 1,
                  "charOffset": 6425,
                  "charLength": 243,
                  "snippet": {
                    "text": "        tempVoteCHsFileWrite.write(f\"Accepted channels:\" f\"\\n{acceptedChannelsStr}\")\n        tempVoteCHsFileWrite.close()\n        tempVoteCHsFile = discord.File(tempVoteCHsPath, filename=tempVoteCHsFilename)\n\n        os.remove(tempVoteCHsPath)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7abb7fcb17b947c1304304c7213feb11e410d5c51d45c8ebebe9a76040cfb58f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 9,
                  "charOffset": 6678,
                  "charLength": 11,
                  "snippet": {
                    "text": "ch_snakePit"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 185,
                  "startColumn": 1,
                  "charOffset": 6634,
                  "charLength": 228,
                  "snippet": {
                    "text": "        os.remove(tempVoteCHsPath)\n\n        ch_snakePit = self.bot.get_channel(TechID.ch_snake_pit)\n        msgVoteCHsFile = await ch_snakePit.send(file=tempVoteCHsFile)\n        voteCHsFileURL = msgVoteCHsFile.attachments[0].url"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cd0b92303afe7ee44f865a8a849d378d3e5baa26c06871c92af8f780eb2e3c67"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 9,
                  "charOffset": 6742,
                  "charLength": 14,
                  "snippet": {
                    "text": "msgVoteCHsFile"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 1,
                  "charOffset": 6669,
                  "charLength": 231,
                  "snippet": {
                    "text": "\n        ch_snakePit = self.bot.get_channel(TechID.ch_snake_pit)\n        msgVoteCHsFile = await ch_snakePit.send(file=tempVoteCHsFile)\n        voteCHsFileURL = msgVoteCHsFile.attachments[0].url\n        await msgVoteCHsFile.delete()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "882769c88b0bd9d64db8b7d7d33f329171e9d2cddc9e6af42603288888db35f9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 9,
                  "charOffset": 6812,
                  "charLength": 14,
                  "snippet": {
                    "text": "voteCHsFileURL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 1,
                  "charOffset": 6670,
                  "charLength": 267,
                  "snippet": {
                    "text": "        ch_snakePit = self.bot.get_channel(TechID.ch_snake_pit)\n        msgVoteCHsFile = await ch_snakePit.send(file=tempVoteCHsFile)\n        voteCHsFileURL = msgVoteCHsFile.attachments[0].url\n        await msgVoteCHsFile.delete()\n        embedServer = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e99455af9a9449b82ffdcdbe07d442e38e84ffd9ed3bab70efc7fb9b6aff5ff5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 9,
                  "charOffset": 6909,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedServer"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 189,
                  "startColumn": 1,
                  "charOffset": 6804,
                  "charLength": 205,
                  "snippet": {
                    "text": "        voteCHsFileURL = msgVoteCHsFile.attachments[0].url\n        await msgVoteCHsFile.delete()\n        embedServer = discord.Embed(\n            color=Colors.ss_blurple,\n            title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e09a15c604ce5144971d151c6c3eb1adde9d489c521adf14cde11c7f3ff1ae0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 9,
                  "charOffset": 7479,
                  "charLength": 15,
                  "snippet": {
                    "text": "viewAcceptedCHs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 199,
                  "startColumn": 1,
                  "charOffset": 7387,
                  "charLength": 188,
                  "snippet": {
                    "text": "        embedServer.set_footer(text=\"Type 'cancel' to cancel | Timeout after 60s\")\n\n        viewAcceptedCHs = discord.ui.View()\n        viewAcceptedCHs.add_item(\n            ButtonHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4eb03497b69f5d6b7c2bca90d3f5f801714270a725ef6d8fd6b5c46003a1424f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 9,
                  "charOffset": 7735,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgSetup"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 207,
                  "startColumn": 1,
                  "charOffset": 7703,
                  "charLength": 152,
                  "snippet": {
                    "text": "            )\n        )\n        msgSetup = await ctx.send(embed=embedServer, view=viewAcceptedCHs)\n\n        def msgInputCheck(message: discord.Message):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "10949b2b29ba17786ab479a8cb9ee650b28d09e2b8aa1751ac5ac5e57e3bcea1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 13,
                  "charOffset": 7815,
                  "charLength": 13,
                  "snippet": {
                    "text": "msgInputCheck"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 209,
                  "startColumn": 1,
                  "charOffset": 7727,
                  "charLength": 212,
                  "snippet": {
                    "text": "        msgSetup = await ctx.send(embed=embedServer, view=viewAcceptedCHs)\n\n        def msgInputCheck(message: discord.Message):\n            return message.channel == ctx.channel and message.author == ctx.author\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "30c5a1546865d62bfb25df7220ed8b685bef95cd59b13440ffb3dbc39234fa71"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 9,
                  "charOffset": 8023,
                  "charLength": 18,
                  "snippet": {
                    "text": "datetimeExpiration"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 215,
                  "startColumn": 1,
                  "charOffset": 7962,
                  "charLength": 161,
                  "snippet": {
                    "text": "        text = ...  # type: str\n        options = []\n        datetimeExpiration = ...  # type: datetime.datetime\n\n        msgError = ...  # type: discord.Message"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7129dff424e34d8f513f26a0eb61241cd0869224110ca8d0b432931cab0adbc1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 9,
                  "charOffset": 8084,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 217,
                  "startColumn": 1,
                  "charOffset": 8015,
                  "charLength": 147,
                  "snippet": {
                    "text": "        datetimeExpiration = ...  # type: datetime.datetime\n\n        msgError = ...  # type: discord.Message\n        viewReset = discord.ui.View()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5c0e916740a2183dc798dcab598cfb3f66ffa4abb71453189bc0399272bb9f1d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 9,
                  "charOffset": 8132,
                  "charLength": 9,
                  "snippet": {
                    "text": "viewReset"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 218,
                  "startColumn": 1,
                  "charOffset": 8075,
                  "charLength": 117,
                  "snippet": {
                    "text": "\n        msgError = ...  # type: discord.Message\n        viewReset = discord.ui.View()\n\n        setupFinished = False"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7349eb4af72acf18aada721e80ff5c9e629da31b03628bfb377bd90a013241d6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 9,
                  "charOffset": 8171,
                  "charLength": 13,
                  "snippet": {
                    "text": "setupFinished"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 220,
                  "startColumn": 1,
                  "charOffset": 8124,
                  "charLength": 106,
                  "snippet": {
                    "text": "        viewReset = discord.ui.View()\n\n        setupFinished = False\n        index = 0\n        while True:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "959fd4e598a1f75cf30b7794c8a9f066f13b82dc0c42bcfecc05f9ff7dc58d32"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 17,
                  "charOffset": 8264,
                  "charLength": 11,
                  "snippet": {
                    "text": "msgResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 224,
                  "startColumn": 1,
                  "charOffset": 8211,
                  "charLength": 189,
                  "snippet": {
                    "text": "        while True:\n            try:\n                msgResponse: discord.Message = await self.bot.wait_for(\n                    \"message\", check=msgInputCheck, timeout=60\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0074b4889d0464a02243750974a057e1957a446f7bcd02b5a43f04b61f02193f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 17,
                  "charOffset": 8458,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedTimeout"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 228,
                  "startColumn": 1,
                  "charOffset": 8383,
                  "charLength": 185,
                  "snippet": {
                    "text": "                )\n            except asyncio.TimeoutError:\n                embedTimeout = discord.Embed(\n                    color=Colors.red,\n                    title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "04db112f232f47e142e69a7be3abf6eb43b65d2bc764ba0c3c4dfe401564cc88"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 17,
                  "charOffset": 9113,
                  "charLength": 10,
                  "snippet": {
                    "text": "msgContent"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 248,
                  "startColumn": 1,
                  "charOffset": 9078,
                  "charLength": 119,
                  "snippet": {
                    "text": "\n            else:\n                msgContent = msgResponse.content\n\n                if msgContent.lower() == \"cancel\":"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ef78ada41a0c0e830243c946694c16f196aee4b5e4670e016f125bf07656db54"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 21,
                  "charOffset": 9218,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedCancel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 251,
                  "startColumn": 1,
                  "charOffset": 9146,
                  "charLength": 189,
                  "snippet": {
                    "text": "\n                if msgContent.lower() == \"cancel\":\n                    embedCancel = discord.Embed(\n                        color=Colors.red,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a51050a774ab4cb11d9904f069277c2ee7d83183fa41ddd55dce5cc5b5e7e58a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 21,
                  "charOffset": 10057,
                  "charLength": 13,
                  "snippet": {
                    "text": "embedNotFound"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 275,
                  "startColumn": 1,
                  "charOffset": 10007,
                  "charLength": 169,
                  "snippet": {
                    "text": "                        pass\n\n                    embedNotFound = discord.Embed(\n                        color=Colors.red,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8ba35ed50135b93d9f2a70d057e322f52efa27e59b743cae75a9ef89a7e8b448"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 21,
                  "charOffset": 10652,
                  "charLength": 12,
                  "snippet": {
                    "text": "tempChannels"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 286,
                  "startColumn": 1,
                  "charOffset": 10555,
                  "charLength": 220,
                  "snippet": {
                    "text": "                    embedNotFound.set_footer(text=\"Use 'cancel' to cancel\")\n\n                    tempChannels = []\n                    if \",\" in msgContent:\n                        channelsStrList = msgContent.split(\",\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "39e16a37a4ccdf7b353b2ff09f1a32dfb8d1e7ebfda8869bf44db5481d0ecf87"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 25,
                  "charOffset": 10736,
                  "charLength": 15,
                  "snippet": {
                    "text": "channelsStrList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 288,
                  "startColumn": 1,
                  "charOffset": 10632,
                  "charLength": 267,
                  "snippet": {
                    "text": "                    tempChannels = []\n                    if \",\" in msgContent:\n                        channelsStrList = msgContent.split(\",\")\n                        for channelStr in channelsStrList:\n                            stripChannelStr = channelStr.strip()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6702fe6eadba319261a682eabfc439aafd238ee692e6d5754df4076dc92f4d21"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 29,
                  "charOffset": 10863,
                  "charLength": 15,
                  "snippet": {
                    "text": "stripChannelStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 290,
                  "startColumn": 1,
                  "charOffset": 10712,
                  "charLength": 298,
                  "snippet": {
                    "text": "                        channelsStrList = msgContent.split(\",\")\n                        for channelStr in channelsStrList:\n                            stripChannelStr = channelStr.strip()\n                            channelsStrList[\n                                channelsStrList.index(channelStr)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cc9bca79cd30018736caf281b56b86169d9c39a78e8d038e1d46e679174c6701"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 29,
                  "charOffset": 11945,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 314,
                  "startColumn": 1,
                  "charOffset": 11860,
                  "charLength": 227,
                  "snippet": {
                    "text": "                            )\n                        ):\n                            msgError = await ctx.send(embed=embedNotFound)\n                            try:\n                                await msgError.delete(delay=7)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac85fd8d0826f724f9e3f423b4d8b9ef217f102be0459b257b0b859512fe77f1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 25,
                  "charOffset": 12250,
                  "charLength": 10,
                  "snippet": {
                    "text": "channelStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 323,
                  "startColumn": 1,
                  "charOffset": 12199,
                  "charLength": 207,
                  "snippet": {
                    "text": "\n                    else:\n                        channelStr = msgContent.strip()\n                        if channelStr.isdigit():\n                            channel = self.bot.get_channel(int(channelStr))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "878dd9dbf4f76bab08a3d90e51d270cb19d9907cc49b04f81ec49a49167552b6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 29,
                  "charOffset": 12760,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 335,
                  "startColumn": 1,
                  "charOffset": 12627,
                  "charLength": 275,
                  "snippet": {
                    "text": "                            or channel.id not in self.acceptedAnnouncementCHs\n                        ):\n                            msgError = await ctx.send(embed=embedNotFound)\n                            try:\n                                await msgError.delete(delay=7)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bf9252f562a172c0e6c4111655a28f4df6ac3243f1901b482a29bc804f91c693"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 21,
                  "charOffset": 13134,
                  "charLength": 9,
                  "snippet": {
                    "text": "embedText"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 347,
                  "startColumn": 1,
                  "charOffset": 13069,
                  "charLength": 187,
                  "snippet": {
                    "text": "                    channels = tempChannels\n\n                    embedText = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "13f95a3fc4cd735bb41b82f4cfaa7737424026d362369e325dd54d64ec47ab20"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 25,
                  "charOffset": 14361,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedTooLong"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 374,
                  "startColumn": 1,
                  "charOffset": 14289,
                  "charLength": 198,
                  "snippet": {
                    "text": "\n                    if len(msgContent) > 2000:\n                        embedTooLong = discord.Embed(\n                            color=Colors.red,\n                            title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d15803af4a1962fdd6f9e35cafdef099074a0b97834fdd22c119d9ea25ccdab1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 25,
                  "charOffset": 14888,
                  "charLength": 10,
                  "snippet": {
                    "text": "msgTooLong"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 383,
                  "startColumn": 1,
                  "charOffset": 14759,
                  "charLength": 266,
                  "snippet": {
                    "text": "                        )\n                        embedTooLong.set_footer(text=\"Use 'cancel' to cancel\")\n                        msgTooLong = await ctx.send(embed=embedTooLong)\n                        try:\n                            await msgTooLong.delete(delay=7)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c406fb5c1cfaf19c2520d33048a0c83925df436f3c2c6e2589bdacd0f5fe4c99"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 21,
                  "charOffset": 15185,
                  "charLength": 9,
                  "snippet": {
                    "text": "embedText"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 393,
                  "startColumn": 1,
                  "charOffset": 15126,
                  "charLength": 181,
                  "snippet": {
                    "text": "                    text = msgContent\n\n                    embedText = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68db7a55f6d1763709dba5611d77cf16f34bd9c329a70b73d668f31dc12e5a71"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 419,
                  "startColumn": 21,
                  "charOffset": 16245,
                  "charLength": 14,
                  "snippet": {
                    "text": "optionsStrList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 417,
                  "startColumn": 1,
                  "charOffset": 16195,
                  "charLength": 199,
                  "snippet": {
                    "text": "                        pass\n\n                    optionsStrList = msgContent.split(\",\")\n                    for optionStr in optionsStrList:\n                        options.append(optionStr.strip())"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d02e43125597ed8ff358a35e695367925a07bd8f6928a794b1e14d6c60d3aa0d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 21,
                  "charOffset": 16416,
                  "charLength": 13,
                  "snippet": {
                    "text": "embedDuration"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 421,
                  "startColumn": 1,
                  "charOffset": 16337,
                  "charLength": 205,
                  "snippet": {
                    "text": "                        options.append(optionStr.strip())\n\n                    embedDuration = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "732ad84d17a6739e72b5cf9a8bbcf44b473dba568caa6bfc8106203e6844b2af"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 21,
                  "charOffset": 17347,
                  "charLength": 8,
                  "snippet": {
                    "text": "timeDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 444,
                  "startColumn": 1,
                  "charOffset": 17297,
                  "charLength": 188,
                  "snippet": {
                    "text": "                        pass\n\n                    timeDict: dict = string_time_convert(msgContent)\n                    days = timeDict[\"days\"]\n                    hours = timeDict[\"hours\"]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa6e843c2d374a4f093883ff5b58d06064d42669a6db1e00a005e06aacdf3eca"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 25,
                  "charOffset": 17826,
                  "charLength": 13,
                  "snippet": {
                    "text": "embedNotFound"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 456,
                  "startColumn": 1,
                  "charOffset": 17735,
                  "charLength": 218,
                  "snippet": {
                    "text": "                        and seconds is None\n                    ):\n                        embedNotFound = discord.Embed(\n                            color=Colors.red,\n                            title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6d72bda83979d810ec34b4b881cf0c2b47885779476802aa154aeb23d816c513"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 467,
                  "startColumn": 25,
                  "charOffset": 18354,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 465,
                  "startColumn": 1,
                  "charOffset": 18224,
                  "charLength": 264,
                  "snippet": {
                    "text": "                        )\n                        embedNotFound.set_footer(text=\"Use 'cancel' to cancel\")\n                        msgError = await ctx.send(embed=embedNotFound)\n                        try:\n                            await msgError.delete(delay=7)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "48c1120156dcf40e40b196221f2863e481c322856b64b7e733afee02cf0450e8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 487,
                  "startColumn": 21,
                  "charOffset": 18907,
                  "charLength": 11,
                  "snippet": {
                    "text": "datetimeNow"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 485,
                  "startColumn": 1,
                  "charOffset": 18850,
                  "charLength": 174,
                  "snippet": {
                    "text": "                        seconds = 0\n\n                    datetimeNow = datetime.datetime.now(self.est)\n                    try:\n                        datetimeExpiration = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9f2354ea80e625a11522a3f3019cf798333e6f9ebbe068b94542a09e3f552c6c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 25,
                  "charOffset": 19002,
                  "charLength": 18,
                  "snippet": {
                    "text": "datetimeExpiration"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 487,
                  "startColumn": 1,
                  "charOffset": 18887,
                  "charLength": 237,
                  "snippet": {
                    "text": "                    datetimeNow = datetime.datetime.now(self.est)\n                    try:\n                        datetimeExpiration = (\n                            datetimeNow\n                            + datetime.timedelta(days=days)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e366598c21ece0fff8c93ccf3ad5c59a72ab98ce3b8ea24896e9641bfab4703d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 497,
                  "startColumn": 25,
                  "charOffset": 19421,
                  "charLength": 13,
                  "snippet": {
                    "text": "embedOverflow"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 495,
                  "startColumn": 1,
                  "charOffset": 19319,
                  "charLength": 229,
                  "snippet": {
                    "text": "                        )\n                    except OverflowError as _error:\n                        embedOverflow = discord.Embed(\n                            color=Colors.red,\n                            title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "299f20ec9dbce34af12eda536571933d5d6d9a2944c74182906336f70d0c835b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 507,
                  "startColumn": 25,
                  "charOffset": 20051,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 505,
                  "startColumn": 1,
                  "charOffset": 19921,
                  "charLength": 264,
                  "snippet": {
                    "text": "                        )\n                        embedOverflow.set_footer(text=\"Use 'cancel' to cancel\")\n                        msgError = await ctx.send(embed=embedOverflow)\n                        try:\n                            await msgError.delete(delay=7)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "11129bc3760c6fdf2f25a482e866565159f618bb34cd751bb28eab5bf2f35a39"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 21,
                  "charOffset": 20306,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedFinish"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 513,
                  "startColumn": 1,
                  "charOffset": 20252,
                  "charLength": 178,
                  "snippet": {
                    "text": "                        continue\n\n                    embedFinish = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ee582b6dfcd113edeb645bd4a1acd10b6d23a8762f8c6f73aaf092af8df713c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 527,
                  "startColumn": 21,
                  "charOffset": 20830,
                  "charLength": 17,
                  "snippet": {
                    "text": "expLongDateTimeTP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 525,
                  "startColumn": 1,
                  "charOffset": 20765,
                  "charLength": 223,
                  "snippet": {
                    "text": "                    await msgSetup.delete()\n\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b58eb48de282b8e787bdb7d81e6d1fa3cd4b642d3334f0547c9a3b57ebbfbe98"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 21,
                  "charOffset": 20919,
                  "charLength": 17,
                  "snippet": {
                    "text": "expRelativeTimeTP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 526,
                  "startColumn": 1,
                  "charOffset": 20809,
                  "charLength": 228,
                  "snippet": {
                    "text": "\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedPseudo = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d04dc2d4f092bfb39a1a33764aa8af956479c18d68ff1e876cb296d1fbb263bc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 21,
                  "charOffset": 21009,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedPseudo"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 528,
                  "startColumn": 1,
                  "charOffset": 20899,
                  "charLength": 227,
                  "snippet": {
                    "text": "                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedPseudo = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "505c91e29c919d6a7fe5ea1ffc116b4be40f7adaf1744c72b1da5033e859eabf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 21,
                  "charOffset": 21524,
                  "charLength": 12,
                  "snippet": {
                    "text": "viewOverview"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 539,
                  "startColumn": 1,
                  "charOffset": 21481,
                  "charLength": 119,
                  "snippet": {
                    "text": "                    )\n\n                    viewOverview = discord.ui.View()\n\n                    for option in options:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c574252c85a896887e6ea4067f8351b741f786526a258fe2ca821ee5bf574cf2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 545,
                  "startColumn": 25,
                  "charOffset": 21626,
                  "charLength": 11,
                  "snippet": {
                    "text": "customEmoji"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 543,
                  "startColumn": 1,
                  "charOffset": 21558,
                  "charLength": 235,
                  "snippet": {
                    "text": "                    for option in options:\n\n                        customEmoji = search_custom_emoji(option)\n                        if customEmoji is not None:\n                            option = option.replace(f\"{customEmoji}\", \"\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "13daf89f2a8baace172d54c5c05f9052e224b7bbdaa2c4a8c62bfb1c482eb958"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 560,
                  "startColumn": 21,
                  "charOffset": 22245,
                  "charLength": 13,
                  "snippet": {
                    "text": "setupFinished"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 558,
                  "startColumn": 1,
                  "charOffset": 22151,
                  "charLength": 141,
                  "snippet": {
                    "text": "                    await ctx.send(embed=embedPseudo, view=viewOverview)\n\n                    setupFinished = True\n                    break\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17bd7df270db9c56b3f83a057458fbf6b83d311effbdb5cdb6c4d054d0925756"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 13,
                  "charOffset": 22430,
                  "charLength": 11,
                  "snippet": {
                    "text": "strChannels"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 567,
                  "startColumn": 1,
                  "charOffset": 22396,
                  "charLength": 120,
                  "snippet": {
                    "text": "                pass\n\n            strChannels = \"\"\n            for channel in channels:\n                strChannels += ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0f5a88ff9b035671bbede50eb74de8e049bdc8a466797e64b4d3a85dbb40a4d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 575,
                  "startColumn": 13,
                  "charOffset": 22633,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedConfirm"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 573,
                  "startColumn": 1,
                  "charOffset": 22602,
                  "charLength": 130,
                  "snippet": {
                    "text": "                )\n\n            embedConfirm = discord.Embed(\n                color=Colors.yellow,\n                title=\"Confirm\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d2df688678a5570841e6f4057222dc5ada7491b8fc4198e7bf5057b3b5eb6b5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 13,
                  "charOffset": 23243,
                  "charLength": 10,
                  "snippet": {
                    "text": "msgConfirm"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 586,
                  "startColumn": 1,
                  "charOffset": 23127,
                  "charLength": 257,
                  "snippet": {
                    "text": "                text=\"Abusing this feature has severe consequences! | Timeout after 120s\"\n            )\n            msgConfirm = await ctx.send(embed=embedConfirm)\n            await msgConfirm.add_reaction(\"✅\")\n            await msgConfirm.add_reaction(\"❌\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9df4f678770ed2a5cd53b802ca3b5865ab6505521a2e9a8c58f8791cfb23b038"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 592,
                  "startColumn": 17,
                  "charOffset": 23402,
                  "charLength": 12,
                  "snippet": {
                    "text": "confirmCheck"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 590,
                  "startColumn": 1,
                  "charOffset": 23338,
                  "charLength": 163,
                  "snippet": {
                    "text": "            await msgConfirm.add_reaction(\"❌\")\n\n            def confirmCheck(reaction, user):\n                return (\n                    user.id == ctx.author.id"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73378797281b285e4b3b4e4e14e25e26f82b36925827798a217793ad147589f7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 600,
                  "startColumn": 17,
                  "charOffset": 23673,
                  "charLength": 16,
                  "snippet": {
                    "text": "reactionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 598,
                  "startColumn": 1,
                  "charOffset": 23639,
                  "charLength": 177,
                  "snippet": {
                    "text": "\n            try:\n                reactionResponse, userResponse = await self.bot.wait_for(\n                    \"reaction_add\", check=confirmCheck, timeout=120\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ebbc32e67f3fea94cbe2da7603f4b043cf5532a57875df9735df72356517b9bf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 600,
                  "startColumn": 35,
                  "charOffset": 23691,
                  "charLength": 12,
                  "snippet": {
                    "text": "userResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 598,
                  "startColumn": 1,
                  "charOffset": 23639,
                  "charLength": 177,
                  "snippet": {
                    "text": "\n            try:\n                reactionResponse, userResponse = await self.bot.wait_for(\n                    \"reaction_add\", check=confirmCheck, timeout=120\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f5dce28d3ae97cacaa5322ff9a455df106852e2dd8a889a91cdfd3ff20046761"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 17,
                  "charOffset": 23874,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedTimeout"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 602,
                  "startColumn": 1,
                  "charOffset": 23799,
                  "charLength": 179,
                  "snippet": {
                    "text": "                )\n            except asyncio.TimeoutError:\n                embedTimeout = discord.Embed(\n                    color=Colors.red,\n                    title=\"Confirm\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "39777da54c1923923be6ea3c28351e960ee18a52c25110de20991a00de7c4746"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 21,
                  "charOffset": 24543,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedSending"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 618,
                  "startColumn": 1,
                  "charOffset": 24467,
                  "charLength": 191,
                  "snippet": {
                    "text": "                    await msgConfirm.clear_reactions()\n\n                    embedSending = discord.Embed(\n                        color=Colors.yellow,\n                        title=\"Confirm\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71073e2488f4e2309c736dcd7768c986b3782bd0d9667ef8e061f1bc35e01a5c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 629,
                  "startColumn": 21,
                  "charOffset": 24899,
                  "charLength": 17,
                  "snippet": {
                    "text": "expLongDateTimeTP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 627,
                  "startColumn": 1,
                  "charOffset": 24804,
                  "charLength": 253,
                  "snippet": {
                    "text": "                    print(\"sending\")  # TODO: Sending to original channel\n\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d76f2cd20a62c34f944496931abe2f15658da4493fa38034057ac1addc8c4ef"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 630,
                  "startColumn": 21,
                  "charOffset": 24988,
                  "charLength": 17,
                  "snippet": {
                    "text": "expRelativeTimeTP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 628,
                  "startColumn": 1,
                  "charOffset": 24878,
                  "charLength": 228,
                  "snippet": {
                    "text": "\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedVoting = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b51efee8ce1cf2a2aa5125f3a66129cdbfffd716440d3e400003383ce400db61"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 632,
                  "startColumn": 21,
                  "charOffset": 25078,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedVoting"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 630,
                  "startColumn": 1,
                  "charOffset": 24968,
                  "charLength": 227,
                  "snippet": {
                    "text": "                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedVoting = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "48079f3f53b375a8b48e790d04a89b96e9f536e25a979e1d51d481c63dc98816"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 642,
                  "startColumn": 21,
                  "charOffset": 25522,
                  "charLength": 10,
                  "snippet": {
                    "text": "viewVoting"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 640,
                  "startColumn": 1,
                  "charOffset": 25479,
                  "charLength": 117,
                  "snippet": {
                    "text": "                    )\n\n                    viewVoting = discord.ui.View()\n                    for option in options:\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "22ec99fa7f3d5d52034f7bd16ede5efa9e27f65781d31a0ddc0279957418d451"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 645,
                  "startColumn": 25,
                  "charOffset": 25621,
                  "charLength": 11,
                  "snippet": {
                    "text": "customEmoji"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 643,
                  "startColumn": 1,
                  "charOffset": 25553,
                  "charLength": 235,
                  "snippet": {
                    "text": "                    for option in options:\n\n                        customEmoji = search_custom_emoji(option)\n                        if customEmoji is not None:\n                            option = option.replace(f\"{customEmoji}\", \"\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b33265a29ed2b222b834d4933416bb92fc1c8a798db3a49130314cc010bf01f9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 658,
                  "startColumn": 21,
                  "charOffset": 26164,
                  "charLength": 11,
                  "snippet": {
                    "text": "channelTest"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 656,
                  "startColumn": 1,
                  "charOffset": 26117,
                  "charLength": 184,
                  "snippet": {
                    "text": "                        )\n\n                    channelTest = self.bot.get_channel(942076483290161203)\n                    try:\n                        msgVote = await channelTest.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cd225bd3408812b0e2e25a63fae625f74fe3f8d7aff9c1f87fbbda1f2540f708"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 660,
                  "startColumn": 25,
                  "charOffset": 26268,
                  "charLength": 7,
                  "snippet": {
                    "text": "msgVote"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 658,
                  "startColumn": 1,
                  "charOffset": 26144,
                  "charLength": 286,
                  "snippet": {
                    "text": "                    channelTest = self.bot.get_channel(942076483290161203)\n                    try:\n                        msgVote = await channelTest.send(\n                            content=\"@ everyone\", embed=embedVoting, view=viewVoting\n                        )  # TODO: everyone"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71e47c423003cbacf1cb847269bdb6cee3d8871c2a544efeeffd534b1601345f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 664,
                  "startColumn": 25,
                  "charOffset": 26503,
                  "charLength": 10,
                  "snippet": {
                    "text": "embedError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 662,
                  "startColumn": 1,
                  "charOffset": 26387,
                  "charLength": 256,
                  "snippet": {
                    "text": "                        )  # TODO: everyone\n                    except Exception as _error:\n                        embedError = discord.Embed(\n                            color=Colors.red,\n                            title=\"Error while sending message/s\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "efd66b97003ac641c56a93fa708e7141b0985fb14e1a2729761b0a9c0216f58f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 679,
                  "startColumn": 25,
                  "charOffset": 27347,
                  "charLength": 8,
                  "snippet": {
                    "text": "compDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 677,
                  "startColumn": 1,
                  "charOffset": 27233,
                  "charLength": 223,
                  "snippet": {
                    "text": "                        await msgConfirm.edit(embed=embedError)\n                    else:\n                        compDict = {}\n                        for option in options:\n                            compDict[option] = 0"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "833bdc915be2ba21f9cb20eba7c52aea213ed22998db962cb9e203c134625915"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 683,
                  "startColumn": 25,
                  "charOffset": 27482,
                  "charLength": 8,
                  "snippet": {
                    "text": "compDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 681,
                  "startColumn": 1,
                  "charOffset": 27408,
                  "charLength": 227,
                  "snippet": {
                    "text": "                            compDict[option] = 0\n\n                        compDict = json.dumps(compDict)\n                        query = database.Voting.create(\n                            msgID=msgVote.id, components=compDict"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cbe2f77764bd8b24645a4b427f1d4c0e4a41baa9f334510d75261f4376e1b703"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 25,
                  "charOffset": 27724,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedSuccess"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 687,
                  "startColumn": 1,
                  "charOffset": 27662,
                  "charLength": 184,
                  "snippet": {
                    "text": "                        query.save()\n\n                        embedSuccess = discord.Embed(\n                            color=Colors.green,\n                            title=\"Confirm\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d6f004cc157544d0c881770e15a2b416c06cecddc16a97b38cc55205bfc1283"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 700,
                  "startColumn": 21,
                  "charOffset": 28214,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedCancel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 698,
                  "startColumn": 1,
                  "charOffset": 28138,
                  "charLength": 187,
                  "snippet": {
                    "text": "                    await msgConfirm.clear_reactions()\n\n                    embedCancel = discord.Embed(\n                        color=Colors.red,\n                        title=\"Confirm\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "96d5f23cc50f0371dfde7abfb0684152467528c767c713fa6b4b94298307159b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 40,
                  "charOffset": 723,
                  "charLength": 19,
                  "snippet": {
                    "text": "xUser: discord.User"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 628,
                  "charLength": 241,
                  "snippet": {
                    "text": "\nclass TicTacToeButton(discord.ui.Button[\"TicTacToe\"]):\n    def __init__(self, x: int, y: int, xUser: discord.User, yUser: discord.User):\n        super().__init__(style=discord.ButtonStyle.secondary, label=\"\\u200b\", row=y)\n        self.x = x"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "77c9c2a310fbec4b0fa3b7a2ee99ccb873ffd17f802200aa58a912cb323905b6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 61,
                  "charOffset": 744,
                  "charLength": 19,
                  "snippet": {
                    "text": "yUser: discord.User"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 628,
                  "charLength": 241,
                  "snippet": {
                    "text": "\nclass TicTacToeButton(discord.ui.Button[\"TicTacToe\"]):\n    def __init__(self, x: int, y: int, xUser: discord.User, yUser: discord.User):\n        super().__init__(style=discord.ButtonStyle.secondary, label=\"\\u200b\", row=y)\n        self.x = x"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "35522cc01c5a9352a5e93a7e71b9088b1804d6dda9ecd331fd2c5d6c02cadaef"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 24,
                  "charOffset": 3298,
                  "charLength": 7,
                  "snippet": {
                    "text": "XPlayer"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3262,
                  "charLength": 118,
                  "snippet": {
                    "text": "    Tie = 2\n\n    def __init__(self, XPlayer, OPlayer):\n        super().__init__()\n        self.current_player = self.X"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3aa487f9befbaea15444e697702fd8ff2701f27734020d48d0cec8c2169cc57"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 33,
                  "charOffset": 3307,
                  "charLength": 7,
                  "snippet": {
                    "text": "OPlayer"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3262,
                  "charLength": 118,
                  "snippet": {
                    "text": "    Tie = 2\n\n    def __init__(self, XPlayer, OPlayer):\n        super().__init__()\n        self.current_player = self.X"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0df8f748a2a387e8fcccc7b97c5f6b28b22bb0beb090172ea2519e031d8f7ea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 9,
                  "charOffset": 10768,
                  "charLength": 17,
                  "snippet": {
                    "text": "timmyDonation_png"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 319,
                  "startColumn": 1,
                  "charOffset": 10652,
                  "charLength": 234,
                  "snippet": {
                    "text": "    @commands.cooldown(1, 10, commands.BucketType.guild)\n    async def donate(self, ctx: commands.Context):\n        timmyDonation_png = discord.File(\n            Others.timmy_donation_path, filename=Others.timmy_donation_png\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "817ecdda96910c5ded0586229677c0246a1e20ce26a2d5f3610627f960594bcf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 9,
                  "charOffset": 10896,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedDonate"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 323,
                  "startColumn": 1,
                  "charOffset": 10877,
                  "charLength": 113,
                  "snippet": {
                    "text": "        )\n\n        embedDonate = discord.Embed(\n            color=Colors.ss_blurple,\n            title=f\"Donate\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e3ce1ff58240a7ae2fd484a1f0d284a6e046ebc84410c11ce1f38a4c3376b269"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 9,
                  "charOffset": 12361,
                  "charLength": 7,
                  "snippet": {
                    "text": "modRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 358,
                  "startColumn": 1,
                  "charOffset": 12326,
                  "charLength": 225,
                  "snippet": {
                    "text": "        reason: str\n    ):\n        modRole = discord.utils.get(interaction.user.guild.roles, id=MainID.r_moderator)\n        if modRole not in interaction.user.roles:\n            return await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c060e64005a5ed76bc6ecc33617e1e5a57a9ceaeb5f6db8d4d1ba12ce767d863"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 366,
                  "startColumn": 9,
                  "charOffset": 12714,
                  "charLength": 8,
                  "snippet": {
                    "text": "roleName"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 364,
                  "startColumn": 1,
                  "charOffset": 12661,
                  "charLength": 172,
                  "snippet": {
                    "text": "                ephemeral=True\n            )\n        roleName = {\n            \"debate\": [MainID.r_debate_ban, \"Debate\"],\n            \"count\": [MainID.r_count_ban, \"Count\"],"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b6f9b61d4292ed3fca7483b3f325425ed6b3759c6a44ae3d410e46879ba0652"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 13,
                  "charOffset": 13032,
                  "charLength": 12,
                  "snippet": {
                    "text": "updateReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 372,
                  "startColumn": 1,
                  "charOffset": 12906,
                  "charLength": 330,
                  "snippet": {
                    "text": "        role = discord.utils.get(interaction.user.guild.roles, id=roleName[0])\n        if role not in user.roles:\n            updateReason = f\"{roleName[1]} Ban requested by {interaction.user.name} | Reason: {reason}\"\n            await user.add_roles(role, reason=updateReason)\n            await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "06c18e22a1f48797b3699c465f3a978f31e443168264dde3535d073ef339836d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 13,
                  "charOffset": 13374,
                  "charLength": 12,
                  "snippet": {
                    "text": "updateReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 378,
                  "startColumn": 1,
                  "charOffset": 13334,
                  "charLength": 249,
                  "snippet": {
                    "text": "            )\n        else:\n            updateReason = f\"{roleName[1]} Unban requested by {interaction.user.name} | Reason: {reason}\"\n            await user.remove_roles(role, reason=updateReason)\n            await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6736a7f2bf0f25ff540d5184cd7cafcc65fe0338cdde91f8606a47fab2f85c1a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 17,
                  "charOffset": 18154,
                  "charLength": 2,
                  "snippet": {
                    "text": "NE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 508,
                  "startColumn": 1,
                  "charOffset": 18043,
                  "charLength": 222,
                  "snippet": {
                    "text": "                await message.delete()\n                database.db.connect(reuse_if_open=True)\n                NE = database.AdminLogging.create(\n                    discordID=ctx.author.id, action=\"KILL\"\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "75929331bf0e8fa65defe5111c47b3f843fcb27c736109f2562f38d9625b45f2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 584,
                  "startColumn": 9,
                  "charOffset": 20581,
                  "charLength": 8,
                  "snippet": {
                    "text": "UserList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 582,
                  "startColumn": 1,
                  "charOffset": 20562,
                  "charLength": 55,
                  "snippet": {
                    "text": "        )\n\n        UserList = []\n        RoleList = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "feaacc5bd668bcb505deb5de248b8c724dde2d8335acfb63f0cfc272dec8b36f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 585,
                  "startColumn": 9,
                  "charOffset": 20603,
                  "charLength": 8,
                  "snippet": {
                    "text": "RoleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 583,
                  "startColumn": 1,
                  "charOffset": 20572,
                  "charLength": 72,
                  "snippet": {
                    "text": "\n        UserList = []\n        RoleList = []\n\n        for user in users:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6742ed72c4235143fe669dca9e330e75599fcee540a5339f6d071fc49fd539b4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 592,
                  "startColumn": 9,
                  "charOffset": 20765,
                  "charLength": 8,
                  "snippet": {
                    "text": "UserList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 590,
                  "startColumn": 1,
                  "charOffset": 20714,
                  "charLength": 121,
                  "snippet": {
                    "text": "            RoleList.append(role.mention)\n\n        UserList = \", \".join(UserList)\n        RoleList = \", \".join(RoleList)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9f7297e529d0aa03aa36425d45c9c0d0fb17e794bcc39e6560c685367595bb12"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 593,
                  "startColumn": 9,
                  "charOffset": 20804,
                  "charLength": 8,
                  "snippet": {
                    "text": "RoleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 591,
                  "startColumn": 1,
                  "charOffset": 20756,
                  "charLength": 104,
                  "snippet": {
                    "text": "\n        UserList = \", \".join(UserList)\n        RoleList = \", \".join(RoleList)\n\n        embed.add_field("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a2edf54eeece1370aaae05323f431910b7aad9cf32ca6772676b0ee046c75e7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 618,
                  "startColumn": 9,
                  "charOffset": 21634,
                  "charLength": 12,
                  "snippet": {
                    "text": "ViewResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 616,
                  "startColumn": 1,
                  "charOffset": 21573,
                  "charLength": 202,
                  "snippet": {
                    "text": "        await view.wait()\n        await msg.delete()\n        ViewResponse = str(view.children[0].values)\n        RoleID = self.decodeDict[ViewResponse]\n        await ctx.send(f\"<@&{RoleID}>\\n{message}\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9da43ccf5ce34eff6496327115c5016b38d9319b84ed96972024126a888e9da1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 619,
                  "startColumn": 9,
                  "charOffset": 21686,
                  "charLength": 6,
                  "snippet": {
                    "text": "RoleID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 617,
                  "startColumn": 1,
                  "charOffset": 21599,
                  "charLength": 177,
                  "snippet": {
                    "text": "        await msg.delete()\n        ViewResponse = str(view.children[0].values)\n        RoleID = self.decodeDict[ViewResponse]\n        await ctx.send(f\"<@&{RoleID}>\\n{message}\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "51872e13246403b4d79a96f856e630ea538861850c8de95a3ad49d6985c3a418"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 655,
                  "startColumn": 9,
                  "charOffset": 23270,
                  "charLength": 2,
                  "snippet": {
                    "text": "NE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 653,
                  "startColumn": 1,
                  "charOffset": 23203,
                  "charLength": 178,
                  "snippet": {
                    "text": "    @is_botAdmin\n    async def say(self, ctx, *, message):\n        NE = database.AdminLogging.create(\n            discordID=ctx.author.id, action=\"SAY\", content=message\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f99f75523480e232a51f32a9a70b08853724af36e8168313cc189510540ef27"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 683,
                  "startColumn": 9,
                  "charOffset": 24118,
                  "charLength": 2,
                  "snippet": {
                    "text": "NE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 681,
                  "startColumn": 1,
                  "charOffset": 24090,
                  "charLength": 138,
                  "snippet": {
                    "text": "            return\n\n        NE = database.AdminLogging.create(\n            discordID=ctx.author.id, action=\"SAYVC\", content=text\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c9949e36ae94c7c4feae4c4d4757aa1762418c22c0edefa6c65c67868b8fcaf5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 9,
                  "charOffset": 24318,
                  "charLength": 9,
                  "snippet": {
                    "text": "TTSClient"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 687,
                  "startColumn": 1,
                  "charOffset": 24247,
                  "charLength": 184,
                  "snippet": {
                    "text": "\n        # Lets prepare our text, and then save the audio file\n        TTSClient = texttospeech.TextToSpeechClient(\n            credentials=access_secret(\"ttscreds\", True, 2)\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37ac9ce8bd6dab3e28103c402fd1b87b1e75bb24336445fb219119e4dd529bfe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/todocommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 9,
                  "charOffset": 2611,
                  "charLength": 8,
                  "snippet": {
                    "text": "todoList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2554,
                  "charLength": 184,
                  "snippet": {
                    "text": "        database.db.connect(reuse_if_open=True)\n\n        todoList = []\n        query = database.ToDo.select().where(database.ToDo.discordID == ctx.author.id)\n        for todo in query:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca2412212dc549025e8586046a6d78656a3d044cd0a041241773e47e6a1a6d85"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/todocommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 9,
                  "charOffset": 2808,
                  "charLength": 9,
                  "snippet": {
                    "text": "todoFinal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "charOffset": 2739,
                  "charLength": 129,
                  "snippet": {
                    "text": "            todoList.append(f\"{str(todo.id)}) {todo.item}\")\n\n        todoFinal = \"\\n\".join(todoList)\n\n        database.db.close()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ca0a04b6bcb5939dd1228d059e34eeb9621cf40d4b46d3615da42f24bb2b11f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 15,
                  "charOffset": 1166,
                  "charLength": 7,
                  "snippet": {
                    "text": "Fmodify"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 1110,
                  "charLength": 190,
                  "snippet": {
                    "text": "    @commands.command()\n    @is_botAdmin4\n    async def Fmodify(self, ctx, num: int, val: bool):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "54b9ca8efb7023a5d0c1d0ff60f66f013addff89a479dfc8fa44e59fa6c28894"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 9,
                  "charOffset": 1215,
                  "charLength": 7,
                  "snippet": {
                    "text": "CheckDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 1134,
                  "charLength": 220,
                  "snippet": {
                    "text": "    @is_botAdmin4\n    async def Fmodify(self, ctx, num: int, val: bool):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n            .where(database.CheckInformation.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b6e9170ae60abec2ab2bc60eccff9a496f412f85498d360d13420ee33e63a1ae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 9,
                  "charOffset": 1393,
                  "charLength": 14,
                  "snippet": {
                    "text": "databaseValues"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 1374,
                  "charLength": 117,
                  "snippet": {
                    "text": "        )\n\n        databaseValues = {\n            1: \"CheckDB.MasterMaintenance\",\n            2: \"CheckDB.guildNone\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "13099a6fe6af0417796d99a6b4a90f73fc9ef3c61a1e1b8865213a5aa4a51c76"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 9,
                  "charOffset": 2579,
                  "charLength": 7,
                  "snippet": {
                    "text": "CheckDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2517,
                  "charLength": 201,
                  "snippet": {
                    "text": "    @filters.command()\n    async def list(self, ctx):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n            .where(database.CheckInformation.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "35da13bb3573dae8d23062ad6ccd147b895fb261121318087fcfd287edd5aaff"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 9,
                  "charOffset": 3803,
                  "charLength": 17,
                  "snippet": {
                    "text": "WhitelistedPrefix"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 1,
                  "charOffset": 3734,
                  "charLength": 223,
                  "snippet": {
                    "text": "    @is_botAdmin3\n    async def delete(self, ctx, num: int):\n        WhitelistedPrefix: database.WhitelistedPrefix = (\n            database.WhitelistedPrefix.select()\n            .where(database.WhitelistedPrefix.id == num)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6dd09735fd31a7bceb731fdd519549673c6fe40e33a6ee943e862f42c4b4699a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 9,
                  "charOffset": 4196,
                  "charLength": 17,
                  "snippet": {
                    "text": "WhitelistedPrefix"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 1,
                  "charOffset": 4132,
                  "charLength": 167,
                  "snippet": {
                    "text": "    @is_botAdmin3\n    async def add(self, ctx, prefix):\n        WhitelistedPrefix = database.WhitelistedPrefix.create(\n            prefix=prefix, status=True\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e15311aa0c5f9b41dcaaeeeb4f98949ea3d75cff635ccd1ec05bfce8e915b22d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 9,
                  "charOffset": 4440,
                  "charLength": 8,
                  "snippet": {
                    "text": "PrefixDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 1,
                  "charOffset": 4400,
                  "charLength": 100,
                  "snippet": {
                    "text": "    async def list(self, ctx):\n\n        PrefixDB = database.WhitelistedPrefix\n        response = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d4df670454fd7f652560a1f4ee1ab26e017cc747b6cfae498499fbc580fc4f79"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 17,
                  "charOffset": 4586,
                  "charLength": 12,
                  "snippet": {
                    "text": "statusFilter"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 148,
                  "startColumn": 1,
                  "charOffset": 4532,
                  "charLength": 137,
                  "snippet": {
                    "text": "\n            if entry.status is True:\n                statusFilter = \"ACTIVE\"\n            else:\n                statusFilter = \"DISABLED\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d7c076d4db29d4edb761d3763b5473ebde417dbd758127e097e920975a03b29"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 17,
                  "charOffset": 4644,
                  "charLength": 12,
                  "snippet": {
                    "text": "statusFilter"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 150,
                  "startColumn": 1,
                  "charOffset": 4570,
                  "charLength": 188,
                  "snippet": {
                    "text": "                statusFilter = \"ACTIVE\"\n            else:\n                statusFilter = \"DISABLED\"\n\n            response.append(f\"Prefix `{entry.prefix}`:\\n{Emoji.barrow} {statusFilter}\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d2a3134532ed9b2de59f2e10acb6e33a2cce21fa967c87ec8be666245532a81"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 9,
                  "charOffset": 8026,
                  "charLength": 7,
                  "snippet": {
                    "text": "hostDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 256,
                  "startColumn": 1,
                  "charOffset": 7939,
                  "charLength": 143,
                  "snippet": {
                    "text": "    async def _gitpull(self, ctx, mode=\"-a\", branch=None):\n        output = \"\"\n        hostDir = get_host_dir()\n\n        if branch is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e59ea96290608868d607f00a108b564384a33bb9a569ae285e4a9432a1050238"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 9,
                  "charOffset": 10359,
                  "charLength": 7,
                  "snippet": {
                    "text": "hostDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 328,
                  "startColumn": 1,
                  "charOffset": 10330,
                  "charLength": 126,
                  "snippet": {
                    "text": "        output = \"\"\n\n        hostDir = get_host_dir()\n        if hostDir == \"/home/timmya\":\n            branch = \"origin/main\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d06bbbdf99349a513e74af8412fe0c9836a4cb33462c66ac59283653ee02d34"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 9,
                  "charOffset": 13132,
                  "charLength": 9,
                  "snippet": {
                    "text": "adminList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 410,
                  "startColumn": 1,
                  "charOffset": 13076,
                  "charLength": 128,
                  "snippet": {
                    "text": "    @is_botAdmin\n    async def list(self, ctx):\n        adminList = []\n\n        query1 = database.Administrators.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "74d4e69e35c7a3b41f87435a316c9542700b97ced22e5c28e404bdb8a0d68253"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 9,
                  "charOffset": 13420,
                  "charLength": 11,
                  "snippet": {
                    "text": "adminLEVEL1"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 419,
                  "startColumn": 1,
                  "charOffset": 13349,
                  "charLength": 129,
                  "snippet": {
                    "text": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL1 = \"\\n\".join(adminList)\n\n        adminList = []"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3b3218d160f36f4806ba39a58d5d16419568b8c6d1383a927a31f1e8a742918e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 9,
                  "charOffset": 13464,
                  "charLength": 9,
                  "snippet": {
                    "text": "adminList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 421,
                  "startColumn": 1,
                  "charOffset": 13412,
                  "charLength": 174,
                  "snippet": {
                    "text": "        adminLEVEL1 = \"\\n\".join(adminList)\n\n        adminList = []\n        query2 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 2"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8055d087c4e3bf535c3a35ab96031016434182cdbcf4eb14f4454faf1d9dfb6e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 431,
                  "startColumn": 9,
                  "charOffset": 13751,
                  "charLength": 11,
                  "snippet": {
                    "text": "adminLEVEL2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 429,
                  "startColumn": 1,
                  "charOffset": 13680,
                  "charLength": 129,
                  "snippet": {
                    "text": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL2 = \"\\n\".join(adminList)\n\n        adminList = []"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49812e6909496dd319a984f899ea277877460688b512b317ad9f882b087b2c5f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 433,
                  "startColumn": 9,
                  "charOffset": 13795,
                  "charLength": 9,
                  "snippet": {
                    "text": "adminList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 431,
                  "startColumn": 1,
                  "charOffset": 13743,
                  "charLength": 174,
                  "snippet": {
                    "text": "        adminLEVEL2 = \"\\n\".join(adminList)\n\n        adminList = []\n        query3 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 3"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "81bf593752296182d6f73a3187e3d7e7c24f69edc8764d9fae6a31a2b77f6564"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 9,
                  "charOffset": 14082,
                  "charLength": 11,
                  "snippet": {
                    "text": "adminLEVEL3"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 439,
                  "startColumn": 1,
                  "charOffset": 14011,
                  "charLength": 129,
                  "snippet": {
                    "text": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL3 = \"\\n\".join(adminList)\n\n        adminList = []"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72ec4ee0fdcd7ccb056265a5234f090b46bca80095c59d75b796697940d34355"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 9,
                  "charOffset": 14126,
                  "charLength": 9,
                  "snippet": {
                    "text": "adminList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 441,
                  "startColumn": 1,
                  "charOffset": 14074,
                  "charLength": 174,
                  "snippet": {
                    "text": "        adminLEVEL3 = \"\\n\".join(adminList)\n\n        adminList = []\n        query4 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 4"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "155a1f692ec4b2958f5767de2bb6c477bdaeed09f688b2bb8ad7fc1f5c17cba0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 9,
                  "charOffset": 14413,
                  "charLength": 11,
                  "snippet": {
                    "text": "adminLEVEL4"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 449,
                  "startColumn": 1,
                  "charOffset": 14342,
                  "charLength": 137,
                  "snippet": {
                    "text": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL4 = \"\\n\".join(adminList)\n\n        embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8cc036c12f06005f994c4e4552d86f136144718e9b6a9f5627169e3752f07bd0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 474,
                  "startColumn": 33,
                  "charOffset": 15292,
                  "charLength": 16,
                  "snippet": {
                    "text": "ID: discord.User"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 472,
                  "startColumn": 1,
                  "charOffset": 15225,
                  "charLength": 134,
                  "snippet": {
                    "text": "    @w.command()\n    @is_botAdmin4\n    async def remove(self, ctx, ID: discord.User):\n        database.db.connect(reuse_if_open=True)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c3d7417cf7bf50d8c709d6f5d83d5b639e0337057fa769a4587349dde682198"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 30,
                  "charOffset": 16189,
                  "charLength": 16,
                  "snippet": {
                    "text": "ID: discord.User"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 502,
                  "startColumn": 1,
                  "charOffset": 16125,
                  "charLength": 143,
                  "snippet": {
                    "text": "    @w.command()\n    @is_botAdmin4\n    async def add(self, ctx, ID: discord.User, level: int):\n        database.db.connect(reuse_if_open=True)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8a007998f3046f0efaf7add4fbd0208222729b0a2c9ea6024e803f084ab070c2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 549,
                  "startColumn": 13,
                  "charOffset": 17609,
                  "charLength": 9,
                  "snippet": {
                    "text": "runThread"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 547,
                  "startColumn": 1,
                  "charOffset": 17528,
                  "charLength": 158,
                  "snippet": {
                    "text": "            theproc = subprocess.Popen([sys.executable, \"main.py\"])\n\n            runThread = Thread(target=theproc.communicate)\n            runThread.start()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "978b7f877aedbf17484c6eca471d7d936b48ffa327f84930d7e4058245750963"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 9,
                  "charOffset": 1765,
                  "charLength": 7,
                  "snippet": {
                    "text": "HR_Role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 1679,
                  "charLength": 273,
                  "snippet": {
                    "text": "        organizationunit: Literal[\"Personal Account\", \"Team Account\"],\n    ):\n        HR_Role = discord.utils.get(interaction.user.guild.roles, id=HRID.r_hr_staff)\n        if HR_Role not in interaction.user.roles:\n            return await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "defa5f742c03dd8e08a45ac5ec18004665552054fe78618ca92a74de30111f40"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 9,
                  "charOffset": 3474,
                  "charLength": 7,
                  "snippet": {
                    "text": "HR_Role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3349,
                  "charLength": 307,
                  "snippet": {
                    "text": "    @app_commands.guilds(HRID.g_hr)\n    async def delete_gsuite(self, interaction: discord.Interaction, email: str):\n        HR_Role = discord.utils.get(interaction.guild.roles, id=HRID.r_hr_staff)\n        if HR_Role not in interaction.user.roles:\n            return await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17f9dd0359e11e274a374df503646fd3e54090bcc300fbddc2f18de8bb82a446"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 9,
                  "charOffset": 4512,
                  "charLength": 7,
                  "snippet": {
                    "text": "HR_Role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 4401,
                  "charLength": 293,
                  "snippet": {
                    "text": "    )\n    async def suspend_gsuite(self, interaction: discord.Interaction, email: str, suspend: bool):\n        HR_Role = discord.utils.get(interaction.guild.roles, id=HRID.r_hr_staff)\n        if HR_Role not in interaction.user.roles:\n            return await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4c0a0c71e88e6fe43f76f440c312f13c085bd64a47125df74589ffc91000945"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/RedirectService.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 29,
                  "charOffset": 1142,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 1028,
                  "charLength": 207,
                  "snippet": {
                    "text": "    @commands.command(alliases=[\"redirectremove\", \"removeredirect\"])\n    @is_botAdmin\n    async def rr(self, ctx, ID):\n        self.raOBJ.del_redirect(ID)\n        await ctx.send(f\"Redirect removed for {ID}\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "06fb2e7be57cd0b14d754b294d10be43f9d620e28383682a49c1696e175e104e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 15,
                  "charOffset": 3624,
                  "charLength": 9,
                  "snippet": {
                    "text": "techEmbed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 116,
                  "startColumn": 1,
                  "charOffset": 3569,
                  "charLength": 188,
                  "snippet": {
                    "text": "    @commands.command()\n    @is_botAdmin\n    async def techEmbed(self, ctx):\n        embed = discord.Embed(\n            title=\"Bot Developer Commissions\", color=discord.Color.brand_green()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "baa6ae7af00badd3bc84febd5eb9652e2989db924545af90f5e695d1f610dcc2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 15,
                  "charOffset": 6562,
                  "charLength": 19,
                  "snippet": {
                    "text": "autoUnarchiveThread"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 185,
                  "startColumn": 1,
                  "charOffset": 6517,
                  "charLength": 179,
                  "snippet": {
                    "text": "\n    @tasks.loop(seconds=60.0)\n    async def autoUnarchiveThread(self):\n        \"\"\"\n        Creates a task loop to make sure threads don't automatically archive due to inactivity."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "656eb8e78e2616c904a088083c92ce4d7a256db8564c43dd10ef4594947a5829"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 5,
                  "charOffset": 669,
                  "charLength": 14,
                  "snippet": {
                    "text": "showFutureTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 663,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cbb1cc7d09512f39f97ff7b033fe93fb87a790783bdbac4aca4c66758480bf78"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 5,
                  "charOffset": 950,
                  "charLength": 16,
                  "snippet": {
                    "text": "showTotalMinutes"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 944,
                  "charLength": 71,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1c59ed09debdc35e4c0de3282fce2d7f9d83ae434eb296d700f01a1a399bf2c5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 22,
                  "charOffset": 967,
                  "charLength": 17,
                  "snippet": {
                    "text": "dateObj: datetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 944,
                  "charLength": 71,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b7c471b510ae374f3a2634a2aeac60f958979cd296e902627badc2869537cad6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 5,
                  "charOffset": 1020,
                  "charLength": 9,
                  "snippet": {
                    "text": "deltaTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "charOffset": 987,
                  "charLength": 110,
                  "snippet": {
                    "text": "    now = datetime.now(EST)\n\n    deltaTime = now - dateObj\n\n    minutes = str(deltaTime.total_seconds() // 60)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2604bb9acfbc2eb66f07efe5a02d139119448b793e4668d42e9220ef794eb23d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 21,
                  "charOffset": 7343,
                  "charLength": 12,
                  "snippet": {
                    "text": "SelectedGame"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 235,
                  "startColumn": 1,
                  "charOffset": 7247,
                  "charLength": 223,
                  "snippet": {
                    "text": "                timeout = await view.wait()\n                if not timeout:\n                    SelectedGame = var.view_response\n                else:\n                    return await ctx.send(\"Timed out, try again later.\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "482cb7b24406227fc14fec1afa60dbb6ce444858bdd17d8573bcc15403b3e1a9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 17,
                  "charOffset": 7487,
                  "charLength": 6,
                  "snippet": {
                    "text": "GameID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 238,
                  "startColumn": 1,
                  "charOffset": 7376,
                  "charLength": 267,
                  "snippet": {
                    "text": "                else:\n                    return await ctx.send(\"Timed out, try again later.\")\n                GameID = GameDict[SelectedGame]\n                code = str(await self._create_invite(ctx.author.voice, GameID))\n                await ctx.send(\"Loading...\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "affd915ce3938691ce208f39ea2399d772b227672e6a195a51b7f8b042ec567c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 21,
                  "charOffset": 10072,
                  "charLength": 12,
                  "snippet": {
                    "text": "SelectedGame"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 296,
                  "startColumn": 1,
                  "charOffset": 9976,
                  "charLength": 223,
                  "snippet": {
                    "text": "                timeout = await view.wait()\n                if not timeout:\n                    SelectedGame = var.view_response\n                else:\n                    return await ctx.send(\"Timed out, try again later.\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b0589a7011bedd3cee74c67214f64d0d003079a5484ff2f1bd5974e64ddb58f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 17,
                  "charOffset": 10252,
                  "charLength": 6,
                  "snippet": {
                    "text": "GameID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 300,
                  "startColumn": 1,
                  "charOffset": 10127,
                  "charLength": 268,
                  "snippet": {
                    "text": "                    return await ctx.send(\"Timed out, try again later.\")\n                print(SelectedGame)\n                GameID = GameDict[SelectedGame]\n                code = str(await self._create_invite(ctx.author.voice, GameID))\n                await ctx.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0797bf54c80d6ed0030eddc456c358985ed8db9ebbc7ed7a53cc21115e3e02f7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 9,
                  "charOffset": 14582,
                  "charLength": 2,
                  "snippet": {
                    "text": "SB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 395,
                  "startColumn": 1,
                  "charOffset": 14479,
                  "charLength": 227,
                  "snippet": {
                    "text": "    async def rename(self, ctx, *, name=None):\n        database.db.connect(reuse_if_open=True)\n        SB = discord.utils.get(ctx.guild.roles, name=self.SB)\n        legend = discord.utils.get(ctx.guild.roles, name=self.Legend)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80674605c08065e17752cee8db2ef4953967efa293b5cb7b04034c710e7e789f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 9,
                  "charOffset": 14715,
                  "charLength": 2,
                  "snippet": {
                    "text": "MT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 398,
                  "startColumn": 1,
                  "charOffset": 14636,
                  "charLength": 259,
                  "snippet": {
                    "text": "        legend = discord.utils.get(ctx.guild.roles, name=self.Legend)\n\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ebd5c07d8d13a37e1209fc1533897d3206528891193fd1e97346bdef05f6ee40"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 9,
                  "charOffset": 14778,
                  "charLength": 3,
                  "snippet": {
                    "text": "MAT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 399,
                  "startColumn": 1,
                  "charOffset": 14706,
                  "charLength": 251,
                  "snippet": {
                    "text": "\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "000abaaadfa426903036a0cc5d3b4d6e72c941f7d054d3dea596c77669c32916"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 9,
                  "charOffset": 14842,
                  "charLength": 2,
                  "snippet": {
                    "text": "TT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 400,
                  "startColumn": 1,
                  "charOffset": 14707,
                  "charLength": 312,
                  "snippet": {
                    "text": "        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9bb30f4e78691ff0469e83c712ab65aae82040a8ea077ae18b85352d5df2e64"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 9,
                  "charOffset": 14904,
                  "charLength": 2,
                  "snippet": {
                    "text": "AT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 401,
                  "startColumn": 1,
                  "charOffset": 14770,
                  "charLength": 311,
                  "snippet": {
                    "text": "        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "19297688e7ea6dbc1ad4d06eb5315bb9cf20326a44e42d014a867bff70d744fc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 9,
                  "charOffset": 14966,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 402,
                  "startColumn": 1,
                  "charOffset": 14834,
                  "charLength": 248,
                  "snippet": {
                    "text": "        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "da178387bc7705a452a32a8a8786df09c0cb6b7fb632463bc7eb86170ee6d8c7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 9,
                  "charOffset": 15028,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 403,
                  "startColumn": 1,
                  "charOffset": 14896,
                  "charLength": 252,
                  "snippet": {
                    "text": "        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d4cc4889fb844be54896c6d2189b4f5c78ed6602db688337c91206aa65c0ecb2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 407,
                  "startColumn": 9,
                  "charOffset": 15091,
                  "charLength": 4,
                  "snippet": {
                    "text": "L120"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 405,
                  "startColumn": 1,
                  "charOffset": 15020,
                  "charLength": 260,
                  "snippet": {
                    "text": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6fdc74a9db493c5b18384849ee283ce0d606c8a4409d4cd8a6b0305456227f33"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 9,
                  "charOffset": 15157,
                  "charLength": 4,
                  "snippet": {
                    "text": "L110"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 406,
                  "startColumn": 1,
                  "charOffset": 15082,
                  "charLength": 262,
                  "snippet": {
                    "text": "\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "688abcbbb2e060392f0d2d3bfb15521ee100ef5f8eee1ed9a2caa02ad8725cfa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 9,
                  "charOffset": 15223,
                  "charLength": 4,
                  "snippet": {
                    "text": "L100"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 407,
                  "startColumn": 1,
                  "charOffset": 15083,
                  "charLength": 325,
                  "snippet": {
                    "text": "        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3dc3e77978c071dc7564acb5ceb90ce509ac5f26b18227abea2673e045c3f3f3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 9,
                  "charOffset": 15289,
                  "charLength": 3,
                  "snippet": {
                    "text": "L90"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 408,
                  "startColumn": 1,
                  "charOffset": 15149,
                  "charLength": 323,
                  "snippet": {
                    "text": "        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e09cccf2b67a89c4c77073929f89eb36976676ae0a24d629f3bf0e2039bb6cfb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 9,
                  "charOffset": 15353,
                  "charLength": 3,
                  "snippet": {
                    "text": "L80"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 409,
                  "startColumn": 1,
                  "charOffset": 15215,
                  "charLength": 321,
                  "snippet": {
                    "text": "        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e026b66af9fa38733218c88c9e0762f158f3db69085ca66971c0a02dbe915d69"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 9,
                  "charOffset": 15417,
                  "charLength": 3,
                  "snippet": {
                    "text": "L70"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 410,
                  "startColumn": 1,
                  "charOffset": 15281,
                  "charLength": 319,
                  "snippet": {
                    "text": "        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "02f53b3cbd7961d54b2771e5a5f322a016343437dafc97ce5c7bc0d08a5b2f48"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 9,
                  "charOffset": 15481,
                  "charLength": 3,
                  "snippet": {
                    "text": "L60"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 411,
                  "startColumn": 1,
                  "charOffset": 15345,
                  "charLength": 319,
                  "snippet": {
                    "text": "        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6258d2a7bfe530cc38fff318f89c37f59fd9b70b2e162086566b7c691bbdc9b8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 414,
                  "startColumn": 9,
                  "charOffset": 15545,
                  "charLength": 3,
                  "snippet": {
                    "text": "L50"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 412,
                  "startColumn": 1,
                  "charOffset": 15409,
                  "charLength": 256,
                  "snippet": {
                    "text": "        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e71add9fe22f5c6a1a9c8f1c7023fa59f6331d96434b94a270d4653e28acc573"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 9,
                  "charOffset": 15609,
                  "charLength": 3,
                  "snippet": {
                    "text": "L40"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 413,
                  "startColumn": 1,
                  "charOffset": 15473,
                  "charLength": 213,
                  "snippet": {
                    "text": "        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n\n        roleList = ["
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "46c5b4e0fd9e71dfa264050fa825b0fb29643459e5d4719e50f9e1e77a104ffb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 9,
                  "charOffset": 15674,
                  "charLength": 8,
                  "snippet": {
                    "text": "roleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 415,
                  "startColumn": 1,
                  "charOffset": 15601,
                  "charLength": 117,
                  "snippet": {
                    "text": "        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n\n        roleList = [\n            SB,\n            AT,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fe44240ef31f248b017e311f9bd59da5f9843e5a250db1ce4886d46f5467e6f1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 17,
                  "charOffset": 21668,
                  "charLength": 10,
                  "snippet": {
                    "text": "VCDatetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 567,
                  "startColumn": 1,
                  "charOffset": 21579,
                  "charLength": 201,
                  "snippet": {
                    "text": "                )\n                print(f\"T: {query.TutorBotSessionID}\")\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(\n                    query.datetimeObj\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0230353eb23517a8e76db7cb04e4856dc236acb1a01c60643f7d80ac5ebb62bd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 574,
                  "startColumn": 17,
                  "charOffset": 21854,
                  "charLength": 6,
                  "snippet": {
                    "text": "daySTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 572,
                  "startColumn": 1,
                  "charOffset": 21781,
                  "charLength": 186,
                  "snippet": {
                    "text": "\n                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aece4cba5ca1443a8746ee142632b6313d395c8986f141b6adc1b49580ee7e1e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 575,
                  "startColumn": 17,
                  "charOffset": 21907,
                  "charLength": 6,
                  "snippet": {
                    "text": "nowSTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 573,
                  "startColumn": 1,
                  "charOffset": 21782,
                  "charLength": 186,
                  "snippet": {
                    "text": "                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1d3f04dd3da77bd7948bec4ab79eaed909e28d29cfb954919f2d8336ef7167c9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 594,
                  "startColumn": 17,
                  "charOffset": 22729,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 592,
                  "startColumn": 1,
                  "charOffset": 22665,
                  "charLength": 223,
                  "snippet": {
                    "text": "\n                print(query.TutorBotSessionID)\n                tutorSession = database.TutorBot_Sessions.select().where(\n                    database.TutorBot_Sessions.SessionID == query.TutorBotSessionID\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d319939a7708c7285539e15d393ed41506c61ce8dac030abcc0593b1c62f63c9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 601,
                  "startColumn": 21,
                  "charOffset": 22993,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 599,
                  "startColumn": 1,
                  "charOffset": 22930,
                  "charLength": 169,
                  "snippet": {
                    "text": "\n                if tutorSession.exists():\n                    tutorSession = tutorSession.get()\n\n                    student = self.bot.get_user(tutorSession.StudentID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fe683f1b8fe74e707ef3cf8a785c06e3be66249b67b02e39897c31eadbc0a709"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 606,
                  "startColumn": 21,
                  "charOffset": 23189,
                  "charLength": 6,
                  "snippet": {
                    "text": "HOURCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 604,
                  "startColumn": 1,
                  "charOffset": 23100,
                  "charLength": 181,
                  "snippet": {
                    "text": "                    tutor = self.bot.get_user(tutorSession.TutorID)\n\n                    HOURCH = self.bot.get_channel(self.TutorLogID)\n\n                    hourlog = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b4195992a5e8bfe61a0a6939a04fa8c4ffae82ca783de3da253168e1b9372bf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 673,
                  "startColumn": 17,
                  "charOffset": 26144,
                  "charLength": 10,
                  "snippet": {
                    "text": "VCDatetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 671,
                  "startColumn": 1,
                  "charOffset": 26083,
                  "charLength": 188,
                  "snippet": {
                    "text": "                )\n                tag.save()\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(q.datetimeObj)\n\n                day, now = showTotalMinutes(VCDatetime)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "efba9d1764e1f35dc0d9a62e96dcb2bf88d40f63cad0e25695caf6a5b6416fcb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 676,
                  "startColumn": 17,
                  "charOffset": 26288,
                  "charLength": 6,
                  "snippet": {
                    "text": "daySTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 674,
                  "startColumn": 1,
                  "charOffset": 26215,
                  "charLength": 186,
                  "snippet": {
                    "text": "\n                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b30fa4521c5fa3ee192248ed1c5ae31c1da97521ef406f3a8a5cdf3b9b4b5e36"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 677,
                  "startColumn": 17,
                  "charOffset": 26341,
                  "charLength": 6,
                  "snippet": {
                    "text": "nowSTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 675,
                  "startColumn": 1,
                  "charOffset": 26216,
                  "charLength": 186,
                  "snippet": {
                    "text": "                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "259f8a7765570c5d7afae1f878f859760b293db669831900b77e265c4ed05115"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 694,
                  "startColumn": 17,
                  "charOffset": 27085,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 692,
                  "startColumn": 1,
                  "charOffset": 27025,
                  "charLength": 215,
                  "snippet": {
                    "text": "\n                print(q.TutorBotSessionID)\n                tutorSession = database.TutorBot_Sessions.select().where(\n                    database.TutorBot_Sessions.SessionID == q.TutorBotSessionID\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cfc5a84599806573b50323dccdaac63c91fc79ea4e3df1276ef16b3a99bed3b3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 698,
                  "startColumn": 21,
                  "charOffset": 27303,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 696,
                  "startColumn": 1,
                  "charOffset": 27223,
                  "charLength": 186,
                  "snippet": {
                    "text": "                )\n                if tutorSession.exists():\n                    tutorSession = tutorSession.get()\n\n                    student = self.bot.get_user(tutorSession.StudentID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "84a69f1f325cb61729dbd04cbdf4767e181c93492dced10dbe9b1c33c30d359a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 21,
                  "charOffset": 27499,
                  "charLength": 6,
                  "snippet": {
                    "text": "HOURCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 701,
                  "startColumn": 1,
                  "charOffset": 27410,
                  "charLength": 178,
                  "snippet": {
                    "text": "                    tutor = self.bot.get_user(tutorSession.TutorID)\n\n                    HOURCH = self.bot.get_user(self.TutorLogID)\n\n                    hourlog = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "98826591f2505652c83415be85f425293e63fd27d46a111525d39709fc611846"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 833,
                  "startColumn": 17,
                  "charOffset": 33199,
                  "charLength": 10,
                  "snippet": {
                    "text": "VCDatetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 831,
                  "startColumn": 1,
                  "charOffset": 33138,
                  "charLength": 188,
                  "snippet": {
                    "text": "                    .get()\n                )\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(q.datetimeObj)\n\n                day, now = showTotalMinutes(VCDatetime)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9237e60ceeca1de1d5e468efcb428c4bdf60a7d2ce576f8a8489224362a74045"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 9,
                  "charOffset": 35497,
                  "charLength": 3,
                  "snippet": {
                    "text": "BOT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 887,
                  "startColumn": 1,
                  "charOffset": 35435,
                  "charLength": 223,
                  "snippet": {
                    "text": "        member = ctx.guild.get_member(ctx.author.id)\n\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3a27746487425ba3d49ae345e459aee27e7f3d5fb3e89410abc905f8b5e34b2c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 890,
                  "startColumn": 9,
                  "charOffset": 35550,
                  "charLength": 5,
                  "snippet": {
                    "text": "OWNER"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 888,
                  "startColumn": 1,
                  "charOffset": 35488,
                  "charLength": 234,
                  "snippet": {
                    "text": "\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "12d2e57ec9c603cfa327aab54f06fa85544a854337b0f4bff5090af3697a2288"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 891,
                  "startColumn": 9,
                  "charOffset": 35601,
                  "charLength": 4,
                  "snippet": {
                    "text": "TMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 889,
                  "startColumn": 1,
                  "charOffset": 35489,
                  "charLength": 299,
                  "snippet": {
                    "text": "        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ad88fda8f89f99bf4f9466cbb22ce9177b533ad59ac6ee8322e88526f947aabd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 9,
                  "charOffset": 35667,
                  "charLength": 3,
                  "snippet": {
                    "text": "MOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 890,
                  "startColumn": 1,
                  "charOffset": 35542,
                  "charLength": 308,
                  "snippet": {
                    "text": "        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "978807f0e58b8e52d622fa2371fc7cce6d5b0e39faf8f3137384da443b8280c1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 893,
                  "startColumn": 9,
                  "charOffset": 35731,
                  "charLength": 4,
                  "snippet": {
                    "text": "SMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 891,
                  "startColumn": 1,
                  "charOffset": 35593,
                  "charLength": 319,
                  "snippet": {
                    "text": "        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "857d472a134109609fa4644e3f1716b9872947f9e2ef673e6e6bffcd832cd857"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 9,
                  "charOffset": 35797,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 892,
                  "startColumn": 1,
                  "charOffset": 35659,
                  "charLength": 315,
                  "snippet": {
                    "text": "        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4110029d6947ab16eca17aa5682d5b9704ee4de1856fb52a9f0dfb5f1b9a7d4d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 895,
                  "startColumn": 9,
                  "charOffset": 35859,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 893,
                  "startColumn": 1,
                  "charOffset": 35723,
                  "charLength": 252,
                  "snippet": {
                    "text": "        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "687bdc94f36b5f78a250e0b0a8e806ac9cf6557296f5629c7c1aae97662b7325"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 896,
                  "startColumn": 9,
                  "charOffset": 35921,
                  "charLength": 2,
                  "snippet": {
                    "text": "ST"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 894,
                  "startColumn": 1,
                  "charOffset": 35789,
                  "charLength": 259,
                  "snippet": {
                    "text": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "44062a5f62c6b7421021bbfab194de49e64dbdfb0d911c742c8075197b4bf778"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 898,
                  "startColumn": 9,
                  "charOffset": 35984,
                  "charLength": 2,
                  "snippet": {
                    "text": "SE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 896,
                  "startColumn": 1,
                  "charOffset": 35913,
                  "charLength": 269,
                  "snippet": {
                    "text": "        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "584807e596f0f4b8433d69293300609f6244c070de7733beda0bddb110742f31"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 899,
                  "startColumn": 9,
                  "charOffset": 36057,
                  "charLength": 2,
                  "snippet": {
                    "text": "BM"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 897,
                  "startColumn": 1,
                  "charOffset": 35975,
                  "charLength": 242,
                  "snippet": {
                    "text": "\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")\n        roles = [BM, SE, E, OWNER]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1a92a928bba3f05448229b02ba5a79c64d32e16978a7498bfff63d14f3871a9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 900,
                  "startColumn": 9,
                  "charOffset": 36126,
                  "charLength": 1,
                  "snippet": {
                    "text": "E"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 898,
                  "startColumn": 1,
                  "charOffset": 35976,
                  "charLength": 242,
                  "snippet": {
                    "text": "        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")\n        roles = [BM, SE, E, OWNER]\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb8fab9d6c8779d4ebde249ea1ce91770daed7e28b2c052375d4a5d76b456a0c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 932,
                  "startColumn": 21,
                  "charOffset": 37518,
                  "charLength": 4,
                  "snippet": {
                    "text": "LOCK"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 930,
                  "startColumn": 1,
                  "charOffset": 37462,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n                if query.exists():\n                    LOCK: database.VCChannelInfo = (\n                        database.VCChannelInfo.select()\n                        .where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d1815e3d2ad4c586c135efab274271e6b5a763b942d5fa5dceff11602c1cca23"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1011,
                  "startColumn": 9,
                  "charOffset": 41201,
                  "charLength": 2,
                  "snippet": {
                    "text": "TR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1009,
                  "startColumn": 1,
                  "charOffset": 41123,
                  "charLength": 213,
                  "snippet": {
                    "text": "    @commands.command()\n    async def settutor(self, ctx, tutorcode):\n        TR = discord.utils.get(ctx.guild.roles, name=self.TutorRole)\n\n        if TR not in ctx.author.roles or ctx.guild.id == StaffID.g_staff:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a21bccc1202ea85176854cc0470070790eda8eac6cab78d0bd1403d95302b964"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1028,
                  "startColumn": 13,
                  "charOffset": 41878,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1026,
                  "startColumn": 1,
                  "charOffset": 41814,
                  "charLength": 201,
                  "snippet": {
                    "text": "                return await ctx.send(embed=embed)\n\n            tutorSession = database.TutorBot_Sessions.select().where(\n                database.TutorBot_Sessions.SessionID == tutorcode\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2df865f3eb476b6bdf81a7733f2f979f19aee0c95ae22df6ee4adc64d961860c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1032,
                  "startColumn": 17,
                  "charOffset": 42070,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1030,
                  "startColumn": 1,
                  "charOffset": 42002,
                  "charLength": 174,
                  "snippet": {
                    "text": "            )\n            if tutorSession.exists():\n                tutorSession = tutorSession.get()\n                if member.voice.channel.category_id in self.categoryID:\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9b69c9d42a8c67b065766af73e408f55ff395622b05c67fdc96c190dba8f97b7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1120,
                  "startColumn": 21,
                  "charOffset": 46255,
                  "charLength": 4,
                  "snippet": {
                    "text": "LOCK"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1118,
                  "startColumn": 1,
                  "charOffset": 46199,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n                if query.exists():\n                    LOCK: database.VCChannelInfo = (\n                        database.VCChannelInfo.select()\n                        .where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e943aece8c4c35770aacbdc18d695e008a75143e764ab733ec70212f03479b5c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1200,
                  "startColumn": 33,
                  "charOffset": 49846,
                  "charLength": 10,
                  "snippet": {
                    "text": "typeAction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1198,
                  "startColumn": 1,
                  "charOffset": 49735,
                  "charLength": 253,
                  "snippet": {
                    "text": "    @commands.command()\n    @commands.cooldown(1, 5, commands.BucketType.user)\n    async def permit(self, ctx, typeAction, user: discord.Member = None):\n        database.db.connect(reuse_if_open=True)\n        member = ctx.guild.get_member(ctx.author.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c99a1d6436889a30bba8ec36e388dff4b3454df0ed4c65a7d396f64e815cc2ad"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1300,
                  "startColumn": 29,
                  "charOffset": 54730,
                  "charLength": 9,
                  "snippet": {
                    "text": "formatVer"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1298,
                  "startColumn": 1,
                  "charOffset": 54631,
                  "charLength": 184,
                  "snippet": {
                    "text": "                                    randomlist.append(x.display_name)\n\n                            formatVer = \"\\n\".join(randomlist)\n\n                            embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a782ef6a925fcb48e108c625a67f5ffb38c8a8183a89b105128bdfae83e6093b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1375,
                  "startColumn": 9,
                  "charOffset": 58621,
                  "charLength": 2,
                  "snippet": {
                    "text": "MT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1373,
                  "startColumn": 1,
                  "charOffset": 58559,
                  "charLength": 242,
                  "snippet": {
                    "text": "        member = ctx.guild.get_member(ctx.author.id)\n\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b4048d92c662eef7ececf48d8c4e89fb9a6e824e553dafde2c190370f4a260f0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1376,
                  "startColumn": 9,
                  "charOffset": 58684,
                  "charLength": 3,
                  "snippet": {
                    "text": "MAT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1374,
                  "startColumn": 1,
                  "charOffset": 58612,
                  "charLength": 251,
                  "snippet": {
                    "text": "\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f0d8a93061e0603df91999ca305d5dd71e1c309d0bd17477f4ab6f09efd8fbc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1377,
                  "startColumn": 9,
                  "charOffset": 58748,
                  "charLength": 2,
                  "snippet": {
                    "text": "TT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1375,
                  "startColumn": 1,
                  "charOffset": 58613,
                  "charLength": 312,
                  "snippet": {
                    "text": "        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d19a8e0773db85fbc8eca53afaecf719d588a78f42648690842df86d63e2ec13"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1378,
                  "startColumn": 9,
                  "charOffset": 58810,
                  "charLength": 2,
                  "snippet": {
                    "text": "AT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1376,
                  "startColumn": 1,
                  "charOffset": 58676,
                  "charLength": 311,
                  "snippet": {
                    "text": "        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "351b45b3ebfb04c7017d2b9092f76e6e7b0ebcdd652b96cb2f35a0494b26792d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1379,
                  "startColumn": 9,
                  "charOffset": 58872,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1377,
                  "startColumn": 1,
                  "charOffset": 58740,
                  "charLength": 248,
                  "snippet": {
                    "text": "        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c065a41a31550e899deb999a64901326182795f7119b6392a72184c96d07c518"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1380,
                  "startColumn": 9,
                  "charOffset": 58934,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1378,
                  "startColumn": 1,
                  "charOffset": 58802,
                  "charLength": 231,
                  "snippet": {
                    "text": "        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        roleList = [MT, MAT, TT, AT, VP, CO]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d7c0e60542c5ef1bc2135406d63121e124874481041fa982d9faa9f3fc4ff439"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1382,
                  "startColumn": 9,
                  "charOffset": 58997,
                  "charLength": 8,
                  "snippet": {
                    "text": "roleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1380,
                  "startColumn": 1,
                  "charOffset": 58926,
                  "charLength": 143,
                  "snippet": {
                    "text": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        roleList = [MT, MAT, TT, AT, VP, CO]\n\n        voice_state = member.voice"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c64a3c15ca6cb087b1264faccbecc48aa17735e5f4fb6c5dfab9498324bf8035"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1414,
                  "startColumn": 25,
                  "charOffset": 60376,
                  "charLength": 10,
                  "snippet": {
                    "text": "voiceLIMIT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1412,
                  "startColumn": 1,
                  "charOffset": 60292,
                  "charLength": 228,
                  "snippet": {
                    "text": "                if query.exists():\n                    try:\n                        voiceLIMIT = int(new_voice_limit)\n                    except:\n                        return await ctx.send(f\"{Emoji.deny} Not a valid number!\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b4314545b5753462e7fcb579d2d9b5d6283c20565941b3ce9c95ba0bf58767ea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1578,
                  "startColumn": 15,
                  "charOffset": 68244,
                  "charLength": 7,
                  "snippet": {
                    "text": "startVC"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1576,
                  "startColumn": 1,
                  "charOffset": 68188,
                  "charLength": 144,
                  "snippet": {
                    "text": "\n    @commands.command(aliases=[\"start\"])\n    async def startVC(self, ctx):\n        embed = discord.Embed(\n            title=\"Private Channels\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d8b77e94a7c9df135e3c40caf328d12326faf9a94e02d64919c1ac672f0ae7bc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 5,
                  "charOffset": 567,
                  "charLength": 14,
                  "snippet": {
                    "text": "showFutureTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 561,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6ccdffefa5dabbe951cc2ad36395ee2e8a3a5be6210b298f4c2747224b7dac56"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 5,
                  "charOffset": 825,
                  "charLength": 16,
                  "snippet": {
                    "text": "showTotalMinutes"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 819,
                  "charLength": 71,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "345726ba77ca0c9389bab31da2906b5db4ff00aac8a562abb7de120dff08b486"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 22,
                  "charOffset": 842,
                  "charLength": 17,
                  "snippet": {
                    "text": "dateObj: datetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 819,
                  "charLength": 71,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2dbd238779f9cd657436e40df234857a87f6fdebd73fff3266cd005a8ac523b5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 5,
                  "charOffset": 895,
                  "charLength": 9,
                  "snippet": {
                    "text": "deltaTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 862,
                  "charLength": 106,
                  "snippet": {
                    "text": "    now = datetime.now(EST)\n\n    deltaTime = now - dateObj\n\n    totalmin = deltaTime.total_seconds() // 60"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3577fde9811737bde416756247dce673334abb6ead5ca0ce717e87c6baa57740"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 5,
                  "charOffset": 1001,
                  "charLength": 12,
                  "snippet": {
                    "text": "getConsoleCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 995,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d6e893e7d8f71b35deb07293fc5c45d8f38c65dd595dd0a707aae6f6e38e8952"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 5,
                  "charOffset": 1154,
                  "charLength": 10,
                  "snippet": {
                    "text": "ColumnDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1060,
                  "charLength": 164,
                  "snippet": {
                    "text": "        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n    )\n    ColumnDict = {\n        0: q.ch_tv_console,\n        1: q.ch_tv_startvc,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "60b8563b9a745ce04502176f85e7c80738dedb05f042f31e985380c4b4a42fc4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 9,
                  "charOffset": 3286,
                  "charLength": 10,
                  "snippet": {
                    "text": "lobbyStart"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "charOffset": 3179,
                  "charLength": 229,
                  "snippet": {
                    "text": "        database.db.connect(reuse_if_open=True)\n        print(self.LobbyStartIDs[member.guild.id])\n        lobbyStart = member.guild.get_channel(self.LobbyStartIDs[member.guild.id])\n        if lobbyStart == None:\n            try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "32ad0acac938f7d5760a5ee9286e91cef521ddfdd28494b527fdaf72e62c380f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 17,
                  "charOffset": 3425,
                  "charLength": 10,
                  "snippet": {
                    "text": "lobbyStart"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 3361,
                  "charLength": 201,
                  "snippet": {
                    "text": "        if lobbyStart == None:\n            try:\n                lobbyStart = self.bot.get_channel(self.LobbyStartIDs[member.guild.id])\n            except Exception as e:\n                return print(e)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4a8b03daacc75979605295cba6e5d41d1375694e902fb15a282957c44fe0e18"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 13,
                  "charOffset": 3895,
                  "charLength": 11,
                  "snippet": {
                    "text": "acadChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 143,
                  "startColumn": 1,
                  "charOffset": 3871,
                  "charLength": 214,
                  "snippet": {
                    "text": "        ):\n\n            acadChannel = self.bot.get_channel(self.channel_id[member.guild.id])\n            query = database.VCChannelInfo.select().where(\n                (database.VCChannelInfo.authorID == member.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d25d386ea7dc794f633f82fec35f4fb766d9952d1e1ad31140b8b4fcb1e0e1a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 13,
                  "charOffset": 4264,
                  "charLength": 11,
                  "snippet": {
                    "text": "ignoreQuery"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 4160,
                  "charLength": 284,
                  "snippet": {
                    "text": "                & (database.VCChannelInfo.GuildID == before.channel.guild.id)\n            )\n            ignoreQuery = database.IgnoreThis.select().where(\n                (database.IgnoreThis.authorID == member.id)\n                & (database.IgnoreThis.channelID == before.channel.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b25401173f5474ce71f0b6e472d210e5f93d0dca6db5c16b8d001fbff77eecc3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 21,
                  "charOffset": 5610,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 179,
                  "startColumn": 1,
                  "charOffset": 5551,
                  "charLength": 180,
                  "snippet": {
                    "text": "                )\n                try:\n                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1c2be26706167ee756b93a6ff765e0d77528e08216cffe89e3f79c834844a713"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 21,
                  "charOffset": 5712,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 181,
                  "startColumn": 1,
                  "charOffset": 5590,
                  "charLength": 204,
                  "snippet": {
                    "text": "                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None\n\n                if query.ChannelID == str(before.channel.id):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3f267a14e0f3ecc19029b778db00b9391eb0c49a13590439639a1ef801aafe4f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "charOffset": 8593,
                  "charLength": 10,
                  "snippet": {
                    "text": "VCDatetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 240,
                  "startColumn": 1,
                  "charOffset": 8496,
                  "charLength": 233,
                  "snippet": {
                    "text": "                                .get()\n                            )\n                            VCDatetime = pytz.timezone(\"America/New_York\").localize(\n                                query.datetimeObj\n                            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73f93c8e22090e7add65790ba05e927c8869cb1743f6f016c32e0dbfe6a4d295"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 29,
                  "charOffset": 8827,
                  "charLength": 6,
                  "snippet": {
                    "text": "daySTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 245,
                  "startColumn": 1,
                  "charOffset": 8730,
                  "charLength": 192,
                  "snippet": {
                    "text": "\n                            day, now = showTotalMinutes(VCDatetime)\n                            daySTR = int(VCDatetime.timestamp())\n                            nowSTR = int(now.timestamp())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa7aa127a111c50efb53cf24b07781693d0ccc8e02657f9a7696743643f6fc28"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 29,
                  "charOffset": 8892,
                  "charLength": 6,
                  "snippet": {
                    "text": "nowSTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 246,
                  "startColumn": 1,
                  "charOffset": 8731,
                  "charLength": 243,
                  "snippet": {
                    "text": "                            day, now = showTotalMinutes(VCDatetime)\n                            daySTR = int(VCDatetime.timestamp())\n                            nowSTR = int(now.timestamp())\n\n                            query.delete_instance()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "011aad1e951ddf792bcf61ca2f75052ac844b97d15bd9af6d46500a095187326"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 33,
                  "charOffset": 10122,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "charOffset": 9984,
                  "charLength": 310,
                  "snippet": {
                    "text": "                                    content=member.mention, embed=embed\n                                )\n                                tutorSession = (\n                                    database.TutorBot_Sessions.select().where(\n                                        database.TutorBot_Sessions.SessionID"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a9a09bd072c6e0d5f315c4d5a1ab0bd371ed5b42eefd657f5b4c560dd06a6f9b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 37,
                  "charOffset": 10529,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 277,
                  "startColumn": 1,
                  "charOffset": 10434,
                  "charLength": 217,
                  "snippet": {
                    "text": "                                if tutorSession.exists():\n\n                                    tutorSession = tutorSession.get()\n\n                                    student = self.bot.get_user(tutorSession.StudentID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78ad3b18d242a5957b5eaa5c308159adfdbb533195ae9db9a696e20b840dc9ec"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 37,
                  "charOffset": 10772,
                  "charLength": 6,
                  "snippet": {
                    "text": "HOURCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 281,
                  "startColumn": 1,
                  "charOffset": 10564,
                  "charLength": 316,
                  "snippet": {
                    "text": "                                    student = self.bot.get_user(tutorSession.StudentID)\n                                    tutor = self.bot.get_user(tutorSession.TutorID)\n                                    HOURCH = self.bot.get_channel(self.TutorLogID)\n\n                                    hourlog = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b592e34bbfb5390f055ebb2ba37be05ab4eb9b2735040802418f1c8969d25d26"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 13,
                  "charOffset": 13726,
                  "charLength": 11,
                  "snippet": {
                    "text": "acadChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 333,
                  "startColumn": 1,
                  "charOffset": 13672,
                  "charLength": 249,
                  "snippet": {
                    "text": "            and not member.bot\n        ):\n            acadChannel = self.bot.get_channel(self.LobbyStartIDs[member.guild.id])\n            print(acadChannel, after.channel.guild.id)\n            SB = discord.utils.get(member.guild.roles, name=self.SB)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3565f5b4745ddf6f8db8f7fe4da4d4e27d957d60f5da1e04bcf2691383edeef2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 13,
                  "charOffset": 13865,
                  "charLength": 2,
                  "snippet": {
                    "text": "SB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 335,
                  "startColumn": 1,
                  "charOffset": 13714,
                  "charLength": 285,
                  "snippet": {
                    "text": "            acadChannel = self.bot.get_channel(self.LobbyStartIDs[member.guild.id])\n            print(acadChannel, after.channel.guild.id)\n            SB = discord.utils.get(member.guild.roles, name=self.SB)\n\n            legend = discord.utils.get(member.guild.roles, name=self.Legend)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb0f40dd8e2cc376993ca0ed083b78452da3dd54c1397f5140aa0f752598f540"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 13,
                  "charOffset": 14013,
                  "charLength": 2,
                  "snippet": {
                    "text": "MT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 339,
                  "startColumn": 1,
                  "charOffset": 13923,
                  "charLength": 287,
                  "snippet": {
                    "text": "            legend = discord.utils.get(member.guild.roles, name=self.Legend)\n\n            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "932d22ed15ff8369516a1b20ef26542c7208684b86ef5b8ef24bb2941da33c70"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 13,
                  "charOffset": 14083,
                  "charLength": 3,
                  "snippet": {
                    "text": "MAT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 340,
                  "startColumn": 1,
                  "charOffset": 14000,
                  "charLength": 279,
                  "snippet": {
                    "text": "\n            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "845243c0dbff55c48d4f4853275ab2de7c7f9ba3a7833289d81c2084c8a6c8eb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 13,
                  "charOffset": 14154,
                  "charLength": 2,
                  "snippet": {
                    "text": "TT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 341,
                  "startColumn": 1,
                  "charOffset": 14001,
                  "charLength": 347,
                  "snippet": {
                    "text": "            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b22823eee82ea78e921ed4aa4cbb9b613ca5366d007f7d5dcb054d3b75695d54"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 13,
                  "charOffset": 14223,
                  "charLength": 2,
                  "snippet": {
                    "text": "AT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 342,
                  "startColumn": 1,
                  "charOffset": 14071,
                  "charLength": 346,
                  "snippet": {
                    "text": "            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "143915d1081a1532cd4bfbe7a9cc4b141f7f28b8f103c787a9ca8588226587a1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 13,
                  "charOffset": 14292,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 343,
                  "startColumn": 1,
                  "charOffset": 14142,
                  "charLength": 276,
                  "snippet": {
                    "text": "            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "610641a6f54a61684a851776fc21bb303487ab89c634e4f1d272ff5668824ce9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 13,
                  "charOffset": 14361,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 344,
                  "startColumn": 1,
                  "charOffset": 14211,
                  "charLength": 268,
                  "snippet": {
                    "text": "            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)\n\n            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ca5eb71a7e7832dc9a49c8271cb50b3d2666b634db2ac9c10b529a42229f6c2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 13,
                  "charOffset": 14431,
                  "charLength": 8,
                  "snippet": {
                    "text": "roleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 346,
                  "startColumn": 1,
                  "charOffset": 14349,
                  "charLength": 214,
                  "snippet": {
                    "text": "            CO = discord.utils.get(member.guild.roles, name=self.CO)\n\n            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]\n\n            TutorRole = discord.utils.get(member.guild.roles, name=self.TutorRole)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e8ed6c75c89d9d14cb4c2a9a136a202b06bd56f6eb7f1c6901381c012dd6e362"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 13,
                  "charOffset": 14493,
                  "charLength": 9,
                  "snippet": {
                    "text": "TutorRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 348,
                  "startColumn": 1,
                  "charOffset": 14419,
                  "charLength": 187,
                  "snippet": {
                    "text": "            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]\n\n            TutorRole = discord.utils.get(member.guild.roles, name=self.TutorRole)\n\n            category = discord.utils.get("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a44c0911238f270c89ed0d1c1694bc752541ec41eba1b564872f8341a74c858d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 17,
                  "charOffset": 15578,
                  "charLength": 13,
                  "snippet": {
                    "text": "moveToChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 369,
                  "startColumn": 1,
                  "charOffset": 15517,
                  "charLength": 158,
                  "snippet": {
                    "text": "            )\n            if query.exists():\n                moveToChannel = (\n                    database.VCChannelInfo.select()\n                    .where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b819448917e91c826cb54d93382f12d86e1be8428dfebcbfc714e4260353186a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 21,
                  "charOffset": 16391,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 385,
                  "startColumn": 1,
                  "charOffset": 16332,
                  "charLength": 204,
                  "snippet": {
                    "text": "                )\n                try:\n                    tutorChannel = self.bot.get_channel(int(moveToChannel.ChannelID))\n                    await member.move_to(\n                        tutorChannel,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "353924b7ccae6efb699c24a9fc9af4c8a4752c3ecd9e2803760455845d913091"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 15,
                  "charOffset": 675,
                  "charLength": 12,
                  "snippet": {
                    "text": "TTSWeekCheck"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 632,
                  "charLength": 146,
                  "snippet": {
                    "text": "\n    @tasks.loop(seconds=10)\n    async def TTSWeekCheck(self):\n        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e9af0a9d050d039a61e789e2372f08047b7d37220d82a6caa34e9d2397d8ed7f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 9,
                  "charOffset": 749,
                  "charLength": 10,
                  "snippet": {
                    "text": "weekdayNow"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 661,
                  "charLength": 147,
                  "snippet": {
                    "text": "    async def TTSWeekCheck(self):\n        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()\n        timeNow = now.time()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fb5783df90d0e9a6e317e2a0f1d16a21cb01345b51523042dce7a890c58005f7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 9,
                  "charOffset": 787,
                  "charLength": 7,
                  "snippet": {
                    "text": "timeNow"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "charOffset": 695,
                  "charLength": 168,
                  "snippet": {
                    "text": "        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()\n        timeNow = now.time()\n\n        queryLeaderboard = StudyVCLeaderboard.select()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8793f632f7785bdd80b982b8df225fb22a97896c21e83c5bfa49d34f63a12331"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 9,
                  "charOffset": 817,
                  "charLength": 16,
                  "snippet": {
                    "text": "queryLeaderboard"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 779,
                  "charLength": 144,
                  "snippet": {
                    "text": "        timeNow = now.time()\n\n        queryLeaderboard = StudyVCLeaderboard.select()\n        entries = [entry.id for entry in queryLeaderboard]\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9618d2539ddc95c9af694fc7ae8e4fb404f58f19365b9ad4c86bffe862bd294b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 13,
                  "charOffset": 1098,
                  "charLength": 9,
                  "snippet": {
                    "text": "lastReset"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 1034,
                  "charLength": 181,
                  "snippet": {
                    "text": "            and timeNow >= self.midnight\n        ):\n            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "13d98c575282fe4ac4c2e683579f49a172713f6fb7ce6406110bc908c1be5b1f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 17,
                  "charOffset": 1164,
                  "charLength": 16,
                  "snippet": {
                    "text": "queryLeaderboard"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1086,
                  "charLength": 198,
                  "snippet": {
                    "text": "            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(\n                    StudyVCLeaderboard.id == entry\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "13ec1576fa5f5f90386d7eb9ffd2e47f89165cbe0dd2d61ec9eb164b2d496e16"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 17,
                  "charOffset": 1301,
                  "charLength": 16,
                  "snippet": {
                    "text": "queryLeaderboard"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 1216,
                  "charLength": 211,
                  "snippet": {
                    "text": "                    StudyVCLeaderboard.id == entry\n                )\n                queryLeaderboard = queryLeaderboard.get()\n                queryLeaderboard.TTSWeek = 0\n                queryLeaderboard.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d89095f80df152915904854d477ec82ec89edd1c15b24d2699b94d6f7e31fc93"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 5,
                  "charOffset": 1016,
                  "charLength": 14,
                  "snippet": {
                    "text": "showFutureTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1010,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ec46b2a8e98423461a73b8a989f8a5420f74861b9b81808951fea84e2e6d1867"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 5,
                  "charOffset": 1274,
                  "charLength": 16,
                  "snippet": {
                    "text": "showTotalMinutes"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 1268,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7bd85cedf0ac575874abf6bee0e5cf5f926eb4a906b8a860e78467eb5d028922"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 22,
                  "charOffset": 1291,
                  "charLength": 17,
                  "snippet": {
                    "text": "dateObj: datetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 1268,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "75c9c806e2cf9951b58b240aa7ceacef098c0acd82576bf5bc44681d530c95f7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 5,
                  "charOffset": 1343,
                  "charLength": 7,
                  "snippet": {
                    "text": "dateObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 1270,
                  "charLength": 165,
                  "snippet": {
                    "text": "def showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)\n\n    deltaTime = now - dateObj"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "802e61d66a6f1691b54365d7b7374632373ce25a9b0644690811f0339c3f3de9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 5,
                  "charOffset": 1410,
                  "charLength": 9,
                  "snippet": {
                    "text": "deltaTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 1339,
                  "charLength": 144,
                  "snippet": {
                    "text": "    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)\n\n    deltaTime = now - dateObj\n\n    totalmin = deltaTime.total_seconds() // 60"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fe4d3dd2e7797c2acb478926cced7497b5ec1eeefed58b783fef0619baade55c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 5,
                  "charOffset": 1516,
                  "charLength": 16,
                  "snippet": {
                    "text": "_getXPForNextLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 1510,
                  "charLength": 96,
                  "snippet": {
                    "text": "\n\ndef _getXPForNextLvl(lvl: int):\n    \"\"\"\n    Get the XP the user needs to reach the next level."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a4b1f77a0b1a47dea5fd5484930dd869b079fa5f9d6e8a3514842c88876d1e0e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 5,
                  "charOffset": 1694,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 1681,
                  "charLength": 79,
                  "snippet": {
                    "text": "    \"\"\"\n\n    xpNeeded = (5 * lvl * lvl) + (50 * lvl) + 100\n\n    return xpNeeded"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5dbc76af2fbd342309279a300d4ba2a3903710c26b36bfa5b2643596c930bc7b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 5,
                  "charOffset": 1767,
                  "charLength": 12,
                  "snippet": {
                    "text": "_shortNumber"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "charOffset": 1761,
                  "charLength": 107,
                  "snippet": {
                    "text": "\n\ndef _shortNumber(number: int) -> str:\n    \"\"\"\n    Shorts a number and adds the number abbreviation to it."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c650bd866ef5d00da3d277f3b0caae583314e2cd20c51816eb6d55746a57e58e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 5,
                  "charOffset": 2115,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2102,
                  "charLength": 64,
                  "snippet": {
                    "text": "    \"\"\"\n\n    numberStr = ...  # type: str\n\n    if number < 1000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "acd56a8cefe4920f922dc55a42776704d9e6c7e8ec127397ff49c5cb036bffdd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 9,
                  "charOffset": 2175,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 2144,
                  "charLength": 82,
                  "snippet": {
                    "text": "\n    if number < 1000:\n        numberStr = f\"{number}\"\n\n    elif number < 1000000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8649a5e47a1975f970d8c418ef397eab22f6bd4c07a51b9db3c68663d9ca4382"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 9,
                  "charOffset": 2292,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 2227,
                  "charLength": 120,
                  "snippet": {
                    "text": "        number /= 1000\n        number = round(number, 2)\n        numberStr = f\"{number}K\"\n\n    elif number < 1000000000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8dd3ed34f5d1181314239364226f902b4ce3445b9621f0262ebbbadb0efb4baf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 9,
                  "charOffset": 2416,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 2348,
                  "charLength": 126,
                  "snippet": {
                    "text": "        number /= 1000000\n        number = round(number, 2)\n        numberStr = f\"{number}M\"\n\n    elif number < 1000000000000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ecd2687f973d72c6ea8745eeea7e095e1c3dc6c16f29cb4b3a3f0d88aa85fe55"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 9,
                  "charOffset": 2546,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 2475,
                  "charLength": 132,
                  "snippet": {
                    "text": "        number /= 1000000000\n        number = round(number, 2)\n        numberStr = f\"{number}B\"\n\n    elif number < 1000000000000000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ad16b63a49520cb72179c3edde8f146ffaf42ce25b9db22c56948faf35e6eec"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 9,
                  "charOffset": 2682,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 116,
                  "startColumn": 1,
                  "charOffset": 2608,
                  "charLength": 109,
                  "snippet": {
                    "text": "        number /= 1000000000000\n        number = round(number, 2)\n        numberStr = f\"{number}T\"\n\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df5a5e57bb7a4ee062521707ab820c96de04e482e0e5e5aedcbfb4af8f2cca52"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 11,
                  "charOffset": 2809,
                  "charLength": 22,
                  "snippet": {
                    "text": "addLeaderboardProgress"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 2797,
                  "charLength": 198,
                  "snippet": {
                    "text": "\n\nasync def addLeaderboardProgress(member: discord.Member):\n    \"\"\"\n    Updates the data in the database table `StudyVCLeaderboard` of a specific member and adds level roles to the member if needed."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "451c74147523b1684a00074d18595c321e9309b491242644a6f1effabbb04608"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 5,
                  "charOffset": 3147,
                  "charLength": 11,
                  "snippet": {
                    "text": "xpPerMinute"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 132,
                  "startColumn": 1,
                  "charOffset": 3067,
                  "charLength": 152,
                  "snippet": {
                    "text": "    :return: Whenever the user has been found in the database: bool\n    \"\"\"\n    xpPerMinute = 30\n\n    StudySessionQ = database.StudyVCDB.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "208aae37093e41bb47f6fea1fa541c94b26f1942c2eae303c55cdf5e59a31bb7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 5,
                  "charOffset": 3169,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 1,
                  "charOffset": 3143,
                  "charLength": 132,
                  "snippet": {
                    "text": "    xpPerMinute = 30\n\n    StudySessionQ = database.StudyVCDB.select().where(\n        database.StudyVCDB.discordID == member.id\n    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9227e3b0ebd7d64bd000f026cf5894cadde06ee922e839b4206204f05b1e97d0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 9,
                  "charOffset": 3315,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 138,
                  "startColumn": 1,
                  "charOffset": 3270,
                  "charLength": 217,
                  "snippet": {
                    "text": "    )\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "382631f36b555dfcf189a5dfb012db7c21283fd2d3a7a3cb05619ddb76026e74"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 9,
                  "charOffset": 3425,
                  "charLength": 16,
                  "snippet": {
                    "text": "leaderboardQuery"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 140,
                  "startColumn": 1,
                  "charOffset": 3307,
                  "charLength": 253,
                  "snippet": {
                    "text": "        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where(\n            database.StudyVCLeaderboard.discordID == member.id\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2de44c1b9fdc4d8942147ab7732ecc038ba220324cd71d368c2dcf8d2bf41641"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 9,
                  "charOffset": 3570,
                  "charLength": 8,
                  "snippet": {
                    "text": "isNewLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 1,
                  "charOffset": 3551,
                  "charLength": 127,
                  "snippet": {
                    "text": "        )\n\n        isNewLvl = False\n        if leaderboardQuery.exists():\n            leaderboardQuery = leaderboardQuery.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a548fb391f700312b5e34fba428a7be61d9195a30128bc5a7ab5e35aed72d434"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 13,
                  "charOffset": 3637,
                  "charLength": 16,
                  "snippet": {
                    "text": "leaderboardQuery"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 146,
                  "startColumn": 1,
                  "charOffset": 3562,
                  "charLength": 258,
                  "snippet": {
                    "text": "        isNewLvl = False\n        if leaderboardQuery.exists():\n            leaderboardQuery = leaderboardQuery.get()\n            leaderboardQuery.TTS = totalmin + leaderboardQuery.TTS\n            leaderboardQuery.TTSWeek = totalmin + leaderboardQuery.TTSWeek"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d76db4b620648d5049c6283c7d2b58e008f1ff4cbac7fcf7321c9b4b13f5324d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 13,
                  "charOffset": 3914,
                  "charLength": 10,
                  "snippet": {
                    "text": "currentLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 3821,
                  "charLength": 226,
                  "snippet": {
                    "text": "            leaderboardQuery.totalSessions = leaderboardQuery.totalSessions + 1\n\n            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d30926ec58d587942b03ee9106b278d256cf6a640fbef3a007fef4302cf9d78c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 13,
                  "charOffset": 3962,
                  "charLength": 9,
                  "snippet": {
                    "text": "currentXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 152,
                  "startColumn": 1,
                  "charOffset": 3901,
                  "charLength": 147,
                  "snippet": {
                    "text": "\n            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "277967b790c044962bed51b927afe15a027abd78775523576492d24e2ecf5929"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 13,
                  "charOffset": 4006,
                  "charLength": 14,
                  "snippet": {
                    "text": "currentTotalXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 153,
                  "startColumn": 1,
                  "charOffset": 3902,
                  "charLength": 198,
                  "snippet": {
                    "text": "            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP\n\n            xpNeeded = _getXPForNextLvl(currentLvl)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dd54698be4328b746ae1949f7e09d9468861e0c90acf11579a57235ccd0a97bf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 13,
                  "charOffset": 4061,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 155,
                  "startColumn": 1,
                  "charOffset": 3994,
                  "charLength": 153,
                  "snippet": {
                    "text": "            currentTotalXP = leaderboardQuery.totalXP\n\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "168da3d46bbd8c0331b38d68732ab8a8e76236b5bbf217c9739eb2db030b7ba5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 13,
                  "charOffset": 4113,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpEarned"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 156,
                  "startColumn": 1,
                  "charOffset": 4048,
                  "charLength": 140,
                  "snippet": {
                    "text": "\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6e735e019663c9b2307353c164281b81efc47e350e0bfc4d91bb4e0480bc889a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 13,
                  "charOffset": 4160,
                  "charLength": 5,
                  "snippet": {
                    "text": "newXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 158,
                  "startColumn": 1,
                  "charOffset": 4101,
                  "charLength": 170,
                  "snippet": {
                    "text": "            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5618bd2e11d99cf1435c397b8c841751b6e5d538d11ba3b3b604de8ce61a1212"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 13,
                  "charOffset": 4201,
                  "charLength": 10,
                  "snippet": {
                    "text": "newTotalXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 159,
                  "startColumn": 1,
                  "charOffset": 4147,
                  "charLength": 125,
                  "snippet": {
                    "text": "\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "94a4db10486279230b7c684d05c3a800899bd84224c0d6873a58ea6d5d48739b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 13,
                  "charOffset": 4252,
                  "charLength": 6,
                  "snippet": {
                    "text": "newLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "charOffset": 4148,
                  "charLength": 158,
                  "snippet": {
                    "text": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4b7e564a7b401787543d3f3bb5bdf4381616908fa4d6cfc6c0eb53f377f5ab80"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 17,
                  "charOffset": 4324,
                  "charLength": 8,
                  "snippet": {
                    "text": "isNewLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 164,
                  "startColumn": 1,
                  "charOffset": 4273,
                  "charLength": 149,
                  "snippet": {
                    "text": "            if newXP >= xpNeeded:\n\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d0f4f7ef8c362463889edb4c8e0dc39851a275871e5c821f8bbceeac411deadf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 17,
                  "charOffset": 4356,
                  "charLength": 11,
                  "snippet": {
                    "text": "newXPNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 165,
                  "startColumn": 1,
                  "charOffset": 4307,
                  "charLength": 156,
                  "snippet": {
                    "text": "\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:\n                    newXP -= newXPNeeded"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "910fd3bfe1bb7e568b93f706e225b233efca7249c0fb44f7dd1495a26e8fa6d8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 21,
                  "charOffset": 4516,
                  "charLength": 11,
                  "snippet": {
                    "text": "newXPNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 169,
                  "startColumn": 1,
                  "charOffset": 4423,
                  "charLength": 172,
                  "snippet": {
                    "text": "                    newXP -= newXPNeeded\n                    newLvl += 1\n                    newXPNeeded = _getXPForNextLvl(newLvl)\n\n            leaderboardQuery.xp = newXP"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7287bc83afec9dea20f76794d396fc06cb318303a5b36043e115492fd381c9ed"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 13,
                  "charOffset": 4754,
                  "charLength": 10,
                  "snippet": {
                    "text": "currentLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 4727,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n        else:\n            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3eec9cd582f0588421cb96869fa2b088b01667f8a4846a3b9d96ac3a066ed268"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 13,
                  "charOffset": 4781,
                  "charLength": 9,
                  "snippet": {
                    "text": "currentXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 179,
                  "startColumn": 1,
                  "charOffset": 4728,
                  "charLength": 98,
                  "snippet": {
                    "text": "        else:\n            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "19b652374c410fa83034dc1d3c3f5ee56c1b25147a4ecef7f8d2b1ce41d7dbeb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "charOffset": 4807,
                  "charLength": 14,
                  "snippet": {
                    "text": "currentTotalXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 4742,
                  "charLength": 136,
                  "snippet": {
                    "text": "            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0\n\n            xpNeeded = _getXPForNextLvl(currentLvl)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "487d717b8c51dbf03a92af2764148a93e8d5f4ccdbc661d86d4797a4c5c7a3a8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 13,
                  "charOffset": 4839,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 4795,
                  "charLength": 130,
                  "snippet": {
                    "text": "            currentTotalXP = 0\n\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9be66f3f779670fc52dcfb12de3464a4ce6bb7f492d16ed4933d53caf15627f6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 13,
                  "charOffset": 4891,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpEarned"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 4826,
                  "charLength": 140,
                  "snippet": {
                    "text": "\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "907c165be90235d69fc111e3a9f4d00dd973d73d3fad8877eca70a46254f7767"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 13,
                  "charOffset": 4938,
                  "charLength": 5,
                  "snippet": {
                    "text": "newXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 185,
                  "startColumn": 1,
                  "charOffset": 4879,
                  "charLength": 170,
                  "snippet": {
                    "text": "            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "531d5a14ec2603b43e43b20cd504863a388c79c7d028e53686cb5c6ec26c77fa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 13,
                  "charOffset": 4979,
                  "charLength": 10,
                  "snippet": {
                    "text": "newTotalXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 1,
                  "charOffset": 4925,
                  "charLength": 125,
                  "snippet": {
                    "text": "\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fc4efaef93db78e693fba743204c2283b89f38de2133dd7fb1f6fb6bf13cc83e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 13,
                  "charOffset": 5030,
                  "charLength": 6,
                  "snippet": {
                    "text": "newLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 1,
                  "charOffset": 4926,
                  "charLength": 158,
                  "snippet": {
                    "text": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "57577fb79a8a619202403daba93b930b1b66234f00115382121ea5b895233d98"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 17,
                  "charOffset": 5102,
                  "charLength": 8,
                  "snippet": {
                    "text": "isNewLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 191,
                  "startColumn": 1,
                  "charOffset": 5051,
                  "charLength": 149,
                  "snippet": {
                    "text": "            if newXP >= xpNeeded:\n\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "737e6b41e05bff8c6046f759e39ad33cae3ebc32445072542efc6fddae1676e3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 17,
                  "charOffset": 5134,
                  "charLength": 11,
                  "snippet": {
                    "text": "newXPNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 192,
                  "startColumn": 1,
                  "charOffset": 5085,
                  "charLength": 156,
                  "snippet": {
                    "text": "\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:\n                    newXP -= newXPNeeded"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5cd270e87f5e1601257d82fe439c194a7c7ae2123a3453386f8395d1468a336b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 21,
                  "charOffset": 5294,
                  "charLength": 11,
                  "snippet": {
                    "text": "newXPNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 196,
                  "startColumn": 1,
                  "charOffset": 5201,
                  "charLength": 184,
                  "snippet": {
                    "text": "                    newXP -= newXPNeeded\n                    newLvl += 1\n                    newXPNeeded = _getXPForNextLvl(newLvl)\n\n            q = database.StudyVCLeaderboard.create("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23f4bf3b7acafb589f03f43256a1e2e6a254acf942dd456875c07d35da113b1a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 9,
                  "charOffset": 5656,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 209,
                  "startColumn": 1,
                  "charOffset": 5626,
                  "charLength": 82,
                  "snippet": {
                    "text": "            q.save()\n\n        roleStr = \"\"\n        if newLvl < 5:\n            pass"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1b9d58aaf4a059570ca5222a4eb82587feefca5219924382726b0a1782ba2ff"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 17,
                  "charOffset": 5848,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 217,
                  "startColumn": 1,
                  "charOffset": 5800,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n            if currentLvl < 5:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e547725c055b7c6190d3babb5443bcc35dbd333e614ee269a491f3dcc62df81c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 17,
                  "charOffset": 6054,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 224,
                  "startColumn": 1,
                  "charOffset": 6005,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 10:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fb67ee1f190a5317ad82991accf43ff085ffdf8ac240be99d4f7aa506f60fcf3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 17,
                  "charOffset": 6260,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 231,
                  "startColumn": 1,
                  "charOffset": 6211,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 20:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b44fed23123c7218b4e90d5c4171a1357d90d313aef73363f7055149364eb7f2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 17,
                  "charOffset": 6466,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 238,
                  "startColumn": 1,
                  "charOffset": 6417,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 30:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6721b24ded2e1415eebcf38a4e600509a48725c3287bb3b8fa6bd817b7cd3130"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 17,
                  "charOffset": 6672,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 245,
                  "startColumn": 1,
                  "charOffset": 6623,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 40:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7abb32d6334312382467ed93bfcff97e9f2712afbc8daaf9ce499e334849b6ce"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 17,
                  "charOffset": 6878,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 252,
                  "startColumn": 1,
                  "charOffset": 6829,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 50:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d873f773800e807952621a63376994c6f38080d99ae5155c7406ecd1244f726a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 17,
                  "charOffset": 7084,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 259,
                  "startColumn": 1,
                  "charOffset": 7035,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 60:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e5b5c9cb0a66c95b6c739c616b04a61659a49639d43195ab8b7d95393bb64ff9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 17,
                  "charOffset": 7290,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 266,
                  "startColumn": 1,
                  "charOffset": 7241,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 70:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4ebbc6a796aff855583791718a0fad24cac58278b4e2dc583b465c7664929bd2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 17,
                  "charOffset": 7496,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 273,
                  "startColumn": 1,
                  "charOffset": 7447,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 80:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d988ef0838e274664e33e843f0fde86b32b6cfebb8fc958cc738278ea2cfa7db"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 17,
                  "charOffset": 7703,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 280,
                  "startColumn": 1,
                  "charOffset": 7654,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 90:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "371bf4d590151601905fd37b51019494d2666aa178dd0fca3c37351edec88789"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 17,
                  "charOffset": 7913,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 287,
                  "startColumn": 1,
                  "charOffset": 7863,
                  "charLength": 115,
                  "snippet": {
                    "text": "\n            if currentLvl < 100:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2926f3805d15576f1d63bdf613e29a5f43887cfe405785267824869bcccf418"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 13,
                  "charOffset": 8013,
                  "charLength": 5,
                  "snippet": {
                    "text": "dmMSG"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 292,
                  "startColumn": 1,
                  "charOffset": 7979,
                  "charLength": 156,
                  "snippet": {
                    "text": "        if isNewLvl:\n\n            dmMSG = (\n                f\"{member.mention}, you've reached level **{newLvl}** in Study VC!\"\n                f\"{roleStr}\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e41d08ebfc092e14a846918d8f9bd4b4d29d719072cf2bfbea030bdff809360"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 5,
                  "charOffset": 8286,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 304,
                  "startColumn": 1,
                  "charOffset": 8260,
                  "charLength": 141,
                  "snippet": {
                    "text": "        return False\n\n    StudySessionQ = StudySessionQ.get()\n    StudySessionQ.StartTime = datetime.now(EST)\n    StudySessionQ.Paused = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "288ccdf2818946ee71e2fff2237f1292512000656d2b3029afcb26b523226865"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 11,
                  "charOffset": 8456,
                  "charLength": 10,
                  "snippet": {
                    "text": "endSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 312,
                  "startColumn": 1,
                  "charOffset": 8444,
                  "charLength": 180,
                  "snippet": {
                    "text": "\n\nasync def endSession(member: discord.Member):\n    \"\"\"\n    Ends the session by kicking the user out of the voice channel and removing the user from the database table `StudyVCDB`."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7cb8e3cce54f24e716edb7604ee3ba3f3aaff954232a72ab8ed07e7e27a3e67a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 5,
                  "charOffset": 8782,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 321,
                  "startColumn": 1,
                  "charOffset": 8769,
                  "charLength": 119,
                  "snippet": {
                    "text": "    \"\"\"\n\n    StudySessionQ = database.StudyVCDB.select().where(\n        database.StudyVCDB.discordID == member.id\n    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1fe49479eaaeac380918e744c80cd7e4856f09a52471a82bedd6a4faa3db49ae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 9,
                  "charOffset": 8928,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 325,
                  "startColumn": 1,
                  "charOffset": 8883,
                  "charLength": 149,
                  "snippet": {
                    "text": "    )\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        StudySessionQ.delete_instance()\n        StudySessionQ.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c7fdf7b2cc58deb9274427dd57f2d3c49ff3abe352e99d3e77c034eacf6b81f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 9,
                  "charOffset": 11659,
                  "charLength": 12,
                  "snippet": {
                    "text": "isInDatabase"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 403,
                  "startColumn": 1,
                  "charOffset": 11568,
                  "charLength": 178,
                  "snippet": {
                    "text": "        Removes an item from the study to-do list of the author/owner.\n        \"\"\"\n        isInDatabase = await addLeaderboardProgress(interaction.user)\n\n        if isInDatabase:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e9151059955036d114825ad37c58d20e7d803634964f17e3de5307ce824b3f78"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 9,
                  "charOffset": 13079,
                  "charLength": 6,
                  "snippet": {
                    "text": "lbList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 441,
                  "startColumn": 1,
                  "charOffset": 13014,
                  "charLength": 158,
                  "snippet": {
                    "text": "        guild = self.bot.get_guild(self.StudyVCGuildID)\n\n        lbList = []\n        i = 1\n        for entry in database.StudyVCLeaderboard.select().order_by("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "740dac3d1e4348bae01f5f2c67f6586db5c9c5ece3c9b9e6a7ebcceecad6b014"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 465,
                  "startColumn": 17,
                  "charOffset": 13668,
                  "charLength": 10,
                  "snippet": {
                    "text": "totalXPStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 463,
                  "startColumn": 1,
                  "charOffset": 13612,
                  "charLength": 193,
                  "snippet": {
                    "text": "                    place = f\"`{i}th`\"\n\n                totalXPStr = _shortNumber(entry.totalXP)\n                lbList.append(f\"{place} **{member}**: `{totalXPStr} XP`\")\n                i += 1"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c3f22a273c555c7a22009a9530cfa5033b9551edf7bdfa1cc6df13eee779cc04"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 469,
                  "startColumn": 9,
                  "charOffset": 13836,
                  "charLength": 13,
                  "snippet": {
                    "text": "FormattedList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 467,
                  "startColumn": 1,
                  "charOffset": 13783,
                  "charLength": 156,
                  "snippet": {
                    "text": "                i += 1\n        print(lbList)\n        FormattedList = \"\\n\".join(lbList)\n        embed = discord.Embed(\n            title=\"Study Leaderboard\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59ff3da37c8743e345f9455c0b36ab5a52df2651a3b50fb23568b5395874174f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 11,
                  "charOffset": 795,
                  "charLength": 15,
                  "snippet": {
                    "text": "setNewStudyGoal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 783,
                  "charLength": 109,
                  "snippet": {
                    "text": "\n\nasync def setNewStudyGoal(self, console, member: discord.Member, renew: bool):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9824c263244fa04f71484f8654387d58cd350ccc06e2f4fd62299374c880a95c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 5,
                  "charOffset": 1061,
                  "charLength": 3,
                  "snippet": {
                    "text": "MSV"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 1046,
                  "charLength": 163,
                  "snippet": {
                    "text": "        )\n\n    MSV = discord.ui.View(timeout=60)\n    var = SelectMenuHandler(\n        SSTypes, \"temp_view:studybot_st1\", \"Select a duration for your study session\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d39069f13ba9a09d033be582dc6031788320feb44132c9a608e4d0b8b96a59c4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 5,
                  "charOffset": 1243,
                  "charLength": 7,
                  "snippet": {
                    "text": "msgView"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 1216,
                  "charLength": 186,
                  "snippet": {
                    "text": "    MSV.add_item(var)\n\n    msgView = await console.send(\n        f\"{member.mention} You have joined a study channel. Please choose the duration of your study session!\",\n        view=MSV,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d78e313365a9d55c8a35d1cb0daae61c1d9d3933f119ed01028a36d106474b4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 9,
                  "charOffset": 1522,
                  "charLength": 12,
                  "snippet": {
                    "text": "MSV_disabled"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 1503,
                  "charLength": 158,
                  "snippet": {
                    "text": "\n    else:\n        MSV_disabled = discord.ui.View()\n        var = SelectMenuHandler(\n            SSTypes, \"temp_view:studybot_st1\", \"Timed out\", disabled=True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e5afc6597d7dff4d0beba2e8a939eb07d8716a0a8e7e0f7568bc60187c7dff9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 5,
                  "charOffset": 3125,
                  "charLength": 12,
                  "snippet": {
                    "text": "getConsoleCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 3119,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c93fc51b3daa179b51304845c1e203b1a369cb297029c4c7d82f2631f1d3595d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 5,
                  "charOffset": 3278,
                  "charLength": 10,
                  "snippet": {
                    "text": "ColumnDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 116,
                  "startColumn": 1,
                  "charOffset": 3184,
                  "charLength": 164,
                  "snippet": {
                    "text": "        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n    )\n    ColumnDict = {\n        0: q.ch_tv_console,\n        1: q.ch_tv_startvc,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3fc764c31c85ce8075530f0da31cba6d0c15cb359559cccf3a759536946cbe50"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 15,
                  "charOffset": 3887,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudyVCModule"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 138,
                  "startColumn": 1,
                  "charOffset": 3820,
                  "charLength": 127,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener(\"on_voice_state_update\")\n    async def StudyVCModule(\n        self,\n        member: discord.Member,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "761cb55300236d08cb918ccc1232831d26cff50b75e015f5b847461488319166"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 13,
                  "charOffset": 4484,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 156,
                  "startColumn": 1,
                  "charOffset": 4430,
                  "charLength": 176,
                  "snippet": {
                    "text": "            and not member.bot\n        ):\n            StudySessionQ = database.StudyVCDB.select().where(\n                database.StudyVCDB.discordID == member.id\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "782c67bd3d6410ced81da77fbe94372bfcd9895c0c86b01cfa3a2a8fa90373ed"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 17,
                  "charOffset": 5432,
                  "charLength": 7,
                  "snippet": {
                    "text": "dateObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 181,
                  "startColumn": 1,
                  "charOffset": 5386,
                  "charLength": 191,
                  "snippet": {
                    "text": "                query.save()\n\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17916f7948f13b335d87b1c6528452b77b1841696722a13acdf288ac1b4f86ed"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 15,
                  "charOffset": 6851,
                  "charLength": 14,
                  "snippet": {
                    "text": "StudyVCChecker"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 205,
                  "startColumn": 1,
                  "charOffset": 6766,
                  "charLength": 199,
                  "snippet": {
                    "text": "\n    @tasks.loop(seconds=60)  # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "217f599238c7e4fefe4fffc86f2eeae5ebcd49ba521b692a394b44aee03e05cd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 9,
                  "charOffset": 6974,
                  "charLength": 15,
                  "snippet": {
                    "text": "StudyVCGuildObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 208,
                  "startColumn": 1,
                  "charOffset": 6873,
                  "charLength": 234,
                  "snippet": {
                    "text": "        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\"\n\n        StudyVCGuildObj = self.bot.get_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ae778156bf5c023c92aa9d063e14218f6a3bfac74e45d0294dfeb61ec67f875a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 9,
                  "charOffset": 7038,
                  "charLength": 17,
                  "snippet": {
                    "text": "StudyVCConsoleObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 209,
                  "startColumn": 1,
                  "charOffset": 6965,
                  "charLength": 179,
                  "snippet": {
                    "text": "\n        StudyVCGuildObj = self.bot.get_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "216c3cd88cdc345637f476ba256a76e8ec8f9e886c876aee593c24ed2bcfd6ce"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 13,
                  "charOffset": 7157,
                  "charLength": 7,
                  "snippet": {
                    "text": "dateObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 212,
                  "startColumn": 1,
                  "charOffset": 7107,
                  "charLength": 179,
                  "snippet": {
                    "text": "\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n\n            member = StudyVCGuildObj.get_member(q.discordID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b23653116ad1069332d9bc60870a2ede2094f2d0c241ed2871ddbf1eaeed444"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 9,
                  "charOffset": 390,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 304,
                  "charLength": 255,
                  "snippet": {
                    "text": "async def id_generator(size=3, chars=string.ascii_uppercase):\n    while True:\n        ID = \"\".join(random.choice(chars) for _ in range(size))\n        query = database.TutorBot_Sessions.select().where(\n            database.TutorBot_Sessions.SessionID == ID"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ef9d27641e412fac726e66ed7832bc39f0901b75ee5067f8bdf8aab8573e5c92"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 9,
                  "charOffset": 20703,
                  "charLength": 13,
                  "snippet": {
                    "text": "DropdownClass"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 563,
                  "startColumn": 1,
                  "charOffset": 20644,
                  "charLength": 123,
                  "snippet": {
                    "text": "    def __init__(self):\n        super().__init__()\n        DropdownClass = Dropdown()\n\n        self.add_item(DropdownClass)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "301272231716b6f0e6900ebbd5ad60475ab48e26bffb3b4b7cde5e13599b427f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 13,
                  "charOffset": 624,
                  "charLength": 12,
                  "snippet": {
                    "text": "TutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 526,
                  "charLength": 228,
                  "snippet": {
                    "text": "        now = datetime.now(self.est)\n        for entry in database.TutorBot_Sessions:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.Date)\n            val = int((TutorSession - now).total_seconds())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ccc87220496035a52abaa24cb3e433b953619fa107962a5205b1e15eda224de"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 17,
                  "charOffset": 3247,
                  "charLength": 7,
                  "snippet": {
                    "text": "GP_DATE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 1,
                  "charOffset": 3201,
                  "charLength": 127,
                  "snippet": {
                    "text": "                geten.save()\n\n                GP_DATE = old + new\n\n                gp_en: database.TutorSession_GracePeriod = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d5419649c1ba3b5c3e8beb6e9ece755eb0e03611fed48df4abb78092c0165e12"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 13,
                  "charOffset": 4415,
                  "charLength": 12,
                  "snippet": {
                    "text": "TutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 4310,
                  "charLength": 238,
                  "snippet": {
                    "text": "        now = datetime.now(self.est)\n        for entry in database.TutorSession_GracePeriod:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.GP_DATE)\n            val = int((TutorSession - now).total_seconds())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ff1018e2aa47c835241ed9931db7c2bfc273ad3bb48c057216e56f888d6d2ac6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 15,
                  "charOffset": 194,
                  "charLength": 16,
                  "snippet": {
                    "text": "create_TicketSys"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 1,
                  "charOffset": 138,
                  "charLength": 222,
                  "snippet": {
                    "text": "class SimulatorProfile:\n    @staticmethod\n    async def create_TicketSys(ctx: commands.Context):\n        # category = discord.utils.get(ctx.guild.categories, id=TechID.cat_sandbox)\n        query: database.SandboxConfig = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9ac26f97aceace9e1ba2db1be596fd0e95395e26074a4079be5f9bff2a4af6e7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 9,
                  "charOffset": 561,
                  "charLength": 9,
                  "snippet": {
                    "text": "ListofCat"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 492,
                  "charLength": 192,
                  "snippet": {
                    "text": "\n        await ctx.guild.create_text_channel(\"🧧┃chat-help\")\n        ListofCat = [\n            [\"Math Tickets\", query.cat_mathticket],\n            [\"Science Tickets\", query.cat_scienceticket],"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cddf25ba2a2b4c9fe47ba33a6e8008db3d84b8bf1e41bdea88948f676a25a664"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 9,
                  "charOffset": 1515,
                  "charLength": 9,
                  "snippet": {
                    "text": "ListofCat"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1409,
                  "charLength": 229,
                  "snippet": {
                    "text": "            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n        )\n        ListofCat = [\n            [\"Math Tickets\", query.cat_mathticket],\n            [\"Science Tickets\", query.cat_scienceticket],"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f4a647efbb59bca79b846f2dcd7980e4d8b5017bbacbb35717c69f413a2e223"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 15,
                  "charOffset": 2278,
                  "charLength": 16,
                  "snippet": {
                    "text": "create_PrivVCSys"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 2245,
                  "charLength": 200,
                  "snippet": {
                    "text": "\n    @staticmethod\n    async def create_PrivVCSys(ctx: commands.Context):\n        category = discord.utils.get(ctx.guild.categories, id=SandboxConfig.cat_sandbox)\n        q: database.SandboxConfig = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85accd151d75d45a25519fb161ed2a48f098e6fde51ffa0537390bdb2bc55f9a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 15,
                  "charOffset": 2884,
                  "charLength": 17,
                  "snippet": {
                    "text": "cleanup_PrivVCSys"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2851,
                  "charLength": 200,
                  "snippet": {
                    "text": "\n    @staticmethod\n    async def cleanup_PrivVCSys(ctx: commands.Context):\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c20d65e92927abd1bcfcdc01299f30455b3f88b9b07d0fbd113dc27b0a8c82b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 9,
                  "charOffset": 3766,
                  "charLength": 2,
                  "snippet": {
                    "text": "SP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3679,
                  "charLength": 236,
                  "snippet": {
                    "text": "    @sim.command()\n    async def create(self, ctx: commands.Context, profile):\n        SP = SimulatorProfile()\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "62729dd98029ab363d8b424adba7a170eaa77cea0bd3c3dc2b903215e5abccdf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 9,
                  "charOffset": 4807,
                  "charLength": 2,
                  "snippet": {
                    "text": "SP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "charOffset": 4730,
                  "charLength": 226,
                  "snippet": {
                    "text": "    @sim.command()\n    async def clear(self, ctx: commands.Context):\n        SP = SimulatorProfile()\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "93a19bd2ee86157d5d0a63256124f01d70996c89e34df9ebf79eb698570e47c2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/guess_submit.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 15,
                  "charOffset": 3154,
                  "charLength": 12,
                  "snippet": {
                    "text": "mayEventPost"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "charOffset": 3109,
                  "charLength": 172,
                  "snippet": {
                    "text": "\n    @tasks.loop(minutes=60.0)\n    async def mayEventPost(self):\n        now = datetime.now(self.est)\n        TutorSession = pytz.timezone(\"America/New_York\").localize(now)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71cc79e2422024db1fbc063e34edbc8f34c49cad7ad5ff6c58b20011351fb7d3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/guess_submit.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 9,
                  "charOffset": 3219,
                  "charLength": 12,
                  "snippet": {
                    "text": "TutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 1,
                  "charOffset": 3140,
                  "charLength": 295,
                  "snippet": {
                    "text": "    async def mayEventPost(self):\n        now = datetime.now(self.est)\n        TutorSession = pytz.timezone(\"America/New_York\").localize(now)\n        channel = self.bot.get_channel(MainID.ch_eventAnnouncements)\n        q = database.BaseQueue.select().where(database.BaseQueue.queueID == 2).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9872f56cce01101de16325b54bede60ce3a1ac905bdd899453ffc8080d61ad62"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "charOffset": 233,
                  "charLength": 12,
                  "snippet": {
                    "text": "getEqualRank"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "charOffset": 227,
                  "charLength": 74,
                  "snippet": {
                    "text": "\n\ndef getEqualRank(query):\n    if query not in config:\n        return None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7748eed2046313fafb25a8980526d45b42eea6ccf30b3a5c63de04a73aebde8a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 11,
                  "charOffset": 359,
                  "charLength": 13,
                  "snippet": {
                    "text": "roleNameCheck"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 347,
                  "charLength": 119,
                  "snippet": {
                    "text": "\n\nasync def roleNameCheck(self, name: str, guild: discord.Guild, user: discord.Member):\n    check = getEqualRank(name)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6519989555f8712b71234ea7d75a5bd5365bfb6ac7d937c2751bc3e4cc0536f8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 15,
                  "charOffset": 1190,
                  "charLength": 17,
                  "snippet": {
                    "text": "StaffVerification"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 1130,
                  "charLength": 166,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ae21c03bb77cda9c4e4bc3f19030dce0e7be184b6fdda4572faa43ee2d99f084"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 9,
                  "charOffset": 1257,
                  "charLength": 19,
                  "snippet": {
                    "text": "InteractionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 1131,
                  "charLength": 205,
                  "snippet": {
                    "text": "    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2fa9217ca4acd9952d0408eea3bbead5cfea5c31b3b0d184d3ba963ebf9fe8cb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 13,
                  "charOffset": 1552,
                  "charLength": 11,
                  "snippet": {
                    "text": "staffServer"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 1500,
                  "charLength": 224,
                  "snippet": {
                    "text": "            print(interaction.user.id)\n\n            staffServer: discord.Guild = self.bot.get_guild(interaction.guild_id)\n            print(staffServer)\n            StaffServerMember: discord.Member = staffServer.get_member("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "469e3ae849eed9b97e45077dced12931b77dcb82975b37b7797304e03046f12f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 13,
                  "charOffset": 1665,
                  "charLength": 17,
                  "snippet": {
                    "text": "StaffServerMember"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 1540,
                  "charLength": 234,
                  "snippet": {
                    "text": "            staffServer: discord.Guild = self.bot.get_guild(interaction.guild_id)\n            print(staffServer)\n            StaffServerMember: discord.Member = staffServer.get_member(\n                interaction.user.id\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "64a66f6cec195a7fc06e021f2ffad6e74b64905229cd581a694b75d535f4c066"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 17,
                  "charOffset": 1898,
                  "charLength": 17,
                  "snippet": {
                    "text": "StaffServerMember"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "charOffset": 1813,
                  "charLength": 202,
                  "snippet": {
                    "text": "            if StaffServerMember is None:\n                print(\"h\")\n                StaffServerMember: discord.Member = staffServer.get_member(\n                    interaction.user.id\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1c071cf613171816a3558b5db6999f6afd0a743aec6ba87786baf624d10a8be7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 13,
                  "charOffset": 3231,
                  "charLength": 19,
                  "snippet": {
                    "text": "VerificationChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 3191,
                  "charLength": 168,
                  "snippet": {
                    "text": "                    return\n\n            VerificationChannel = interaction.channel\n            logchannel = self.bot.get_channel(self.staffServer[interaction.guild_id])\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c87c93e513eeb113e75e665d3861229fcbf1d46259476c7aa6bce253d16f3e64"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 13,
                  "charOffset": 3372,
                  "charLength": 13,
                  "snippet": {
                    "text": "VerifiedRoles"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 1,
                  "charOffset": 3273,
                  "charLength": 150,
                  "snippet": {
                    "text": "            logchannel = self.bot.get_channel(self.staffServer[interaction.guild_id])\n\n            VerifiedRoles = []\n            VerifiedGuilds = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "843c3356a8853f797a94d379b93814eac8f74e85956471cbe6180478a13c9856"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 13,
                  "charOffset": 3403,
                  "charLength": 14,
                  "snippet": {
                    "text": "VerifiedGuilds"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 1,
                  "charOffset": 3359,
                  "charLength": 102,
                  "snippet": {
                    "text": "\n            VerifiedRoles = []\n            VerifiedGuilds = []\n\n            for ID in self.ServerIDs:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "65b8aeb808b23f02e5b4a4e179ef9e7d16ca9adc17c4593fe6abe1ba096cdc50"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 21,
                  "charOffset": 3566,
                  "charLength": 12,
                  "snippet": {
                    "text": "ServerMember"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 105,
                  "startColumn": 1,
                  "charOffset": 3462,
                  "charLength": 219,
                  "snippet": {
                    "text": "                server: discord.Guild = self.bot.get_guild(ID)\n                try:\n                    ServerMember: discord.Member = server.get_member(\n                        interaction.user.id\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5569bdf012db47b2ca1280e510df92de711b0bc351c85a30af7d1581f29989ec"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 21,
                  "charOffset": 3840,
                  "charLength": 9,
                  "snippet": {
                    "text": "roleNames"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 3797,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n                else:\n                    roleNames = [role for role in ServerMember.roles]\n\n                    for role in roleNames:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a6781c945ff2eda078aef19b6787b7ae6639e330061f82c060ed5777904bfe46"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 29,
                  "charOffset": 4114,
                  "charLength": 8,
                  "snippet": {
                    "text": "checkSTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 4039,
                  "charLength": 243,
                  "snippet": {
                    "text": "\n                        if check is not None:\n                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4166eabba5a04ecafb9412c73542733982f66cd5906812b37371b1e64569ca84"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 29,
                  "charOffset": 4170,
                  "charLength": 12,
                  "snippet": {
                    "text": "markdownRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 122,
                  "startColumn": 1,
                  "charOffset": 4040,
                  "charLength": 243,
                  "snippet": {
                    "text": "                        if check is not None:\n                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f3f7de0b10501875a67d17f650a76aab323ec79b1d79f619fc57d08681a8951f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 29,
                  "charOffset": 4248,
                  "charLength": 13,
                  "snippet": {
                    "text": "markdownGuild"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 1,
                  "charOffset": 4086,
                  "charLength": 263,
                  "snippet": {
                    "text": "                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\"\n\n                            if markdownRole not in VerifiedRoles:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a0aba624c108ef7bf0172dc6891721ec5f2dd89826fecb867364aecbf8fd6f3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 37,
                  "charOffset": 4751,
                  "charLength": 8,
                  "snippet": {
                    "text": "jsonROLE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 132,
                  "startColumn": 1,
                  "charOffset": 4582,
                  "charLength": 305,
                  "snippet": {
                    "text": "                            for elem in check:\n                                if elem in [role.name for role in staffServer.roles]:\n                                    jsonROLE = discord.utils.get(\n                                        staffServer.roles, name=elem\n                                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9193c8daad83e8b3f95d40cd33b5a26784ce6440847b1b14d63af1edbe5e66c7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 17,
                  "charOffset": 6200,
                  "charLength": 12,
                  "snippet": {
                    "text": "VerifiedRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 161,
                  "startColumn": 1,
                  "charOffset": 6132,
                  "charLength": 186,
                  "snippet": {
                    "text": "                await logchannel.send(embed=embed)\n\n                VerifiedRole: discord.Role = discord.utils.get(\n                    staffServer.roles, name=\"Member\"\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a4b3585a828e4006cf2896a9ab0cc5095f0c255fe630b5a0593fd2a2963fb25e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 15,
                  "charOffset": 9027,
                  "charLength": 23,
                  "snippet": {
                    "text": "pasteVerificationButton"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 224,
                  "startColumn": 1,
                  "charOffset": 8988,
                  "charLength": 166,
                  "snippet": {
                    "text": "\n    @commands.command()\n    async def pasteVerificationButton(self, ctx):\n        button = VerifyButton()\n        await ctx.send(\"Click here to verify\", view=button)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ec2ff6e343373f8d9e4c655ae4d2449c6a8e179311617fdbd327400fae3edc8f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 15,
                  "charOffset": 9194,
                  "charLength": 22,
                  "snippet": {
                    "text": "pasteVerificationEmbed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 229,
                  "startColumn": 1,
                  "charOffset": 9155,
                  "charLength": 156,
                  "snippet": {
                    "text": "\n    @commands.command()\n    async def pasteVerificationEmbed(self, ctx: commands.Context):\n        embed = discord.Embed(\n            title=\"Verification\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0fabf1e45b1f533e96fb5df9d80743493867b43d3fea2c93f1b043299f65eedb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 11,
                  "charOffset": 2393,
                  "charLength": 12,
                  "snippet": {
                    "text": "TicketExport"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 2381,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\nasync def TicketExport(\n    self,\n    channel: discord.TextChannel,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a63cc0f6dbbf8d1ded0c0c0d6816407e3a403fef50700e52b8762fcf56d826b5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 5,
                  "charOffset": 2583,
                  "charLength": 30,
                  "snippet": {
                    "text": "directTranscript: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 2493,
                  "charLength": 183,
                  "snippet": {
                    "text": "    user: discord.User = None,\n    responsesauthor: typing.List[discord.User] = None,\n    directTranscript: bool = False,\n):\n    transcript = await chat_exporter.export(channel, None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f0f6f2c428290ca78e7d264c57e3de695e1829cd26dedbf27670aa50a79fce06"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 5,
                  "charOffset": 2813,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 2788,
                  "charLength": 164,
                  "snippet": {
                    "text": "        .get()\n    )\n    TicketOwner = self.bot.get_user(query.authorID)\n    if TicketOwner is None:\n        TicketOwner = await self.bot.fetch_user(query.authorID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f90d846690be02028c59341585e94b04c78030ab07ffabefe6bbadc73444ddc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 9,
                  "charOffset": 2897,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 2809,
                  "charLength": 171,
                  "snippet": {
                    "text": "    TicketOwner = self.bot.get_user(query.authorID)\n    if TicketOwner is None:\n        TicketOwner = await self.bot.fetch_user(query.authorID)\n\n    if transcript is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "55aaff299b636d2efc5a8fc80d3b90b37e5ae855dd6b09da411f56ae215d1f9a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 5,
                  "charOffset": 3651,
                  "charLength": 4,
                  "snippet": {
                    "text": "myIO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 127,
                  "startColumn": 1,
                  "charOffset": 3640,
                  "charLength": 108,
                  "snippet": {
                    "text": "    )\n\n    myIO = BytesIO()\n    myIO.write(var)\n    with open(f\"transcript-{channel.name}.html\", \"wb\") as f:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "53cca05ee5f72349a413a4bd84bf7622e253925b779f558c7726f20837a08446"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 5,
                  "charOffset": 3863,
                  "charLength": 6,
                  "snippet": {
                    "text": "S3_URL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 1,
                  "charOffset": 3783,
                  "charLength": 253,
                  "snippet": {
                    "text": "\n    S3_upload_file(f\"transcript-{channel.name}.html\", \"ch-transcriptlogs\")\n    S3_URL = f\"[Direct Transcript Link](https://acad-transcripts.schoolsimplified.org/transcript-{channel.name}.html)\"\n    embed.add_field(name=\"Transcript Link\", value=S3_URL)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a02e3072c584ac1c543048bb5e59b1f421a5ab1748eac4e7bf04144407dff76"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 5,
                  "charOffset": 4634,
                  "charLength": 10,
                  "snippet": {
                    "text": "decodeDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 159,
                  "startColumn": 1,
                  "charOffset": 4628,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49b39d8a9a4a23a8c9902f0da1ed5d5518e4ef79e1fd8fb58e8a09546a733a1a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 5,
                  "charOffset": 4918,
                  "charLength": 12,
                  "snippet": {
                    "text": "EssayOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 169,
                  "startColumn": 1,
                  "charOffset": 4905,
                  "charLength": 127,
                  "snippet": {
                    "text": "    \"\"\"\n\n    EssayOptions = [\n        discord.SelectOption(label=\"Essay Reviser\"),\n        discord.SelectOption(label=\"Other\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "16db975056bc0dc59e7994461bea0db45059c94486563b79ffb31dd56ff02fe1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 5,
                  "charOffset": 5044,
                  "charLength": 14,
                  "snippet": {
                    "text": "EnglishOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 1,
                  "charOffset": 5033,
                  "charLength": 143,
                  "snippet": {
                    "text": "    ]\n\n    EnglishOptions = [\n        discord.SelectOption(label=\"English Language\"),\n        discord.SelectOption(label=\"English Literature\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d3d25a6ec85af9aafc89064117153736c7de9253f3cdee007458130747ccffb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 5,
                  "charOffset": 5233,
                  "charLength": 11,
                  "snippet": {
                    "text": "MathOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 5222,
                  "charLength": 121,
                  "snippet": {
                    "text": "    ]\n\n    MathOptions = [\n        discord.SelectOption(label=\"Algebra\"),\n        discord.SelectOption(label=\"Geometry\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9bb94a58eed74f2eb6066ec3525f501305f91ce3c1049c6a55b520a11287cdab"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 5,
                  "charOffset": 5561,
                  "charLength": 14,
                  "snippet": {
                    "text": "ScienceOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 189,
                  "startColumn": 1,
                  "charOffset": 5550,
                  "charLength": 125,
                  "snippet": {
                    "text": "    ]\n\n    ScienceOptions = [\n        discord.SelectOption(label=\"Biology\"),\n        discord.SelectOption(label=\"Chemistry\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a02fd6c54e43f7431362b58a930872846b9a6d4c400e143999d3c00227bd65af"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 5,
                  "charOffset": 5824,
                  "charLength": 20,
                  "snippet": {
                    "text": "SocialStudiesOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 197,
                  "startColumn": 1,
                  "charOffset": 5813,
                  "charLength": 138,
                  "snippet": {
                    "text": "    ]\n\n    SocialStudiesOptions = [\n        discord.SelectOption(label=\"World History\"),\n        discord.SelectOption(label=\"US History\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a459b57e692ef521c1fdb9f57350e69db983afdd3741715023a80054c72dcfdf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 5,
                  "charOffset": 6194,
                  "charLength": 15,
                  "snippet": {
                    "text": "LanguageOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 207,
                  "startColumn": 1,
                  "charOffset": 6183,
                  "charLength": 123,
                  "snippet": {
                    "text": "    ]\n\n    LanguageOptions = [\n        discord.SelectOption(label=\"French\"),\n        discord.SelectOption(label=\"Chinese\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "282e99285ecb57099747f5d722205c110c725d207b785367644494998ec5b184"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 5,
                  "charOffset": 6456,
                  "charLength": 12,
                  "snippet": {
                    "text": "OtherOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 215,
                  "startColumn": 1,
                  "charOffset": 6445,
                  "charLength": 132,
                  "snippet": {
                    "text": "    ]\n\n    OtherOptions = [\n        discord.SelectOption(label=\"Computer Science\"),\n        discord.SelectOption(label=\"Fine Arts\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a2295f078a2e018de6b5c367c7d20e6cf8b498dfe010965605b3e9474c5da888"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 5,
                  "charOffset": 6684,
                  "charLength": 10,
                  "snippet": {
                    "text": "decodeName"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 222,
                  "startColumn": 1,
                  "charOffset": 6673,
                  "charLength": 119,
                  "snippet": {
                    "text": "    ]\n\n    decodeName = {\n        \"['Math Helpers']\": \"Math Helpers\",\n        \"['Science Helpers']\": \"Science Helpers\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bde0ab59ccff735980e936481d5915e7edf7c0817276f50d4ce6eb85c8928bd1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 5,
                  "charOffset": 7062,
                  "charLength": 13,
                  "snippet": {
                    "text": "decodeOptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 232,
                  "startColumn": 1,
                  "charOffset": 7051,
                  "charLength": 116,
                  "snippet": {
                    "text": "    }\n\n    decodeOptList = {\n        \"['Math Helpers']\": MathOptions,\n        \"['Science Helpers']\": ScienceOptions,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "28dcb807a4f3e0d48b983e301d1999bdd2d72c7cafac7f7e85da1bfe5b167699"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 9,
                  "charOffset": 7577,
                  "charLength": 8,
                  "snippet": {
                    "text": "decodeID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 246,
                  "startColumn": 1,
                  "charOffset": 7471,
                  "charLength": 224,
                  "snippet": {
                    "text": "            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n        )\n        decodeID = {\n            \"['Math Helpers']\": q.cat_mathticket,\n            \"['Science Helpers']\": q.cat_scienceticket,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "79a81bd0ddd7bb60b49d9fc17ba5b3586fb5d1989cecee6a29b7276057157d0d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 9,
                  "charOffset": 8008,
                  "charLength": 8,
                  "snippet": {
                    "text": "decodeID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 256,
                  "startColumn": 1,
                  "charOffset": 7980,
                  "charLength": 158,
                  "snippet": {
                    "text": "        }\n    else:\n        decodeID = {\n            \"['Math Helpers']\": MainID.cat_math_ticket,\n            \"['Science Helpers']\": MainID.cat_science_ticket,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "619780c823ecd1820fc9862a2546ad5be0d7861b2034259784f138d9b2890dd9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 5,
                  "charOffset": 8498,
                  "charLength": 10,
                  "snippet": {
                    "text": "CategoryID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 267,
                  "startColumn": 1,
                  "charOffset": 8464,
                  "charLength": 127,
                  "snippet": {
                    "text": "\n    name = decodeName[value]\n    CategoryID = decodeID[value]\n    if type(decodeOptList[value]) == int:\n        OptList = name"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d71970bc7bca38cada668cc14caa44edb915f76e3c93b6aba31d66f052d79177"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 9,
                  "charOffset": 8577,
                  "charLength": 7,
                  "snippet": {
                    "text": "OptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "charOffset": 8494,
                  "charLength": 146,
                  "snippet": {
                    "text": "    CategoryID = decodeID[value]\n    if type(decodeOptList[value]) == int:\n        OptList = name\n    else:\n        OptList = decodeOptList[value]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d983516d59da0e5af646f1ee6f2cc273b92457cf69c031af0a5f694487821837"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 9,
                  "charOffset": 8610,
                  "charLength": 7,
                  "snippet": {
                    "text": "OptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 271,
                  "startColumn": 1,
                  "charOffset": 8569,
                  "charLength": 109,
                  "snippet": {
                    "text": "        OptList = name\n    else:\n        OptList = decodeOptList[value]\n\n    return name, CategoryID, OptList"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80924ef0a0a8b62bb8e57237bad57d45849b1453063edffc97d599a937c5586c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 5,
                  "charOffset": 8685,
                  "charLength": 7,
                  "snippet": {
                    "text": "getRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 276,
                  "startColumn": 1,
                  "charOffset": 8679,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "357347b11064128c783ba8d1e2cc955ca8eb21a8b068e53e6513447c37c21d82"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 27,
                  "charOffset": 8720,
                  "charLength": 16,
                  "snippet": {
                    "text": "mainSubject: str"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 277,
                  "startColumn": 1,
                  "charOffset": 8680,
                  "charLength": 152,
                  "snippet": {
                    "text": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5bb89e6f86990cc6bc15f8a82e991b1db627ad26e549ae07c32b91fd012ee861"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 5,
                  "charOffset": 9056,
                  "charLength": 11,
                  "snippet": {
                    "text": "mainSubject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 290,
                  "startColumn": 1,
                  "charOffset": 9043,
                  "charLength": 77,
                  "snippet": {
                    "text": "    \"\"\"\n\n    mainSubject = mainSubject.title()\n    subject = subject.title()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e7c544b0f8bd8794919cca4630ff2807e96a493096c23a698b06a4de35b9970e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 9,
                  "charOffset": 10198,
                  "charLength": 7,
                  "snippet": {
                    "text": "Sandbox"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 328,
                  "startColumn": 1,
                  "charOffset": 10125,
                  "charLength": 173,
                  "snippet": {
                    "text": "\n    async def callback(self, interaction: discord.Interaction):\n        Sandbox = False\n        if interaction.message.guild.id == TechID.g_tech:\n            Sandbox = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cc66523ba4b67c377110e80154a855c58e1c234e16807809df381c2963daf22b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 13,
                  "charOffset": 10284,
                  "charLength": 7,
                  "snippet": {
                    "text": "Sandbox"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 330,
                  "startColumn": 1,
                  "charOffset": 10190,
                  "charLength": 179,
                  "snippet": {
                    "text": "        Sandbox = False\n        if interaction.message.guild.id == TechID.g_tech:\n            Sandbox = True\n\n        bucket = self.view.cd_mapping.get_bucket(interaction.message)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ed69bb613492cd3083055654d1aaf9afa306d861dba8407ba14064eaebe0136e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 13,
                  "charOffset": 10790,
                  "charLength": 9,
                  "snippet": {
                    "text": "DMChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 343,
                  "startColumn": 1,
                  "charOffset": 10694,
                  "charLength": 206,
                  "snippet": {
                    "text": "            guild = interaction.message.guild\n            author = interaction.user\n            DMChannel = await author.create_dm()\n            try:\n                await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2d513bc62854fd43abfd3fc8abaab65f36f88017193589cd37ed0200a88d488"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 13,
                  "charOffset": 11309,
                  "charLength": 3,
                  "snippet": {
                    "text": "MSV"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 358,
                  "startColumn": 1,
                  "charOffset": 11278,
                  "charLength": 178,
                  "snippet": {
                    "text": "                )\n\n            MSV = discord.ui.View()\n            var = SelectMenuHandler(\n                MasterSubjectOptions, \"persistent_view:ticketdrop\", \"Click a subject!\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4552a4018b2da63f9d300e4c449aa3bddb7a40a6cf60a3dcaabf2bf71b2b3480"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 17,
                  "charOffset": 12062,
                  "charLength": 17,
                  "snippet": {
                    "text": "MasterSubjectView"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 375,
                  "startColumn": 1,
                  "charOffset": 11979,
                  "charLength": 213,
                  "snippet": {
                    "text": "            timeout = await MSV.wait()\n            if not timeout:\n                MasterSubjectView = var.view_response\n            else:\n                return await DMChannel.send(\"Timed out, try again later.\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "22c04949e2592903e9c20baec60f8c561bff5c176a951531d0711fe207d4a8c4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 13,
                  "charOffset": 12206,
                  "charLength": 12,
                  "snippet": {
                    "text": "ViewResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 379,
                  "startColumn": 1,
                  "charOffset": 12118,
                  "charLength": 237,
                  "snippet": {
                    "text": "                return await DMChannel.send(\"Timed out, try again later.\")\n\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ccd3db779474b1ef6ef1babe3f30df3c09f8359cff9e067bb4d3d0df2325eb9b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 13,
                  "charOffset": 12256,
                  "charLength": 11,
                  "snippet": {
                    "text": "TypeSubject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 380,
                  "startColumn": 1,
                  "charOffset": 12193,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0ada6884aa730458aeb637b2afe3a37e5d5dae9286979820fdc190adffe80ec9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 26,
                  "charOffset": 12269,
                  "charLength": 10,
                  "snippet": {
                    "text": "CategoryID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 380,
                  "startColumn": 1,
                  "charOffset": 12193,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4ce94424ccac3164f5ab7e9f47d3e68d514677bc80e29ca3be773aaf25dcbaae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 38,
                  "charOffset": 12281,
                  "charLength": 7,
                  "snippet": {
                    "text": "OptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 380,
                  "startColumn": 1,
                  "charOffset": 12193,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "090786f81c9299045675d6eb559c3a4e1143d9b9a8901c591c24a6144a1a2119"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 17,
                  "charOffset": 12502,
                  "charLength": 11,
                  "snippet": {
                    "text": "MiscOptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 386,
                  "startColumn": 1,
                  "charOffset": 12442,
                  "charLength": 168,
                  "snippet": {
                    "text": "\n            if not TypeSubject == OptList:\n                MiscOptList = discord.ui.View()\n                MiscOptList.add_item(\n                    SelectMenuHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b874d6cc2a9b824161fbb84f6aa9409ad40ea73c118193a7f8ba0b58b884b766"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 13,
                  "charOffset": 17916,
                  "charLength": 10,
                  "snippet": {
                    "text": "CounterNum"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 510,
                  "startColumn": 1,
                  "charOffset": 17826,
                  "charLength": 221,
                  "snippet": {
                    "text": "                        return await DMChannel.send(\"No attachments found.\")\n\n            CounterNum = (\n                database.BaseTickerInfo.select()\n                .where(database.BaseTickerInfo.guildID == guild.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2912f8c42ad15788a8f99a8c5c59f66948abe1fc08788735771faeafde85cbe7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 13,
                  "charOffset": 18097,
                  "charLength": 4,
                  "snippet": {
                    "text": "TNUM"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 515,
                  "startColumn": 1,
                  "charOffset": 18048,
                  "charLength": 160,
                  "snippet": {
                    "text": "                .get()\n            )\n            TNUM = CounterNum.counter\n            CounterNum.counter = CounterNum.counter + 1\n            CounterNum.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aa73eee2f1da86567745627f7fcbdbb472c6cb3af3521dbcf10236d80d229dcb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 13,
                  "charOffset": 18222,
                  "charLength": 3,
                  "snippet": {
                    "text": "LDC"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 519,
                  "startColumn": 1,
                  "charOffset": 18179,
                  "charLength": 156,
                  "snippet": {
                    "text": "            CounterNum.save()\n\n            LDC = await DMChannel.send(\n                f\"Please wait, creating your ticket {Emoji.loadingGIF}\"\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83b163b9250b401ad6bf89332a3d7140e8b4b0bd9bcbe9161b927098e22be10e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 526,
                  "startColumn": 17,
                  "charOffset": 18403,
                  "charLength": 11,
                  "snippet": {
                    "text": "mainSubject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 524,
                  "startColumn": 1,
                  "charOffset": 18336,
                  "charLength": 142,
                  "snippet": {
                    "text": "\n            if TypeSubject == \"Language Helpers\":\n                mainSubject = \"languages\"\n            else:\n                mainSubject = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "15bd5a66447cac7107d432fbf89580cd8a05eb35159ffc53533b50c9b2a607ff"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 17,
                  "charOffset": 18463,
                  "charLength": 11,
                  "snippet": {
                    "text": "mainSubject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 526,
                  "startColumn": 1,
                  "charOffset": 18387,
                  "charLength": 173,
                  "snippet": {
                    "text": "                mainSubject = \"languages\"\n            else:\n                mainSubject = (\n                    c.name.replace(\"═\", \"\")\n                    .replace(\"⁃\", \"\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bf2985bdd54cbb753c7fceb05257cc44e40acdcd9c036cdb88d7b9adbe972377"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 21,
                  "charOffset": 19867,
                  "charLength": 7,
                  "snippet": {
                    "text": "RoleOBJ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 565,
                  "startColumn": 1,
                  "charOffset": 19794,
                  "charLength": 190,
                  "snippet": {
                    "text": "                ]\n                for role in roles:\n                    RoleOBJ = discord.utils.get(\n                        interaction.message.guild.roles, name=role\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8a2abb59a13d234b66c2917782fd6b23113b1d47b39f17bdf07e770e0f277e6d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 578,
                  "startColumn": 25,
                  "charOffset": 20368,
                  "charLength": 7,
                  "snippet": {
                    "text": "RoleOBJ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 576,
                  "startColumn": 1,
                  "charOffset": 20267,
                  "charLength": 215,
                  "snippet": {
                    "text": "                            reason=\"Ticket Perms\",\n                        )\n                        RoleOBJ = discord.utils.get(guild.roles, name=role)\n                        if (\n                            not ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "da7ca147f03b7675ebc3f7b4ce77f497759123f2737fe64dcd6a398bfb32598c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 610,
                  "startColumn": 25,
                  "charOffset": 21983,
                  "charLength": 7,
                  "snippet": {
                    "text": "RoleOBJ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 608,
                  "startColumn": 1,
                  "charOffset": 21874,
                  "charLength": 234,
                  "snippet": {
                    "text": "                    roles = [\"Essay Reviser\"]\n                    for role in roles:\n                        RoleOBJ = discord.utils.get(\n                            interaction.message.guild.roles, name=role\n                        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a61dd7ed2f5f7209086a7594a2ae0fdba3264cb82fdc921074b39f467d887c13"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 622,
                  "startColumn": 25,
                  "charOffset": 22518,
                  "charLength": 7,
                  "snippet": {
                    "text": "RoleOBJ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 620,
                  "startColumn": 1,
                  "charOffset": 22396,
                  "charLength": 247,
                  "snippet": {
                    "text": "                    roles = [\"Chat Helper\", \"Lead Helper\"]\n                    for role in roles:\n                        RoleOBJ = discord.utils.get(\n                            interaction.message.guild.roles, name=role\n                        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8920b097e533025ce97687ee63a1beb86073550075e98f7735056e204ac91b10"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 13,
                  "charOffset": 23356,
                  "charLength": 13,
                  "snippet": {
                    "text": "controlTicket"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 642,
                  "startColumn": 1,
                  "charOffset": 23329,
                  "charLength": 170,
                  "snippet": {
                    "text": "            )\n\n            controlTicket = discord.Embed(\n                title=\"Control Panel\",\n                description=\"To end this ticket, click the lock button!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f8ae11ba546046f31825ee1f164829dbd6cf23f09ba48c52bac2e1e763e2d431"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 13,
                  "charOffset": 23571,
                  "charLength": 17,
                  "snippet": {
                    "text": "LockControlButton"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 647,
                  "startColumn": 1,
                  "charOffset": 23500,
                  "charLength": 179,
                  "snippet": {
                    "text": "                color=discord.Colour.gold(),\n            )\n            LockControlButton = discord.ui.View()\n            LockControlButton.add_item(\n                ButtonHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "48b02e4a0eed76892706b1497f240a7c77b37ee7d4f9fa0d73933f301727d779"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 13,
                  "charOffset": 23951,
                  "charLength": 3,
                  "snippet": {
                    "text": "LCM"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 659,
                  "startColumn": 1,
                  "charOffset": 23924,
                  "charLength": 152,
                  "snippet": {
                    "text": "            )\n\n            LCM = await channel.send(\n                interaction.user.mention, embed=controlTicket, view=LockControlButton\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ff1531ef2b994a821c425168a15a5351dd86f083447838416d22ad12ea30daf2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 702,
                  "startColumn": 17,
                  "charOffset": 25756,
                  "charLength": 11,
                  "snippet": {
                    "text": "mentionRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 700,
                  "startColumn": 1,
                  "charOffset": 25717,
                  "charLength": 177,
                  "snippet": {
                    "text": "                    )\n\n                mentionRole = getRole(interaction.guild, mainSubject, selection_str)\n\n                await channel.send(mentionRole.mention, embed=embed)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "af869a0d38677266c7d21a6c5bf2a5af142d9e92892ba846689af2d0721c8b4f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 762,
                  "startColumn": 15,
                  "charOffset": 27945,
                  "charLength": 14,
                  "snippet": {
                    "text": "TicketDropdown"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 760,
                  "startColumn": 1,
                  "charOffset": 27885,
                  "charLength": 163,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def TicketDropdown(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "507e0b016aac400ad23de7fc85c677e6919ce4f61667d93b35dff8cff4445eda"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 763,
                  "startColumn": 9,
                  "charOffset": 28009,
                  "charLength": 19,
                  "snippet": {
                    "text": "InteractionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 761,
                  "startColumn": 1,
                  "charOffset": 27886,
                  "charLength": 202,
                  "snippet": {
                    "text": "    @commands.Cog.listener(\"on_interaction\")\n    async def TicketDropdown(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fc1471737befb9beefff29a3eb7f8041776c0e427c66643c14e7166574ac68a3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 794,
                  "startColumn": 13,
                  "charOffset": 29008,
                  "charLength": 11,
                  "snippet": {
                    "text": "ButtonViews"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 792,
                  "startColumn": 1,
                  "charOffset": 28938,
                  "charLength": 166,
                  "snippet": {
                    "text": "                color=discord.Colour.red(),\n            )\n            ButtonViews = discord.ui.View()\n            ButtonViews.add_item(\n                ButtonHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d3267f4a22f5a686d1b6d7c5dfcd5e8a5cecdd5cf55ee919afc6219f93db44b0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 832,
                  "startColumn": 17,
                  "charOffset": 30369,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 830,
                  "startColumn": 1,
                  "charOffset": 30335,
                  "charLength": 146,
                  "snippet": {
                    "text": "\n            try:\n                TicketOwner = await guild.fetch_member(query.authorID)\n            except discord.NotFound:\n                try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4b54117dcdc530291c41e39c8b427127fc148ad7ef7d4a0b751f257b0f95af24"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 851,
                  "startColumn": 13,
                  "charOffset": 31289,
                  "charLength": 12,
                  "snippet": {
                    "text": "ButtonViews2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 849,
                  "startColumn": 1,
                  "charOffset": 31197,
                  "charLength": 160,
                  "snippet": {
                    "text": "            )\n            embed.set_footer(text=\"This ticket has been closed!\")\n            ButtonViews2 = discord.ui.View()\n\n            ButtonViews2.add_item("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "196b7f8de5325a652a2127da6dd11feb99198299c5b36f51edd3e4145768d0b7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 930,
                  "startColumn": 17,
                  "charOffset": 34283,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 928,
                  "startColumn": 1,
                  "charOffset": 34236,
                  "charLength": 159,
                  "snippet": {
                    "text": "            )\n            try:\n                TicketOwner = await guild.fetch_member(query.authorID)\n            except discord.NotFound:\n                try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21ec29e452c4f06faf97004c8bcb2e2a18e4ab2a8f067acba44971507433df66"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 961,
                  "startColumn": 17,
                  "charOffset": 35679,
                  "charLength": 18,
                  "snippet": {
                    "text": "ResponseLogChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 959,
                  "startColumn": 1,
                  "charOffset": 35546,
                  "charLength": 259,
                  "snippet": {
                    "text": "            channel: discord.TextChannel = interaction.channel\n            if interaction.guild.id == MainID.g_main:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    MainID.ch_transcriptLogs\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d93dae003bc76bce99f60ba0f9f9cebd359f58de6da412d38678429daf5dd67"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 965,
                  "startColumn": 17,
                  "charOffset": 35840,
                  "charLength": 18,
                  "snippet": {
                    "text": "ResponseLogChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 963,
                  "startColumn": 1,
                  "charOffset": 35788,
                  "charLength": 174,
                  "snippet": {
                    "text": "                )\n            else:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    TechID.ch_ticket_log\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "897729398a3f09799c3579847e509ec9e0fac7495d790d6edb22e9c5db35076c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 973,
                  "startColumn": 28,
                  "charOffset": 36239,
                  "charLength": 6,
                  "snippet": {
                    "text": "S3_URL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 971,
                  "startColumn": 1,
                  "charOffset": 36157,
                  "charLength": 202,
                  "snippet": {
                    "text": "            )\n            async with channel.typing():\n                msg, file, S3_URL = await TicketExport(\n                    self, channel, ResponseLogChannel, author, None, True\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "58bfc7c7b5fe65a8069edff28e26b91f7fc48fed8bc64df011081df94a2b1fab"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1029,
                  "startColumn": 17,
                  "charOffset": 38704,
                  "charLength": 18,
                  "snippet": {
                    "text": "ResponseLogChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1027,
                  "startColumn": 1,
                  "charOffset": 38596,
                  "charLength": 234,
                  "snippet": {
                    "text": "            author = interaction.user\n            if interaction.guild.id == MainID.g_main:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    MainID.ch_transcriptLogs\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c1764b3d8e546d63d25078fffcde244f6b0d0153d99dad6dfba4501b0f2ebab0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1033,
                  "startColumn": 17,
                  "charOffset": 38865,
                  "charLength": 18,
                  "snippet": {
                    "text": "ResponseLogChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1031,
                  "startColumn": 1,
                  "charOffset": 38813,
                  "charLength": 174,
                  "snippet": {
                    "text": "                )\n            else:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    TechID.ch_ticket_log\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3ccdf22da59e85353e8c20ff3e6abab9c39f535736380de8904c6e1d09b13545"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1041,
                  "startColumn": 13,
                  "charOffset": 39184,
                  "charLength": 4,
                  "snippet": {
                    "text": "msgO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1039,
                  "startColumn": 1,
                  "charOffset": 39135,
                  "charLength": 224,
                  "snippet": {
                    "text": "                .get()\n            )\n            msgO = await interaction.channel.send(\n                f\"{author.mention}\\nPlease wait, generating a transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8dc7e6cedf098ad6426193830269b10d39382d75b045e11a6f09f94ee5365a1d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1045,
                  "startColumn": 17,
                  "charOffset": 39417,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1043,
                  "startColumn": 1,
                  "charOffset": 39346,
                  "charLength": 234,
                  "snippet": {
                    "text": "            )\n            async with channel.typing():\n                TicketOwner = self.bot.get_user(query.authorID)\n                if TicketOwner is None:\n                    TicketOwner = await self.bot.fetch_user(query.authorID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83402822a18a92a00735dba233e0f8278511bb6f3ec25fe42aca5242360b6d1b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1047,
                  "startColumn": 21,
                  "charOffset": 39525,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1045,
                  "startColumn": 1,
                  "charOffset": 39401,
                  "charLength": 266,
                  "snippet": {
                    "text": "                TicketOwner = self.bot.get_user(query.authorID)\n                if TicketOwner is None:\n                    TicketOwner = await self.bot.fetch_user(query.authorID)\n\n                messages = [message async for message in channel.history(limit=None)]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "754a7272ad637bcff9ef60e8d1c7a60ef5952f287f543606d4ffa3d19d261da9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1050,
                  "startColumn": 17,
                  "charOffset": 39684,
                  "charLength": 10,
                  "snippet": {
                    "text": "authorList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1048,
                  "startColumn": 1,
                  "charOffset": 39581,
                  "charLength": 156,
                  "snippet": {
                    "text": "\n                messages = [message async for message in channel.history(limit=None)]\n                authorList = []\n\n                for msg in messages:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0f1717e3c9ccbc922c6754fffc72081681259eff5316256d448747179e4e4149"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1126,
                  "startColumn": 13,
                  "charOffset": 42995,
                  "charLength": 11,
                  "snippet": {
                    "text": "ButtonViews"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1124,
                  "startColumn": 1,
                  "charOffset": 42925,
                  "charLength": 166,
                  "snippet": {
                    "text": "                color=discord.Colour.red(),\n            )\n            ButtonViews = discord.ui.View()\n            ButtonViews.add_item(\n                ButtonHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "969d93dddcbb1e8cb02368ee9216d53a51c22e49efe2a77bc833230391d9e6ce"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1150,
                  "startColumn": 15,
                  "charOffset": 43832,
                  "charLength": 14,
                  "snippet": {
                    "text": "TicketInactive"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1148,
                  "startColumn": 1,
                  "charOffset": 43788,
                  "charLength": 158,
                  "snippet": {
                    "text": "\n    @tasks.loop(minutes=1.0)\n    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        guild = self.bot.get_guild(MainID.g_main)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2efc5b4d4fb6b390e99e20d9e090ed2982e25cc61d6261e1c5746a90a6441715"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1151,
                  "startColumn": 9,
                  "charOffset": 43862,
                  "charLength": 12,
                  "snippet": {
                    "text": "TicketInfoTB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1149,
                  "startColumn": 1,
                  "charOffset": 43789,
                  "charLength": 192,
                  "snippet": {
                    "text": "    @tasks.loop(minutes=1.0)\n    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        guild = self.bot.get_guild(MainID.g_main)\n        for entry in TicketInfoTB:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e22146658ab5f10c36eb610ce539fb4cd1e61fd7ee8227902fc3c9affc7fde3a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1158,
                  "startColumn": 13,
                  "charOffset": 44133,
                  "charLength": 12,
                  "snippet": {
                    "text": "fetchMessage"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1156,
                  "startColumn": 1,
                  "charOffset": 44095,
                  "charLength": 249,
                  "snippet": {
                    "text": "                continue\n\n            fetchMessage = [message async for message in channel.history(limit=1)]\n            TicketOwner = guild.get_member(entry.authorID)\n            messages = [message async for message in channel.history(limit=None)]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0d43380f09fc143f7d7c73f9fdaedb88489e4751c36809ee866f533837029c6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1159,
                  "startColumn": 13,
                  "charOffset": 44216,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1157,
                  "startColumn": 1,
                  "charOffset": 44120,
                  "charLength": 291,
                  "snippet": {
                    "text": "\n            fetchMessage = [message async for message in channel.history(limit=1)]\n            TicketOwner = guild.get_member(entry.authorID)\n            messages = [message async for message in channel.history(limit=None)]\n            LogCH = self.bot.get_channel(MainID.ch_transcriptLogs)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5db0bc08c89742cf17cafa3f5812a42e1eb6b6f9947ec7bdc41e20f82e29437c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1161,
                  "startColumn": 13,
                  "charOffset": 44357,
                  "charLength": 5,
                  "snippet": {
                    "text": "LogCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1159,
                  "startColumn": 1,
                  "charOffset": 44204,
                  "charLength": 270,
                  "snippet": {
                    "text": "            TicketOwner = guild.get_member(entry.authorID)\n            messages = [message async for message in channel.history(limit=None)]\n            LogCH = self.bot.get_channel(MainID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8741c3442eaac9a46c4847b2ae8dbfd5f2afe5d609ee991ec7e6fc088c79bb7e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1162,
                  "startColumn": 13,
                  "charOffset": 44424,
                  "charLength": 10,
                  "snippet": {
                    "text": "authorList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1160,
                  "startColumn": 1,
                  "charOffset": 44263,
                  "charLength": 236,
                  "snippet": {
                    "text": "            messages = [message async for message in channel.history(limit=None)]\n            LogCH = self.bot.get_channel(MainID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:\n                continue"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ca000e742bd091a377cef9643d12200626216bd11014ff42478b2d9e8b7ae96"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1170,
                  "startColumn": 17,
                  "charOffset": 44699,
                  "charLength": 12,
                  "snippet": {
                    "text": "ButtonViews2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1168,
                  "startColumn": 1,
                  "charOffset": 44605,
                  "charLength": 166,
                  "snippet": {
                    "text": "                - timedelta(minutes=self.TICKET_INACTIVE_TIME)\n            ):\n                ButtonViews2 = discord.ui.View()\n\n                ButtonViews2.add_item("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c3bd964020ec7fea49c59d9b21f36b557ad439522fb8c1677b2c8d69fb36a68b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1249,
                  "startColumn": 15,
                  "charOffset": 47963,
                  "charLength": 13,
                  "snippet": {
                    "text": "sendCHTKTView"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1247,
                  "startColumn": 1,
                  "charOffset": 47908,
                  "charLength": 162,
                  "snippet": {
                    "text": "    @commands.command()\n    @is_botAdmin\n    async def sendCHTKTView(self, ctx):\n        MasterSubjectView = discord.ui.View()\n        MasterSubjectView.add_item("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3637d58dde154b520a3f1f3d67316587ba4ec7bc77989f2e2bc180d77d8cd270"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1250,
                  "startColumn": 9,
                  "charOffset": 47997,
                  "charLength": 17,
                  "snippet": {
                    "text": "MasterSubjectView"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1248,
                  "startColumn": 1,
                  "charOffset": 47932,
                  "charLength": 169,
                  "snippet": {
                    "text": "    @is_botAdmin\n    async def sendCHTKTView(self, ctx):\n        MasterSubjectView = discord.ui.View()\n        MasterSubjectView.add_item(\n            SelectMenuHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f126c9a7d709c223ec921ad745dd64b7b3de2f353eae427072c0b955eb1b77a6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 15,
                  "charOffset": 1218,
                  "charLength": 12,
                  "snippet": {
                    "text": "GSuiteVerify"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 1158,
                  "charLength": 200,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def GSuiteVerify(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n        if interaction.message is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0db664ed9d3a6f977b746e007a78d2934da1019901ff8d31e58cd2edf3cd1a3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 9,
                  "charOffset": 1280,
                  "charLength": 19,
                  "snippet": {
                    "text": "InteractionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1159,
                  "charLength": 218,
                  "snippet": {
                    "text": "    @commands.Cog.listener(\"on_interaction\")\n    async def GSuiteVerify(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n        if interaction.message is None:\n            return"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c96d0baada745254d3dd55f28008f844776e1737d120c2f32a4b3f8415da2a7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 15,
                  "charOffset": 7728,
                  "charLength": 17,
                  "snippet": {
                    "text": "pasteGSuiteButton"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 7673,
                  "charLength": 166,
                  "snippet": {
                    "text": "    @commands.command()\n    @is_botAdmin\n    async def pasteGSuiteButton(self, ctx):\n        embed = discord.Embed(\n            title=\"Alternate Verification Method\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ad9a6ad955fc37d7a71ae4eba76dad1bab2fb6e7e919309a9c95c715ef882e3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 9,
                  "charOffset": 8041,
                  "charLength": 12,
                  "snippet": {
                    "text": "GSuiteButton"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 184,
                  "startColumn": 1,
                  "charOffset": 7982,
                  "charLength": 144,
                  "snippet": {
                    "text": "            color=discord.Color.green(),\n        )\n        GSuiteButton = GSuiteVerify()\n        await ctx.send(embed=embed, view=GSuiteButton)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1d15c409f07bd04f740f2e237a1b1fe36e96cdc5d85fee97e19249951f06b38b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyAttributeOutsideInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Instance attribute index defined outside __init__",
            "markdown": "Instance attribute index defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 9,
                  "charOffset": 17829,
                  "charLength": 10,
                  "snippet": {
                    "text": "self.index"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 510,
                  "startColumn": 1,
                  "charOffset": 17730,
                  "charLength": 144,
                  "snippet": {
                    "text": "    async def get_page(self, page_number: int) -> Any:\n        # The front page is a dummy\n        self.index = page_number\n        return self\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0af03101b525171ad6029c4fdc07b4569d0a0050dbdd2dff645446be072cdd37"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyAttributeOutsideInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Instance attribute style defined outside __init__",
            "markdown": "Instance attribute style defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 13,
                  "charOffset": 1629,
                  "charLength": 10,
                  "snippet": {
                    "text": "self.style"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 1531,
                  "charLength": 200,
                  "snippet": {
                    "text": "\n        elif view.current_player == view.O and self.yUser.id == interaction.user.id:\n            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b8db44a2985a50709b1bd1ca13c255cfe5e8442a2ccbe78f042303d4b3b5ee5d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyAttributeOutsideInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Instance attribute label defined outside __init__",
            "markdown": "Instance attribute label defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 13,
                  "charOffset": 1682,
                  "charLength": 10,
                  "snippet": {
                    "text": "self.label"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 1532,
                  "charLength": 247,
                  "snippet": {
                    "text": "        elif view.current_player == view.O and self.yUser.id == interaction.user.id:\n            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True\n            view.board[self.y][self.x] = view.O"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "063150f9049020226f6184c33706dca8a1ad4ff0658b5428a9231b7749a3bc12"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyAttributeOutsideInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Instance attribute disabled defined outside __init__",
            "markdown": "Instance attribute disabled defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 13,
                  "charOffset": 1711,
                  "charLength": 13,
                  "snippet": {
                    "text": "self.disabled"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 1,
                  "charOffset": 1617,
                  "charLength": 203,
                  "snippet": {
                    "text": "            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True\n            view.board[self.y][self.x] = view.O\n            view.current_player = view.X"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "05400fe0f5ac09ad8e277fb4ebef0fd19d90353164b879c5c09c2dc17870ee54"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 9,
                  "charOffset": 7418,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 212,
                  "startColumn": 1,
                  "charOffset": 7357,
                  "charLength": 86,
                  "snippet": {
                    "text": "        try:\n            os.remove(\"cred_file.json\")\n        except:\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a59315218382a1930971d51091675ba347bc075fefceceb2bb241c1067a7b465"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 17,
                  "charOffset": 9022,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 242,
                  "startColumn": 1,
                  "charOffset": 8941,
                  "charLength": 114,
                  "snippet": {
                    "text": "                try:\n                    await msgError.delete()\n                except:\n                    pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c3322e929ec240ed88753c0a69728ea14573d9a2169cef93e21afb5a15e4d95"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 21,
                  "charOffset": 9810,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 264,
                  "startColumn": 1,
                  "charOffset": 9717,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0c314d610c28fd483f0ec450a6644d518a7aacdb29e968864f5bc275cd8f8956"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "charOffset": 9999,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 272,
                  "startColumn": 1,
                  "charOffset": 9906,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "acbaa0dcfef78a83395af50d8cf466af3e595b33c3be3ba4285483e3cd0941c8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 29,
                  "charOffset": 12116,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 317,
                  "startColumn": 1,
                  "charOffset": 11992,
                  "charLength": 169,
                  "snippet": {
                    "text": "                            try:\n                                await msgError.delete(delay=7)\n                            except:\n                                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a6f1f1c28799586a1aa6b45d8a7bb805d64c1582a6866f0afe21a1ed782e675"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 29,
                  "charOffset": 12931,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 338,
                  "startColumn": 1,
                  "charOffset": 12807,
                  "charLength": 169,
                  "snippet": {
                    "text": "                            try:\n                                await msgError.delete(delay=7)\n                            except:\n                                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d192780ed71364f0c03318bfdaec285e25116732738a801df713d7a479964cbb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 21,
                  "charOffset": 14252,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 370,
                  "startColumn": 1,
                  "charOffset": 14159,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d183a8e4942203a76e6076e5cddfb2f5d41034a802deb2199ded051aab08f4f3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 25,
                  "charOffset": 15050,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 386,
                  "startColumn": 1,
                  "charOffset": 14936,
                  "charLength": 155,
                  "snippet": {
                    "text": "                        try:\n                            await msgTooLong.delete(delay=7)\n                        except:\n                            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fbdfcb4ba051292ab40610fa91647d39573f880468f9e35758fc22dd33ebc2ff"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 21,
                  "charOffset": 16187,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 414,
                  "startColumn": 1,
                  "charOffset": 16094,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "00bccc23989a8d93d5387ec668e9494b4eabfa459f51cc8350b84045146ee14a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 21,
                  "charOffset": 17289,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 441,
                  "startColumn": 1,
                  "charOffset": 17196,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "96673cb3ec96bc2ba16211dd63537bae9aeb7aee158176da1887f6493e255397"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 25,
                  "charOffset": 18513,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 468,
                  "startColumn": 1,
                  "charOffset": 18401,
                  "charLength": 153,
                  "snippet": {
                    "text": "                        try:\n                            await msgError.delete(delay=7)\n                        except:\n                            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0bb4196d4b96f6df4f5d06ea40545a87c5d8268e5dc56ee8e28769bc833c393"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 25,
                  "charOffset": 20210,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 508,
                  "startColumn": 1,
                  "charOffset": 20098,
                  "charLength": 153,
                  "snippet": {
                    "text": "                        try:\n                            await msgError.delete(delay=7)\n                        except:\n                            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "180e72b061303a685cef76febe89172dd3d54e1ce2b913e635cc7ddf0f4d63bd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 566,
                  "startColumn": 13,
                  "charOffset": 22388,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 564,
                  "startColumn": 1,
                  "charOffset": 22319,
                  "charLength": 98,
                  "snippet": {
                    "text": "            try:\n                await msgError.delete()\n            except:\n                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b273d20c4f1a2c7af4f6e40486fdf30042e73716dca6d79548b081215bf59b8a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 9,
                  "charOffset": 3861,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 3780,
                  "charLength": 234,
                  "snippet": {
                    "text": "        try:\n            service.users().delete(userKey=email).execute()\n        except:\n            return await interaction.response.send_message(\n                f\"{interaction.user.mention} The account **{email}** does not exist.\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b981feaee24b779f5d250bc28ed5be0d7c1365106864baac9c781cc3e2b5ae40"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 9,
                  "charOffset": 5230,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 143,
                  "startColumn": 1,
                  "charOffset": 5111,
                  "charLength": 265,
                  "snippet": {
                    "text": "            user['suspended'] = suspend\n            service.users().update(userKey=email, body=user).execute()\n        except:\n            await interaction.response.send_message(\n                f\"{interaction.user.mention} The account **{email}** does not exist.\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "faa886d956ac515b6b519ddeb85f17b235a734c3f8c8daf72388ca8cf511f550"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/github_commands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 9,
                  "charOffset": 1731,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 1670,
                  "charLength": 178,
                  "snippet": {
                    "text": "        try:\n            issue_ = r.get_issue(issue)\n        except:\n            return await interaction.followup.send(\"Couldn't find issue\")\n        issue_.edit(state=\"closed\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "26b3f4ddef4dbc47ff36df34c6b5f89e81550f04c674d253946bcd5e44e3d0b3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 5,
                  "charOffset": 535,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 466,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e493692652b96ee1e3ab140f82fd0919c6cc76400799f9f4e6d52648d644ca0e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 9,
                  "charOffset": 2099,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "charOffset": 2054,
                  "charLength": 132,
                  "snippet": {
                    "text": "                .get()\n            )\n        except:\n            q = database.SandboxConfig.create(mode=\"None\")\n            q.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "abf79c93ab8dd41e6cf7c8cfaedc0f6bea912bc5b65d27b5ac3bd73c04a11625"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 758,
                  "startColumn": 17,
                  "charOffset": 30037,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 756,
                  "startColumn": 1,
                  "charOffset": 29968,
                  "charLength": 200,
                  "snippet": {
                    "text": "                        .get()\n                    )\n                except:\n                    embed = discord.Embed(\n                        title=f\"{Emoji.invalid_channel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "835bb1a0efe8b163e10e65b13ef91a5cd676e93b2e1c4a10ae7a4bc2239966ac"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 981,
                  "startColumn": 21,
                  "charOffset": 39781,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 979,
                  "startColumn": 1,
                  "charOffset": 39700,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1bc94a9b5c8d524698417c5e3d376f580623258b972aa9e179ba1dae09e2721c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1169,
                  "startColumn": 21,
                  "charOffset": 48399,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1167,
                  "startColumn": 1,
                  "charOffset": 48318,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "908a0a759bf14e6596a092cb3cb44fd96bca0759d8e453a47fe76ab57810af81"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1344,
                  "startColumn": 21,
                  "charOffset": 57133,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1342,
                  "startColumn": 1,
                  "charOffset": 57052,
                  "charLength": 220,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalid_channel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb3348d3fe3f033acfa6a8dde3ec201921eb7ae5339a18c1b1f987b157410731"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1415,
                  "startColumn": 21,
                  "charOffset": 60430,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1413,
                  "startColumn": 1,
                  "charOffset": 60327,
                  "charLength": 219,
                  "snippet": {
                    "text": "                    try:\n                        voiceLIMIT = int(new_voice_limit)\n                    except:\n                        return await ctx.send(f\"{Emoji.deny} Not a valid number!\")\n                    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ff5967f509b9f33d17d7eaa554ebb963bfb0525411bb7958b904b09c23d10398"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1471,
                  "startColumn": 21,
                  "charOffset": 63177,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1469,
                  "startColumn": 1,
                  "charOffset": 63096,
                  "charLength": 220,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalid_channel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "255ecf7121e36eb05e73afc896166fdc0d1951c1faa2475a85d344e9dad86e5a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1551,
                  "startColumn": 21,
                  "charOffset": 66877,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1549,
                  "startColumn": 1,
                  "charOffset": 66796,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9b060c3b04f73a8757dc09c261b33a0cbd1ac472e6270b404e21bf79f553c293"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "charOffset": 433,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "charOffset": 364,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ab565697d4e1f87a404a85c7de94bec71003de3465d7503f81e284340c80fb9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 17,
                  "charOffset": 5684,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 5569,
                  "charLength": 163,
                  "snippet": {
                    "text": "                try:\n                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f1675d20a2330ed6bfe0180670a2c371ebe0cc9a09d4b4f45122d1a170a26d4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 25,
                  "charOffset": 6565,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 197,
                  "startColumn": 1,
                  "charOffset": 6426,
                  "charLength": 273,
                  "snippet": {
                    "text": "                                tutorChannel, reason=\"Hogging the VC Start Channel.\"\n                            )\n                        except:\n                            await member.move_to(\n                                None, reason=\"Hogging the VC Start Channel.\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e872d22701478b42233d6190b49bc22f5e78c1ef42539f3cf1e15cbabf3fc2ad"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 17,
                  "charOffset": 16652,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 390,
                  "startColumn": 1,
                  "charOffset": 16537,
                  "charLength": 246,
                  "snippet": {
                    "text": "                        reason=\"Maximum Channel Ownership Allowance [TRUE]\",\n                    )\n                except:\n                    await member.move_to(\n                        None, reason=\"Maximum Channel Ownership Allowance [FAIL]\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d7172baaafed7266aa7d88a498583d3e4578ba90c70ded8746157486c3d30e4f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 5,
                  "charOffset": 882,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 813,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "846f188ba48fc1b0cbb864228d9c47a65bc40786bc2c57893c14fc8d75fe22ee"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 13,
                  "charOffset": 8220,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 298,
                  "startColumn": 1,
                  "charOffset": 8150,
                  "charLength": 99,
                  "snippet": {
                    "text": "            try:\n                await member.send(dmMSG)\n            except:\n                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6bcbea0600836f1f3c10020e65391c3e69c2d3eed5c06e688b1af76aa41bfbac"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 13,
                  "charOffset": 3072,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2974,
                  "charLength": 179,
                  "snippet": {
                    "text": "            try:\n                await interaction.response.send_message(embed=embed)\n            except:\n                await interaction.channel.send(embed=embed)\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "089b97fb9c127026e202fc854c11f5accb15564468b51a376aa89135c00cc99f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 17,
                  "charOffset": 4445,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 115,
                  "startColumn": 1,
                  "charOffset": 4335,
                  "charLength": 199,
                  "snippet": {
                    "text": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n            else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fcee7a9160285d928e234f14e4d57c2e3fa85055d96e7fc4e3e3343db1dda79f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 17,
                  "charOffset": 4895,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "charOffset": 4785,
                  "charLength": 182,
                  "snippet": {
                    "text": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f10a7970579c82894239e2ae8287b20120e9432d49d877487eb0b927c7633131"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 17,
                  "charOffset": 1947,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "charOffset": 1860,
                  "charLength": 213,
                  "snippet": {
                    "text": "                try:\n                    await tutor.send(embed=embed)\n                except:\n                    await botch.send(\n                        f\"Unable to send a reminder DM to you {tutor.mention}!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5e0e8ce75362b8ea3a262644f514abcf0063ae456e3f374888a810c5439bd096"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 17,
                  "charOffset": 2222,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 2133,
                  "charLength": 173,
                  "snippet": {
                    "text": "                try:\n                    await student.send(embed=embed)\n                except:\n                    print(f\"Unable to Send a Reminder DM to: {student.id}\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ba4a31d3b1208d397c6fb1d86fd7f04bdd2d5586263f19299e33f77a3b3462f7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 21,
                  "charOffset": 2790,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 2700,
                  "charLength": 236,
                  "snippet": {
                    "text": "                            ephemeral=True,\n                        )\n                    except:\n                        await interaction.channel.send(\n                            f\"{interaction.user.mention} An error occurred while \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6c9e1a39a8bf7468e3ddf654bd3ad8133c583a55e58fd08b0776d17a5e47e407"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 21,
                  "charOffset": 6897,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 6781,
                  "charLength": 262,
                  "snippet": {
                    "text": "                            \"You have been verified!\", ephemeral=True\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} You have been verified!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e4b982dd7c12da044c9569090998194854cb98dbdfd66c2461bc29caf07fe4c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 21,
                  "charOffset": 8662,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 216,
                  "startColumn": 1,
                  "charOffset": 8572,
                  "charLength": 268,
                  "snippet": {
                    "text": "                            ephemeral=True,\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} I didn't seem to find any roles to give you, please try \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "425a5fd400541272e02aaf9fc6f6950df93f386eb96f1d08e42ed6f03e55da12"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 5,
                  "charOffset": 4520,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 4454,
                  "charLength": 87,
                  "snippet": {
                    "text": "    try:\n        os.remove(f\"transcript-{channel.name}.html\")\n    except:\n        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "daed02a8ca6a0aa6ff8c019f9c00564317d58e43dca8ebecf66fed0a38659d7c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyProtectedMemberInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Access to a protected member _meta of a class",
            "markdown": "Access to a protected member _meta of a class"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 27,
                  "charOffset": 2455,
                  "charLength": 21,
                  "snippet": {
                    "text": "model_dict[key]._meta"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 72,
                  "startColumn": 1,
                  "charOffset": 2372,
                  "charLength": 233,
                  "snippet": {
                    "text": "        else:\n            db.connect(reuse_if_open=True)\n            for column in model_dict[key]._meta.sorted_fields:\n                if not db.column_exists(key, column.name):\n                    db.create_column(key, column.name)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "53d49036320ed819a137c665f57ff6c48c4ec8581047e11d194c38ef34e3efde"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyProtectedMemberInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Access to a protected member _prepare_once of a class",
            "markdown": "Access to a protected member _prepare_once of a class"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 15,
                  "charOffset": 6871,
                  "charLength": 25,
                  "snippet": {
                    "text": "self.source._prepare_once"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 191,
                  "startColumn": 1,
                  "charOffset": 6837,
                  "charLength": 162,
                  "snippet": {
                    "text": "            return\n\n        await self.source._prepare_once()\n        page = await self.source.get_page(0)\n        kwargs = await self._get_kwargs_from_page(page)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1d46b012b7e4493461e4096ec0bea61221778f1fcb7dc8317ca8e9d6f225de9b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyProtectedMemberInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Access to a protected member _prepare_once of a class",
            "markdown": "Access to a protected member _prepare_once of a class"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 15,
                  "charOffset": 17151,
                  "charLength": 25,
                  "snippet": {
                    "text": "self.source._prepare_once"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 491,
                  "startColumn": 1,
                  "charOffset": 17106,
                  "charLength": 173,
                  "snippet": {
                    "text": "        self.current_page = 0\n\n        await self.source._prepare_once()\n        page = await self.source.get_page(0)\n        kwargs = await self._get_kwargs_from_page(page)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3a4b73e23b0b7d216244c8b078013036a7febaf88edf3e79b1559d0d72a0d11f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[Blacklist]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[Blacklist\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 14,
                  "charOffset": 19294,
                  "charLength": 12,
                  "snippet": {
                    "text": "db_blacklist"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 526,
                  "startColumn": 1,
                  "charOffset": 19194,
                  "charLength": 160,
                  "snippet": {
                    "text": "    blacklisted_users = []\n    db_blacklist: collections.Iterable = database.Blacklist\n    for p in db_blacklist:\n        blacklisted_users.append(p.discordID)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e90efd1bd3cfa12086952cd7e0565d21d00545158cfb1ae2249da7fef670a53d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[WhitelistedPrefix]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[WhitelistedPrefix\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/CommandsOnly.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 22,
                  "charOffset": 675,
                  "charLength": 26,
                  "snippet": {
                    "text": "database.WhitelistedPrefix"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 547,
                  "charLength": 196,
                  "snippet": {
                    "text": "        if message.channel.id == MainID.ch_modCommands and not message.author.bot:\n            prefix = []\n            for p in database.WhitelistedPrefix:\n                prefix.append(p.prefix)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3f256b314f1ba2333efd814cfb5971e10b14f633c2a42c1e2a665c5f032969e3"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[Blacklist]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[Blacklist\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/Blacklist.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 18,
                  "charOffset": 2494,
                  "charLength": 18,
                  "snippet": {
                    "text": "database.Blacklist"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "charOffset": 2397,
                  "charLength": 191,
                  "snippet": {
                    "text": "        await interaction.response.defer(thinking=True)\n        empty_list = []\n        for p in database.Blacklist:\n            user = self.bot.get_user(p.discordID)\n            if not user:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0e660f3d171699d26c00aa607829f324033d87235468f8768167214f5283690"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[WhitelistedPrefix]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[WhitelistedPrefix\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 22,
                  "charOffset": 4522,
                  "charLength": 8,
                  "snippet": {
                    "text": "PrefixDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 145,
                  "startColumn": 1,
                  "charOffset": 4478,
                  "charLength": 91,
                  "snippet": {
                    "text": "        response = []\n\n        for entry in PrefixDB:\n\n            if entry.status is True:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6ea0ace553529b1c67736c75af43d4d5422c174196ffdf3f847e9cb5a90cc518"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[StudyVCDB]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[StudyVCDB\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 18,
                  "charOffset": 7125,
                  "charLength": 18,
                  "snippet": {
                    "text": "database.StudyVCDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 211,
                  "startColumn": 1,
                  "charOffset": 7030,
                  "charLength": 195,
                  "snippet": {
                    "text": "        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f46d81409601aba55be080dd8e48b3e69653fcf4c0fc2537e398a997051cee14"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead",
            "markdown": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 30,
                  "charOffset": 1924,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "charOffset": 1843,
                  "charLength": 220,
                  "snippet": {
                    "text": "                list_ten = []\n                i = 0\n                for entry in query:\n                    if not isinstance(entry.Date, datetime):\n                        entry.Date = datetime.fromisoformat(entry.Date)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c44198ba2b5eba154fd5834c1a4ccb1f7595becc6777030b6aa2a11c937663e8"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead",
            "markdown": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 26,
                  "charOffset": 5848,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 152,
                  "startColumn": 1,
                  "charOffset": 5779,
                  "charLength": 133,
                  "snippet": {
                    "text": "            list_ten = []\n            i = 0\n            for entry in query:\n\n                if not isinstance(entry.Date, datetime):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a1bc47b02c816b967a0edd096716d7c6787930b6f030bb42408af3892fce9c4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[TutorBot_Sessions]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[TutorBot_Sessions\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 22,
                  "charOffset": 584,
                  "charLength": 26,
                  "snippet": {
                    "text": "database.TutorBot_Sessions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 492,
                  "charLength": 261,
                  "snippet": {
                    "text": "    async def tutorsession(self):\n        now = datetime.now(self.est)\n        for entry in database.TutorBot_Sessions:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.Date)\n            val = int((TutorSession - now).total_seconds())"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "131257991bdb14dd9df08483645648f617e204395619ab970c9354f7f08abba6"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[TutorSession_GracePeriod]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[TutorSession_GracePeriod\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 22,
                  "charOffset": 4368,
                  "charLength": 33,
                  "snippet": {
                    "text": "database.TutorSession_GracePeriod"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 120,
                  "startColumn": 1,
                  "charOffset": 4264,
                  "charLength": 283,
                  "snippet": {
                    "text": "    async def tutorsession_graceperiod(self):\n        now = datetime.now(self.est)\n        for entry in database.TutorSession_GracePeriod:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.GP_DATE)\n            val = int((TutorSession - now).total_seconds())"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b31ac4d26cd60cfb93b93d416fea49acbf2e79212b7ae3fe9b1e8f0ae4c3656a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[ResponseSpamBlacklist]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[ResponseSpamBlacklist\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 18,
                  "charOffset": 832,
                  "charLength": 30,
                  "snippet": {
                    "text": "database.ResponseSpamBlacklist"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 769,
                  "charLength": 137,
                  "snippet": {
                    "text": "def reload_blacklist():\n    blacklist.clear()\n    for entry in database.ResponseSpamBlacklist:\n        blacklist.append(entry.discordID)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d2b2e42931e6230ef2276d0115efd750110ea6d15c642387a51d1c70f6728a4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[ResponseSpamBlacklist]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[ResponseSpamBlacklist\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 21,
                  "charOffset": 14486,
                  "charLength": 30,
                  "snippet": {
                    "text": "database.ResponseSpamBlacklist"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 400,
                  "startColumn": 1,
                  "charOffset": 14427,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n    async def cog_load(self) -> None:\n        for item in database.ResponseSpamBlacklist:\n            blacklist.append(item.discordID)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3f79aef4fa2470925b70e8fd01738baa5b7b37d0e56d571e62333213bfc7b948"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type '{__ne__}', got 'None' instead",
            "markdown": "Expected type '{__ne__}', got 'None' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 974,
                  "startColumn": 64,
                  "charOffset": 36331,
                  "charLength": 4,
                  "snippet": {
                    "text": "None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 972,
                  "startColumn": 1,
                  "charOffset": 36171,
                  "charLength": 189,
                  "snippet": {
                    "text": "            async with channel.typing():\n                msg, file, S3_URL = await TicketExport(\n                    self, channel, ResponseLogChannel, author, None, True\n                )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ceb84d562c568c0277d7e52dd2e23837dcec0215ec91dd17a8bf0adf4a7d2b95"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[TicketInfo]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[TicketInfo\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1153,
                  "startColumn": 22,
                  "charOffset": 43968,
                  "charLength": 12,
                  "snippet": {
                    "text": "TicketInfoTB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1151,
                  "startColumn": 1,
                  "charOffset": 43854,
                  "charLength": 240,
                  "snippet": {
                    "text": "        TicketInfoTB = database.TicketInfo\n        guild = self.bot.get_guild(MainID.g_main)\n        for entry in TicketInfoTB:\n            channel: discord.TextChannel = self.bot.get_channel(entry.ChannelID)\n            if channel is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d21e478df669591dca9f0670b2c4abee57b87006e760b5f41faeae522dba6d75"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[Blacklist]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[Blacklist\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 51,
                  "charOffset": 1411,
                  "charLength": 18,
                  "snippet": {
                    "text": "database.Blacklist"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "charOffset": 1276,
                  "charLength": 309,
                  "snippet": {
                    "text": "\n    async def interaction_check(self, interaction: discord.Interaction, /) -> bool:\n        blacklisted_users = [p.discordID for p in database.Blacklist]\n        if interaction.user.id in blacklisted_users:\n            await interaction.response.send_message(\"You have been blacklisted from using commands!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "67aa30e462707afa7b241d609f6a3dbfe0f61b072ced8b90ff0760972c2afac0"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        }
      ],
      "automationDetails": {
        "id": "project/qodana/2022-04-24",
        "guid": "4d3f5c21-ce6c-4580-b5a4-bc972daf31bc"
      },
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "properties": {
        "qodana.sanity.results": [
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/checks.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3327,
                    "snippet": {
                      "text": "\"\"\" SETUP: If you require a specific command to be protected, you can use the @is_botAdmin check or ..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 125,
                    "snippet": {
                      "text": "\"\"\"\nSETUP:\nIf you require a specific command to be protected, you can use the @is_botAdmin check or create your own one here!"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "42b924e3ec5d7e2d6ec85747324af2dd51f4fc64072311cc04f664b7c111184d"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/common.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 64358,
                    "snippet": {
                      "text": "import asyncio import io import json import os import random import re import string import subproce..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 36,
                    "snippet": {
                      "text": "import asyncio\nimport io\nimport json"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "21431f329165975d5cc03670236867ab5260ddeab58884d7ddd26a9ef29f7270"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/docsapi.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3843,
                    "snippet": {
                      "text": "from __future__ import print_function import os.path from google.cloud import speech_v1p1beta1 as ..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 53,
                    "snippet": {
                      "text": "from __future__ import print_function\n\nimport os.path"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "ee07e4ee2e5c51eb43dfe6eca78f0dd59cebaf47ff462f828765c3c225c8f8df"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/database.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 17671,
                    "snippet": {
                      "text": "import collections import os from datetime import datetime from distutils.util import strtobool fro..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 58,
                    "snippet": {
                      "text": "import collections\nimport os\nfrom datetime import datetime"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "cad77e0c6f95d8e974176a4f25603cdaaa89637b023f6f17fe369f093a0db0f8"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/gh_modals.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 8847,
                    "snippet": {
                      "text": "from __future__ import annotations import os from typing import Dict, Literal, TYPE_CHECKING, Union..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 45,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport os"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "5424916cebd9d99c50c5f0fbeb7892344fd9cb91b23b97a8c92c67df05149f25"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/redirect_sdk.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 6247,
                    "snippet": {
                      "text": "from typing import List from datetime import datetime import pprint import typing from dotenv import..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 67,
                    "snippet": {
                      "text": "from typing import List\nfrom datetime import datetime\nimport pprint"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "e4d2f42338eaf6a28f076bc170272f24f8bac246551cac0baf79e204f31f8ba8"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/special_methods.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 22595,
                    "snippet": {
                      "text": "from __future__ import annotations import collections import json import os import subprocess impor..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 54,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport collections"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "2f5700ee00a547b1310f8797d74240500eb3e09ed3dec27562eaed25374f41c8"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/ModBot/cogs/mod.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 8352,
                    "snippet": {
                      "text": "import math import peewee import discord from core import common, database from core.common import ..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 26,
                    "snippet": {
                      "text": "import math\n\nimport peewee"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "a9fbabb92a90f6d71e30044a5bf5ea10c2e064d54eae9edd2b98848d5a3e3554"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 4016,
                    "snippet": {
                      "text": "import asyncio import json import os import re from datetime import datetime import discord import ..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 36,
                    "snippet": {
                      "text": "import asyncio\nimport json\nimport os"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "1f14691913b6ffb4f8f212c5a43b6ad7ff7a3638b0621f6047bbbb6a2930ecfb"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/ModBot/cogs/CommandsOnly.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 1594,
                    "snippet": {
                      "text": "import discord from core import database from core.common import rulesDict from discord.ext import c..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 74,
                    "snippet": {
                      "text": "import discord\nfrom core import database\nfrom core.common import rulesDict"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "fd671e6551b88a55fd532dce2b77c9f19985940a84461ea05a537bb435711dea"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/help.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 29696,
                    "snippet": {
                      "text": "# Copyright (c) 2015-2021 Rapptz # Copyright (c) 2022-present School Simplified from __future__ impo..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 114,
                    "snippet": {
                      "text": "# Copyright (c) 2015-2021 Rapptz\n# Copyright (c) 2022-present School Simplified\nfrom __future__ import annotations"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "7bfe7cf3d977839fa75014bf99e728f328f968fadaee28e38849dc3acd27fb69"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/voting.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 28761,
                    "snippet": {
                      "text": "import asyncio import datetime, pytz import random import string import os import json import ast i..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 50,
                    "snippet": {
                      "text": "import asyncio\nimport datetime, pytz\nimport random"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "3c2be43049780f697784cc6d1b6898e1d07019e79ff6cf2248b4be2160a2ea23"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/Blacklist.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3046,
                    "snippet": {
                      "text": "from __future__ import annotations import discord from core import database from core.checks import..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 50,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport discord"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "3abc9c1e6e06a8b00a9596e066a90a8bd2d26f79f16a8679fd98648a9d640705"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 25521,
                    "snippet": {
                      "text": "import asyncio import random import subprocess import sys import time from datetime import timedelta..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 46,
                    "snippet": {
                      "text": "import asyncio\nimport random\nimport subprocess"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "6f2d3ebd70f2c8befd0b6ab82d2f75117a8f4f73841908ff7f97d48cbe13c56a"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/todocommands.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3218,
                    "snippet": {
                      "text": "import discord from core import database from discord.ext import commands from core.common import C..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 73,
                    "snippet": {
                      "text": "import discord\nfrom core import database\nfrom discord.ext import commands"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "93aa650f4d6dd1825959dbacb8e8238b40f711a228a6a4f483e355e0f96c7412"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 18558,
                    "snippet": {
                      "text": "import subprocess import sys from pathlib import Path from threading import Thread from typing impor..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 53,
                    "snippet": {
                      "text": "import subprocess\nimport sys\nfrom pathlib import Path"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "d2ee504b2e7f7be1d85a55ed2855a29f66ed54dec72ae56e5a2f0cdff3368364"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 5697,
                    "snippet": {
                      "text": "from __future__ import print_function import random import string from typing import Literal impor..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 52,
                    "snippet": {
                      "text": "from __future__ import print_function\n\nimport random"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "b9397b755026fdf65b8511a71ec5df143c714860b1c5b45946566fbb78626bc0"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/RedirectService.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 1908,
                    "snippet": {
                      "text": "import os import aiohttp import discord from dotenv import load_dotenv from core.checks import is_bo..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 39,
                    "snippet": {
                      "text": "import os\nimport aiohttp\nimport discord"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "b77bdbbaec8d4aa02b002fc0e8671208cc27f124802a929a7f779faa481208e4"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/github_commands.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 2419,
                    "snippet": {
                      "text": "from __future__ import annotations import os from typing import Literal, TYPE_CHECKING, Optional f..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 45,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport os"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "7f6604ea9f215cd20374af6b640b8fd7256db5bde1d2e88c30071679bd52258b"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 7291,
                    "snippet": {
                      "text": "from typing import Literal import discord from discord import ui, app_commands from discord.ext imp..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 42,
                    "snippet": {
                      "text": "from typing import Literal\n\nimport discord"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "3e10c5e251a330950e9729ef7268f03833bbfa71b478772080541b90a68637de"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/commands_manager.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3485,
                    "snippet": {
                      "text": "from typing import Union, Literal import discord from discord import ui, ButtonStyle from discord.e..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 49,
                    "snippet": {
                      "text": "from typing import Union, Literal\n\nimport discord"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "d98c25df004b729056402c3517903c34c1ff95a6ef4eaab2e409b2c4f3996f84"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 69753,
                    "snippet": {
                      "text": "import datetime from datetime import datetime, timedelta import discord import pytz from core impor..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 57,
                    "snippet": {
                      "text": "import datetime\nfrom datetime import datetime, timedelta\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "1003433b42ed12f312fc11e5e426707286786ed5708da15672997b824c00f18e"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 30113,
                    "snippet": {
                      "text": "import asyncio import datetime from datetime import datetime, timedelta import discord from core im..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 71,
                    "snippet": {
                      "text": "import asyncio\nimport datetime\nfrom datetime import datetime, timedelta"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "0081990b208364ff0d3c42b59c6db39a7a8dc2607f07dbb76432b4e382a6d364"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 1504,
                    "snippet": {
                      "text": "import pytz import datetime from dateutil import parser import discord from discord.ext import tasks..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 55,
                    "snippet": {
                      "text": "import pytz\nimport datetime\nfrom dateutil import parser"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "4037c994a2340bdc4f37bf8bb0b6ed8783a5f0eadbe22c302b3f16077b598d19"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          }
        ],
        "deviceId": "200820300000000-e0d5-f6bb-7322-854909536002",
        "tags": [
          "qodana.sanity.results",
          "deviceId"
        ]
      }
    }
  ]
}