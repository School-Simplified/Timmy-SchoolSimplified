{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "QDPY",
          "fullName": "Qodana for Python",
          "version": "213.7162.129",
          "rules": [],
          "taxa": [
            {
              "id": "EditorConfig",
              "name": "EditorConfig"
            },
            {
              "id": "Jupyter",
              "name": "Jupyter"
            },
            {
              "id": "Python",
              "name": "Python"
            },
            {
              "id": "XML",
              "name": "XML"
            },
            {
              "id": "JSON and JSON5",
              "name": "JSON and JSON5"
            },
            {
              "id": "RegExp",
              "name": "RegExp"
            },
            {
              "id": "Properties files",
              "name": "Properties files"
            },
            {
              "id": "Django",
              "name": "Django"
            },
            {
              "id": "HTML",
              "name": "HTML"
            },
            {
              "id": "General",
              "name": "General"
            },
            {
              "id": "Structural search",
              "name": "Structural search"
            },
            {
              "id": "RELAX NG",
              "name": "RELAX NG"
            },
            {
              "id": "Pyramid",
              "name": "Pyramid"
            },
            {
              "id": "Proofreading",
              "name": "Proofreading"
            },
            {
              "id": "Internationalization",
              "name": "Internationalization"
            },
            {
              "id": "Version control",
              "name": "Version control"
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        },
        "extensions": [
          {
            "name": "org.editorconfig.editorconfigjetbrains",
            "version": "213.7162",
            "rules": [
              {
                "id": "EditorConfigCharClassRedundancy",
                "shortDescription": {
                  "text": "Unnecessary character class"
                },
                "fullDescription": {
                  "text": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example '[a]'→'a'.",
                  "markdown": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example `[a]`→`a`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigDeprecatedDescriptor",
                "shortDescription": {
                  "text": "Deprecated property"
                },
                "fullDescription": {
                  "text": "Reports EditorConfig properties that are no longer supported.",
                  "markdown": "Reports EditorConfig properties that are no longer supported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationUniqueness",
                "shortDescription": {
                  "text": "Extra top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple top-level declarations. There can be only one optional “root=true” top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed.",
                  "markdown": "Reports multiple top-level declarations. There can be only one optional \"root=true\" top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNumerousWildcards",
                "shortDescription": {
                  "text": "Too many wildcards"
                },
                "fullDescription": {
                  "text": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues.",
                  "markdown": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigWildcardRedundancy",
                "shortDescription": {
                  "text": "Redundant wildcard"
                },
                "fullDescription": {
                  "text": "Reports wildcards that become redundant when the “**” wildcard is used in the same section. The “**” wildcard defines a broader set of files than any other wildcard. That is why, any other wildcard used in the same section has no affect and can be removed.",
                  "markdown": "Reports wildcards that become redundant when the \"\\*\\*\" wildcard is used in the same section.\n\n\nThe \"\\*\\*\" wildcard defines a broader set of files than any other wildcard.\nThat is why, any other wildcard used in the same section has no affect and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPartialOverride",
                "shortDescription": {
                  "text": "Overlapping sections"
                },
                "fullDescription": {
                  "text": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: '[{foo,bar}]' and '[{foo,bas}]' both contain “foo”.",
                  "markdown": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: `[{foo,bar}]` and `[{foo,bas}]` both contain \"foo\"."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptySection",
                "shortDescription": {
                  "text": "Empty section"
                },
                "fullDescription": {
                  "text": "Reports sections that do not contain any EditorConfig properties.",
                  "markdown": "Reports sections that do not contain any EditorConfig properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigHeaderUniqueness",
                "shortDescription": {
                  "text": "EditorConfig section is not unique"
                },
                "fullDescription": {
                  "text": "Reports sections that define the same file pattern as other sections.",
                  "markdown": "Reports sections that define the same file pattern as other sections."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowingOption",
                "shortDescription": {
                  "text": "Overriding property"
                },
                "fullDescription": {
                  "text": "Reports properties that override the same properties defined earlier in the file. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes the same files as '[*.java]' but also sets indent_size to value 2. Thus the first declaration 'indent_size=4'will be ignored.",
                  "markdown": "Reports properties that override the same properties defined earlier in the file.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes the same files as `[*.java]` but also sets indent_size to value 2. Thus the first declaration `indent_size=4`will be ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigListAcceptability",
                "shortDescription": {
                  "text": "Unexpected value list"
                },
                "fullDescription": {
                  "text": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified.",
                  "markdown": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowedOption",
                "shortDescription": {
                  "text": "Overridden property"
                },
                "fullDescription": {
                  "text": "Reports properties that are already defined in other sections. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes all '*.java' files too but it also redefines indent_size. As a result the value 2 will be used for files matching '*.java'.",
                  "markdown": "Reports properties that are already defined in other sections.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes all `*.java` files too but it also redefines indent_size. As a result the value 2 will be used for files matching `*.java`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptyHeader",
                "shortDescription": {
                  "text": "Empty header"
                },
                "fullDescription": {
                  "text": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by 'gitignore'.",
                  "markdown": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by `gitignore`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueCorrectness",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports property values that do not meet value restrictions. For example, some properties may be only “true” or “false”, others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them.",
                  "markdown": "Reports property values that do not meet value restrictions. For example, some properties may be only \"true\" or \"false\", others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueUniqueness",
                "shortDescription": {
                  "text": "Non-unique list value"
                },
                "fullDescription": {
                  "text": "Reports duplicates in lists of values.",
                  "markdown": "Reports duplicates in lists of values."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigMissingRequiredDeclaration",
                "shortDescription": {
                  "text": "Required declarations are missing"
                },
                "fullDescription": {
                  "text": "Reports properties that miss the required declarations. Refer to the documentation for more information.",
                  "markdown": "Reports properties that miss the required declarations. Refer to the documentation for more information."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigCharClassLetterRedundancy",
                "shortDescription": {
                  "text": "Duplicate character class letter"
                },
                "fullDescription": {
                  "text": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example '[aa]'.",
                  "markdown": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example `[aa]`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigKeyCorrectness",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not supported by the IDE. Note: some “ij” domain properties may require specific language plugins.",
                  "markdown": "Reports properties that are not supported by the IDE. Note: some \"ij\" domain properties may require specific language plugins."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternEnumerationRedundancy",
                "shortDescription": {
                  "text": "Unnecessary braces"
                },
                "fullDescription": {
                  "text": "Reports pattern lists that are either empty '{}' or contain just one pattern, for example '{foo}'. The braces are needed only if there are two and more, for example: '{foo,bar}'",
                  "markdown": "Reports pattern lists that are either empty `{}` or contain just one pattern, for example `{foo}`. The braces are needed only if there are two and more, for example: `{foo,bar}`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigSpaceInHeader",
                "shortDescription": {
                  "text": "Space in file pattern"
                },
                "fullDescription": {
                  "text": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed.",
                  "markdown": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigOptionRedundancy",
                "shortDescription": {
                  "text": "Redundant property"
                },
                "fullDescription": {
                  "text": "Reports properties that are redundant when another applicable section already contains the same property and value. For example: '[*]\nindent_size=4\n[*.java]\nindent_size=4' are both applicable to '*.java' files and define the same 'indent_size' value.",
                  "markdown": "Reports properties that are redundant when another applicable section already contains the same property and value.\n\n\nFor example:\n\n\n    [*]\n    indent_size=4\n    [*.java]\n    indent_size=4\n\nare both applicable to `*.java` files and define the same `indent_size` value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationCorrectness",
                "shortDescription": {
                  "text": "Unexpected top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports unexpected top-level declarations. Top-level declarations other than “root=true” are not allowed in the EditorConfig file.",
                  "markdown": "Reports unexpected top-level declarations. Top-level declarations other than \"root=true\" are not allowed in the EditorConfig file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigReferenceCorrectness",
                "shortDescription": {
                  "text": "Invalid reference"
                },
                "fullDescription": {
                  "text": "Reports identifiers that are either unknown or have a wrong type.",
                  "markdown": "Reports identifiers that are either unknown or have a wrong type."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnusedDeclaration",
                "shortDescription": {
                  "text": "Unused declaration"
                },
                "fullDescription": {
                  "text": "Reports unused declarations. Such declarations can be removed.",
                  "markdown": "Reports unused declarations. Such declarations can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPairAcceptability",
                "shortDescription": {
                  "text": "Unexpected key-value pair"
                },
                "fullDescription": {
                  "text": "Reports key-value pairs that are not allowed in the current context.",
                  "markdown": "Reports key-value pairs that are not allowed in the current context."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternRedundancy",
                "shortDescription": {
                  "text": "Duplicate or redundant pattern"
                },
                "fullDescription": {
                  "text": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in '[{*.java,*}]' the first '*.java' pattern defines a narrower scope compared to '*'. That is why it is redundant and can be removed.",
                  "markdown": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in `[{*.java,*}]` the first `*.java` pattern defines a narrower scope compared to `*`. That is why it is redundant and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNoMatchingFiles",
                "shortDescription": {
                  "text": "No matching files"
                },
                "fullDescription": {
                  "text": "Reports sections with wildcard patterns that do not match any files under the directory in which the '.editorconfig' file is located.",
                  "markdown": "Reports sections with wildcard patterns that do not match any files under the directory in which the `.editorconfig` file is located."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnexpectedComma",
                "shortDescription": {
                  "text": "Unexpected comma"
                },
                "fullDescription": {
                  "text": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists.",
                  "markdown": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "Pythonid",
            "version": "213.7162",
            "rules": [
              {
                "id": "JupyterPackageInspection",
                "shortDescription": {
                  "text": "The 'jupyter' package is not installed"
                },
                "fullDescription": {
                  "text": "Reports cases when the 'jupyter' package is not installed for the selected Python interpreter. Without a properly installed 'jupyter' package, you cannot execute Jupyter notebooks. Click the corresponding link on the warning banner to install the missing package. You can also install the package in the Project Settings/Preferences or in the Python Packages tool window. See Installing Python package for more details.",
                  "markdown": "Reports cases when the `jupyter` package is not installed for the selected\nPython interpreter. Without a properly installed `jupyter` package, you cannot\nexecute Jupyter notebooks.\n\nClick the corresponding link on the warning banner to install the missing\npackage. You can also install the package in the Project **Settings/Preferences** or in the\n**Python Packages** tool window.\n\nSee [Installing Python package](https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html) for more details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Jupyter",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySetFunctionToLiteralInspection",
                "shortDescription": {
                  "text": "Function call can be replaced with set literal"
                },
                "fullDescription": {
                  "text": "Reports calls to the 'set' function that can be replaced with the 'set' literal. Example: def do_mult(a, b):\n    c = a * b\n    return set([c, a, b])\n When the quick-fix is applied, the code changes to: def do_mult(a, b):\n    c = a * b\n    return {c, a, b}",
                  "markdown": "Reports calls to the `set` function that can be replaced with\nthe `set` literal.\n\n**Example:**\n\n```\ndef do_mult(a, b):\n    c = a * b\n    return set([c, a, b])\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef do_mult(a, b):\n    c = a * b\n    return {c, a, b}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStatementEffectInspection",
                "shortDescription": {
                  "text": "Statement has no effect"
                },
                "fullDescription": {
                  "text": "Reports statements that have no effect. Example: class Car:\n    def __init__(self, speed=0):\n        self.speed = speed\n        self.time # has no effect\n\n2 + 3 # has no effect\n In this example, you can either add a field 'time' to the 'Car' class or introduce variables for the problematic statements.",
                  "markdown": "Reports statements that have no effect.\n\n**Example:**\n\n```\nclass Car:\n    def __init__(self, speed=0):\n        self.speed = speed\n        self.time # has no effect\n\n2 + 3 # has no effect\n```\n\nIn this example, you can either add a field `time` to the `Car` class or\nintroduce variables for the problematic statements."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMandatoryEncodingInspection",
                "shortDescription": {
                  "text": "No encoding specified for file"
                },
                "fullDescription": {
                  "text": "Reports a missing encoding comment in Python 2. Example: class Book(object):\n    def __init__(self):\n        pass\n When the quick-fix is applied, the missing comment is added: # coding=utf-8\nclass Book(object):\n    def __init__(self):\n        pass",
                  "markdown": "Reports a missing encoding comment in Python 2.\n\n**Example:**\n\n```\nclass Book(object):\n    def __init__(self):\n        pass\n```\n\nWhen the quick-fix is applied, the missing comment is added:\n\n```\n# coding=utf-8\nclass Book(object):\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInconsistentIndentationInspection",
                "shortDescription": {
                  "text": "Inconsistent indentation"
                },
                "fullDescription": {
                  "text": "Reports inconsistent indentation in Python source files when, for example, you use a mixture of tabs and spaces in your code.",
                  "markdown": "Reports inconsistent indentation in Python source files when, for example,\nyou use a mixture of tabs and spaces in your code."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAttributeOutsideInitInspection",
                "shortDescription": {
                  "text": "An instance attribute is defined outside `__init__`"
                },
                "fullDescription": {
                  "text": "Reports a problem when instance attribute definition is outside '__init__' method. Example:     class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n When the quick-fix is applied, the code sample changes to:     class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass",
                  "markdown": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypedDictInspection",
                "shortDescription": {
                  "text": "Invalid TypedDict definition and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid definition and usage of TypedDict. Example: from typing import TypedDict\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n    rate: int = 10  # Right-hand side values are not supported\n\n    def method(self): # Invalid statement in TypedDict\n        pass\n\n\nm = Movie(name=\"name\", year=1000, rate=9)\nprint(m[\"director\"])  # There is no the 'director' key in 'Movie'\ndel m[\"name\"]  # The 'name' key cannot be deleted\nm[\"year\"] = \"1001\"  # Expected 'int', got 'str'",
                  "markdown": "Reports invalid definition and usage of\n[TypedDict](https://www.python.org/dev/peps/pep-0589/).\n\n**Example:**\n\n```\nfrom typing import TypedDict\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n    rate: int = 10  # Right-hand side values are not supported\n\n    def method(self): # Invalid statement in TypedDict\n        pass\n\n\nm = Movie(name=\"name\", year=1000, rate=9)\nprint(m[\"director\"])  # There is no the 'director' key in 'Movie'\ndel m[\"name\"]  # The 'name' key cannot be deleted\nm[\"year\"] = \"1001\"  # Expected 'int', got 'str'\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPep8Inspection",
                "shortDescription": {
                  "text": "PEP 8 coding style violation"
                },
                "fullDescription": {
                  "text": "Reports violations of the PEP 8 coding style guide by running the bundled pycodestyle.py tool.",
                  "markdown": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingTypeHintsInspection",
                "shortDescription": {
                  "text": "Missing type hinting for function definition"
                },
                "fullDescription": {
                  "text": "Reports missing type hints for function declaration in one of the two formats: parameter annotations or a type comment. Select the Only when types are known checkbox if you want the inspection check the types collected from runtime or inferred.",
                  "markdown": "Reports missing type hints for function declaration in\none of the two formats: parameter annotations or a type comment.\n\nSelect the **Only when types are known** checkbox if you want the inspection check\nthe types collected from runtime or inferred."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTupleItemAssignmentInspection",
                "shortDescription": {
                  "text": "Tuple item assignment is prohibited"
                },
                "fullDescription": {
                  "text": "Reports assignments to a tuple item. t = ('red', 'blue', 'green', 'white')\nt[3] = 'black'\n A quick-fix offers to replace the tuple with a list.",
                  "markdown": "Reports assignments to a tuple item.\n\n```\nt = ('red', 'blue', 'green', 'white')\nt[3] = 'black'\n```\n\nA quick-fix offers to replace the tuple with a list."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedUrlInspection",
                "shortDescription": {
                  "text": "Django {% url %} tag arguments are unresolved"
                },
                "fullDescription": {
                  "text": "Reports a missing url in the 'url' tag. Example: {% url 'url_name' %}\n The IDE shows a warning if 'url_name' is not defined in the 'urls' file.",
                  "markdown": "Reports a missing url in the `url` tag.\n\n**Example:**\n\n```\n{% url 'url_name' %}\n```\n\nThe IDE shows a warning if `url_name` is not defined in the `urls` file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedStaticReferenceInspection",
                "shortDescription": {
                  "text": "Unresolved static reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved references to static resources. Example: {% load staticfiles %}\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'polls/style.css' %}\" />\n In this example, 'style.css' is highlighted if there is no such a file in the 'static/poll' directory.",
                  "markdown": "Reports unresolved references to static resources.\n\n**Example:**\n\n```\n{% load staticfiles %}\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'polls/style.css' %}\" />\n```\n\nIn this example, `style.css` is highlighted if there is no such a file in the `static/poll`\ndirectory."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInitNewSignatureInspection",
                "shortDescription": {
                  "text": "Incompatible signatures of __new__ and __init__"
                },
                "fullDescription": {
                  "text": "Reports incompatible signatures of the '__new__' and '__init__' methods. Example: class MyClass(object):\n    def __new__(cls, arg1):\n        return super().__new__(cls)\n\n    def __init__(self):\n        pass\n If the '__new__' and '__init__' have different arguments, then the 'MyClass' cannot be instantiated. As a fix, the IDE offers to apply the Change Signature refactoring.",
                  "markdown": "Reports incompatible signatures of the `__new__` and `__init__` methods.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def __new__(cls, arg1):\n        return super().__new__(cls)\n\n    def __init__(self):\n        pass\n```\n\nIf the `__new__` and `__init__` have different arguments, then the `MyClass`\ncannot be instantiated.\n\nAs a fix, the IDE offers to apply the Change Signature refactoring."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDunderSlotsInspection",
                "shortDescription": {
                  "text": "Invalid usages of classes with  '__slots__' definitions"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of a class with '__slots__' definitions. Example: class Foo:\n    __slots__ = ['foo', 'bar']\n\n\nfoo = Foo()\nfoo.baz = 'spam'",
                  "markdown": "Reports invalid usages of a class with `__slots__` definitions.\n\n**Example:**\n\n```\nclass Foo:\n    __slots__ = ['foo', 'bar']\n\n\nfoo = Foo()\nfoo.baz = 'spam'\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EndBlockNamesInspection",
                "shortDescription": {
                  "text": "Django endblock name doesn't match the block name"
                },
                "fullDescription": {
                  "text": "Reports incorrect names of the closing blocks. Example:   {% block my_block %}\n  {% endblock not_correct %}",
                  "markdown": "Reports incorrect names of the closing blocks.\n\n**Example:**\n\n```\n  {% block my_block %}\n  {% endblock not_correct %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingConstructorInspection",
                "shortDescription": {
                  "text": "Missed call to '__init__' of the super class"
                },
                "fullDescription": {
                  "text": "Reports cases when a call to the 'super' constructor in a class is missed. Example: class Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        pass\n The 'Pear' class should have a 'super' call in the '__init__' method. When the quick-fix is applied, the code changes to: class Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        super().__init__()",
                  "markdown": "Reports cases when a call to the `super` constructor in a class is missed.\n\n**Example:**\n\n```\nclass Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        pass\n```\n\nThe `Pear` class should have a `super` call in the `__init__`\nmethod.\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nclass Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        super().__init__()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDefaultArgumentInspection",
                "shortDescription": {
                  "text": "The default argument is mutable"
                },
                "fullDescription": {
                  "text": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for an argument. Default argument values are evaluated only once at function definition time, which means that modifying the default value of the argument will affect all subsequent calls of that function. Example: def func(s, cache={}):\n    cache[s] = None\n When the quick-fix is applied, the code changes to: def func(s, cache=None):\n    if cache is None:\n        cache = {}\n    cache[s] = None",
                  "markdown": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for\nan argument.   \n\nDefault argument values are evaluated only once at function definition time,\nwhich means that modifying the\ndefault value of the argument will affect all subsequent calls of that function.\n\n**Example:**\n\n```\ndef func(s, cache={}):\n    cache[s] = None\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef func(s, cache=None):\n    if cache is None:\n        cache = {}\n    cache[s] = None\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyShadowingBuiltinsInspection",
                "shortDescription": {
                  "text": "Shadowing built-in names"
                },
                "fullDescription": {
                  "text": "Reports shadowing built-in names, such as 'len' or 'list'. Example: def len(a, b, c):\n    d = a + b + c\n    return d\n In this code fragment, the 'len' built-in name is used. The IDE offers to apply the Rename refactoring as a fix.",
                  "markdown": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySimplifyBooleanCheckInspection",
                "shortDescription": {
                  "text": "Redundant boolean variable check"
                },
                "fullDescription": {
                  "text": "Reports equality comparison with a boolean literal. Example: def func(s):\n    if s.isdigit() == True:\n        return int(s)\n With the quick-fix applied, the code fragment will be simplified to: def func(s):\n    if s.isdigit():\n        return int(s)",
                  "markdown": "Reports equality comparison with a boolean literal.\n\n**Example:**\n\n```\ndef func(s):\n    if s.isdigit() == True:\n        return int(s)\n```\n\nWith the quick-fix applied, the code fragment will be simplified to:\n\n```\ndef func(s):\n    if s.isdigit():\n        return int(s)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodOverridingInspection",
                "shortDescription": {
                  "text": "Method signature does not match signature of overridden method"
                },
                "fullDescription": {
                  "text": "Reports inconsistencies in overriding method signatures. Example: class Book:\n    def add_title(self):\n        pass\n\n\nclass Novel(Book):\n    def add_title(self, text):\n        pass\n Parameters of the 'add_title' method in the 'Novel' class do not match the method signature specified in the 'Book' class. As a fix, the IDE offers to apply the Change Signature refactoring.",
                  "markdown": "Reports inconsistencies in overriding method signatures.\n\n**Example:**\n\n```\nclass Book:\n    def add_title(self):\n        pass\n\n\nclass Novel(Book):\n    def add_title(self, text):\n        pass\n```\n\nParameters of the `add_title` method in the `Novel` class do not match the method\nsignature specified in the `Book` class. As a fix, the IDE offers to apply the Change Signature\nrefactoring."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTestParametrizedInspection",
                "shortDescription": {
                  "text": "Incorrect arguments in @pytest.mark.parametrize"
                },
                "fullDescription": {
                  "text": "Reports functions that are decorated with @pytest.mark.parametrize but do not have arguments to accept parameters of the decorator.",
                  "markdown": "Reports functions that are decorated with [@pytest.mark.parametrize](https://docs.pytest.org/en/stable/parametrize.html) but do not have arguments to accept\nparameters of the decorator."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDecoratorInspection",
                "shortDescription": {
                  "text": "Class-specific decorator is used outside the class"
                },
                "fullDescription": {
                  "text": "Reports usages of '@classmethod' or '@staticmethod' decorators in methods outside a class. Example: class State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\n@classmethod\ndef change_state(self):\n    pass\n The 'change_state' method should not use the '@classmethod' decorator or it should be moved to the 'State' class declaration. If you apply the 'Remove decorator' action, the code changes to: class State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\ndef change_state(self):\n    pass",
                  "markdown": "Reports usages of `@classmethod` or `@staticmethod` decorators\nin methods outside a class.\n\n**Example:**\n\n```\nclass State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\n@classmethod\ndef change_state(self):\n    pass\n```\n\nThe `change_state` method should not use the `@classmethod` decorator or it should be\nmoved to the `State` class declaration.\n\nIf you apply the `Remove decorator` action, the code changes to:\n\n```\nclass State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\ndef change_state(self):\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAsyncCallInspection",
                "shortDescription": {
                  "text": "Missing `await` syntax in coroutine calls"
                },
                "fullDescription": {
                  "text": "Reports coroutines that were called without using the 'await' syntax. Example: async def bar():\n    pass\n\n\nasync def foo():\n    bar()\n After the quick-fix is applied, the code changes to: async def bar():\n    pass\n\n\nasync def foo():\n    await bar()",
                  "markdown": "Reports coroutines that were called\nwithout using the `await` syntax.\n\n**Example:**\n\n```\nasync def bar():\n    pass\n\n\nasync def foo():\n    bar()\n```\n\nAfter the quick-fix is applied, the code changes to:\n\n```\nasync def bar():\n    pass\n\n\nasync def foo():\n    await bar()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CommandLineInspection",
                "shortDescription": {
                  "text": "Incorrect CLI syntax"
                },
                "fullDescription": {
                  "text": "Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies that option names and arguments are correct. Do not disable the inspection if you are going to use command-line interfaces like manage.py in Django.",
                  "markdown": "Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies\nthat option names and arguments are correct.\n\nDo not disable the inspection if you are going to use command-line interfaces like [manage.py in Django](https://www.jetbrains.com/help/pycharm/running-manage-py.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyComparisonWithNoneInspection",
                "shortDescription": {
                  "text": "Using equality operators to compare with None"
                },
                "fullDescription": {
                  "text": "Reports comparisons with 'None'. That type of comparisons should always be done with 'is' or 'is not', never the equality operators. Example: a = 2\n\n\nif a == None:\n    print(\"Success\")\n Once the quick-fix is applied, the code changes to: a = 2\n\n\nif a is None:\n    print(\"Success\")",
                  "markdown": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyCallingNonCallableInspection",
                "shortDescription": {
                  "text": "Attempt to call a non-callable object"
                },
                "fullDescription": {
                  "text": "Reports a problem when you are trying to call objects that are not callable, like, for example, properties: class Record:\n    @property\n    def as_json(self):\n\njson = Record().as_json()",
                  "markdown": "Reports a problem when you are trying\nto call objects that are not callable, like, for example, properties:\n\n```\nclass Record:\n    @property\n    def as_json(self):\n\njson = Record().as_json()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnreachableCodeInspection",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports code fragments that cannot be normally reached. Example: if True:\n    print('Yes')\nelse:\n    print('No')\n As a fix, you might want to check and modify the algorithm to ensure it implements the expected logic.",
                  "markdown": "Reports code fragments that cannot be normally reached.\n\n**Example:**\n\n```\nif True:\n    print('Yes')\nelse:\n    print('No')\n```\n\nAs a fix, you might want to check and modify the algorithm to ensure it implements\nthe expected logic."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodParametersInspection",
                "shortDescription": {
                  "text": "Improper first parameter"
                },
                "fullDescription": {
                  "text": "Reports methods that lack the first parameter that is usually named 'self'. Example: class Movie:\n\n   def show():\n       pass\n When the quick-fix is applied, the code changes to: class Movie:\n\n   def show(self):\n       pass\n The inspection also reports naming issues in class methods. Example: class Movie:\n    @classmethod\n    def show(abc):\n        pass\n Since the first parameter of a class method should be 'cls', the IDE provides a quick-fix to rename it.",
                  "markdown": "Reports methods that lack the first parameter that is usually\nnamed `self`.\n\n**Example:**\n\n```\nclass Movie:\n\n   def show():\n       pass\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nclass Movie:\n\n   def show(self):\n       pass\n```\n\nThe inspection also reports naming issues in class methods.\n\n**Example:**\n\n```\nclass Movie:\n    @classmethod\n    def show(abc):\n        pass\n```\n\nSince the first parameter of a class method should be `cls`, the IDE provides a quick-fix\nto rename it."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyChainedComparisonsInspection",
                "shortDescription": {
                  "text": "Too complex chained comparisons"
                },
                "fullDescription": {
                  "text": "Reports chained comparisons that can be simplified. Example: 'def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if x >= xmin and x <= xmax:\n          pass' The IDE offers to simplify 'if x >= xmin and x <= xmax'. When the quick-fix is applied, the code changes to: 'def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if xmin <= x <= xmax:\n          pass'",
                  "markdown": "Reports chained comparisons that can be simplified.\n\n**Example:**\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if x >= xmin and x <= xmax:\n              pass\n\nThe IDE offers to simplify `if x >= xmin and x <= xmax`.\nWhen the quick-fix is applied, the code changes to:\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if xmin <= x <= xmax:\n              pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDocstringTypesInspection",
                "shortDescription": {
                  "text": "Type in docstring does not match inferred type"
                },
                "fullDescription": {
                  "text": "Reports types in docstring that do not match dynamically inferred types.",
                  "markdown": "Reports types in docstring that do not match dynamically inferred types."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoBrokenLineCommentInspection",
                "shortDescription": {
                  "text": "Broken line comment"
                },
                "fullDescription": {
                  "text": "Reports '#}' line comment ends in Django templates that do not have a matching line comment start. Example: comment #}\n The IDE highlights '#}' as it requires the corresponding '{#' token.",
                  "markdown": "Reports `#}` line comment ends in Django templates that do not have a\nmatching line comment start.\n\n**Example:**\n\n```\ncomment #}\n```\n\nThe IDE highlights `#}` as it requires the corresponding `{#` token."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyCompatibilityInspection",
                "shortDescription": {
                  "text": "Code is incompatible with specific Python versions"
                },
                "fullDescription": {
                  "text": "Reports incompatibility with the specified versions of Python. Enable this inspection if you need your code to be compatible with a range of Python versions, for example, if you are building a library. To define the range of the inspected Python versions, select the corresponding checkboxes in the Options section. For more information about the Python versions supported by the IDE, see the web help.",
                  "markdown": "Reports incompatibility with the specified versions of Python.\nEnable this inspection if you need your code to be compatible with a range of Python versions, for example,\nif you are building a library.\n\nTo define the range of the inspected Python versions, select the corresponding checkboxes in the **Options**\nsection.\n\nFor more information about the Python versions supported by the IDE, see the\n[web help](https://www.jetbrains.com/help/pycharm/python.html#support)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyGlobalUndefinedInspection",
                "shortDescription": {
                  "text": "Global variable is not defined at the module level"
                },
                "fullDescription": {
                  "text": "Reports problems when a variable defined through the 'global' statement is not defined in the module scope. Example: def foo():\n    global bar\n    print(bar)\n\nfoo()\n As a fix, you can move the global variable declaration: global bar\n\n\ndef foo():\n    print(bar)",
                  "markdown": "Reports problems when a variable defined through the `global`\nstatement is not defined in the module scope.\n\n**Example:**\n\n```\ndef foo():\n    global bar\n    print(bar)\n\nfoo()\n```\n\nAs a fix, you can move the global variable declaration:\n\n```\nglobal bar\n\n\ndef foo():\n    print(bar)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodFirstArgAssignmentInspection",
                "shortDescription": {
                  "text": "First argument of the method is reassigned"
                },
                "fullDescription": {
                  "text": "Reports cases when the first parameter, such as 'self' or 'cls', is reassigned in a method. Because in most cases, there are no objectives in such reassignment, the IDE indicates an error. Example: class Account:\n    def calc(self, balance):\n        if balance == 0:\n            self = balance\n        return self\n As a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct, you can invoke intention actions for this code and opt to ignore the warning.",
                  "markdown": "Reports cases when the first parameter,\nsuch as `self` or `cls`, is reassigned in a method.\nBecause in most cases, there are no objectives in such reassignment, the\nIDE indicates an error.\n\n**Example:**\n\n```\nclass Account:\n    def calc(self, balance):\n        if balance == 0:\n            self = balance\n        return self\n```\n\nAs a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct,\nyou can invoke intention actions for this code and opt to ignore the warning."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyProtocolInspection",
                "shortDescription": {
                  "text": "Invalid protocol definitions and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid definitions and usages of protocols introduced in PEP-544. Example: from typing import Protocol\n\n\nclass MyProtocol(Protocol):\n    def method(self, p: int) -> str:\n        pass\n\n\nclass MyClass(MyProtocol):\n    def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n        pass\n\n\nclass MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n    pass",
                  "markdown": "Reports invalid definitions and usages of protocols introduced in\n[PEP-544](https://www.python.org/dev/peps/pep-0544/).\n\n**Example:**\n\n```\nfrom typing import Protocol\n\n\nclass MyProtocol(Protocol):\n    def method(self, p: int) -> str:\n        pass\n\n\nclass MyClass(MyProtocol):\n    def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n        pass\n\n\nclass MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n    pass\n\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypeHintsInspection",
                "shortDescription": {
                  "text": "Invalid type hints definitions and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of type hints. Example: from typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n Available quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
                  "markdown": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodMayBeStaticInspection",
                "shortDescription": {
                  "text": "Method is not declared static"
                },
                "fullDescription": {
                  "text": "Reports any methods that do not require a class instance creation and can be made static. Example: class MyClass(object):\n    def my_method(self, x):\n        print(x)\n If a Make function from method quick-fix is applied, the code changes to: def my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n If you select the Make method static quick-fix, the '@staticmethod' decorator is added: class MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)",
                  "markdown": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTupleAssignmentBalanceInspection",
                "shortDescription": {
                  "text": "Tuple assignment balance is incorrect"
                },
                "fullDescription": {
                  "text": "Reports cases when the number of expressions on the right-hand side and targets on the left-hand side are not the same. Example: t = ('red', 'blue', 'green', 'white')\n(c1, c2, c3) = t\n As a quick-fix, you can modify the highlighted code fragment to restore the tuple balance.",
                  "markdown": "Reports cases when the number of expressions on the right-hand side\nand targets on the left-hand side are not the same.\n\n**Example:**\n\n```\nt = ('red', 'blue', 'green', 'white')\n(c1, c2, c3) = t\n```\n\nAs a quick-fix, you can modify the highlighted code fragment to restore the tuple\nbalance."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassHasNoInitInspection",
                "shortDescription": {
                  "text": "Class has no `__init__` method"
                },
                "fullDescription": {
                  "text": "Reports cases in Python 2 when a class has no '__init__' method, neither its parent classes. Example: class Book():\n    pass\n The quick-fix adds the '__init__' method: class Book():\n    def __init__(self):\n        pass",
                  "markdown": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CythonUsageBeforeDeclarationInspection",
                "shortDescription": {
                  "text": "Cython variable is used before its declaration"
                },
                "fullDescription": {
                  "text": "Reports Cython variables being referenced before declaration. Example: cdef int c_x\n\nprint(c_x, c_y)  # Variable 'c_y' is used before its declaration\n\ncdef int c_y = 0",
                  "markdown": "Reports Cython variables being referenced before declaration.\n\n**Example:**\n\n```\ncdef int c_x\n\nprint(c_x, c_y)  # Variable 'c_y' is used before its declaration\n\ncdef int c_y = 0\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyArgumentEqualDefaultInspection",
                "shortDescription": {
                  "text": "The function argument is equal to the default parameter value"
                },
                "fullDescription": {
                  "text": "Reports a problem when an argument passed to the function is equal to the default parameter value. This inspection is disabled by default to avoid performance degradation. Example: def my_function(a: int = 2):\n    print(a)\n\n\nmy_function(2)",
                  "markdown": "Reports a problem when an argument\npassed to the function is equal to the default parameter value.\n\nThis inspection is disabled by default to avoid performance degradation.\n\n**Example:**\n\n```\ndef my_function(a: int = 2):\n    print(a)\n\n\nmy_function(2)\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDictCreationInspection",
                "shortDescription": {
                  "text": "Dictionary creation can be rewritten by dictionary literal"
                },
                "fullDescription": {
                  "text": "Reports situations when you can rewrite dictionary creation by using a dictionary literal. This approach brings performance improvements. Example: dic = {}\ndic['var'] = 1\n When the quick-fix is applied, the code changes to: dic = {'var': 1}",
                  "markdown": "Reports situations when you can rewrite dictionary creation\nby using a dictionary literal.\n\nThis approach brings performance improvements.\n\n**Example:**\n\n```\ndic = {}\ndic['var'] = 1\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndic = {'var': 1}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStringFormatInspection",
                "shortDescription": {
                  "text": "Errors in string formatting operations"
                },
                "fullDescription": {
                  "text": "Reports errors in string formatting operations. Example 1: \"Hello {1}\".format(\"people\")\n Example 2: def bar():\n    return 1\n\n\n\"%s %s\" % bar()\n As a fix, you need to rewrite string formatting fragments to adhere to the formatting syntax.",
                  "markdown": "Reports errors in string formatting operations.\n\n**Example 1:**\n\n```\n\"Hello {1}\".format(\"people\")\n```\n\n**Example 2:**\n\n```\ndef bar():\n    return 1\n\n\n\"%s %s\" % bar()\n```\n\nAs a fix, you need to rewrite string formatting fragments to\nadhere to the [formatting syntax](https://docs.python.org/3/library/string.html#format-string-syntax)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyExceptionInheritInspection",
                "shortDescription": {
                  "text": "Exceptions do not inherit from standard 'Exception' class"
                },
                "fullDescription": {
                  "text": "Reports cases when a custom exception class is raised but does not inherit from the builtin Exception class. Example: class A:\n    pass\n\n\ndef me_exception():\n    raise A()\n The proposed quick-fix changes the code to: class A(Exception):\n    pass\n\n\ndef me_exception():\n    raise A()",
                  "markdown": "Reports cases when a custom exception class is\nraised but does not inherit from the\n[builtin Exception class](https://docs.python.org/3/library/exceptions.html).\n\n**Example:**\n\n```\nclass A:\n    pass\n\n\ndef me_exception():\n    raise A()\n```\n\nThe proposed quick-fix changes the code to:\n\n```\nclass A(Exception):\n    pass\n\n\ndef me_exception():\n    raise A()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAssignmentToLoopOrWithParameterInspection",
                "shortDescription": {
                  "text": "Assignments to 'for' loop or 'with' statement parameter"
                },
                "fullDescription": {
                  "text": "Reports the cases when you rewrite a loop variable with an inner loop:     for i in range(5):\n      for i in range(20, 25):\n          print(\"Inner\", i)\n      print(\"Outer\", i)\n  It also warns you if a variable declared in the 'with' statement is redeclared inside of the statement body:     with open(\"file\") as f:\n      f.read()\n      with open(\"file\") as f:",
                  "markdown": "Reports the cases when you rewrite a loop variable with an inner loop:\n\n```\n    for i in range(5):\n      for i in range(20, 25):\n          print(\"Inner\", i)\n      print(\"Outer\", i)\n  \n```\n\nIt also warns you if a variable declared in the `with` statement is redeclared inside of the statement body:\n\n```\n    with open(\"file\") as f:\n      f.read()\n      with open(\"file\") as f:\n  \n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedFilterInspection",
                "shortDescription": {
                  "text": "Unresolved filter"
                },
                "fullDescription": {
                  "text": "Reports unresolved filters in Django templates. Example:   {{ my_value|cool_filter:\"arg\" }}",
                  "markdown": "Reports unresolved filters in Django templates.\n\n**Example:**\n\n```\n  {{ my_value|cool_filter:\"arg\" }}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoRelationInspection",
                "shortDescription": {
                  "text": "Incorrect comparison expression in Django templates"
                },
                "fullDescription": {
                  "text": "Reports missing whitespaces before and after comparison operators in Django templates. Example: {% if my_var==1 %}\n{% endif %}",
                  "markdown": "Reports missing whitespaces before and after comparison operators in Django templates.\n\n**Example:**\n\n```\n{% if my_var==1 %}\n{% endif %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedTagInspection",
                "shortDescription": {
                  "text": "Unresolved tag"
                },
                "fullDescription": {
                  "text": "Reports unresolved tags in Django templates. Example: <h1>{{ question.question_text }}</h1>\n<start>\n The IDE highlights '<start>'. You can either remove the tag or apply the quick-fix to add '<start>' to custom HTML tags.",
                  "markdown": "Reports unresolved tags in Django templates.\n\n**Example:**\n\n```\n<h1>{{ question.question_text }}</h1>\n<start>\n```\n\nThe IDE highlights `<start>`. You can either remove the tag or apply the quick-fix to\nadd `<start>` to custom HTML tags."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyFromFutureImportInspection",
                "shortDescription": {
                  "text": "Improper position of from __future__ import"
                },
                "fullDescription": {
                  "text": "Reports 'from __future__ import' statements that are used not at the beginning of a file. Example: a = 1\nfrom __future__ import print_function\nprint()\n When the quick-fix is applied, the code changes to: from __future__ import print_function\n\na = 1\nprint()",
                  "markdown": "Reports `from __future__ import`\nstatements that are used not at\nthe beginning of a file.\n\n**Example:**\n\n```\na = 1\nfrom __future__ import print_function\nprint()\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nfrom __future__ import print_function\n\na = 1\nprint()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnresolvedReferencesInspection",
                "shortDescription": {
                  "text": "Unresolved references"
                },
                "fullDescription": {
                  "text": "Reports references in your code that cannot be resolved. In a dynamically typed language, this is possible in a limited number of cases. If a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be: def print_string(s):\n  print(s.abc())\n In this code fragment 's' is always a string and 'abc' should be highlighted as unresolved. However, 's' type is inferred as 'Any' and no warning is reported. The IDE provides quick-fix actions to add missing references on-the-fly.",
                  "markdown": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySuperArgumentsInspection",
                "shortDescription": {
                  "text": "Wrong arguments to call super"
                },
                "fullDescription": {
                  "text": "Reports cases when any call to 'super(A, B)' does not meet the following requirements: 'B' is an instance of 'A' 'B' a subclass of 'A' Example: class Figure:\n    def color(self):\n        pass\n\n\nclass Rectangle(Figure):\n    def color(self):\n        pass\n\n\nclass Square(Figure):\n    def color(self):\n        return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle\n As a fix, you can make the 'Square' an instance of the 'Rectangle' class.",
                  "markdown": "Reports cases when any call to `super(A, B)` does not meet the\nfollowing requirements:\n\n* `B` is an instance of `A`\n* `B` a subclass of `A`\n\n**Example:**\n\n```\nclass Figure:\n    def color(self):\n        pass\n\n\nclass Rectangle(Figure):\n    def color(self):\n        pass\n\n\nclass Square(Figure):\n    def color(self):\n        return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle\n```\n\nAs a fix, you can make the `Square` an instance of the `Rectangle` class."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPackageRequirementsInspection",
                "shortDescription": {
                  "text": "Unsatisfied package requirements"
                },
                "fullDescription": {
                  "text": "Reports packages mentioned in requirements files (for example, 'requirements.txt' or 'Pipfile') but not installed, or imported but not mentioned in requirements files. The IDE shows a quick-fix banner so that you can install the missing packages in one click.",
                  "markdown": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoOrmInspection",
                "shortDescription": {
                  "text": "Django ORM error"
                },
                "fullDescription": {
                  "text": "Reports several methods that may not be called due to some ORM reasons. Example: class Choice:\n    question = ForeignKey(Question, null=False)\n\n\nchoice_set = Question.objects.get(id=1).choice_set.remove()\n The 'remove' function can not be called if the foreign key has 'null=False'.",
                  "markdown": "Reports several methods that may not be called due to some ORM reasons.\n\n**Example:**\n\n```\nclass Choice:\n    question = ForeignKey(Question, null=False)\n\n\nchoice_set = Question.objects.get(id=1).choice_set.remove()\n```\n\nThe `remove` function can not be called if the foreign key has `null=False`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedTemplateReferenceInspection",
                "shortDescription": {
                  "text": "Unresolved template reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved file references in string literals of 'extends'> and 'include'> Django tags. Example: {% extends \"../DjangoApp/templatetags/base.html\"%}\n In this example, the 'base.html' tag is highlighted, because it is not available in the specified location.",
                  "markdown": "Reports unresolved file references in string literals of\n`extends`\\> and `include`\\> Django tags.\n\n**Example:**\n\n```\n{% extends \"../DjangoApp/templatetags/base.html\"%}\n```\n\nIn this example, the `base.html` tag is highlighted, because it is not available in the\nspecified location."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNonAsciiCharInspection",
                "shortDescription": {
                  "text": "File contains non-ASCII character"
                },
                "fullDescription": {
                  "text": "Reports cases in Python 2 when a file contains non-ASCII characters and does not have an encoding declaration at the top. Example: class A(object):\n# №5\n    def __init__(self):\n        pass\n In this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding declaration. Apply the proposed quick-fix to add a missing encoding declaration: # coding=utf-8\nclass A(object)\n# №5\n    def __init__(self):\n        pass",
                  "markdown": "Reports cases in Python 2 when a file contains non-ASCII characters and does not\nhave an encoding declaration at the top.\n\n**Example:**\n\n```\nclass A(object):\n# №5\n    def __init__(self):\n        pass\n```\n\nIn this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding\ndeclaration. Apply the proposed quick-fix to add a missing encoding declaration:\n\n```\n# coding=utf-8\nclass A(object)\n# №5\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTrailingSemicolonInspection",
                "shortDescription": {
                  "text": "Prohibited trailing semicolon in a statement"
                },
                "fullDescription": {
                  "text": "Reports trailing semicolons in statements. Example: def my_func(a):\n    c = a ** 2;\n    return c\n IDE provides a quick-fix that removes a trailing semicolon. When you apply it, the code changes to: def my_func(a):\n    c = a ** 2\n    return c",
                  "markdown": "Reports trailing semicolons in statements.\n\n**Example:**\n\n```\ndef my_func(a):\n    c = a ** 2;\n    return c\n```\n\nIDE provides a quick-fix that removes a trailing semicolon. When you\napply it, the code changes to:\n\n```\ndef my_func(a):\n    c = a ** 2\n    return c\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRedundantParenthesesInspection",
                "shortDescription": {
                  "text": "Redundant parentheses"
                },
                "fullDescription": {
                  "text": "Reports about redundant parentheses in expressions. The IDE provides the quick-fix action to remove the redundant parentheses.",
                  "markdown": "Reports about redundant parentheses in expressions.\n\nThe IDE provides the quick-fix action to remove the redundant parentheses."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAbstractClassInspection",
                "shortDescription": {
                  "text": "Class must implement all abstract methods"
                },
                "fullDescription": {
                  "text": "Reports cases when not all abstract properties or methods are defined in a subclass. Example: from abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_triangle(self):\n        pass\n When the quick-fix is applied, the IDE implements an abstract method for the 'Triangle' class: from abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_figure(self):\n        pass\n\n    def do_triangle(self):\n        pass",
                  "markdown": "Reports cases when not all abstract properties or methods are defined in\na subclass.\n\n**Example:**\n\n```\nfrom abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_triangle(self):\n        pass\n```\n\nWhen the quick-fix is applied, the IDE implements an abstract method for the `Triangle` class:\n\n```\nfrom abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_figure(self):\n        pass\n\n    def do_triangle(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOldStyleClassesInspection",
                "shortDescription": {
                  "text": "Old-style class contains new-style class features"
                },
                "fullDescription": {
                  "text": "Reports occurrences of new-style class features in old-style classes. The inspection highlights '__slots__', '__getattribute__', and 'super()' inside old-style classes.",
                  "markdown": "Reports occurrences of\n[new-style class features](https://www.python.org/doc/newstyle/)\nin old-style classes. The inspection highlights\n`__slots__`, `__getattribute__`, and `super()`\ninside old-style classes."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoIncompatibleInspection",
                "shortDescription": {
                  "text": "Incompatible code in Django templates"
                },
                "fullDescription": {
                  "text": "Reports features that are not available in the current Django version. Example: {% if my_var is True %}\n{% endif %}\n Available since 1.10. The IDE shows warning when discovered in the earlier versions.",
                  "markdown": "Reports features that are not available in the current Django version.\n\n**Example:**\n\n```\n{% if my_var is True %}\n{% endif %}\n```\n\nAvailable since 1.10. The IDE shows warning when discovered in the earlier versions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExtendsTagPositionInspection",
                "shortDescription": {
                  "text": "Misplaced {% extends %} tag"
                },
                "fullDescription": {
                  "text": "Reports the '{% extends %}' tag that is not the first tag in a Django template. Example: {% load my_custom_tags %}\n{% extends \"../DjangoApp/templatetags/my_custom_tags.py\"%}\n In this example, the '{% extends %}' tag is highlighted, because it should be placed before the '{% load %}' tag.",
                  "markdown": "Reports the `{% extends %}` tag that is not the first tag in a\nDjango template.\n\n**Example:**\n\n```\n{% load my_custom_tags %}\n{% extends \"../DjangoApp/templatetags/my_custom_tags.py\"%}\n```\n\nIn this example, the `{% extends %}` tag is highlighted, because it should be placed before\nthe `{% load %}` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyArgumentListInspection",
                "shortDescription": {
                  "text": "Incorrect call arguments"
                },
                "fullDescription": {
                  "text": "Reports discrepancies between declared parameters and actual arguments, as well as incorrect arguments, for example, duplicate named arguments, and incorrect argument order. Example: class Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n The correct code fragment looks at follows: class Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")",
                  "markdown": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInterpreterInspection",
                "shortDescription": {
                  "text": "An invalid interpreter"
                },
                "fullDescription": {
                  "text": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly configured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features. The IDE provides quick access to the interpreter settings.",
                  "markdown": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly\nconfigured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features.\n\nThe IDE provides quick access to the interpreter settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyBroadExceptionInspection",
                "shortDescription": {
                  "text": "Unclear exception clauses"
                },
                "fullDescription": {
                  "text": "Reports exception clauses that do not provide specific information about the problem. Example: Clauses that do not specify an exception class Clauses that are specified as 'Exception'",
                  "markdown": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypeCheckerInspection",
                "shortDescription": {
                  "text": "Incorrect type"
                },
                "fullDescription": {
                  "text": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases. Types of function parameters can be specified in docstrings or in Python 3 function annotations. Example: def foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n With the quick-fix, you can modify the problematic types: def foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()",
                  "markdown": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPropertyAccessInspection",
                "shortDescription": {
                  "text": "Inappropriate access to properties"
                },
                "fullDescription": {
                  "text": "Reports cases when properties are accessed inappropriately: Read-only properties are set Write-only properties are read Non-deletable properties are deleted Example: class MyClass:\n    @property\n    def read_only(self): return None\n\n    def __write_only_setter(self, value): pass\n\n    write_only = property(None, __write_only_setter)\n\n\na = MyClass()\na.read_only = 10 # property cannot be set\ndel a.read_only # property cannot be deleted\nprint(a.write_only) # property cannot be read",
                  "markdown": "Reports cases when properties are accessed inappropriately:\n\n* Read-only properties are set\n* Write-only properties are read\n* Non-deletable properties are deleted\n\n**Example:**\n\n```\nclass MyClass:\n    @property\n    def read_only(self): return None\n\n    def __write_only_setter(self, value): pass\n\n    write_only = property(None, __write_only_setter)\n\n\na = MyClass()\na.read_only = 10 # property cannot be set\ndel a.read_only # property cannot be deleted\nprint(a.write_only) # property cannot be read\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStubPackagesAdvertiser",
                "shortDescription": {
                  "text": "Stub packages advertiser"
                },
                "fullDescription": {
                  "text": "Reports availability of stub packages. Stub package is a package that contains type information for the corresponding runtime package. Using stub packages ensures better coding assistance for the corresponding python package.",
                  "markdown": "Reports availability of stub packages.\n\n\n[Stub package](https://www.python.org/dev/peps/pep-0561/) is a package that contains type information for the corresponding\nruntime package.\n\nUsing stub packages ensures better coding assistance for the corresponding python package."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyByteLiteralInspection",
                "shortDescription": {
                  "text": "A byte literal contains a non-ASCII character"
                },
                "fullDescription": {
                  "text": "Reports characters in byte literals that are outside ASCII range. Example: 's = b'№5''",
                  "markdown": "Reports characters in byte literals that are outside ASCII range.\n\n**Example:**\n`s = b'№5'`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRelativeImportInspection",
                "shortDescription": {
                  "text": "Suspicious relative imports"
                },
                "fullDescription": {
                  "text": "Reports usages of relative imports inside plain directories, for example, directories neither containing '__init__.py' nor explicitly marked as namespace packages.",
                  "markdown": "Reports usages of relative imports inside plain directories, for example, directories neither containing `__init__.py` nor\nexplicitly marked as namespace packages."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAugmentAssignmentInspection",
                "shortDescription": {
                  "text": "Assignment can be replaced with augmented assignment"
                },
                "fullDescription": {
                  "text": "Reports assignments that can be replaced with augmented assignments. Example: a = 23\nb = 3\na = a + b\n After the quick-fix is applied, the code changes to: a = 23\nb = 3\na += b",
                  "markdown": "Reports assignments that can be replaced with augmented assignments.\n\n**Example:**\n\n```\na = 23\nb = 3\na = a + b\n```\n\nAfter the quick-fix is applied, the code changes to:\n\n```\na = 23\nb = 3\na += b\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated function, class, or module"
                },
                "fullDescription": {
                  "text": "Reports usages of Python functions, or methods that are marked as deprecated and raise the 'DeprecationWarning' or 'PendingDeprecationWarning' warning. Also, this inspection highlights usages of 'abc.abstractstaticmethod', 'abc.abstractproperty', and 'abc.abstractclassmethod' decorators. Example: class Foo:\n    @property\n    def bar(self):\n        import warnings\n        warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n        return 5\n\n\nfoo = Foo()\nprint(foo.bar)",
                  "markdown": "Reports usages of Python functions, or methods that are marked as\ndeprecated and raise the `DeprecationWarning` or `PendingDeprecationWarning` warning.\n\nAlso, this inspection highlights usages of `abc.abstractstaticmethod`, `abc.abstractproperty`, and `abc.abstractclassmethod`\ndecorators.\n\n**Example:**\n\n```\nclass Foo:\n    @property\n    def bar(self):\n        import warnings\n        warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n        return 5\n\n\nfoo = Foo()\nprint(foo.bar)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnnecessaryBackslashInspection",
                "shortDescription": {
                  "text": "Unnecessary backslash"
                },
                "fullDescription": {
                  "text": "Reports backslashes in places where line continuation is implicit inside '()', '[]', and '{}'. Example: a = ('first', \\\n     'second', 'third')\n When the quick-fix is applied, the redundant backslash is deleted.",
                  "markdown": "Reports backslashes in places where line continuation is implicit inside `()`,\n`[]`, and `{}`.\n\n**Example:**\n\n```\na = ('first', \\\n     'second', 'third')\n```\n\nWhen the quick-fix is applied, the redundant backslash is deleted."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRedeclarationInspection",
                "shortDescription": {
                  "text": "Redeclared names without usages"
                },
                "fullDescription": {
                  "text": "Reports unconditional redeclarations of names without being used in between. Example: def x(): pass\n\n\nx = 2\n It applies to function and class declarations, and top-level assignments. When the warning is shown, you can try a recommended action, for example, you might be prompted to rename the variable.",
                  "markdown": "Reports unconditional redeclarations of names without being used in between.\n\n**Example:**\n\n```\ndef x(): pass\n\n\nx = 2\n```\n\nIt applies to function and class declarations, and top-level assignments.\n\nWhen the warning is shown, you can try a recommended action, for example, you might be prompted to\nrename the variable."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyShadowingNamesInspection",
                "shortDescription": {
                  "text": "Shadowing names from outer scopes"
                },
                "fullDescription": {
                  "text": "Reports shadowing names defined in outer scopes. Example: def outer(p):\n    def inner(p):\n        pass\n As a quick-fix, the IDE offers to remove a parameter or rename it.",
                  "markdown": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyFinalInspection",
                "shortDescription": {
                  "text": "Invalid usages of final classes, methods, and variables"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of final classes, methods and variables. Example: from typing import final\n\n\n@final\nclass A:\n    def a_method(self):\n        pass\n\n\nclass B(A):\n    def a_method(self):\n        pass",
                  "markdown": "Reports invalid usages of final classes,\nmethods and variables.\n\n**Example:**\n\n```\nfrom typing import final\n\n\n@final\nclass A:\n    def a_method(self):\n        pass\n\n\nclass B(A):\n    def a_method(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyramidSetupInspection",
                "shortDescription": {
                  "text": "Project is not installed for development"
                },
                "fullDescription": {
                  "text": "Reports cases when no 'python setup.py develop' command was executed for the Pyramid project. You need to execute this command to install the newly created project for development.",
                  "markdown": "Reports cases when no `python setup.py develop` command was executed for the Pyramid project.\n\nYou need to execute this command to install the newly created project for development."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Pyramid",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyProtectedMemberInspection",
                "shortDescription": {
                  "text": "Accessing a protected member of a class or a module"
                },
                "fullDescription": {
                  "text": "Reports cases when a protected member is accessed outside the class, a descendant of the class where it is defined, or a module. class Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method",
                  "markdown": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStubPackagesCompatibilityInspection",
                "shortDescription": {
                  "text": "Incompatible stub packages"
                },
                "fullDescription": {
                  "text": "Reports stub packages that do not support the version of the corresponding runtime package. A stub package contains type information for some runtime package.",
                  "markdown": "Reports stub packages that do not support the version of the corresponding runtime package.\n\nA [stub package](https://www.python.org/dev/peps/pep-0561/) contains type information for some runtime package."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoCloseTagInspection",
                "shortDescription": {
                  "text": "Mismatched opening and closing tags"
                },
                "fullDescription": {
                  "text": "Reports cases when opening tags in Django templates are not correctly matched by closing tags. Example: {% if error_message %}<p><strong>{{ error_message }}</p>{% endif %}\n The IDE reports an error on the 'strong' tag not being closed.",
                  "markdown": "Reports cases when opening tags in Django templates are not correctly matched by closing tags.\n\n**Example:**\n\n```\n{% if error_message %}<p><strong>{{ error_message }}</p>{% endif %}\n```\n\nThe IDE reports an error on the `strong` tag not being closed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnboundLocalVariableInspection",
                "shortDescription": {
                  "text": "Unbound local variables"
                },
                "fullDescription": {
                  "text": "Reports local variables referenced before assignment. Example: x = 0\nif x > 10:\n    b = 3\nprint(b)\n The IDE reports a problem for 'print(b)'. A possible fix is: x = 0\nif x > 10:\n    b = 3\n    print(b)",
                  "markdown": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNamedTupleInspection",
                "shortDescription": {
                  "text": "Invalid definition of 'typing.NamedTuple'"
                },
                "fullDescription": {
                  "text": "Reports invalid definition of a typing.NamedTuple. Example: import typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    last: str = \"\"\n    middle: str\n As a fix, place the field with the default value after the fields without default values: import typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    middle: str\n    last: str = \"\"",
                  "markdown": "Reports invalid definition of a\n[typing.NamedTuple](https://docs.python.org/3/library/typing.html#typing.NamedTuple).\n\n**Example:**\n\n```\nimport typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    last: str = \"\"\n    middle: str\n```\n\nAs a fix, place the field with the default value after the fields without default values:\n\n```\nimport typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    middle: str\n    last: str = \"\"\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySingleQuotedDocstringInspection",
                "shortDescription": {
                  "text": "Single quoted docstring"
                },
                "fullDescription": {
                  "text": "Reports docstrings that do not adhere to the triple double-quoted string format. Example: def calc(self, balance=0):\n    'param: balance'\n    self.balance = balance\n When the quick-fix is applied, the code changes to: def calc(self, balance=0):\n    \"\"\"param: balance\"\"\"\n    self.balance = balance",
                  "markdown": "Reports docstrings that do not adhere to the triple double-quoted string format.\n\n**Example:**\n\n```\ndef calc(self, balance=0):\n    'param: balance'\n    self.balance = balance\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef calc(self, balance=0):\n    \"\"\"param: balance\"\"\"\n    self.balance = balance\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnusedLocalInspection",
                "shortDescription": {
                  "text": "Unused local symbols"
                },
                "fullDescription": {
                  "text": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
                  "markdown": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyReturnFromInitInspection",
                "shortDescription": {
                  "text": "__init__ method that returns a value"
                },
                "fullDescription": {
                  "text": "Reports occurrences of 'return' statements with a return value inside '__init__' methods of classes. Example: class Sum:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.sum = a + b\n        return self.sum\n A constructor should not return any value. The '__init__' method should only initialize the values of instance members for news objects. As a quick-fix, the IDE offers to remove the 'return' statement.",
                  "markdown": "Reports occurrences of `return` statements with a return value inside\n`__init__` methods of classes.\n\n**Example:**\n\n```\nclass Sum:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.sum = a + b\n        return self.sum\n```\n\nA constructor should not return any value. The `__init__` method should\nonly initialize the values of instance members for news objects.\n\nAs a quick-fix, the IDE offers to remove the `return` statement."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNestedDecoratorsInspection",
                "shortDescription": {
                  "text": "Problematic nesting of decorators"
                },
                "fullDescription": {
                  "text": "Reports problems with nesting decorators. The inspection highlights the cases when 'classmethod' or 'staticmethod' is applied before another decorator. Example: def innocent(f):\n    return f\n\n\nclass A:\n    @innocent  # Decorator will not receive a callable it may expect\n    @classmethod\n    def f2(cls):\n        pass\n\n    @innocent  # Decorator will not receive a callable it may expect\n    @staticmethod\n    def f1():\n        pass\n As a quick-fix, the IDE offers to remove the decorator.",
                  "markdown": "Reports problems with nesting decorators. The inspection highlights the cases when `classmethod` or `staticmethod`\nis applied before another decorator.\n\n**Example:**\n\n```\ndef innocent(f):\n    return f\n\n\nclass A:\n    @innocent  # Decorator will not receive a callable it may expect\n    @classmethod\n    def f2(cls):\n        pass\n\n    @innocent  # Decorator will not receive a callable it may expect\n    @staticmethod\n    def f1():\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove the decorator."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingOrEmptyDocstringInspection",
                "shortDescription": {
                  "text": "Missing or empty docstring"
                },
                "fullDescription": {
                  "text": "Reports missing and empty docstrings. Example of a missing docstring def demo(a):\n    c = a ** 2\n Example of an empty docstring def demo(a):\n    \"\"\"\n    \"\"\"\n    c = a ** 2\n When the quick-fix is applied, the code fragments change to: def demo(a):\n    \"\"\"\n\n    :param a:\n    \"\"\"\n    c = a ** 2\n You need to provide some details about the parameter in the generated template.",
                  "markdown": "Reports missing and empty docstrings.\n\n**Example of a missing docstring**\n\n```\ndef demo(a):\n    c = a ** 2\n```\n\n**Example of an empty docstring**\n\n```\ndef demo(a):\n    \"\"\"\n    \"\"\"\n    c = a ** 2\n```\n\nWhen the quick-fix is applied, the code fragments change to:\n\n```\ndef demo(a):\n    \"\"\"\n\n    :param a:\n    \"\"\"\n    c = a ** 2\n```\n\nYou need to provide some details about the parameter in the generated template."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedBlockNamesInspection",
                "shortDescription": {
                  "text": "Duplicated block names"
                },
                "fullDescription": {
                  "text": "Reports duplicated block names in Django templates. Example: <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>{% block title %}My amazing site{% endblock %}</title>\n</head>\n\n<body>\n    <div id=\"sidebar\">\n        {% block title %}\n        <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/blog/\">Blog</a></li>\n        </ul>\n        {% endblock %}\n    </div>\n\n    <div id=\"content\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>",
                  "markdown": "Reports duplicated block names in Django templates.\n\n**Example:**\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>{% block title %}My amazing site{% endblock %}</title>\n</head>\n\n<body>\n    <div id=\"sidebar\">\n        {% block title %}\n        <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/blog/\">Blog</a></li>\n        </ul>\n        {% endblock %}\n    </div>\n\n    <div id=\"content\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOverloadsInspection",
                "shortDescription": {
                  "text": "Overloads in regular Python files"
                },
                "fullDescription": {
                  "text": "Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are not compatible with the implementation. Example: from typing import overload\n\n\n@overload\ndef foo(p1, p2): # Overload signature is not compatible with the implementation\n    pass\n\n\n@overload\ndef foo(p1): # Overload signature is not compatible with the implementation\n    pass\n\n\ndef foo(p1, p2, p3):\n    print(p1, p2, p3)",
                  "markdown": "Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are\nnot compatible with the implementation.\n\n**Example:**\n\n```\nfrom typing import overload\n\n\n@overload\ndef foo(p1, p2): # Overload signature is not compatible with the implementation\n    pass\n\n\n@overload\ndef foo(p1): # Overload signature is not compatible with the implementation\n    pass\n\n\ndef foo(p1, p2, p3):\n    print(p1, p2, p3)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPep8NamingInspection",
                "shortDescription": {
                  "text": "PEP 8 naming convention violation"
                },
                "fullDescription": {
                  "text": "Reports violations of the PEP8 naming conventions. Example: class mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n In this code fragment, IDE offers to rename 'mammalia' to 'Mammalia'. When the quick-fix is applied, the code change to: class Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")",
                  "markdown": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedLoadInspection",
                "shortDescription": {
                  "text": "Unresolved library inspection"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in Django load tags. Example:   {% load something_nonexistent %}",
                  "markdown": "Reports unresolved references in Django load tags.\n\n**Example:**\n\n```\n  {% load something_nonexistent %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDictDuplicateKeysInspection",
                "shortDescription": {
                  "text": "Dictionary contains duplicate keys"
                },
                "fullDescription": {
                  "text": "Reports using the same value as the dictionary key twice. Example: dic = {\"a\": [1, 2], \"a\": [3, 4]}",
                  "markdown": "Reports using the same value as the dictionary key twice.\n\n**Example:**\n\n```\ndic = {\"a\": [1, 2], \"a\": [3, 4]}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyExceptClausesOrderInspection",
                "shortDescription": {
                  "text": "Wrong order of 'except' clauses"
                },
                "fullDescription": {
                  "text": "Reports cases when 'except' clauses are not in the proper order, from the more specific to the more generic, or one exception class is caught twice. If you do not fix the order, some exceptions may not be caught by the most specific handler. Example: try:\n    call()\nexcept ValueError:\n    pass\nexcept UnicodeError:\n    pass\n The IDE recommends moving the clause up. When the quick-fix is applied, the code changes to: try:\n    call()\nexcept UnicodeError:\n    pass\nexcept ValueError:\n    pass",
                  "markdown": "Reports cases when `except` clauses are not in the proper order,\nfrom the more specific to the more generic, or one exception class is caught twice.\n\n\nIf you do not fix the order, some exceptions may not be caught by the most specific handler.\n\n**Example:**\n\n```\ntry:\n    call()\nexcept ValueError:\n    pass\nexcept UnicodeError:\n    pass\n```\n\nThe IDE recommends moving the clause up. When the quick-fix is applied, the code changes to:\n\n```\ntry:\n    call()\nexcept UnicodeError:\n    pass\nexcept ValueError:\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDataclassInspection",
                "shortDescription": {
                  "text": "Invalid definition and usage of Data Classes"
                },
                "fullDescription": {
                  "text": "Reports invalid definitions and usages of classes created with 'dataclasses' or 'attr' modules. Example: import dataclasses\n\n\n@dataclasses.dataclass\nclass FullName:\n    first: str\n    middle: str = \"\"\n    last: str",
                  "markdown": "Reports invalid definitions and usages of classes created with\n`dataclasses` or `attr` modules.\n\n**Example:**\n\n```\nimport dataclasses\n\n\n@dataclasses.dataclass\nclass FullName:\n    first: str\n    middle: str = \"\"\n    last: str\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassicStyleClassInspection",
                "shortDescription": {
                  "text": "Classic style class usage"
                },
                "fullDescription": {
                  "text": "Reports classic style classes usage. This inspection applies only to Python 2. Example: class A:\n    pass\n With quick-fixes provided by the IDE, this code fragment changes to: class A(object):\n    def __init__(self):\n        pass",
                  "markdown": "Reports [classic style classes](https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes) usage. This inspection applies only to Python 2.\n\n**Example:**\n\n```\nclass A:\n    pass\n```\n\nWith quick-fixes provided by the IDE, this code fragment changes to:\n\n```\nclass A(object):\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUrlArgumentsInspection",
                "shortDescription": {
                  "text": "Incorrect arguments in the ' {% url %}' tag"
                },
                "fullDescription": {
                  "text": "Reports missing parameters in the template file if the 'url()' function has parameters in its URL path. Example: In the 'url.py' file url(r'^(?P<question_id>[0-9]+)/', views.detail, name='detail')\n In the template file {% url 'polls:detail' %}",
                  "markdown": "Reports missing parameters in the template file if the `url()`\nfunction has parameters in its URL path.\n\n**Example:**\n\nIn the `url.py` file\n\n```\nurl(r'^(?P<question_id>[0-9]+)/', views.detail, name='detail')\n```\n\nIn the template file\n\n```\n{% url 'polls:detail' %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNoneFunctionAssignmentInspection",
                "shortDescription": {
                  "text": "Assigning function calls that don't return anything"
                },
                "fullDescription": {
                  "text": "Reports cases when an assignment is done on a function that does not return anything. This inspection is similar to pylint inspection E1111. Example: def just_print():\n    print(\"Hello!\")\n\n\naction = just_print()\n As a quick-fix, the IDE offers to remove the assignment.",
                  "markdown": "Reports cases when an assignment is done on a function that does not return anything.\nThis inspection is similar to [pylint inspection E1111](https://docs.pylint.org/en/1.6.0/features.html#id6).\n\n\n**Example:**\n\n```\ndef just_print():\n    print(\"Hello!\")\n\n\naction = just_print()\n```\n\nAs a quick-fix, the IDE offers to remove the assignment."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPropertyDefinitionInspection",
                "shortDescription": {
                  "text": "Incorrect property definition"
                },
                "fullDescription": {
                  "text": "Reports problems with the arguments of 'property()' and functions annotated with '@property'. class C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass\n A quick-fix offers to update parameters.",
                  "markdown": "Reports problems with the arguments of `property()` and functions\nannotated with `@property`.\n\n```\nclass C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass\n```\n\nA quick-fix offers to update parameters."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyIncorrectDocstringInspection",
                "shortDescription": {
                  "text": "Incorrect docstring"
                },
                "fullDescription": {
                  "text": "Reports mismatched parameters in a docstring. For example, 'b' is highlighted, because there is no such a parameter in the 'add' function.     def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n The inspection does not warn you of missing parameters if none of them is mentioned in a docstring: def mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass",
                  "markdown": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JupyterKernelInspection",
                "shortDescription": {
                  "text": "Notebook kernel doesn't match the Python interpreter"
                },
                "fullDescription": {
                  "text": "Reports cases when the Python interpreter is not configured as a notebook kernel. This inspection prevents discrepancies between Code Insight and runtime behavior of the Jupyter notebook code cells. If you see the following warning, the kernel of the newly configured server doesn't match your current Python interpreter. For example, it might have a different set of the installed packages. You can register your Python interpreter by clicking the corresponding link on the warning banner. After that, you can see the interpreter in the list of the configured server kernels. See Manage Jupyter notebook servers for more details.",
                  "markdown": "Reports cases when the Python interpreter is not configured as a notebook kernel.\nThis inspection prevents discrepancies between Code Insight and runtime behavior of the\nJupyter notebook code cells.\n\nIf you see the following warning, the kernel of the newly configured server doesn't match your current Python interpreter.\nFor example, it might have a different set of the installed packages.\n\nYou can register your Python interpreter by clicking the corresponding\nlink on the warning banner. After that, you can see the interpreter in the list of the configured server kernels.\n\nSee [Manage Jupyter notebook servers](https://www.jetbrains.com/help/pycharm/configuring-jupyter-notebook.html) for more details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Jupyter",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyListCreationInspection",
                "shortDescription": {
                  "text": "Non-optimal list declaration"
                },
                "fullDescription": {
                  "text": "Reports cases when a list declaration can be rewritten with a list literal. This ensures better performance of your application. Example: l = [1]\nl.append(2)\n When the quick-fix is applied, the code changes to: l = [1, 2]",
                  "markdown": "Reports cases when a list declaration\ncan be rewritten with a list literal.\n\nThis ensures better performance of your application.\n\n**Example:**\n\n```\nl = [1]\nl.append(2)\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nl = [1, 2]\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij",
            "version": "213.7162.129",
            "rules": [
              {
                "id": "XmlHighlighting",
                "shortDescription": {
                  "text": "XML highlighting"
                },
                "fullDescription": {
                  "text": "Reports XML validation problems in the results of a batch code inspection.",
                  "markdown": "Reports XML validation problems in the results of a batch code inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDuplicatedId",
                "shortDescription": {
                  "text": "Duplicate 'id' attribute"
                },
                "fullDescription": {
                  "text": "Reports a duplicate 'id' attribute in XML.",
                  "markdown": "Reports a duplicate `id` attribute in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated JSON property"
                },
                "fullDescription": {
                  "text": "Reports a deprecated property in a JSON file. Note that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'.",
                  "markdown": "Reports a deprecated property in a JSON file.  \nNote that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateCharacterInClass",
                "shortDescription": {
                  "text": "Duplicate character in character class"
                },
                "fullDescription": {
                  "text": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex. Example: '[aabc]' After the quick-fix is applied: '[abc]'",
                  "markdown": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\n**Example:**\n\n\n      [aabc]\n\nAfter the quick-fix is applied:\n\n\n      [abc]\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaRefReference",
                "shortDescription": {
                  "text": "Unresolved '$ref' and '$schema' references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved '$ref' or '$schema' path in a JSON schema.",
                  "markdown": "Reports an unresolved `$ref` or `$schema` path in a JSON schema.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownBooleanAttribute",
                "shortDescription": {
                  "text": "Incorrect boolean attribute"
                },
                "fullDescription": {
                  "text": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlInvalidId",
                "shortDescription": {
                  "text": "Unresolved 'id' reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved 'id' reference in XML.",
                  "markdown": "Reports an unresolved `id` reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnboundNsPrefix",
                "shortDescription": {
                  "text": "Unbound namespace prefix"
                },
                "fullDescription": {
                  "text": "Reports an unbound namespace prefix in XML.",
                  "markdown": "Reports an unbound namespace prefix in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedCode",
                "shortDescription": {
                  "text": "Duplicated code fragment"
                },
                "fullDescription": {
                  "text": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in File | Settings | Editor | Duplicates.",
                  "markdown": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in [File \\| Settings \\| Editor \\| Duplicates](settings://duplicates.index)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredAttributes",
                "shortDescription": {
                  "text": "Missing required attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentLineSeparators",
                "shortDescription": {
                  "text": "Inconsistent line separators"
                },
                "fullDescription": {
                  "text": "Reports files with line separators different from the ones that are specified in the project's settings. For example, the inspection will be triggered if you set the line separator to '\\n' in Settings | Editor | Code Style | Line separator, while the file you are editing uses '\\r\\n' as a line separator. The inspection also warns you about mixed line separators within a file.",
                  "markdown": "Reports files with line separators different from the ones that are specified in the project's settings.\n\nFor example, the inspection will be triggered if you set the line separator to `\\n` in **Settings \\| Editor \\| Code Style \\| Line separator** ,\nwhile the file you are editing uses `\\r\\n` as a line separator.\n\nThe inspection also warns you about mixed line separators within a file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSuppression",
                "shortDescription": {
                  "text": "Redundant suppression"
                },
                "fullDescription": {
                  "text": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context: '@SuppressWarning' annotation, or '// noinspection' line comment, or '/** noinspection */' JavaDoc comment Example: 'public class C {\n // symbol is already private,\n // but annotation is still around\n  @SuppressWarnings({\"WeakerAccess\"})\n private boolean CONST = true;\n void f() {\n    CONST = false;\n  }\n}'",
                  "markdown": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\n* `@SuppressWarning` annotation, or\n* `// noinspection` line comment, or\n* `/** noinspection */` JavaDoc comment\n\nExample:\n\n\n    public class C {\n     // symbol is already private,\n     // but annotation is still around\n      @SuppressWarnings({\"WeakerAccess\"})\n     private boolean CONST = true;\n     void f() {\n        CONST = false;\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ProblematicWhitespace",
                "shortDescription": {
                  "text": "Problematic whitespace"
                },
                "fullDescription": {
                  "text": "Reports the following problems: Tabs used for indentation when the code style is configured to use only spaces. Spaces used for indentation when the code style is configured to use only tabs. Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs.",
                  "markdown": "Reports the following problems:\n\n* Tabs used for indentation when the code style is configured to use only spaces.\n* Spaces used for indentation when the code style is configured to use only tabs.\n* Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file in a link.",
                  "markdown": "Reports an unresolved file in a link."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SSBasedInspection",
                "shortDescription": {
                  "text": "Structural search inspection"
                },
                "fullDescription": {
                  "text": "Allows configuring Structural Search/Structural Replace templates that you can apply to the file you are editing. All matches will be highlighted and marked with the template name that you have configured. If you configure the Structural Replace pattern as well, the corresponding replace option will be available as a quick-fix.",
                  "markdown": "Allows configuring **Structural Search/Structural Replace** templates that you can apply to the file you are editing.\n\nAll matches will be highlighted and marked with the template name that you have configured.\nIf you configure the **Structural Replace** pattern as well, the corresponding replace option will be available as a quick-fix."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Structural search",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LongLine",
                "shortDescription": {
                  "text": "The line is longer than allowed by code style"
                },
                "fullDescription": {
                  "text": "Reports lines that are longer than the right margin parameter specified in the Code Style settings.",
                  "markdown": "Reports lines that are longer than the **right margin** parameter specified in the **Code Style** settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnusedNamespaceDeclaration",
                "shortDescription": {
                  "text": "Unused schema declaration"
                },
                "fullDescription": {
                  "text": "Reports an unused namespace declaration or location hint in XML.",
                  "markdown": "Reports an unused namespace declaration or location hint in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlWrongRootElement",
                "shortDescription": {
                  "text": "Wrong root element"
                },
                "fullDescription": {
                  "text": "Reports a root tag name different from the name specified in the '<doctype>' tag.",
                  "markdown": "Reports a root tag name different from the name specified in the `<doctype>` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEmptyAlternationBranch",
                "shortDescription": {
                  "text": "Empty branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation. Example: '(alpha||bravo)' After the quick-fix is applied: '(alpha|bravo)' New in 2017.2",
                  "markdown": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation.\n\n**Example:**\n\n\n      (alpha||bravo)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo)\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathEvaluateUnknownKey",
                "shortDescription": {
                  "text": "Unknown property key used for JSONPath evaluate expression"
                },
                "fullDescription": {
                  "text": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate.",
                  "markdown": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckValidXmlInScriptTagBody",
                "shortDescription": {
                  "text": "Malformed content of 'script' tag"
                },
                "fullDescription": {
                  "text": "Reports invalid XML contents of a 'script' tag.",
                  "markdown": "Reports invalid XML contents of a `script` tag.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Annotator",
                "shortDescription": {
                  "text": "Annotator"
                },
                "fullDescription": {
                  "text": "Reports problems that are found by language annotators in the result of a batch code inspection run.",
                  "markdown": "Reports problems that are found by language annotators in the result of a batch code inspection run."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlPathReference",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in XML.",
                  "markdown": "Reports an unresolved file reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSingleCharAlternation",
                "shortDescription": {
                  "text": "Single character alternation"
                },
                "fullDescription": {
                  "text": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance. Example: 'a|b|c|d' After the quick-fix is applied: '[abcd]' New in 2017.1",
                  "markdown": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance.\n\n**Example:**\n\n\n      a|b|c|d\n\nAfter the quick-fix is applied:\n\n\n      [abcd]\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnnecessaryNonCapturingGroup",
                "shortDescription": {
                  "text": "Unnecessary non-capturing group"
                },
                "fullDescription": {
                  "text": "Reports unnecessary non-capturing groups, which have no influence on the match result. Example: 'Everybody be cool, (?:this) is a robbery!' After the quick-fix is applied: 'Everybody be cool, this is a robbery!' New in 2021.1",
                  "markdown": "Reports unnecessary non-capturing groups, which have no influence on the match result.\n\n**Example:**\n\n\n      Everybody be cool, (?:this) is a robbery!\n\nAfter the quick-fix is applied:\n\n\n      Everybody be cool, this is a robbery!\n\nNew in 2021.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TodoComment",
                "shortDescription": {
                  "text": "TODO comment"
                },
                "fullDescription": {
                  "text": "Reports TODO comments in your code. You can configure the format for TODO comments in Settings | Editor | TODO. Since syntax highlighting for TODO comments is already provided, this inspection is efficient if you run it in the batch mode.",
                  "markdown": "Reports **TODO** comments in your code.\n\nYou can configure the format for **TODO** comments in [Settings \\| Editor \\| TODO](settings://preferences.toDoOptions). Since\nsyntax highlighting for **TODO** comments is already provided, this inspection is efficient if you run it in the batch mode."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAttribute",
                "shortDescription": {
                  "text": "Unknown attribute"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckTagEmptyBody",
                "shortDescription": {
                  "text": "Empty element content"
                },
                "fullDescription": {
                  "text": "Reports an element with empty contents.",
                  "markdown": "Reports an element with empty contents."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantEscape",
                "shortDescription": {
                  "text": "Redundant character escape"
                },
                "fullDescription": {
                  "text": "Reports character escapes that are replaceable with the unescaped character without a change in meaning. Note that inside the square brackets of a character class, many escapes are unnecessary that would be necessary outside of a character class. Example: '\\-\\;[\\.]' After the quick-fix is applied: '-;[.]' New in 2017.3",
                  "markdown": "Reports character escapes that are replaceable with the unescaped character without a change in meaning. Note that inside the square brackets of a character class, many escapes are unnecessary that would be necessary outside of a character class.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\nNew in 2017.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Json5StandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON5 standard"
                },
                "fullDescription": {
                  "text": "Reports inconsistency with the language specification in a JSON5 file.",
                  "markdown": "Reports inconsistency with [the language specification](http://json5.org) in a JSON5 file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonDuplicatePropertyKeys",
                "shortDescription": {
                  "text": "Duplicate keys in object literals"
                },
                "fullDescription": {
                  "text": "Reports a duplicate key in an object literal.",
                  "markdown": "Reports a duplicate key in an object literal."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a named pattern ('define') in RELAX-NG files that use XML syntax. Suggests creating the referenced 'define' element.",
                  "markdown": "Reports an unresolved reference to a named pattern (`define`) in RELAX-NG files that use XML syntax. Suggests creating the referenced `define` element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownFunction",
                "shortDescription": {
                  "text": "Unknown JSONPath function"
                },
                "fullDescription": {
                  "text": "Reports an unknown name in a JSONPath function call instead of known standard function names: 'concat', 'keys', 'length', 'min', 'max', 'avg', 'stddev', 'sum'.",
                  "markdown": "Reports an unknown name in a JSONPath function call instead of known standard function names: `concat`, `keys`, `length`, `min`, `max`, `avg`, `stddev`, `sum`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlMissingClosingTag",
                "shortDescription": {
                  "text": "Missing closing tag"
                },
                "fullDescription": {
                  "text": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional. Example: '<html>\n    <body>\n      <p>Behold!\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <p>Behold!</p>\n    </body>\n  </html>'",
                  "markdown": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <p>Behold!\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <p>Behold!</p>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDeprecatedElement",
                "shortDescription": {
                  "text": "Deprecated symbol"
                },
                "fullDescription": {
                  "text": "Reports a deprecated XML element or attribute. Symbols can be marked by XML comment or documentation tag with text 'deprecated'.",
                  "markdown": "Reports a deprecated XML element or attribute.\n\nSymbols can be marked by XML comment or documentation tag with text 'deprecated'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantNestedCharacterClass",
                "shortDescription": {
                  "text": "Redundant nested character class"
                },
                "fullDescription": {
                  "text": "Reports unnecessary nested character classes. Example: '[a-c[x-z]]' After the quick-fix is applied: '[a-cx-z]' New in 2020.2",
                  "markdown": "Reports unnecessary nested character classes.\n\n**Example:**\n\n\n      [a-c[x-z]]\n\nAfter the quick-fix is applied:\n\n\n      [a-cx-z]\n\nNew in 2020.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDefaultAttributeValue",
                "shortDescription": {
                  "text": "Redundant attribute with default value"
                },
                "fullDescription": {
                  "text": "Reports a redundant assignment of the default value to an XML attribute.",
                  "markdown": "Reports a redundant assignment of the default value to an XML attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpOctalEscape",
                "shortDescription": {
                  "text": "Octal escape"
                },
                "fullDescription": {
                  "text": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion. Example: '\\07' After the quick-fix is applied: '\\x07' New in 2017.1",
                  "markdown": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion.\n\n**Example:**\n\n\n      \\07\n\nAfter the quick-fix is applied:\n\n\n      \\x07\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlExtraClosingTag",
                "shortDescription": {
                  "text": "Redundant closing tag"
                },
                "fullDescription": {
                  "text": "Reports a redundant closing tag for an empty element, for example, 'img' or 'br'. Example: '<html>\n    <body>\n      <br></br>\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <br>\n    </body>\n  </html>'",
                  "markdown": "Reports a redundant closing tag for an empty element, for example, `img` or `br`.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <br></br>\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <br>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedDefine",
                "shortDescription": {
                  "text": "Unused define"
                },
                "fullDescription": {
                  "text": "Reports an unused named pattern ('define') in a RELAX-NG file (XML or Compact Syntax). 'define' elements that are used through an include in another file are ignored.",
                  "markdown": "Reports an unused named pattern (`define`) in a RELAX-NG file (XML or Compact Syntax). `define` elements that are used through an include in another file are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAnchorTarget",
                "shortDescription": {
                  "text": "Unresolved fragment in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved last part of an URL after the '#' sign.",
                  "markdown": "Reports an unresolved last part of an URL after the `#` sign."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistence between a JSON file and the JSON schema that is assigned to it.",
                  "markdown": "Reports inconsistence between a JSON file and the [JSON schema](https://json-schema.org) that is assigned to it.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnexpectedAnchor",
                "shortDescription": {
                  "text": "Begin or end anchor in unexpected position"
                },
                "fullDescription": {
                  "text": "Reports '^' or '\\A' anchors not at the beginning of the pattern and '$', '\\Z' or '\\z' anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the '^' and '$' anchors, most likely the literal character was meant and the escape forgotten. Example: '(Price $10)' New in 2018.1",
                  "markdown": "Reports `^` or `\\A` anchors not at the beginning of the pattern and `$`, `\\Z` or `\\z` anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the `^` and `$` anchors, most likely the literal character was meant and the escape forgotten.\n\n**Example:**\n\n\n      (Price $10)\n\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SyntaxError",
                "shortDescription": {
                  "text": "Syntax error"
                },
                "fullDescription": {
                  "text": "Reports syntax errors that have been found in the result of a batch code inspection run.",
                  "markdown": "Reports syntax errors that have been found in the result of a batch code inspection run."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpAnonymousGroup",
                "shortDescription": {
                  "text": "Anonymous capturing group or numeric back reference"
                },
                "fullDescription": {
                  "text": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. '(?:xxx)' instead of '(xxx)'. Example: '(\\d\\d\\d\\d)\\1' A better regex pattern could look like this: '(?<quad>\\d\\d\\d\\d)\\k<quad>' New in 2017.2",
                  "markdown": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. `(?:xxx)` instead of `(xxx)`.\n\n**Example:**\n\n\n      (\\d\\d\\d\\d)\\1\n\nA better regex pattern could look like this:\n\n\n      (?<quad>\\d\\d\\d\\d)\\k<quad>\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckDtdRefs",
                "shortDescription": {
                  "text": "Unresolved DTD reference"
                },
                "fullDescription": {
                  "text": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files.",
                  "markdown": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpellCheckingInspection",
                "shortDescription": {
                  "text": "Typo"
                },
                "fullDescription": {
                  "text": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click.",
                  "markdown": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "TYPO",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckXmlFileWithXercesValidator",
                "shortDescription": {
                  "text": "Failed external validation"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.",
                  "markdown": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonAsciiCharacters",
                "shortDescription": {
                  "text": "Non-ASCII characters"
                },
                "fullDescription": {
                  "text": "Reports code elements that uses non-ASCII symbols in an unusual context. Example: Non-ASCII characters used in identifiers, strings, or comments. Identifiers written in different languages, such as 'myCollection' with the letter 'C' written in Cyrillic. Comments or strings containing Unicode symbols, such as long dashes and arrows.",
                  "markdown": "Reports code elements that uses non-ASCII symbols in an unusual context.\n\nExample:\n\n* Non-ASCII characters used in identifiers, strings, or comments.\n* Identifiers written in different languages, such as `my`**C**`ollection` with the letter **C** written in Cyrillic.\n* Comments or strings containing Unicode symbols, such as long dashes and arrows."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTag",
                "shortDescription": {
                  "text": "Unknown tag"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported.",
                  "markdown": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEscapedMetaCharacter",
                "shortDescription": {
                  "text": "Escaped meta character"
                },
                "fullDescription": {
                  "text": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character '[', ']' and '^', because those would need additional escaping inside a character class. Example: '\\d+\\.\\d+' After the quick-fix is applied: '\\d+[.]\\d+' New in 2017.1",
                  "markdown": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character `[`, `]` and `^`, because those would need additional escaping inside a character class.\n\n**Example:**\n\n\n      \\d+\\.\\d+\n\nAfter the quick-fix is applied:\n\n\n      \\d+[.]\\d+\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LossyEncoding",
                "shortDescription": {
                  "text": "Lossy encoding"
                },
                "fullDescription": {
                  "text": "Reports characters that cannot be displayed because of the current document encoding. Examples: If you type international characters in a document with the US-ASCII charset, some characters will be lost on save. If you load a UTF-8-encoded file using the ISO-8859-1 one-byte charset, some characters will be displayed incorrectly. You can fix this by changing the file encoding either by specifying the encoding directly in the file, e.g. by editing 'encoding=' attribute in the XML prolog of XML file, or by changing the corresponding options in Settings | Editor | File Encodings.",
                  "markdown": "Reports characters that cannot be displayed because of the current document encoding.\n\nExamples:\n\n* If you type international characters in a document with the **US-ASCII** charset, some characters will be lost on save.\n* If you load a **UTF-8** -encoded file using the **ISO-8859-1** one-byte charset, some characters will be displayed incorrectly.\n\nYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing `encoding=` attribute in the XML prolog of XML file,\nor by changing the corresponding options in **Settings \\| Editor \\| File Encodings**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRepeatedSpace",
                "shortDescription": {
                  "text": "Consecutive spaces"
                },
                "fullDescription": {
                  "text": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier. Example: '(     )' After the quick-fix is applied: '( {5})' New in 2017.1",
                  "markdown": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateAlternationBranch",
                "shortDescription": {
                  "text": "Duplicate branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression. Example: '(alpha|bravo|charlie|alpha)' After the quick-fix is applied: '(alpha|bravo|charlie)' New in 2017.1",
                  "markdown": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression.\n\n**Example:**\n\n\n      (alpha|bravo|charlie|alpha)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo|charlie)\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IgnoreFileDuplicateEntry",
                "shortDescription": {
                  "text": "Ignore file duplicates"
                },
                "fullDescription": {
                  "text": "Reports duplicate entries (patters) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed. Example:     # Output directories\n    /out/\n    /target/\n    /out/",
                  "markdown": "Reports duplicate entries (patters) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed.\n\nExample:\n\n```\n    # Output directories\n    /out/\n    /target/\n    /out/\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Version control",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonStandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON standard"
                },
                "fullDescription": {
                  "text": "Reports the following discrepancies of a JSON file with the language specification: A line or block comment (configurable). Multiple top-level values (expect for JSON Lines files, configurable for others). A trailing comma in an object or array (configurable). A single quoted string. A property key is a not a double quoted strings. A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).",
                  "markdown": "Reports the following discrepancies of a JSON file with [the language specification](https://tools.ietf.org/html/rfc7159):\n\n* A line or block comment (configurable).\n* Multiple top-level values (expect for JSON Lines files, configurable for others).\n* A trailing comma in an object or array (configurable).\n* A single quoted string.\n* A property key is a not a double quoted strings.\n* A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckEmptyScriptTag",
                "shortDescription": {
                  "text": "Empty tag"
                },
                "fullDescription": {
                  "text": "Reports an empty tag (such as 'script') that does not work in some browsers.",
                  "markdown": "Reports an empty tag (such as `script`) that does not work in some browsers."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownOperator",
                "shortDescription": {
                  "text": "Unknown JSONPath operator"
                },
                "fullDescription": {
                  "text": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: 'in', 'nin', 'subsetof', 'anyof', 'noneof', 'size', 'empty', 'contains'.",
                  "markdown": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: `in`, `nin`, `subsetof`, `anyof`, `noneof`, `size`, `empty`, `contains`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.properties",
            "version": "213.7162",
            "rules": [
              {
                "id": "DuplicatePropertyInspection",
                "shortDescription": {
                  "text": "Duplicate property"
                },
                "fullDescription": {
                  "text": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values. Example: 'property1=value;\nproperty2=value;' The Options list allows selecting the area in which the inspection should search for duplicates.",
                  "markdown": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values.\n\nExample:\n\n\n    property1=value;\n    property2=value;\n\nThe **Options** list allows selecting the area in which the inspection should search for duplicates."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseEllipsisInPropertyInspection",
                "shortDescription": {
                  "text": "Three dot characters instead of the ellipsis"
                },
                "fullDescription": {
                  "text": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files.",
                  "markdown": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AlphaUnsortedPropertiesFile",
                "shortDescription": {
                  "text": "Properties file or resource bundle is alphabetically unsorted"
                },
                "fullDescription": {
                  "text": "Reports alphabetically unsorted resource bundles or .properties files.",
                  "markdown": "Reports alphabetically unsorted resource bundles or .properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFO",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrailingSpacesInProperty",
                "shortDescription": {
                  "text": "Trailing spaces in property"
                },
                "fullDescription": {
                  "text": "Reports all properties whose keys or values end with a whitespace.",
                  "markdown": "Reports all properties whose keys or values end with a whitespace.   "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedProperty",
                "shortDescription": {
                  "text": "Unused property"
                },
                "fullDescription": {
                  "text": "Reports all properties that are not referenced from the outside of the .properties file.",
                  "markdown": "Reports all properties that are not referenced from the outside of the .properties file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WrongPropertyKeyValueDelimiter",
                "shortDescription": {
                  "text": "Property key/value delimiter doesn't match code style settings"
                },
                "fullDescription": {
                  "text": "Reports properties in which key or value delimiters do not match code style settings.",
                  "markdown": "Reports properties in which key or value delimiters do not match code style settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.intelliLang",
            "version": "213.7162",
            "rules": [
              {
                "id": "InjectedReferences",
                "shortDescription": {
                  "text": "Injected references"
                },
                "fullDescription": {
                  "text": "Reports unresolved references injected by Language Injections. Example:     @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist",
                  "markdown": "Reports unresolved references injected by [Language Injections](https://www.jetbrains.com/help/idea/using-language-injections.html).\n\nExample:\n\n```\n    @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.plugins.staticAnalysis",
            "version": "213.7162",
            "rules": [
              {
                "id": "QodanaServiceMessage",
                "shortDescription": {
                  "text": "Qodana service message"
                },
                "fullDescription": {
                  "text": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems.",
                  "markdown": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          }
        ]
      },
      "invocations": [
        {
          "exitCode": 0,
          "toolExecutionNotifications": [
            {
              "message": {
                "text": "Reporting from [\"Unresolved references\"] 'sanity' inspections was suspended due to high problems count."
              },
              "level": "error"
            }
          ],
          "executionSuccessful": true
        }
      ],
      "language": "en-US",
      "versionControlProvenance": [
        {
          "repositoryUri": "https://github.com/School-Simplified/Timmy-SchoolSimplified",
          "revisionId": "8d8437524c09e3162a1b6e6c92031f93ee86eb0a",
          "branch": "beta",
          "properties": {
            "lastAuthorName": "Puncher",
            "vcsType": "Git",
            "lastAuthorEmail": "mcocexpert@hispeed.ch",
            "tags": [
              "lastAuthorEmail",
              "lastAuthorName",
              "vcsType"
            ]
          }
        }
      ],
      "results": [
        {
          "ruleId": "PyDefaultArgumentInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Default argument value is mutable",
            "markdown": "Default argument value is mutable"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 80,
                  "charOffset": 4987,
                  "charLength": 2,
                  "snippet": {
                    "text": "[]"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 1,
                  "charOffset": 4882,
                  "charLength": 140,
                  "snippet": {
                    "text": "    )\n    async def info(\n            self, ctx: commands.Context, user: commands.Greedy[discord.User] = []\n    ):\n        for user in user:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2085ed6da720f2cf9c22655e671e1915a21e0b746ba7522f6c3140e47cb1a7d0"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'creds' might be referenced before assignment",
            "markdown": "Local variable 'creds' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 16,
                  "charOffset": 7847,
                  "charLength": 5,
                  "snippet": {
                    "text": "creds"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 228,
                  "startColumn": 1,
                  "charOffset": 7814,
                  "charLength": 40,
                  "snippet": {
                    "text": "            pass\n\n        return creds\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "495ce38780ae1be9e36358e2090d2c414d194d5a45057f6e551d6471f0b7576b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'authorrank_len' might be referenced before assignment",
            "markdown": "Local variable 'authorrank_len' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1780,
                  "startColumn": 49,
                  "charOffset": 66985,
                  "charLength": 14,
                  "snippet": {
                    "text": "authorrank_len"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1778,
                  "startColumn": 1,
                  "charOffset": 66880,
                  "charLength": 144,
                  "snippet": {
                    "text": "\n                if f'{menu.ctx.author.id}' in listkeys:\n                    authorrank = f\"Your rank: #{authorrank_len}\"\n\n                else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2fedc6b10c3cf632df89e5f4ae84e966c2d58bd35de4882f280f1b4f2ac63437"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'value' might be referenced before assignment",
            "markdown": "Local variable 'value' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 12,
                  "charOffset": 591,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "charOffset": 546,
                  "charLength": 94,
                  "snippet": {
                    "text": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2187dac9eeb0fcf2d8d8bccde334aca113b7ea985418fba53b04588c97437be4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 767,
                  "startColumn": 42,
                  "charOffset": 30741,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 765,
                  "startColumn": 1,
                  "charOffset": 30653,
                  "charLength": 143,
                  "snippet": {
                    "text": "                    )\n                finally:\n                    await ctx.send(embed=embed)\n        else:\n            embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c32ffbf8c40f6e03eea4bad2f5761b6e9156dfa7051992db68b6993fb96830a1"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 980,
                  "startColumn": 46,
                  "charOffset": 40078,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 978,
                  "startColumn": 1,
                  "charOffset": 39978,
                  "charLength": 163,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "988b9abd238118e0781f371f8acb5b60445512e2e10300f2b566da2095f42e8d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1168,
                  "startColumn": 46,
                  "charOffset": 48690,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1166,
                  "startColumn": 1,
                  "charOffset": 48590,
                  "charLength": 125,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n\n            else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8de570fdc0ef77afd9e3e918b844686b2e1401fd504c7c56f3b3aa707a5995db"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1343,
                  "startColumn": 46,
                  "charOffset": 57408,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1341,
                  "startColumn": 1,
                  "charOffset": 57308,
                  "charLength": 163,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e412963a9cd225f0036af8bcafa422b13c1fa3bdbbc1cd8b339ccaa997d40c21"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1463,
                  "startColumn": 46,
                  "charOffset": 63112,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1461,
                  "startColumn": 1,
                  "charOffset": 63012,
                  "charLength": 163,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1b8c39cc7ddaa0ebff2e84121e783e596f367d1b5a9c2a8265d36ec827fa3a3"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1543,
                  "startColumn": 46,
                  "charOffset": 66823,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1541,
                  "startColumn": 1,
                  "charOffset": 66723,
                  "charLength": 163,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cecf31fbe1d51e43051e774d860c3b695957df13e1d7bd045b7842c760cd04f5"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'value' might be referenced before assignment",
            "markdown": "Local variable 'value' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 12,
                  "charOffset": 490,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 445,
                  "charLength": 94,
                  "snippet": {
                    "text": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d9fb06ba1811986c1f507b15b60da8d9623508fc340f06268235192988bdb60"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'value' might be referenced before assignment",
            "markdown": "Local variable 'value' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 12,
                  "charOffset": 907,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 862,
                  "charLength": 94,
                  "snippet": {
                    "text": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f613d680061e2f92932eb4b8d677dc8ed2635f5d5957da5aefd175957b900c74"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Name 'roleStr' can be undefined",
            "markdown": "Name 'roleStr' can be undefined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 24,
                  "charOffset": 10834,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 388,
                  "startColumn": 1,
                  "charOffset": 10720,
                  "charLength": 181,
                  "snippet": {
                    "text": "\n            dmMSG = f\"{member.mention}, you've reached level **{newLvl}** in Study VC!\" \\\n                    f\"{roleStr}\"\n            try:\n                await member.send(dmMSG)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cac0ee1b22d45bf91a95c8e7db036fcf5a120d60a904d7cfdb558a223911c77d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'query' might be referenced before assignment",
            "markdown": "Local variable 'query' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 13,
                  "charOffset": 2284,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "charOffset": 2244,
                  "charLength": 99,
                  "snippet": {
                    "text": "        )\n        if renew:\n            query.delete_instance()\n\n        await member.move_to(None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80ed2ac6d65c5dcb41dcffbfec13000f8d68b7d580e9469bdbcf9ef1acd73d2b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'query' might be referenced before assignment",
            "markdown": "Local variable 'query' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 9,
                  "charOffset": 2718,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 2664,
                  "charLength": 128,
                  "snippet": {
                    "text": "        await addLeaderboardProgress(member)\n\n        query.goal = goal\n        query.RenewalTime = renewal\n        query.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "15b1b1d32e3127c482ba22212bac1bbe7e7648b9e962f5bac1a536fec95c4952"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'query' might be referenced before assignment",
            "markdown": "Local variable 'query' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 13,
                  "charOffset": 2284,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "charOffset": 2244,
                  "charLength": 99,
                  "snippet": {
                    "text": "        )\n        if renew:\n            query.delete_instance()\n\n        await member.move_to(None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee2dedb3ec5d33b0d095eec366993e1b1d1131bb5afff02d5d921ce16994f24a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'query' might be referenced before assignment",
            "markdown": "Local variable 'query' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 9,
                  "charOffset": 2718,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 2664,
                  "charLength": 128,
                  "snippet": {
                    "text": "        await addLeaderboardProgress(member)\n\n        query.goal = goal\n        query.RenewalTime = renewal\n        query.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fd223405169559ff93d2bfb416f7a9165fb02e1598492a664534c36449555db2"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'msg' might be referenced before assignment",
            "markdown": "Local variable 'msg' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 12,
                  "charOffset": 4519,
                  "charLength": 3,
                  "snippet": {
                    "text": "msg"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "charOffset": 4462,
                  "charLength": 87,
                  "snippet": {
                    "text": "    if response == None:\n        msg = S3_URL\n    return msg, transcript_file, S3_URL\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "47f913d53f5be1e1ab4f0e2affd8060af48d1055038b83165f67bf38944e9c20"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 3856,
                  "snippet": {
                    "text": "\"\"\" SETUP: If you require a specific command to be protected, you can use the built in @is_botAdmin..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 11,
                  "snippet": {
                    "text": "\"\"\"\nSETUP:\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2a589219eb4a6e3a24b6bd23a503d0f43805ec6b5189218e3c5595a0fb87662"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 71568,
                  "snippet": {
                    "text": "# TODO: Testing Feedback Modal, Testing TicketLockButton import asyncio import io import json impor..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 72,
                  "snippet": {
                    "text": "# TODO: Testing Feedback Modal, Testing TicketLockButton\n\nimport asyncio"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3cfe63709664d51a02f70f99b4b6e1bf75727d57f32d75ca2b93618bf3e881c3"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/docsapi.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 3843,
                  "snippet": {
                    "text": "from __future__ import print_function import os.path from google.cloud import speech_v1p1beta1 as ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 53,
                  "snippet": {
                    "text": "from __future__ import print_function\n\nimport os.path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b4a1a0ece7bfcd55020b0803fd5bc61f19447f58f9e95f3d73a1dbd1ec20952"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 17376,
                  "snippet": {
                    "text": "import collections import os import sys from datetime import datetime from distutils.util import str..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 39,
                  "snippet": {
                    "text": "import collections\nimport os\nimport sys"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "647ef40920bb91c25f17163b79480bcf8d73cf7848322f0760fa87f89400006e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6325,
                  "snippet": {
                    "text": "from typing import List from datetime import datetime import pprint import typing from dotenv import..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 67,
                  "snippet": {
                    "text": "from typing import List\nfrom datetime import datetime\nimport pprint"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "813d822b80b0aba1d59b5bfea7ebacaa17cdb1763a68aea071a3da05a9cd963f"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 17320,
                  "snippet": {
                    "text": "import collections import json import os import subprocess import time import traceback from datetim..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 40,
                  "snippet": {
                    "text": "import collections\nimport json\nimport os"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "56fbd456ac4aee80c7c437be29fe277ef93a4fe3b202d300241c759d154bd531"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 8041,
                  "snippet": {
                    "text": "import math import peewee import discord from core import common, database from core.common import ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 26,
                  "snippet": {
                    "text": "import math\n\nimport peewee"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "155bd8d3e8f45c494eed1f0008413922c2b62626951dd8d2d0760cf38114a88c"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 4004,
                  "snippet": {
                    "text": "import asyncio import json import os import re from datetime import datetime import discord import ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 36,
                  "snippet": {
                    "text": "import asyncio\nimport json\nimport os"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d2874b9f4bd181fce21c37ac6fe9287785af09ba4f85c290bf27a766c58b3227"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/CommandsOnly.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 1596,
                  "snippet": {
                    "text": "import discord from core import database from core.common import rulesDict from discord.ext import c..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 74,
                  "snippet": {
                    "text": "import discord\nfrom core import database\nfrom core.common import rulesDict"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "798a9d77480a3d034221b0b91eda654a628b3ae317cfa34e548649dbd3e8f749"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 27593,
                  "snippet": {
                    "text": "# Copyright (c) 2015-2021 Rapptz # Copyright (c) 2022-present School Simplified import asyncio imp..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 80,
                  "snippet": {
                    "text": "# Copyright (c) 2015-2021 Rapptz\n# Copyright (c) 2022-present School Simplified\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5e6dd131cab727031f453980fc6a68a546b3a98c9a6b5d2565f66903c4a13617"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 28740,
                  "snippet": {
                    "text": "import asyncio import datetime, pytz import random import string import os import json import ast i..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 50,
                  "snippet": {
                    "text": "import asyncio\nimport datetime, pytz\nimport random"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c9c3ec30512fc9eb5fdb2b9395e1ff82482f62b54aecb9aba0b2cd7af4fdc1ad"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/Blacklist.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2789,
                  "snippet": {
                    "text": "import discord from core import database from core.checks import slash_is_bot_admin_4, slash_is_bot_..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 107,
                  "snippet": {
                    "text": "import discord\nfrom core import database\nfrom core.checks import slash_is_bot_admin_4, slash_is_bot_admin_3"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e8eb96c81eb9e647781b9af4c354491b9248bf6a1926148decf3992b0d2bfe7"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 29914,
                  "snippet": {
                    "text": "import asyncio import random import subprocess import sys import time from datetime import timedelta..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 46,
                  "snippet": {
                    "text": "import asyncio\nimport random\nimport subprocess"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "894f4ae309f43f270853edb8efaf1966bf886771dc0e43ce26d20b61ce184a07"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/todocommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 3217,
                  "snippet": {
                    "text": "import discord from core import database from discord.ext import commands from core.common import C..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 73,
                  "snippet": {
                    "text": "import discord\nfrom core import database\nfrom discord.ext import commands"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17b27af7dd3d81e82180f1459d948a8f72e48152ecc0a3c2146fa7f9d4b5fe7c"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 18265,
                  "snippet": {
                    "text": "import subprocess import sys from pathlib import Path from threading import Thread from typing impor..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 53,
                  "snippet": {
                    "text": "import subprocess\nimport sys\nfrom pathlib import Path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ada52c10c1d28ecb54331423bc52e91bc4fa99e6dae9dbb9878092ec1beb5d48"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 4136,
                  "snippet": {
                    "text": "from __future__ import print_function import random import string from typing import Literal impor..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 52,
                  "snippet": {
                    "text": "from __future__ import print_function\n\nimport random"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "79fd1cc1ecb8a8e124147056df82311bb8b8be4238e2d05059b7bd659cbca74e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/RedirectService.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 1939,
                  "snippet": {
                    "text": "import os import aiohttp import discord from dotenv import load_dotenv from core.checks import is_bo..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 39,
                  "snippet": {
                    "text": "import os\nimport aiohttp\nimport discord"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c5073ebe71896dc55f5148f82cb914c0b61b2ead4b60296b48a6ddc6b3134ca7"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6349,
                  "snippet": {
                    "text": "import discord from discord import ui from discord.ext import commands, tasks from core.common impor..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 77,
                  "snippet": {
                    "text": "import discord\nfrom discord import ui\nfrom discord.ext import commands, tasks"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d6a5674a763a1fb64958ddcf59ff6e285f21efb0dfab0db807e6710fe8b8581"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 68805,
                  "snippet": {
                    "text": "import datetime from datetime import datetime, timedelta import discord import pytz from core impor..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 57,
                  "snippet": {
                    "text": "import datetime\nfrom datetime import datetime, timedelta\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d2d92fadd2cc2bc1491410afa3adb8452e66bbfe2295b443d2b2686d252f0c0"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 30537,
                  "snippet": {
                    "text": "import asyncio import datetime from datetime import datetime, timedelta import discord from core im..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 71,
                  "snippet": {
                    "text": "import asyncio\nimport datetime\nfrom datetime import datetime, timedelta"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cef4da0b87cc834c8a566f996c91d5d0ffc9cbeee49e97ce2fc684fdc48deae0"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 1382,
                  "snippet": {
                    "text": "import pytz import datetime from dateutil import parser import discord from discord.ext import tasks..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 55,
                  "snippet": {
                    "text": "import pytz\nimport datetime\nfrom dateutil import parser"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4ee034fc1845ffcae8da5961702c992a12c0594585af97e436cc5e6bb96cf2de"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 15915,
                  "snippet": {
                    "text": "from datetime import datetime, timedelta import discord import pytz from core import database from ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 56,
                  "snippet": {
                    "text": "from datetime import datetime, timedelta\n\nimport discord"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6613ec7aeda7cd00261851e822d3cad31af83b62d070015b8c9114ca58771fb5"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 8319,
                  "snippet": {
                    "text": "import asyncio import datetime from datetime import datetime, timedelta import pytz import discord ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 71,
                  "snippet": {
                    "text": "import asyncio\nimport datetime\nfrom datetime import datetime, timedelta"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "01152ad26eb553671cb52246f98c74055a84b25c4117e4af2d4b12bd608a6045"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 8336,
                  "snippet": {
                    "text": "import asyncio import datetime from datetime import datetime, timedelta import pytz import discord ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 71,
                  "snippet": {
                    "text": "import asyncio\nimport datetime\nfrom datetime import datetime, timedelta"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3d4afd8f6a9ea3efd6e525beac14227f0d3ce8b5cc589111bacfd58ff9aa50d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 20741,
                  "snippet": {
                    "text": "import random import string from datetime import datetime, timedelta from typing import Literal imp..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 68,
                  "snippet": {
                    "text": "import random\nimport string\nfrom datetime import datetime, timedelta"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "47691d1b79cf8df0a1c5c1d073a568e5d908bbf6d47ead8d79d126246353cef8"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 5446,
                  "snippet": {
                    "text": "from datetime import datetime, timedelta import discord import pytz from core import database from ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 56,
                  "snippet": {
                    "text": "from datetime import datetime, timedelta\n\nimport discord"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dcedd6b3b0f36f49051f90441f7cf9b256e3ffaad66565b9bca7ae38e567967e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 5974,
                  "snippet": {
                    "text": "import discord from core import database from core.common import TECH_ID, SandboxConfig, get_extensi..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 103,
                  "snippet": {
                    "text": "import discord\nfrom core import database\nfrom core.common import TECH_ID, SandboxConfig, get_extensions"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f895e6a37477f0ac15ec4bd1c0afea03bbb0da3b2da3b8f61261b8381bed1947"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 16351,
                  "snippet": {
                    "text": "from typing import Dict, List, Literal, Union from discord.ext import commands from discord.app_com..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 79,
                  "snippet": {
                    "text": "from typing import Dict, List, Literal, Union\n\nfrom discord.ext import commands"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "14fcf1f6d72adc9f8fcd00bab1f7ffd2a444e3e44190a886dfd7ad48dac1cc40"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/guild_check.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 1189,
                  "snippet": {
                    "text": "from discord.ext import commands import discord from core import database from core.common import Ot..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 73,
                  "snippet": {
                    "text": "from discord.ext import commands\nimport discord\nfrom core import database"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "58a84628289aed2330bd9bf51a1c0de9e0d7a7ea8b1edd991628284af44ebd15"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/guess.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 1460,
                  "snippet": {
                    "text": "import discord from discord import slash_command from discord.ext import commands from core.common i..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 81,
                  "snippet": {
                    "text": "import discord\nfrom discord import slash_command\nfrom discord.ext import commands"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "07546cb59ed99658bd1e2042ef7e321bedb8522f698d4da9ad3ba69ac0e86558"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/messagelogs.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2427,
                  "snippet": {
                    "text": "import datetime from datetime import datetime import discord from discord.ext import commands from ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 46,
                  "snippet": {
                    "text": "import datetime\nfrom datetime import datetime\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f72435757047f820a5b094e3fbab8c3e8ed44de1ba4c6438fd3d150d89e6ddf3"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 47008,
                  "snippet": {
                    "text": "import asyncio import io import os import typing from datetime import datetime, timedelta from pytz ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "import asyncio\nimport io\nimport os"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a7e52b6bf02bebf3009d319119fd9138a400b5654583637ddab23033babd8efb"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 8128,
                  "snippet": {
                    "text": "import asyncio from datetime import datetime import os import discord import pytz from core.checks ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 54,
                  "snippet": {
                    "text": "import asyncio\nfrom datetime import datetime\nimport os"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "46f74e361eb473c8ae223de3e0c4d4f184999779268866a424a77b8f1cc874c3"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 9787,
                  "snippet": {
                    "text": "import discord from core.common import ( CH_ID, DIGITAL_ID, HR_ID, MKT_ID, STAFF..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 51,
                  "snippet": {
                    "text": "import discord\nfrom core.common import (\n    CH_ID,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a5b8364dfea0a9ff9c8b20b3c9de39c4d00ee21981ca472544f641c101b18f5b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 10452,
                  "snippet": {
                    "text": "\"\"\" Copyright (C) School Simplified - All Rights Reserved * Permission is granted to use this appli..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 152,
                  "snippet": {
                    "text": "\"\"\"\nCopyright (C) School Simplified - All Rights Reserved\n * Permission is granted to use this application as a code reference for educational purposes."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "52b54b8e50920f45ba4eb857d308868320c90a1b03f6c27d066f3c577266a071"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cog_tests.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 936,
                  "snippet": {
                    "text": "import os import sys from pathlib import Path import discord.ext.test as dpytest import pytest from..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "import os\nimport sys\nfrom pathlib import Path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ba9c8f8c26768312ff5789dd64aa92a1e81a7ceea075f1002ab0db9f7a94c60a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1', 'discord-ext-menus' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2260,
                  "snippet": {
                    "text": "aiohttp==3.8.1 aiosignal==1.2.0 anyio==3.5.0 appnope==0.1.2 astunparse==1.6.3 async-timeout==4.0.1 a..."
                  },
                  "sourceLanguage": "TEXT"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "aiohttp==3.8.1\naiosignal==1.2.0\nanyio==3.5.0"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df7ecff867e4b5005d13dbed3faa90bd2c0734c7e1bed592bd3cb1ac2f531fd9"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter r_id in docstring",
            "markdown": "Missing parameter r_id in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 30,
                  "charOffset": 2794,
                  "charLength": 9,
                  "snippet": {
                    "text": "r_id: str"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 2740,
                  "charLength": 114,
                  "snippet": {
                    "text": "        return ListData\n\n    def fetch_redirect(self, r_id: str) -> RedirectPizza:\n        \"\"\"Fetches a redirect.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c540045d85522766746c949e9a5261efd023dacebdd4914b71ce152c48ca0f7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unexpected parameter url_code in docstring",
            "markdown": "Unexpected parameter url_code in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 13,
                  "charOffset": 2881,
                  "charLength": 8,
                  "snippet": {
                    "text": "url_code"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 105,
                  "startColumn": 1,
                  "charOffset": 2854,
                  "charLength": 139,
                  "snippet": {
                    "text": "\n        Args:\n            url_code (str): The URL code to fetch.\n            domain (str, optional): The domain to use. Defaults to None.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d581e9081f0f36734fea24c3f63c6b04ceb0e38ac4c8793aa9a247bf7864bff"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unexpected parameter domain in docstring",
            "markdown": "Unexpected parameter domain in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 13,
                  "charOffset": 2932,
                  "charLength": 6,
                  "snippet": {
                    "text": "domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 2855,
                  "charLength": 154,
                  "snippet": {
                    "text": "        Args:\n            url_code (str): The URL code to fetch.\n            domain (str, optional): The domain to use. Defaults to None.\n\n        Raises:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d304b43cdf8c4609b3368f98473928da2e76dc5965cf16ffe059c6ec55ebc45b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter r_id in docstring",
            "markdown": "Missing parameter r_id in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 28,
                  "charOffset": 5629,
                  "charLength": 9,
                  "snippet": {
                    "text": "r_id: str"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 189,
                  "startColumn": 1,
                  "charOffset": 5591,
                  "charLength": 108,
                  "snippet": {
                    "text": "        )\n\n    def del_redirect(self, r_id: str) -> typing.Union[dict, int]:\n        \"\"\"Deletes a redirect.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d24c12d4c796efaf055b1b8ee1977d0fe50a47e4128f2f53194ecfc1578bb2b4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unexpected parameter redirect_url in docstring",
            "markdown": "Unexpected parameter redirect_url in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 13,
                  "charOffset": 5726,
                  "charLength": 12,
                  "snippet": {
                    "text": "redirect_url"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 193,
                  "startColumn": 1,
                  "charOffset": 5699,
                  "charLength": 139,
                  "snippet": {
                    "text": "\n        Args:\n            redirect_url (str): The URL to delete.\n            domain (str, optional): The domain to use. Defaults to None.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e3504cd22faf998e142dc0c11672e98df2582af3d223366a4d20d87a65a3a589"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unexpected parameter domain in docstring",
            "markdown": "Unexpected parameter domain in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 13,
                  "charOffset": 5777,
                  "charLength": 6,
                  "snippet": {
                    "text": "domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 194,
                  "startColumn": 1,
                  "charOffset": 5700,
                  "charLength": 154,
                  "snippet": {
                    "text": "        Args:\n            redirect_url (str): The URL to delete.\n            domain (str, optional): The domain to use. Defaults to None.\n\n        Raises:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "97c35f31ffdf109259bf585aff0fbd4f4f1940e4f74c4eb2e499ee27fea30e6c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter self in docstring",
            "markdown": "Missing parameter self in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 16,
                  "charOffset": 4565,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 4548,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "74e36bf6345c76c1a38f025fe3d8ede589ae4c9857f5f37d1fa89911328f3a4b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter sandbox in docstring",
            "markdown": "Missing parameter sandbox in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 34,
                  "charOffset": 4583,
                  "charLength": 21,
                  "snippet": {
                    "text": "sandbox: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 4548,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c02864f3b091392a75caf96607b2a6555dd087f3896d5e2c8545db9c9f56d7c7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter sandbox in docstring",
            "markdown": "Missing parameter sandbox in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 59,
                  "charOffset": 8671,
                  "charLength": 21,
                  "snippet": {
                    "text": "sandbox: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 275,
                  "startColumn": 1,
                  "charOffset": 8599,
                  "charLength": 152,
                  "snippet": {
                    "text": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "86f802b1d16f35d904b042f123a8e48789dca679dd081417a3f8d457a4baee2b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 12,
                  "charOffset": 3391,
                  "charLength": 18,
                  "snippet": {
                    "text": "lobbyStart == None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 3246,
                  "charLength": 232,
                  "snippet": {
                    "text": "        print(self.LobbyStartIDs[member.guild.id])\n        lobbyStart = member.guild.get_channel(self.LobbyStartIDs[member.guild.id])\n        if lobbyStart == None:\n            try:\n                lobbyStart = self.bot.get_channel("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a560279693087a6ac7bff2fad39ca93746275bcfdbe60404f628edbb0082f197"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 8,
                  "charOffset": 3964,
                  "charLength": 16,
                  "snippet": {
                    "text": "response != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 1,
                  "charOffset": 3898,
                  "charLength": 162,
                  "snippet": {
                    "text": "    embed.add_field(name=\"Transcript Link\", value=S3_URL)\n\n    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5cccda372efdc6358e7cc905a4e302b47ed6773dd37a7ca48b0829305e4a6b69"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 8,
                  "charOffset": 4036,
                  "charLength": 23,
                  "snippet": {
                    "text": "responsesauthor != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 3957,
                  "charLength": 160,
                  "snippet": {
                    "text": "    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:\n        for UAuthor in responsesauthor:\n            try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2e8b4859df97eb8d4df94b60f022fd37e4ee10194aa6de3bc212918afe5bd45b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 8,
                  "charOffset": 4469,
                  "charLength": 16,
                  "snippet": {
                    "text": "response == None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 152,
                  "startColumn": 1,
                  "charOffset": 4448,
                  "charLength": 99,
                  "snippet": {
                    "text": "        pass\n\n    if response == None:\n        msg = S3_URL\n    return msg, transcript_file, S3_URL"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2617a89bcfc2c03a002d25013b9debe1841bd6bab857cb2fc19a9b86c423ae9e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "RegExpRedundantEscape",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant character escape '\\]' in RegExp",
            "markdown": "Redundant character escape `\\]` in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 58,
                  "charOffset": 2112,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\]"
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "charOffset": 2032,
                  "charLength": 158,
                  "snippet": {
                    "text": "\n                else:\n                    banReason = re.match(r\"[^[]*\\[([^]]*)\\]\", banReasonAUDIT).groups()[\n                        0\n                    ]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "443056e4c246dc29c2a17dde12084338f742ad76cb33ce4ddeaa41ca1147812d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'on_error' may be 'static'",
            "markdown": "Method `on_error` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 15,
                  "charOffset": 5273,
                  "charLength": 8,
                  "snippet": {
                    "text": "on_error"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 5211,
                  "charLength": 308,
                  "snippet": {
                    "text": "            await self.message.edit(view=None)\n\n    async def on_error(self, error: Exception, item: discord.ui.Item, interaction: discord.Interaction) -> None:\n        if interaction.response.is_done():\n            await interaction.followup.send(f'An unknown error occurred, sorry {error}', ephemeral=True)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "12d58ebe975516ea7144e85aec107fceaffe264d097a0875b7fac269fcd52224"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'is_paginating' may be 'static'",
            "markdown": "Method `is_paginating` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 9,
                  "charOffset": 14999,
                  "charLength": 13,
                  "snippet": {
                    "text": "is_paginating"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 357,
                  "startColumn": 1,
                  "charOffset": 14949,
                  "charLength": 165,
                  "snippet": {
                    "text": "\nclass FrontPageSource(menus.PageSource):\n    def is_paginating(self) -> bool:\n        # This forces the buttons to appear even in the front page\n        return True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5f5c7392da36b60aed9f5ca7eba721d504df29f61fddbcf483f7de4684b6540e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'get_max_pages' may be 'static'",
            "markdown": "Method `get_max_pages` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 9,
                  "charOffset": 15124,
                  "charLength": 13,
                  "snippet": {
                    "text": "get_max_pages"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 361,
                  "startColumn": 1,
                  "charOffset": 15095,
                  "charLength": 184,
                  "snippet": {
                    "text": "        return True\n\n    def get_max_pages(self) -> Optional[int]:\n        # There's only one actual page in the front page\n        # However we need at least 2 to show all the buttons"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a9573e39592b4582ecc66308d4c99d36087711924d3db9e9b295131f4904007d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'interaction_check' may be 'static'",
            "markdown": "Method `interaction_check` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 15,
                  "charOffset": 795,
                  "charLength": 17,
                  "snippet": {
                    "text": "interaction_check"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 757,
                  "charLength": 162,
                  "snippet": {
                    "text": "        self.bot = bot\n\n    async def interaction_check(self, interaction: discord.Interaction) -> bool:\n        return interaction.user.id == 752984497259151370\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3cfef395e727c65c398ca7b4523fbae929d52f217975f6dac83ad694f11ab49d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'cog_load' may be 'static'",
            "markdown": "Method `cog_load` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 15,
                  "charOffset": 14770,
                  "charLength": 8,
                  "snippet": {
                    "text": "cog_load"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 402,
                  "startColumn": 1,
                  "charOffset": 14722,
                  "charLength": 164,
                  "snippet": {
                    "text": "        return Emoji.turtlesmirk\n\n    async def cog_load(self) -> None:\n        for user_id in database.ResponseSpamBlacklist:\n            blacklist.append(user_id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3c7a49a1dda2f3e1e04c08c26da98a6037e9f90cc35b1f273d6b1ebda8130afe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'before_invoke' may be 'static'",
            "markdown": "Method `before_invoke` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 15,
                  "charOffset": 2562,
                  "charLength": 13,
                  "snippet": {
                    "text": "before_invoke"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 1,
                  "charOffset": 2490,
                  "charLength": 157,
                  "snippet": {
                    "text": "        return await on_command_error_(self, ctx, error)\n\n    async def before_invoke(self, ctx: commands.Context):\n        return await before_invoke_(ctx)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2088def4258f2780b4f4ec17fe5e37d2b9a61112a337b641d7734cd8333de17"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'check' may be 'static'",
            "markdown": "Method `check` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 15,
                  "charOffset": 2662,
                  "charLength": 5,
                  "snippet": {
                    "text": "check"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 1,
                  "charOffset": 2606,
                  "charLength": 135,
                  "snippet": {
                    "text": "        return await before_invoke_(ctx)\n\n    async def check(self, ctx: commands.Context):\n        return await main_mode_check_(ctx)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7e7c2982a2102600b2e7570b030567a5468a78507bac18741b744a543ccb5851"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyArgumentListInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Parameter 'name' unfilled",
            "markdown": "Parameter 'name' unfilled"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 39,
                  "charOffset": 4800,
                  "charLength": 1,
                  "snippet": {
                    "text": ")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 4732,
                  "charLength": 128,
                  "snippet": {
                    "text": "\ndef prompt_config(msg, key):\n    config, config_file = load_config()\n    if key not in config:\n        config[key] = input(msg)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3c7a21c42df068369247d7efc03232e4630c3f052ed8b9c9cd1868e7db67fc9"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyArgumentListInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Parameter 'name' unfilled",
            "markdown": "Parameter 'name' unfilled"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 39,
                  "charOffset": 5016,
                  "charLength": 1,
                  "snippet": {
                    "text": ")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 159,
                  "startColumn": 1,
                  "charOffset": 4947,
                  "charLength": 130,
                  "snippet": {
                    "text": "\ndef prompt_config2(msg, key):\n    config, config_file = load_config()\n    config[key] = msg\n    with config_file.open(\"w+\") as f:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2b7ce94866c30182c44466c9ce886e10d8133da2d7186a814ef02fa3c7651975"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyRedeclarationInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redeclared 'ch_mktAnnouncements' defined above without usage",
            "markdown": "Redeclared 'ch_mktAnnouncements' defined above without usage"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 940,
                  "startColumn": 5,
                  "charOffset": 32992,
                  "charLength": 19,
                  "snippet": {
                    "text": "ch_mktAnnouncements"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 938,
                  "startColumn": 1,
                  "charOffset": 32862,
                  "charLength": 456,
                  "snippet": {
                    "text": "    # *** Channels ***\n    ch_announcements = int(ConfigcatClient.HR_ID_CC.get_value(\"ch_announcements\", 816507730557796362))\n    ch_mktAnnouncements = int(ConfigcatClient.HR_ID_CC.get_value(\"ch_mktannouncements\", 816733579660754944))\n    ch_acadAnnouncements = int(ConfigcatClient.HR_ID_CC.get_value(\"ch_acadannouncements\", 816733725244522557))\n    ch_techAnnouncements = int(ConfigcatClient.HR_ID_CC.get_value(\"ch_techannouncements\", 816733303629414421))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3a6f22ee78b29c30b961ec1fffd56cb5f4c5c43b6a92a5a59bdec9f36f06f517"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyRedeclarationInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redeclared 'LEADER_ID' defined above without usage",
            "markdown": "Redeclared 'LEADER_ID' defined above without usage"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 975,
                  "startColumn": 7,
                  "charOffset": 34265,
                  "charLength": 9,
                  "snippet": {
                    "text": "LEADER_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 973,
                  "startColumn": 1,
                  "charOffset": 34257,
                  "charLength": 56,
                  "snippet": {
                    "text": "\n\nclass LEADER_ID:\n    \"\"\"\n    IDs of the SSD SET SERVER"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4c73853d047a64066d8612d221a252a6b6c3db4707785ec3e6afdc080c3e1677"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'ctx' value is not used",
            "markdown": "Parameter 'ctx' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 19,
                  "charOffset": 3577,
                  "charLength": 3,
                  "snippet": {
                    "text": "ctx"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 153,
                  "startColumn": 1,
                  "charOffset": 3557,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n\ndef TimmyBetaHost(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c1faf3649a960e545e30f0f5054bee41f41bc2991b37b1f2776005271a38a3d9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'response' value is not used",
            "markdown": "Local variable 'response' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 9,
                  "charOffset": 8546,
                  "charLength": 8,
                  "snippet": {
                    "text": "response"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 250,
                  "startColumn": 1,
                  "charOffset": 8523,
                  "charLength": 99,
                  "snippet": {
                    "text": "    )\n    try:\n        response = s3_client.upload_file(\n            file_name,\n            bucket,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "06e1e51448c3e23a78a7947f4d9ce8c59b17e96ee6afff36508dd78cc734e489"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'view_response' value is not used",
            "markdown": "Parameter 'view_response' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1354,
                  "startColumn": 13,
                  "charOffset": 51394,
                  "charLength": 18,
                  "snippet": {
                    "text": "view_response=None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1352,
                  "startColumn": 1,
                  "charOffset": 51301,
                  "charLength": 131,
                  "snippet": {
                    "text": "            ephemeral: bool = True,\n            coroutine: coroutineType = None,\n            view_response=None,\n    ):\n        \"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "472c84e5319206afda07ab580e010eb676f0fe79a48cc67b4c59dddc3b82e1a0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1541,
                  "startColumn": 19,
                  "charOffset": 58721,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1539,
                  "startColumn": 1,
                  "charOffset": 58674,
                  "charLength": 180,
                  "snippet": {
                    "text": "    )\n    async def confirm(\n            self, button: discord.ui.Button, interaction: discord.Interaction\n    ):\n        TranscriptLOG = self.bot.get_channel(TECH_ID.ch_ticketLog)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "82f22785b7b64cd6cb8d876939335a6ca095e61ad456183da72470f6622081a3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1550,
                  "startColumn": 62,
                  "charOffset": 59151,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1548,
                  "startColumn": 1,
                  "charOffset": 59008,
                  "charLength": 262,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.message.delete()\n        await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c424d7a961260d2711f2b2274368230cd04231dab044ca44d97ee82e6aa0e3bd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1571,
                  "startColumn": 60,
                  "charOffset": 59758,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1569,
                  "startColumn": 1,
                  "charOffset": 59673,
                  "charLength": 202,
                  "snippet": {
                    "text": "        emoji=\"🔒\",\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        ch = await self.bot.get_channel(interaction.channel_id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6d20f15227066bb9563869df809ffe4a6d5ea43834fb178d094830ebf8c3a071"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'msg' value is not used",
            "markdown": "Local variable 'msg' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1576,
                  "startColumn": 9,
                  "charOffset": 59952,
                  "charLength": 3,
                  "snippet": {
                    "text": "msg"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1574,
                  "startColumn": 1,
                  "charOffset": 59876,
                  "charLength": 190,
                  "snippet": {
                    "text": "        TempConfirmInstance = TechnicalCommissionConfirm(self.bot)\n\n        msg = await ch.send(\n            \"Are you sure you want to close this ticket?\", view=TempConfirmInstance\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "111981e93b0026bc48a3af848cf82854cf64ec4fde249545cafaa7efcd4b6453"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1592,
                  "startColumn": 26,
                  "charOffset": 60412,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1590,
                  "startColumn": 1,
                  "charOffset": 60349,
                  "charLength": 152,
                  "snippet": {
                    "text": "        emoji=Emoji.gsuitelogo,\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6ff7dab10c13d46b36ce3a3d495d309024ebcba2d4f6034577dc6bae2d3eb8b2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1592,
                  "startColumn": 60,
                  "charOffset": 60446,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1590,
                  "startColumn": 1,
                  "charOffset": 60349,
                  "charLength": 152,
                  "snippet": {
                    "text": "        emoji=Emoji.gsuitelogo,\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0f9363cc2f9375f3c0da749d9552642eb9a0db64de3e535bf97ded6ad599536"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1608,
                  "startColumn": 19,
                  "charOffset": 60822,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1606,
                  "startColumn": 1,
                  "charOffset": 60775,
                  "charLength": 139,
                  "snippet": {
                    "text": "    )\n    async def confirm(\n            self, button: discord.ui.Button, interaction: discord.Interaction\n    ):\n        self.value = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "244a24defe3993e6c5b1b425a3277c9f7bf5dffdb845c91658b1297b0e17aea2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1608,
                  "startColumn": 46,
                  "charOffset": 60849,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1606,
                  "startColumn": 1,
                  "charOffset": 60775,
                  "charLength": 139,
                  "snippet": {
                    "text": "    )\n    async def confirm(\n            self, button: discord.ui.Button, interaction: discord.Interaction\n    ):\n        self.value = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7df21c244777c56dae8f9a2f7ccab5aab5b36e38f32871ab78cf80c8d45f0d89"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1614,
                  "startColumn": 62,
                  "charOffset": 61078,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1612,
                  "startColumn": 1,
                  "charOffset": 60935,
                  "charLength": 275,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.send_message(\"Cancelling\", ephemeral=True)\n        self.value = False"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1abf96af9fcf50ab9423741934442719d4e0101018f25a98e75a0de86e2982c3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1630,
                  "startColumn": 61,
                  "charOffset": 61553,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1628,
                  "startColumn": 1,
                  "charOffset": 61440,
                  "charLength": 206,
                  "snippet": {
                    "text": "        custom_id=\"persistent_view:nitrofake\",\n    )\n    async def claim(self, interaction: discord.Interaction, button: discord.ui.Button):\n        try:\n            await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "95f308de600af43c82dd0adefd3db5d1efd1a80cff234e42defb1755deee704c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1656,
                  "startColumn": 60,
                  "charOffset": 62729,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1654,
                  "startColumn": 1,
                  "charOffset": 62644,
                  "charLength": 202,
                  "snippet": {
                    "text": "        emoji=\"🔒\",\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        ch = await self.bot.get_channel(interaction.channel_id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f4f055c1ce718adcff10acafac507b7d87421023c80aaa7df76dde115e74ad99"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'msg' value is not used",
            "markdown": "Local variable 'msg' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1661,
                  "startColumn": 9,
                  "charOffset": 62906,
                  "charLength": 3,
                  "snippet": {
                    "text": "msg"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1659,
                  "startColumn": 1,
                  "charOffset": 62847,
                  "charLength": 173,
                  "snippet": {
                    "text": "        TempConfirmInstance = TicketTempConfirm()\n\n        msg = await ch.send(\n            \"Are you sure you want to close this ticket?\", view=TempConfirmInstance\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0913147c1a83e7c53a54eb388aeb4409a51ef0692e2a6a3ba0c12e4596236fe7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1678,
                  "startColumn": 19,
                  "charOffset": 63348,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1676,
                  "startColumn": 1,
                  "charOffset": 63301,
                  "charLength": 139,
                  "snippet": {
                    "text": "    )\n    async def confirm(\n            self, button: discord.ui.Button, interaction: discord.Interaction\n    ):\n        self.value = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c5adcfe6c8157a4ee4ec78df24395a54e612133ff9f11e8129d57539491a74c1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1678,
                  "startColumn": 46,
                  "charOffset": 63375,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1676,
                  "startColumn": 1,
                  "charOffset": 63301,
                  "charLength": 139,
                  "snippet": {
                    "text": "    )\n    async def confirm(\n            self, button: discord.ui.Button, interaction: discord.Interaction\n    ):\n        self.value = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "769974f907ac9c376aa5e75e09fda4adb86d60d58f1e14fac5d1b8ee6e65eefe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1684,
                  "startColumn": 62,
                  "charOffset": 63604,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1682,
                  "startColumn": 1,
                  "charOffset": 63461,
                  "charLength": 275,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.send_message(\"Cancelling\", ephemeral=True)\n        self.value = False"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4ae496960a033184a4e921caf47149996682b1c6739ecad4e76d16b1fbbcfd42"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'response' value is not used",
            "markdown": "Local variable 'response' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1737,
                  "startColumn": 9,
                  "charOffset": 65442,
                  "charLength": 8,
                  "snippet": {
                    "text": "response"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1735,
                  "startColumn": 1,
                  "charOffset": 65423,
                  "charLength": 83,
                  "snippet": {
                    "text": "        }\n\n        response = requests.post(url, headers=headers, data=str(data))\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ea7fc063e8d8240bdf5cf326c451b5780f107779408b35be3e1b826b479b8b54"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1752,
                  "startColumn": 19,
                  "charOffset": 65865,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1750,
                  "startColumn": 1,
                  "charOffset": 65810,
                  "charLength": 153,
                  "snippet": {
                    "text": "    )\n    async def feedback_button(\n            self, button: discord.ui.Button, interaction: discord.Interaction\n    ):\n        modal = FeedbackModel()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4679a643c6a1f577beb38ad9533bc2b597f99ad1c2a9e3f8a83a41e39b4b25b3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'authorrank' value is not used",
            "markdown": "Local variable 'authorrank' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1770,
                  "startColumn": 17,
                  "charOffset": 66471,
                  "charLength": 10,
                  "snippet": {
                    "text": "authorrank"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1768,
                  "startColumn": 1,
                  "charOffset": 66424,
                  "charLength": 255,
                  "snippet": {
                    "text": "\n                listkeys = []\n                authorrank = ''\n                for key, value in sorted(checkrew[f'{menu.ctx.guild.id}'].items(), key=lambda pair: pair[1]['total'], reverse=True):\n                    if menu.ctx.guild.get_member(int(key)):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d025ac2859bfbbd787e569f44910c998be40509330cafbf1ef62059f523cd744"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'result' value is not used",
            "markdown": "Local variable 'result' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1825,
                  "startColumn": 9,
                  "charOffset": 68340,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1823,
                  "startColumn": 1,
                  "charOffset": 68322,
                  "charLength": 106,
                  "snippet": {
                    "text": "    try:\n\n        result = subprocess.run(\n            f\"cd && cd {main_or_beta}\",\n            shell=True,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cd5ff42856aefeb5d72d1c757543914058402c5b2d13bf6e45cf66905a90bd1a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'request_id' value is not used",
            "markdown": "Parameter 'request_id' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/docsapi.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 14,
                  "charOffset": 514,
                  "charLength": 10,
                  "snippet": {
                    "text": "request_id"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 499,
                  "charLength": 91,
                  "snippet": {
                    "text": "\n\ndef callback(request_id, response, exception):\n    if exception:\n        print(exception)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f1e4ab1f1cbf0572a077bc4847180a02a5b256c213b0e4ccdb48faa143c4b68a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'result' value is not used",
            "markdown": "Local variable 'result' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/docsapi.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 5,
                  "charOffset": 3346,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "charOffset": 3335,
                  "charLength": 134,
                  "snippet": {
                    "text": "    ]\n\n    result = (\n        drive_service.documents()\n        .batchUpdate(documentId=document_copy_id, body={\"requests\": requests})"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d3b8d2282ea39cf659f8fdbff2d45a3c17422e61ea5290887f2587730189dea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'exc' value is not used",
            "markdown": "Parameter 'exc' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 724,
                  "startColumn": 15,
                  "charOffset": 16368,
                  "charLength": 3,
                  "snippet": {
                    "text": "exc"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 722,
                  "startColumn": 1,
                  "charOffset": 16331,
                  "charLength": 122,
                  "snippet": {
                    "text": "\n@app.teardown_request\ndef _db_close(exc):\n    \"\"\"\n    This hook ensures that the connection is closed when we've finished"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7827b1dd18a342079d0f38962e1596906869f2180ac2b599909f8e0c691aa3b3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'object' value is not used",
            "markdown": "Local variable 'object' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 9,
                  "charOffset": 3427,
                  "charLength": 6,
                  "snippet": {
                    "text": "object"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 3341,
                  "charLength": 172,
                  "snippet": {
                    "text": "        if r.status_code == 422:\n            raise InvalidAuth(r.status_code)\n        object = range(len(r.json()))\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9fcfb700f19601b9845883a6a9a114b5bd555b1667e9fa69d73085320fc30257"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'object' value is not used",
            "markdown": "Local variable 'object' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 9,
                  "charOffset": 5159,
                  "charLength": 6,
                  "snippet": {
                    "text": "object"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 1,
                  "charOffset": 5077,
                  "charLength": 152,
                  "snippet": {
                    "text": "            raise InvalidAuth(r.status_code)\n        print(r.status_code)\n        object = range(len(r.json()[\"data\"]))\n        pprint.pprint(r.json())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0ac9289f08aa09564a2033199a27d2e6a320c5c45f65f5c6c0f44da652a5119"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 28,
                  "charOffset": 903,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 851,
                  "charLength": 141,
                  "snippet": {
                    "text": "        emoji=\"✅\",\n    )\n    async def verify(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "60c8e5dae1c3eeabb57014f8679347a351bc45cf289c301c7f2634db4a3a32c3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 62,
                  "charOffset": 937,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 851,
                  "charLength": 141,
                  "snippet": {
                    "text": "        emoji=\"✅\",\n    )\n    async def verify(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4acb5adb21d39987e68717e973bead9fdac5970b85ab16f15589e9cffbd1e3c0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'page_size' value is not used",
            "markdown": "Parameter 'page_size' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 21,
                  "charOffset": 3757,
                  "charLength": 14,
                  "snippet": {
                    "text": "page_size: int"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 3692,
                  "charLength": 197,
                  "snippet": {
                    "text": "        \"\"\"List all tags in the database\"\"\"\n\n        def get_end(page_size: int):\n            database.db.connect(reuse_if_open=True)\n            tags: int = database.PunishmentTag.select().count()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89d64d64b00a4e45c9157286c8b1abbd3aacbcc2e7f87a2cced5bb635cf6ffce"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'embed' value is not used",
            "markdown": "Local variable 'embed' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 9,
                  "charOffset": 4614,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 4557,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n        embed = discord.Embed(title=\"Tag List\")\n        embed = await common.paginate_embed(\n            self.bot, ctx, embed, populate_embed, get_end(10), page=page\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9addfc782b5b0b65166d3ddc8de684bfba4e2e2d5470f58880d246bbc830f249"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'value' value is not used",
            "markdown": "Local variable 'value' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 13,
                  "charOffset": 5074,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 140,
                  "startColumn": 1,
                  "charOffset": 5023,
                  "charLength": 119,
                  "snippet": {
                    "text": "            user: discord.User = user\n\n            value = None\n            typeval = None\n            banreason = None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9b63b4ebd3e75524b3e9d74336d40f9b1dbcde4037bd4902aa17dbe8c9d7b95"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'typeval' value is not used",
            "markdown": "Local variable 'typeval' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 13,
                  "charOffset": 5099,
                  "charLength": 7,
                  "snippet": {
                    "text": "typeval"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 141,
                  "startColumn": 1,
                  "charOffset": 5061,
                  "charLength": 82,
                  "snippet": {
                    "text": "\n            value = None\n            typeval = None\n            banreason = None\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "81dc3a2706fcc4824ed210baed7cd6255681db63f7b7b5a661f599f0ee905a43"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'user' value is not used",
            "markdown": "Parameter 'user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 42,
                  "charOffset": 1085,
                  "charLength": 4,
                  "snippet": {
                    "text": "user"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1014,
                  "charLength": 194,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener()\n    async def on_member_ban(self, guild, user):\n        \"\"\"\n        Pycord doesn't give us the information we need so we need to dig deeper and query the audit logs"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "55d471749eb4a1a174d8ff14ef73595b7673607080224083974ddb2692032a40"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'item' value is not used",
            "markdown": "Parameter 'item' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 48,
                  "charOffset": 5306,
                  "charLength": 21,
                  "snippet": {
                    "text": "item: discord.ui.Item"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 5211,
                  "charLength": 308,
                  "snippet": {
                    "text": "            await self.message.edit(view=None)\n\n    async def on_error(self, error: Exception, item: discord.ui.Item, interaction: discord.Interaction) -> None:\n        if interaction.response.is_done():\n            await interaction.followup.send(f'An unknown error occurred, sorry {error}', ephemeral=True)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "20c21330719c9656eb1c650388da45e24f0ae382e295c1fdf0c03f3222e66300"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 72,
                  "charOffset": 6390,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 148,
                  "startColumn": 1,
                  "charOffset": 6252,
                  "charLength": 247,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label='≪', style=discord.ButtonStyle.grey)\n    async def go_to_first_page(self, interaction: discord.Interaction, button: discord.ui.Button, ):\n        \"\"\"go to the first page\"\"\"\n        await self.show_page(interaction, 0)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "64d2b1852ee499baada7fc42bee3d73d7823f914ec7d693de60aa3885addb57c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 75,
                  "charOffset": 6647,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 153,
                  "startColumn": 1,
                  "charOffset": 6500,
                  "charLength": 285,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label='Back', style=discord.ButtonStyle.blurple)\n    async def go_to_previous_page(self, interaction: discord.Interaction, button: discord.ui.Button):\n        \"\"\"go to the previous page\"\"\"\n        await self.show_checked_page(interaction, self.current_page - 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "679f82106038db38b1101ca27c201e97e0e22c2a055485ce3ffead78ad903438"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 71,
                  "charOffset": 7131,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 162,
                  "startColumn": 1,
                  "charOffset": 6988,
                  "charLength": 279,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label='Next', style=discord.ButtonStyle.blurple)\n    async def go_to_next_page(self, interaction: discord.Interaction, button: discord.ui.Button, ):\n        \"\"\"go to the next page\"\"\"\n        await self.show_checked_page(interaction, self.current_page + 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "114ef6505a59a844fd67030b44c5987ddc3bebcd475d20597aa6da281170df76"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 71,
                  "charOffset": 7405,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 167,
                  "startColumn": 1,
                  "charOffset": 7268,
                  "charLength": 264,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label='≫', style=discord.ButtonStyle.grey)\n    async def go_to_last_page(self, interaction: discord.Interaction, button: discord.ui.Button, ):\n        \"\"\"go to the last page\"\"\"\n        # The call here is safe because it's guarded by skip_if"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c75752c6c5863f3cf829921a1b5e325ad991596a1ddd3bbde83987151826268"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 69,
                  "charOffset": 7757,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 1,
                  "charOffset": 7608,
                  "charLength": 266,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label='Skip to page...', style=discord.ButtonStyle.grey)\n    async def numbered_page(self, interaction: discord.Interaction, button: discord.ui.Button, ):\n        \"\"\"lets you type a page number to go to\"\"\"\n        if self.input_lock.locked():"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b90380cfbdfda335cfebdb69f2c3dd42c75db6cec3da0088540096fafabf887a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 66,
                  "charOffset": 9002,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 201,
                  "startColumn": 1,
                  "charOffset": 8868,
                  "charLength": 250,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label='Quit', style=discord.ButtonStyle.red)\n    async def stop_pages(self, interaction: discord.Interaction, button: discord.ui.Button, ):\n        \"\"\"stops the pagination session.\"\"\"\n        await interaction.response.defer()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a3ea64ac7ab0b1ac42ac5689a8ecc5b7e8d311d39ddbc840d481e0678df3ec1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'menu' value is not used",
            "markdown": "Parameter 'menu' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 27,
                  "charOffset": 15469,
                  "charLength": 14,
                  "snippet": {
                    "text": "menu: HelpMenu"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 371,
                  "startColumn": 1,
                  "charOffset": 15422,
                  "charLength": 196,
                  "snippet": {
                    "text": "        return self\n\n    def format_page(self, menu: HelpMenu, page):\n        embed = discord.Embed(title='Bot Help', colour=discord.Colour.blurple())\n        embed.description = inspect.cleandoc("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d214623b76344cda0d99bf20bebd1bcaac5e23e5f0406cb12d38fc998391b228"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'page' value is not used",
            "markdown": "Parameter 'page' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 43,
                  "charOffset": 15485,
                  "charLength": 4,
                  "snippet": {
                    "text": "page"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 371,
                  "startColumn": 1,
                  "charOffset": 15422,
                  "charLength": 196,
                  "snippet": {
                    "text": "        return self\n\n    def format_page(self, menu: HelpMenu, page):\n        embed = discord.Embed(title='Bot Help', colour=discord.Colour.blurple())\n        embed.description = inspect.cleandoc("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9515548ed3bb2fb9ec70257d4d01e1d612a0c571d9d63671a7be6fe8c01890c4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'CheckDB' value is not used",
            "markdown": "Local variable 'CheckDB' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 9,
                  "charOffset": 2544,
                  "charLength": 7,
                  "snippet": {
                    "text": "CheckDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2482,
                  "charLength": 205,
                  "snippet": {
                    "text": "    @filters.command()\n    async def list(self, ctx):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8b1d895d1c6b5a05e73f5c3e1e2ac76bf10600abd9bf48a0bd9edc592893a414"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'result' value is not used",
            "markdown": "Local variable 'result' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 13,
                  "charOffset": 17032,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 519,
                  "startColumn": 1,
                  "charOffset": 17006,
                  "charLength": 122,
                  "snippet": {
                    "text": "        try:\n\n            result = subprocess.run(\n                f\"cd && cd {main_or_beta}\",\n                shell=True,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8b096ce152a055d84b3cc65c12b31d5295541625a52b919c2a4ad6e3295fe228"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'i' value is not used",
            "markdown": "Local variable 'i' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 42,
                  "charOffset": 487,
                  "charLength": 1,
                  "snippet": {
                    "text": "i"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 413,
                  "charLength": 95,
                  "snippet": {
                    "text": "\n    rnd = random.SystemRandom()\n    return \"\".join(rnd.choice(chars) for i in range(length))\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "151f43711a9d970f6e11777977f224f588cf58cb6dc697cb260cf700d0672bd4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 62,
                  "charOffset": 2966,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 2879,
                  "charLength": 217,
                  "snippet": {
                    "text": "        emoji=\"📝\",\n    )\n    async def verify(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        modal = BotRequestModal(self.bot)\n        return await interaction.response.send_modal(modal)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0f4eb2f75df68b9956267f763bb61895b088741dd668daf2148eabba62250fc0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 9,
                  "charOffset": 5812,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 169,
                  "startColumn": 1,
                  "charOffset": 5752,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n        guild = self.bot.get_guild(TECH_ID.g_tech)\n        channel: discord.TextChannel = self.bot.get_channel(TECH_ID.ch_botreq)\n\n        thread = ...  # type: discord.Thread"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b82082c4e010700c03f0426b41cdec14dfde93714218fe795fe8051bbd6a0bab"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'thread' value is not used",
            "markdown": "Local variable 'thread' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 9,
                  "charOffset": 5892,
                  "charLength": 6,
                  "snippet": {
                    "text": "thread"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 1,
                  "charOffset": 5804,
                  "charLength": 162,
                  "snippet": {
                    "text": "        channel: discord.TextChannel = self.bot.get_channel(TECH_ID.ch_botreq)\n\n        thread = ...  # type: discord.Thread\n\n        for thread in guild.threads:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7e0a61514c29828af94cfd5701601979115b1bbe3fca1269d1ec7e8c2fc532c6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 17,
                  "charOffset": 6627,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 214,
                  "startColumn": 1,
                  "charOffset": 6566,
                  "charLength": 173,
                  "snippet": {
                    "text": "                    .get()\n                )\n                channel: discord.VoiceChannel = self.bot.get_channel(\n                    int(query.ChannelID)\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9339b652ecdece81985cc39d3d88174471c78a9e6a7d5d761183d262bcbb2213"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 17,
                  "charOffset": 9363,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 274,
                  "startColumn": 1,
                  "charOffset": 9302,
                  "charLength": 164,
                  "snippet": {
                    "text": "                    .get()\n                )\n                channel: discord.VoiceChannel = self.bot.get_channel(\n                    q.ChannelID\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d38d961d65e19dd1b5a1e542f7c8e5af24f53fb4585701d5a011023f606319c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'team' value is not used",
            "markdown": "Local variable 'team' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 9,
                  "charOffset": 20694,
                  "charLength": 4,
                  "snippet": {
                    "text": "team"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 540,
                  "startColumn": 1,
                  "charOffset": 20608,
                  "charLength": 233,
                  "snippet": {
                    "text": "    async def end(self, ctx):\n        database.db.connect(reuse_if_open=True)\n        team = discord.utils.get(ctx.guild.roles, name=self.AT)\n        member = ctx.guild.get_member(ctx.author.id)\n        timestamp2 = datetime.now(EST)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "33310fcffec2cd6cd5018f5e07c953c5848a5ebd9096252b91a9ea4ee110b966"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'timestamp2' value is not used",
            "markdown": "Local variable 'timestamp2' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 544,
                  "startColumn": 9,
                  "charOffset": 20811,
                  "charLength": 10,
                  "snippet": {
                    "text": "timestamp2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 542,
                  "startColumn": 1,
                  "charOffset": 20686,
                  "charLength": 191,
                  "snippet": {
                    "text": "        team = discord.utils.get(ctx.guild.roles, name=self.AT)\n        member = ctx.guild.get_member(ctx.author.id)\n        timestamp2 = datetime.now(EST)\n\n        voice_state = member.voice"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83360bbb1f1c5a01c987324b2bba78b7c378a04e5ca1ae4681d070d1bdf78cf4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'BOT' value is not used",
            "markdown": "Local variable 'BOT' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 873,
                  "startColumn": 9,
                  "charOffset": 34899,
                  "charLength": 3,
                  "snippet": {
                    "text": "BOT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 871,
                  "startColumn": 1,
                  "charOffset": 34837,
                  "charLength": 223,
                  "snippet": {
                    "text": "        member = ctx.guild.get_member(ctx.author.id)\n\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "29e5e24bb0353ca58e9d5361c92056b80085e40fa5059003715be1858f070d59"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'TMOD' value is not used",
            "markdown": "Local variable 'TMOD' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 875,
                  "startColumn": 9,
                  "charOffset": 35003,
                  "charLength": 4,
                  "snippet": {
                    "text": "TMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 873,
                  "startColumn": 1,
                  "charOffset": 34891,
                  "charLength": 299,
                  "snippet": {
                    "text": "        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "24d55144b73ed60fb6a89f4eca3862167e9e6ee4a2ebb16f30643c2eb4eb4327"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'MOD' value is not used",
            "markdown": "Local variable 'MOD' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 876,
                  "startColumn": 9,
                  "charOffset": 35069,
                  "charLength": 3,
                  "snippet": {
                    "text": "MOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 874,
                  "startColumn": 1,
                  "charOffset": 34944,
                  "charLength": 308,
                  "snippet": {
                    "text": "        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b5a0dbb2b87622825268689dc4b8661bd19385ecd39bfada4b78f76d169155f0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'SMOD' value is not used",
            "markdown": "Local variable 'SMOD' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 877,
                  "startColumn": 9,
                  "charOffset": 35133,
                  "charLength": 4,
                  "snippet": {
                    "text": "SMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 875,
                  "startColumn": 1,
                  "charOffset": 34995,
                  "charLength": 319,
                  "snippet": {
                    "text": "        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f8b4ef4020bc95e213165b45c105edc05871cdd2ae4e0a2acdac75be3add2632"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'CO' value is not used",
            "markdown": "Local variable 'CO' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 878,
                  "startColumn": 9,
                  "charOffset": 35199,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 876,
                  "startColumn": 1,
                  "charOffset": 35061,
                  "charLength": 315,
                  "snippet": {
                    "text": "        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "82012263f45cf1cdfff497154ed3961553a6cb1f6b439961e0317d600bb32950"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'VP' value is not used",
            "markdown": "Local variable 'VP' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 879,
                  "startColumn": 9,
                  "charOffset": 35261,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 877,
                  "startColumn": 1,
                  "charOffset": 35125,
                  "charLength": 252,
                  "snippet": {
                    "text": "        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bcb413abe4478dceea8270df8d42326a2590607e5590fc835a34d76f15585110"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'ST' value is not used",
            "markdown": "Local variable 'ST' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 880,
                  "startColumn": 9,
                  "charOffset": 35323,
                  "charLength": 2,
                  "snippet": {
                    "text": "ST"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 878,
                  "startColumn": 1,
                  "charOffset": 35191,
                  "charLength": 259,
                  "snippet": {
                    "text": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "250e4cac8279b03f5a3f53b2197dacf284b49dd54b0250f16ce89e91cea4e426"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'query' value is not used",
            "markdown": "Local variable 'query' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1119,
                  "startColumn": 21,
                  "charOffset": 46296,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1117,
                  "startColumn": 1,
                  "charOffset": 46243,
                  "charLength": 150,
                  "snippet": {
                    "text": "                    LOCK.save()\n\n                    query = (\n                        database.VCChannelInfo.select()\n                        .where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "210f0cd9fea29983801023a2c8e1edbfc485739ac75fd39168057c073eff4516"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'embed' value is not used",
            "markdown": "Local variable 'embed' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1465,
                  "startColumn": 17,
                  "charOffset": 63153,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1463,
                  "startColumn": 1,
                  "charOffset": 63067,
                  "charLength": 275,
                  "snippet": {
                    "text": "                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed(\n                    title=f\"{Emoji.warn} Unknown Channel\",\n                    description=\"You are not the owner of this voice channel nor is this a valid channel. \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7a14b55909ea76c83d016bad702c92362d5143b1959d4ff65b6b48c6a2092f23"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local function 'check' is not used",
            "markdown": "Local function 'check' is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 21,
                  "charOffset": 17297,
                  "charLength": 5,
                  "snippet": {
                    "text": "check"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 411,
                  "startColumn": 1,
                  "charOffset": 17258,
                  "charLength": 123,
                  "snippet": {
                    "text": "            else:\n\n                def check(m):\n                    return (\n                        m.content is not None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dfd34bd453345a03b7ff13e59bd66611221798f244ecb0b08917440df5838c90"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'lastReset' value is not used",
            "markdown": "Local variable 'lastReset' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 13,
                  "charOffset": 1026,
                  "charLength": 9,
                  "snippet": {
                    "text": "lastReset"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 899,
                  "charLength": 275,
                  "snippet": {
                    "text": "\n        if weekdayNow == 1 and (now - self.lastReset >= datetime.timedelta(days=7)) and timeNow >= self.midnight:\n            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(StudyVCLeaderboard.id == entry)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "540ee43691fd15b781dc4b1b00f8af4886e0b7a0bffdd8541eb7c4e83d24dd0c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'numberStr' value is not used",
            "markdown": "Local variable 'numberStr' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 5,
                  "charOffset": 2087,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2074,
                  "charLength": 67,
                  "snippet": {
                    "text": "    \"\"\"\n\n    numberStr = ...     # type: str\n\n    if number < 1000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "caa34c24c4b2c47405cf4313a8b0d7dd27fccf698bcdb9e9890a4452f82e7e89"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'newLvl' value is not used",
            "markdown": "Local variable 'newLvl' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 14,
                  "charOffset": 9059,
                  "charLength": 6,
                  "snippet": {
                    "text": "newLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 329,
                  "startColumn": 1,
                  "charOffset": 9029,
                  "charLength": 108,
                  "snippet": {
                    "text": "    return True\n\n        elif newLvl < 40:\n            role = None  # TODO: get lvl 30 role and add to user\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1db564caf0faeae94c0018a83aa16d1c9a569c927090ecd55db091f2059b0560"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'roleStr' value is not used",
            "markdown": "Local variable 'roleStr' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 17,
                  "charOffset": 9186,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 333,
                  "startColumn": 1,
                  "charOffset": 9137,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 30:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "164fd3449721c72273d5e2a48c01a18ec314ca18be8caa2a1504ac2779552d62"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'signature' value is not used",
            "markdown": "Local variable 'signature' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 445,
                  "startColumn": 13,
                  "charOffset": 12349,
                  "charLength": 9,
                  "snippet": {
                    "text": "signature"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 443,
                  "startColumn": 1,
                  "charOffset": 12241,
                  "charLength": 194,
                  "snippet": {
                    "text": "                sorted(subcommand.name for subcommand in self.studytodo.commands)\n            )\n            signature = f\"{ctx.prefix}{ctx.command.qualified_name} <{subcommands}>\"\n\n    @property"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d171e09498e0f0c251c2218e9a2beb568e1defd7cb2d58a9bff57a67558ce49b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'now' value is not used",
            "markdown": "Local variable 'now' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 9,
                  "charOffset": 2485,
                  "charLength": 3,
                  "snippet": {
                    "text": "now"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 2458,
                  "charLength": 195,
                  "snippet": {
                    "text": "\n    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0567ab6580c0b12c9aac84e25f26cdb724d697c0329485b7e279310f48cb2d8e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'goal' value is not used",
            "markdown": "Local variable 'goal' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 17,
                  "charOffset": 5069,
                  "charLength": 4,
                  "snippet": {
                    "text": "goal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 166,
                  "startColumn": 1,
                  "charOffset": 4921,
                  "charLength": 269,
                  "snippet": {
                    "text": "            query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2980d55255c4adf4aacaa1e2fc705baab2d8edab1066ddd908d25c8466bea577"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'renewal' value is not used",
            "markdown": "Local variable 'renewal' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 23,
                  "charOffset": 5075,
                  "charLength": 7,
                  "snippet": {
                    "text": "renewal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 166,
                  "startColumn": 1,
                  "charOffset": 4921,
                  "charLength": 269,
                  "snippet": {
                    "text": "            query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a2e7fd9b9c097b5b3089fa94f9ea532a2a7794bb91b3b7a670fd2b5b08f097e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'val' value is not used",
            "markdown": "Local variable 'val' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 17,
                  "charOffset": 5414,
                  "charLength": 3,
                  "snippet": {
                    "text": "val"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 1,
                  "charOffset": 5309,
                  "charLength": 211,
                  "snippet": {
                    "text": "\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n\n                if datetime.now(EST) >= dateObj:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3c0b9a6e4e23ed819f2af0c0a6380acdbb476de0dbb8112e14b94ea288f239c8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'now' value is not used",
            "markdown": "Local variable 'now' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 9,
                  "charOffset": 2485,
                  "charLength": 3,
                  "snippet": {
                    "text": "now"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 2458,
                  "charLength": 195,
                  "snippet": {
                    "text": "\n    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21bb8413f46b62336aa0f5d218f7aee27e2bb0a29d1824501f58bb66a192fd83"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'goal' value is not used",
            "markdown": "Local variable 'goal' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 17,
                  "charOffset": 5074,
                  "charLength": 4,
                  "snippet": {
                    "text": "goal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 4926,
                  "charLength": 269,
                  "snippet": {
                    "text": "            query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "599da909b7f48a776af79770b1387f03ce7624f8982ffb3907366abe44e4ae5a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'renewal' value is not used",
            "markdown": "Local variable 'renewal' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 23,
                  "charOffset": 5080,
                  "charLength": 7,
                  "snippet": {
                    "text": "renewal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 4926,
                  "charLength": 269,
                  "snippet": {
                    "text": "            query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c4d6a1c38528fe2408933247934e6250b24b884cf743558a795d3564dd180180"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'val' value is not used",
            "markdown": "Local variable 'val' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 17,
                  "charOffset": 5419,
                  "charLength": 3,
                  "snippet": {
                    "text": "val"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 1,
                  "charOffset": 5314,
                  "charLength": 211,
                  "snippet": {
                    "text": "\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n\n                if datetime.now(EST) >= dateObj:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c3b758591d738cdceee8f6a00ec2c409f4b5315b5b94a2a6dc30d76336e1caf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'i' value is not used",
            "markdown": "Local variable 'i' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 17,
                  "charOffset": 1846,
                  "charLength": 1,
                  "snippet": {
                    "text": "i"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 1782,
                  "charLength": 166,
                  "snippet": {
                    "text": "            else:\n                list_ten = []\n                i = 0\n                for entry in query:\n                    if not isinstance(entry.Date, datetime):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a2c73bb19d700e09e84958088a7c08586776f8464fe5e33cd9d2e504bdbca34"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'i' value is not used",
            "markdown": "Local variable 'i' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 13,
                  "charOffset": 5815,
                  "charLength": 1,
                  "snippet": {
                    "text": "i"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 5763,
                  "charLength": 90,
                  "snippet": {
                    "text": "        else:\n            list_ten = []\n            i = 0\n            for entry in query:\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e54b07dfcaf0b799221aa375320d2bcdec0ddb63f6b1467a9b51621ed28b2b6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 30,
                  "charOffset": 20471,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 553,
                  "startColumn": 1,
                  "charOffset": 20431,
                  "charLength": 100,
                  "snippet": {
                    "text": "        )\n\n    async def callback(self, interaction: discord.Interaction):\n        self.view.stop()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a5c868cdc2e19d26b0d6e760b057ce29e3ee34125c29abb4a9ac790c7f354c95"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'nw' value is not used",
            "markdown": "Local variable 'nw' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 17,
                  "charOffset": 4166,
                  "charLength": 2,
                  "snippet": {
                    "text": "nw"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 4112,
                  "charLength": 127,
                  "snippet": {
                    "text": "                nextweek = old + new\n\n                nw = nextweek.strftime(\"%m/%d/%Y\")\n\n                query.Date = nextweek"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "86b7c27c029b98cdb0a8b752d68b8785a9674c621851b127771ab940c4c912af"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'directTranscript' value is not used",
            "markdown": "Parameter 'directTranscript' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 5,
                  "charOffset": 2595,
                  "charLength": 30,
                  "snippet": {
                    "text": "directTranscript: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 2505,
                  "charLength": 183,
                  "snippet": {
                    "text": "    user: discord.User = None,\n    responsesauthor: typing.List[discord.User] = None,\n    directTranscript: bool = False,\n):\n    transcript = await chat_exporter.export(channel, None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8727dc65c312f32974d4d2935282be906d87bd19d4531a39bcfaaa320f56c8ba"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'self' value is not used",
            "markdown": "Parameter 'self' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 16,
                  "charOffset": 4565,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 4548,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fd9dd46279f23d64e8a8daa09e562d1e57c77eeba78337389ea60a5bfab5a388"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'sandbox' value is not used",
            "markdown": "Parameter 'sandbox' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 59,
                  "charOffset": 8671,
                  "charLength": 21,
                  "snippet": {
                    "text": "sandbox: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 275,
                  "startColumn": 1,
                  "charOffset": 8599,
                  "charLength": 152,
                  "snippet": {
                    "text": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0282f71e05e812547385467af16e0a0167a1ffde5c2ddaa227b15575d4ebcb3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 13,
                  "charOffset": 10567,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 338,
                  "startColumn": 1,
                  "charOffset": 10527,
                  "charLength": 178,
                  "snippet": {
                    "text": "            )\n        else:\n            channel = self.bot.get_channel(interaction.channel_id)\n            guild = interaction.message.guild\n            author = interaction.user"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66e7c63f1d6b339d5cde69de9b90550fe4685cf8595357013365764e8b0dd063"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 33,
                  "charOffset": 11683,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 366,
                  "startColumn": 1,
                  "charOffset": 11603,
                  "charLength": 246,
                  "snippet": {
                    "text": "                    view=MSV,\n                )\n            except Exception as e:\n                await interaction.channel.send(\n                    f\"{interaction.user.mention} I can't send you messages, please check you're privacy settings!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5bb6785dea298e35d3b543d65ce97319a06210c25a0990b404151612abbcbac1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 37,
                  "charOffset": 13071,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 400,
                  "startColumn": 1,
                  "charOffset": 12942,
                  "charLength": 215,
                  "snippet": {
                    "text": "                try:\n                    await DMChannel.send(embed=embed, view=MiscOptList)\n                except Exception as e:\n                    await interaction.followup.send(embed=embed, view=MiscOptList)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e12b4a85f8dfdab160a2dea22f5397e35d30ff9a6dff80c1d7039ec5e533c053"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'guild' value is not used",
            "markdown": "Local variable 'guild' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 779,
                  "startColumn": 13,
                  "charOffset": 28342,
                  "charLength": 5,
                  "snippet": {
                    "text": "guild"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 777,
                  "startColumn": 1,
                  "charOffset": 28249,
                  "charLength": 165,
                  "snippet": {
                    "text": "        elif val == \"ch_lock\":\n            channel = interaction.message.channel\n            guild = interaction.message.guild\n            author = interaction.user\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8328d8f0863026f85911f4f4bed5c2d96761891c9a00f799ff736fa72b1854f4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'query' value is not used",
            "markdown": "Local variable 'query' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 782,
                  "startColumn": 13,
                  "charOffset": 28427,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 780,
                  "startColumn": 1,
                  "charOffset": 28376,
                  "charLength": 185,
                  "snippet": {
                    "text": "            author = interaction.user\n\n            query = (\n                database.TicketInfo.select()\n                .where(database.TicketInfo.ChannelID == interaction.channel_id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "79cc4e32751c32d73f283a64303c5e4cf83242c8f85c924d9af8242a7ba4a9c5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 890,
                  "startColumn": 13,
                  "charOffset": 32371,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 888,
                  "startColumn": 1,
                  "charOffset": 32291,
                  "charLength": 199,
                  "snippet": {
                    "text": "\n        elif InteractionResponse[\"custom_id\"] == \"ch_lock_CANCEL\":\n            channel = interaction.message.channel\n            author = interaction.user\n            await interaction.channel.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1e088a8f5dfb7b42200f740f2e3dc43410f780c936add9898fb3d9cf0733933e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 898,
                  "startColumn": 13,
                  "charOffset": 32709,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 896,
                  "startColumn": 1,
                  "charOffset": 32634,
                  "charLength": 168,
                  "snippet": {
                    "text": "\n        elif InteractionResponse[\"custom_id\"] == \"ch_lock_C\":\n            channel = self.bot.get_channel(interaction.channel_id)\n            author = interaction.user\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "93154fd76b3af6cd1d2c12e5cc286e9ccc231e8bdad9df331be817d07a584b51"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'msg' value is not used",
            "markdown": "Local variable 'msg' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 953,
                  "startColumn": 13,
                  "charOffset": 34900,
                  "charLength": 3,
                  "snippet": {
                    "text": "msg"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 951,
                  "startColumn": 1,
                  "charOffset": 34832,
                  "charLength": 225,
                  "snippet": {
                    "text": "                )\n            author = interaction.user\n            msg = await interaction.channel.send(\n                f\"Please wait, creating your transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d18b43fdc5fdb64180430c2bdb4e4ef3fa3013af0cc5746e5290beb016181357"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'query' value is not used",
            "markdown": "Local variable 'query' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1092,
                  "startColumn": 13,
                  "charOffset": 40965,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1090,
                  "startColumn": 1,
                  "charOffset": 40916,
                  "charLength": 137,
                  "snippet": {
                    "text": "        )\n        if query.exists():\n            query = query.get()\n            embed = discord.Embed(\n                title=\"Confirm?\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cc9b97843a5d9ee934acdc6e5d9786f7ffd52d68a3a5dbb6412bd50444c4f6f1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1129,
                  "startColumn": 33,
                  "charOffset": 42293,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1127,
                  "startColumn": 1,
                  "charOffset": 42207,
                  "charLength": 181,
                  "snippet": {
                    "text": "                    entry.ChannelID\n                )\n            except Exception as e:\n                continue\n            fetchMessage = await channel.history(limit=1).flatten()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e272bcca5a4f0322ebb40b4254927e8c5c9b55e1ed2053abf57e959f2bfcc19e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'LogCH' value is not used",
            "markdown": "Local variable 'LogCH' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1134,
                  "startColumn": 13,
                  "charOffset": 42528,
                  "charLength": 5,
                  "snippet": {
                    "text": "LogCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1132,
                  "startColumn": 1,
                  "charOffset": 42389,
                  "charLength": 257,
                  "snippet": {
                    "text": "            TicketOwner = self.bot.get_user(entry.authorID)\n            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e249ff420b8632b5fd046e6007bee1fad7fd8c0f652a22915c554edbbcf26abd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'authorList' value is not used",
            "markdown": "Local variable 'authorList' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1135,
                  "startColumn": 13,
                  "charOffset": 42596,
                  "charLength": 10,
                  "snippet": {
                    "text": "authorList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1133,
                  "startColumn": 1,
                  "charOffset": 42449,
                  "charLength": 222,
                  "snippet": {
                    "text": "            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:\n                continue"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fb8f8f03bbbe383270afb96e44edc8a2e3506acdffb8066e133cca3d00e8205d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'val' value is not used",
            "markdown": "Local variable 'val' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 13,
                  "charOffset": 1404,
                  "charLength": 3,
                  "snippet": {
                    "text": "val"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1378,
                  "charLength": 108,
                  "snippet": {
                    "text": "\n        try:\n            val = InteractionResponse[\"custom_id\"]\n        except KeyError:\n            return"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "011ceafe698db24801aeede2f12e21b66d4e79a6c1db1cc61ce5f07bb7f1176e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 13,
                  "charOffset": 1789,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 1758,
                  "charLength": 169,
                  "snippet": {
                    "text": "                )\n\n            channel = self.bot.get_channel(interaction.channel_id)\n            guild = interaction.message.guild\n            author = interaction.user"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49dc3876f776220d5fe9438091b8f783136f1b8c011e90c7cc64d0455d92a43f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 41,
                  "charOffset": 4207,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 4074,
                  "charLength": 250,
                  "snippet": {
                    "text": "                    try:\n                        self.flow.fetch_token(code=answer1.content)\n                    except Exception as e:\n                        return await dm_channel.send(\"Invalid code, try again later...\")\n                    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ad83e3cabddfddd78211e41cbce2dc60021fbefe7c8ec99e492b00a1249d0297"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'self' value is not used",
            "markdown": "Parameter 'self' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 25,
                  "charOffset": 379,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 353,
                  "charLength": 119,
                  "snippet": {
                    "text": "\n\nasync def roleNameCheck(self, name: str, guild: discord.Guild, user: discord.Member):\n    check = getEqualRank(name)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b15123157dcf447b552ca9919042f2041b8d605b3a835b88a41057fa510ef85a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'InteractionResponse' value is not used",
            "markdown": "Local variable 'InteractionResponse' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 9,
                  "charOffset": 1272,
                  "charLength": 19,
                  "snippet": {
                    "text": "InteractionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 1146,
                  "charLength": 205,
                  "snippet": {
                    "text": "    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4be8e9e970f67df7064ebd7d39ef4c3e338d764f728db485ac48483e7555a0dd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 37,
                  "charOffset": 3794,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 3735,
                  "charLength": 136,
                  "snippet": {
                    "text": "                    )\n\n                except Exception as e:\n                    print(\"member not found\")\n                    continue"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a382e4dabe30adfa6dde24b8fecb54c313cf7c90d0429a9d398ce16e9cad0a29"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingBuiltinsInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'id'",
            "markdown": "Shadows built-in name 'id'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 15,
                  "charOffset": 774,
                  "charLength": 2,
                  "snippet": {
                    "text": "id"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 721,
                  "charLength": 162,
                  "snippet": {
                    "text": "class RedirectPizza:\n    def __init__(\n        self, id: int, domain: str, source: str, destination: str, created_at: datetime\n    ) -> None:\n        self.id = id"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "af428a13c78c2a4711c583e2235b3db828e2d3d9ddf0112386fa2839d95af5a5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingBuiltinsInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'object'",
            "markdown": "Shadows built-in name 'object'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 13,
                  "charOffset": 2174,
                  "charLength": 6,
                  "snippet": {
                    "text": "object"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 2112,
                  "charLength": 184,
                  "snippet": {
                    "text": "        data = data[\"data\"]\n        ListData = []\n        for object in range(len(data) - 1):\n            # object = object\n            FullURL = data[object][\"sources\"][object][\"url\"]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0c778bc6c96adae9c557e382f5850aa4698952709e2a33559159773c76f15d01"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingBuiltinsInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'object'",
            "markdown": "Shadows built-in name 'object'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 9,
                  "charOffset": 3427,
                  "charLength": 6,
                  "snippet": {
                    "text": "object"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 3341,
                  "charLength": 172,
                  "snippet": {
                    "text": "        if r.status_code == 422:\n            raise InvalidAuth(r.status_code)\n        object = range(len(r.json()))\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d2b89f9165dc3c3187c8b3760fb2a6a3e3e2e8d874a1740207221ea4ce3e39bb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingBuiltinsInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'object'",
            "markdown": "Shadows built-in name 'object'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 9,
                  "charOffset": 5159,
                  "charLength": 6,
                  "snippet": {
                    "text": "object"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 1,
                  "charOffset": 5077,
                  "charLength": 152,
                  "snippet": {
                    "text": "            raise InvalidAuth(r.status_code)\n        print(r.status_code)\n        object = range(len(r.json()[\"data\"]))\n        pprint.pprint(r.json())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "973697038fe7df1406837befc7fdba34b37cfbdd1445c5dd0b347c786c5cdbe7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingBuiltinsInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'object'",
            "markdown": "Shadows built-in name 'object'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 676,
                  "startColumn": 13,
                  "charOffset": 27359,
                  "charLength": 6,
                  "snippet": {
                    "text": "object"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 674,
                  "startColumn": 1,
                  "charOffset": 27289,
                  "charLength": 172,
                  "snippet": {
                    "text": "            interaction:\n            discord.Interaction,\n            object: Optional[str] = None\n    ):\n        await self._command_callback(interaction, _command=object)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "92ff902ad6ef0cd00dcdbe4f251907b7894e091e3c68427ad62deade7991f353"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingBuiltinsInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'hex'",
            "markdown": "Shadows built-in name 'hex'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 38,
                  "charOffset": 251,
                  "charLength": 3,
                  "snippet": {
                    "text": "hex"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "charOffset": 147,
                  "charLength": 163,
                  "snippet": {
                    "text": "from core import database\nfrom core.checks import is_hostTimmyBeta\nfrom core.common import hexColors as hex\nfrom core.common import Emoji\nfrom core.common import ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "25d46a11a4088542c699ca11050399d5c70b2817d274d08bdca431b5e2dc80a3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingBuiltinsInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'id'",
            "markdown": "Shadows built-in name 'id'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 60,
                  "charOffset": 14746,
                  "charLength": 2,
                  "snippet": {
                    "text": "id"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 397,
                  "startColumn": 1,
                  "charOffset": 14639,
                  "charLength": 258,
                  "snippet": {
                    "text": "    )\n    @guilds(MAIN_ID.g_main, TUT_ID.g_tut)\n    async def skip(self, interaction: discord.Interaction, id: str):\n        query: database.TutorBot_Sessions = database.TutorBot_Sessions.select().where(\n            database.TutorBot_Sessions.SessionID == id"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aaa02ecd429fdf603c2efb191667965f93554638d473f79bec724d659bb072e2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingBuiltinsInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'id'",
            "markdown": "Shadows built-in name 'id'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 62,
                  "charOffset": 16181,
                  "charLength": 2,
                  "snippet": {
                    "text": "id"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 436,
                  "startColumn": 1,
                  "charOffset": 16072,
                  "charLength": 232,
                  "snippet": {
                    "text": "    )\n    @guilds(MAIN_ID.g_main, TUT_ID.g_tut)\n    async def remove(self, interaction: discord.Interaction, id: str):\n        query = database.TutorBot_Sessions.select().where(\n            database.TutorBot_Sessions.SessionID == id"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f0e61d74a9eb63007409fef404fb97e90b4f2d9bf570e77658feb0514e2086e3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnreachableCodeInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This code is unreachable",
            "markdown": "This code is unreachable"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 14,
                  "charOffset": 9059,
                  "charLength": 12,
                  "snippet": {
                    "text": "newLvl < 40:"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 329,
                  "startColumn": 1,
                  "charOffset": 9029,
                  "charLength": 108,
                  "snippet": {
                    "text": "    return True\n\n        elif newLvl < 40:\n            role = None  # TODO: get lvl 30 role and add to user\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66f06c7a46176033cdce88dabf28b8d88f81d183a9411a52ed6f645eb6417528"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnreachableCodeInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This code is unreachable",
            "markdown": "This code is unreachable"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 5,
                  "charOffset": 10980,
                  "charLength": 35,
                  "snippet": {
                    "text": "StudySessionQ = StudySessionQ.get()"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 397,
                  "startColumn": 1,
                  "charOffset": 10954,
                  "charLength": 141,
                  "snippet": {
                    "text": "        return False\n\n    StudySessionQ = StudySessionQ.get()\n    StudySessionQ.StartTime = datetime.now(EST)\n    StudySessionQ.Paused = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "19e9d7a5a67f173409c393a302cb2748ac0b0c093c311d4dc771a7b410afc5a0"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnreachableCodeInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This code is unreachable",
            "markdown": "This code is unreachable"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 5,
                  "charOffset": 11190,
                  "charLength": 636,
                  "snippet": {
                    "text": "\"\"\" Ends the session by kicking the user out of the voice channel and removing the user from the..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 406,
                  "startColumn": 1,
                  "charOffset": 11139,
                  "charLength": 180,
                  "snippet": {
                    "text": "\nasync def endSession(member: discord.Member):\n    \"\"\"\n    Ends the session by kicking the user out of the voice channel and removing the user from the database table `StudyVCDB`.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac76baf4a9111d1b26cb10dd11fd99c4b255480d6bac55c008611045630f43af"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'reaction' from outer scope",
            "markdown": "Shadows name 'reaction' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 24,
                  "charOffset": 2822,
                  "charLength": 8,
                  "snippet": {
                    "text": "reaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2772,
                  "charLength": 135,
                  "snippet": {
                    "text": "    emotes = [\"◀️\", \"▶️\"]\n\n    def check_reaction(reaction, user):\n        return user == ctx.author and str(reaction.emoji) in emotes\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "465083fb73fa48d4f7813e681658110c07dcf17237c242e47cdcbe1ec6c0f584"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'user' from outer scope",
            "markdown": "Shadows name 'user' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 34,
                  "charOffset": 2832,
                  "charLength": 4,
                  "snippet": {
                    "text": "user"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2772,
                  "charLength": 135,
                  "snippet": {
                    "text": "    emotes = [\"◀️\", \"▶️\"]\n\n    def check_reaction(reaction, user):\n        return user == ctx.author and str(reaction.emoji) in emotes\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc1966d956a1fe744c3dcad41bb8497caeeaba1dc184db046b3fec62d46d7563"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'string' from outer scope",
            "markdown": "Shadows name 'string' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1884,
                  "startColumn": 23,
                  "charOffset": 69830,
                  "charLength": 6,
                  "snippet": {
                    "text": "string"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1882,
                  "startColumn": 1,
                  "charOffset": 69806,
                  "charLength": 150,
                  "snippet": {
                    "text": "\n\ndef stringTimeConvert(string: str):\n    \"\"\"\n    Filters out the different time units from a string (e.g. from '2d 4h 6m 7s') and returns a ``dict``."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b29210063bc81ee66d89bb508ae4e3339eac3ba30ec34a226e17fe095bf1eb79"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'string' from outer scope",
            "markdown": "Shadows name 'string' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1925,
                  "startColumn": 23,
                  "charOffset": 71041,
                  "charLength": 6,
                  "snippet": {
                    "text": "string"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1923,
                  "startColumn": 1,
                  "charOffset": 71017,
                  "charLength": 140,
                  "snippet": {
                    "text": "\n\ndef searchCustomEmoji(string: str):\n    \"\"\"\n    Searches for a custom emoji in a specific ``str`` and returns it or None if nothing found."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85f1bbb431d0c97180b0881f0ff14a7ff6b637f308d918574ed7b86dff5eef3b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'embed' from outer scope",
            "markdown": "Shadows name 'embed' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 34,
                  "charOffset": 3964,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 3890,
                  "charLength": 197,
                  "snippet": {
                    "text": "            return math.ceil(tags / 10)\n\n        async def populate_embed(embed: discord.Embed, page: int):\n            \"\"\"Used to populate the embed in listtag command\"\"\"\n            tag_list = \"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "498c14e9ff6a0a13d9dac0abcd76b8032a215321be8aa643a515f9d80ed29599"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'page' from outer scope",
            "markdown": "Shadows name 'page' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 56,
                  "charOffset": 3986,
                  "charLength": 4,
                  "snippet": {
                    "text": "page"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 3890,
                  "charLength": 197,
                  "snippet": {
                    "text": "            return math.ceil(tags / 10)\n\n        async def populate_embed(embed: discord.Embed, page: int):\n            \"\"\"Used to populate the embed in listtag command\"\"\"\n            tag_list = \"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca7f28f9ff8cde32e4c082775029f23ebe0b28b5edbae2188b14fb12b3001dfc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'reaction' from outer scope",
            "markdown": "Shadows name 'reaction' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 20,
                  "charOffset": 8960,
                  "charLength": 8,
                  "snippet": {
                    "text": "reaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "charOffset": 8894,
                  "charLength": 203,
                  "snippet": {
                    "text": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                    str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a36e08522e602dd5757b75f2ec1dda55335a24716861a184cc710cf6cee11ad"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'user' from outer scope",
            "markdown": "Shadows name 'user' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 30,
                  "charOffset": 8970,
                  "charLength": 4,
                  "snippet": {
                    "text": "user"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "charOffset": 8894,
                  "charLength": 203,
                  "snippet": {
                    "text": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                    str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bfed3ede4ffd88dc12ffbd07e32973bd4282bd3b6c2c87ee773a871f40b15319"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'reaction' from outer scope",
            "markdown": "Shadows name 'reaction' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 584,
                  "startColumn": 20,
                  "charOffset": 21056,
                  "charLength": 8,
                  "snippet": {
                    "text": "reaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 582,
                  "startColumn": 1,
                  "charOffset": 20990,
                  "charLength": 203,
                  "snippet": {
                    "text": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                    str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bfc9b3f1555102e49c514ad9d50425f055da0a1e8cbd4ca5a245fe044ef975a1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'user' from outer scope",
            "markdown": "Shadows name 'user' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 584,
                  "startColumn": 30,
                  "charOffset": 21066,
                  "charLength": 4,
                  "snippet": {
                    "text": "user"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 582,
                  "startColumn": 1,
                  "charOffset": 20990,
                  "charLength": 203,
                  "snippet": {
                    "text": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                    str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b163bbf619aee3cfed3e0da6ba1e921c0885e9c96b82145c76b4157de4ba524"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'e' from outer scope",
            "markdown": "Shadows name 'e' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 830,
                  "startColumn": 30,
                  "charOffset": 29488,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 828,
                  "startColumn": 1,
                  "charOffset": 29386,
                  "charLength": 152,
                  "snippet": {
                    "text": "            vc.play(\n                discord.FFmpegPCMAudio(\"text.mp3\"),\n                after=lambda e: print(f\"Finished playing: {e}\"),\n            )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "375b6c6992e537839d822a9c11038931746497e044933fd49a09bb8a3cf2b60c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'StudySessionQ' from outer scope",
            "markdown": "Shadows name 'StudySessionQ' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 5,
                  "charOffset": 3144,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 1,
                  "charOffset": 3118,
                  "charLength": 193,
                  "snippet": {
                    "text": "    xpPerMinute = 30\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ae40619464bb7c1a53124221a9050791a5028430d5cec518b2d641f0d17de43f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'StudySessionQ' from outer scope",
            "markdown": "Shadows name 'StudySessionQ' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 9,
                  "charOffset": 3276,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 3140,
                  "charLength": 359,
                  "snippet": {
                    "text": "    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where(database.StudyVCLeaderboard.discordID == member.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f3d430be82afd97a94b7bdf0a5563ae6c041f809fbc49825400f38022d83f5e7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'newLvl' from outer scope",
            "markdown": "Shadows name 'newLvl' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 13,
                  "charOffset": 4191,
                  "charLength": 6,
                  "snippet": {
                    "text": "newLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 156,
                  "startColumn": 1,
                  "charOffset": 4087,
                  "charLength": 158,
                  "snippet": {
                    "text": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d86c90da06b9faf014480e1362bb7d3143f9d8b98262db3927ff039704abe81"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'newLvl' from outer scope",
            "markdown": "Shadows name 'newLvl' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 13,
                  "charOffset": 4969,
                  "charLength": 6,
                  "snippet": {
                    "text": "newLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 4865,
                  "charLength": 158,
                  "snippet": {
                    "text": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4ad0e1d6bd01e4674d818c08ef631cd138c62c81a86bb869cdfa256729582a11"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'roleStr' from outer scope",
            "markdown": "Shadows name 'roleStr' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 9,
                  "charOffset": 5594,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 205,
                  "startColumn": 1,
                  "charOffset": 5564,
                  "charLength": 82,
                  "snippet": {
                    "text": "            q.save()\n\n        roleStr = \"\"\n        if newLvl < 5:\n            pass"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d8d7aacfe5aaf8f9cbf232e9b279b34a9c3841e49d042bbf380793b29168138d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'role' from outer scope",
            "markdown": "Shadows name 'role' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 13,
                  "charOffset": 5686,
                  "charLength": 4,
                  "snippet": {
                    "text": "role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 210,
                  "startColumn": 1,
                  "charOffset": 5647,
                  "charLength": 122,
                  "snippet": {
                    "text": "\n        elif newLvl < 10:\n            role = None  # TODO: get lvl 5 role and add to user\n\n            if currentLvl < 5:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a234883bda6b9832c9ec53740af34c26167be530695589cd6ce22fcd4cc2c45f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'roleStr' from outer scope",
            "markdown": "Shadows name 'roleStr' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 17,
                  "charOffset": 5786,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 213,
                  "startColumn": 1,
                  "charOffset": 5738,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n            if currentLvl < 5:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0678f4537950c605d8afa1234d8e939418bb124395ab7c7bda87e16cd417c67c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'role' from outer scope",
            "markdown": "Shadows name 'role' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 13,
                  "charOffset": 5890,
                  "charLength": 4,
                  "snippet": {
                    "text": "role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 217,
                  "startColumn": 1,
                  "charOffset": 5851,
                  "charLength": 124,
                  "snippet": {
                    "text": "\n        elif newLvl < 20:\n            role = None  # TODO: get lvl 10 role and add to user\n\n            if currentLvl < 10:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80199a9ec34de49f454824f2ffc4a0ab74e75e529f54cebee1e5afe570c7d5d5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'roleStr' from outer scope",
            "markdown": "Shadows name 'roleStr' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 17,
                  "charOffset": 5992,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 220,
                  "startColumn": 1,
                  "charOffset": 5943,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 10:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b5d52d69af3f3ccbe8e5898d3481bb3bb72a6cfd45fd2cf40fc95dfd7e6d6e92"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'role' from outer scope",
            "markdown": "Shadows name 'role' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 13,
                  "charOffset": 6096,
                  "charLength": 4,
                  "snippet": {
                    "text": "role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 224,
                  "startColumn": 1,
                  "charOffset": 6057,
                  "charLength": 124,
                  "snippet": {
                    "text": "\n        elif newLvl < 30:\n            role = None  # TODO: get lvl 20 role and add to user\n\n            if currentLvl < 20:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "10b32180be2ff8506c8066ea41cf4c018572a8077f07cfed64132bfbf360993f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'roleStr' from outer scope",
            "markdown": "Shadows name 'roleStr' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 17,
                  "charOffset": 6198,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 227,
                  "startColumn": 1,
                  "charOffset": 6149,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 20:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ad3818ea77104843202ae1b2d68199dddcdcff30748d95940d9ff129d5d9cfa5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'role' from outer scope",
            "markdown": "Shadows name 'role' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 13,
                  "charOffset": 6302,
                  "charLength": 4,
                  "snippet": {
                    "text": "role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 231,
                  "startColumn": 1,
                  "charOffset": 6263,
                  "charLength": 124,
                  "snippet": {
                    "text": "\n        elif newLvl < 40:\n            role = None  # TODO: get lvl 30 role and add to user\n\n            if currentLvl < 30:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aa0beb09c56640013ebefb57f876f94f6e01e05f5171632e7b6979f7c835c414"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'roleStr' from outer scope",
            "markdown": "Shadows name 'roleStr' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 17,
                  "charOffset": 6404,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 234,
                  "startColumn": 1,
                  "charOffset": 6355,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 30:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d786ad706bd6832a81d72f0aafa0ca2e4bf0ba363709aa6493d5128be62e3d9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'role' from outer scope",
            "markdown": "Shadows name 'role' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 13,
                  "charOffset": 6508,
                  "charLength": 4,
                  "snippet": {
                    "text": "role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 238,
                  "startColumn": 1,
                  "charOffset": 6469,
                  "charLength": 124,
                  "snippet": {
                    "text": "\n        elif newLvl < 50:\n            role = None  # TODO: get lvl 40 role and add to user\n\n            if currentLvl < 40:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fd605de6adb7017fd1fbdc177f2ed054f00b4bef3eca754375242e8ee3d9bac0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'roleStr' from outer scope",
            "markdown": "Shadows name 'roleStr' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 17,
                  "charOffset": 6610,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 241,
                  "startColumn": 1,
                  "charOffset": 6561,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 40:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "95f8ac9258d8099e929caecec0ccd577bdb1d35604cbb39cd6839ecc35d89597"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'role' from outer scope",
            "markdown": "Shadows name 'role' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 13,
                  "charOffset": 6714,
                  "charLength": 4,
                  "snippet": {
                    "text": "role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 245,
                  "startColumn": 1,
                  "charOffset": 6675,
                  "charLength": 124,
                  "snippet": {
                    "text": "\n        elif newLvl < 60:\n            role = None  # TODO: get lvl 50 role and add to user\n\n            if currentLvl < 50:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c53d67903df0512c9384146e91912794bb2c48abf4d904d12558930ecb3f97ba"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'roleStr' from outer scope",
            "markdown": "Shadows name 'roleStr' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 17,
                  "charOffset": 6816,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 248,
                  "startColumn": 1,
                  "charOffset": 6767,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 50:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e5290aee4c3d0783b85a05badf897917d12c7cea45084045e1c8ff314efc8be"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'role' from outer scope",
            "markdown": "Shadows name 'role' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 13,
                  "charOffset": 6920,
                  "charLength": 4,
                  "snippet": {
                    "text": "role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 252,
                  "startColumn": 1,
                  "charOffset": 6881,
                  "charLength": 124,
                  "snippet": {
                    "text": "\n        elif newLvl < 70:\n            role = None  # TODO: get lvl 60 role and add to user\n\n            if currentLvl < 60:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1eef6bc4c3fbf6ace6ef04f959abe90bcb2010bedf6b5c1bfbace5bbc2ad8445"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'roleStr' from outer scope",
            "markdown": "Shadows name 'roleStr' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 17,
                  "charOffset": 7022,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 255,
                  "startColumn": 1,
                  "charOffset": 6973,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 60:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4ae2223c8d25a0ee8673d808c94cffc83425942e0d91a1debc261cdb9d095593"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'role' from outer scope",
            "markdown": "Shadows name 'role' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 13,
                  "charOffset": 7126,
                  "charLength": 4,
                  "snippet": {
                    "text": "role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 259,
                  "startColumn": 1,
                  "charOffset": 7087,
                  "charLength": 124,
                  "snippet": {
                    "text": "\n        elif newLvl < 80:\n            role = None  # TODO: get lvl 70 role and add to user\n\n            if currentLvl < 70:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ae0df4714a591563027a7209ce47ec3c26a43602ed058d82f2a8fd557d540e8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'roleStr' from outer scope",
            "markdown": "Shadows name 'roleStr' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 17,
                  "charOffset": 7228,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 262,
                  "startColumn": 1,
                  "charOffset": 7179,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 70:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dc8de447aa4ac35d7f33f9440b280aa358f7114be7721e2be054412ef9eb8c1b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'role' from outer scope",
            "markdown": "Shadows name 'role' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 13,
                  "charOffset": 7332,
                  "charLength": 4,
                  "snippet": {
                    "text": "role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 266,
                  "startColumn": 1,
                  "charOffset": 7293,
                  "charLength": 124,
                  "snippet": {
                    "text": "\n        elif newLvl < 90:\n            role = None  # TODO: get lvl 80 role and add to user\n\n            if currentLvl < 80:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0a762ca7a3f1beb1c44bb2d1f5aae6ee0c636a0795aacc8d69fd8bad3c967fe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'roleStr' from outer scope",
            "markdown": "Shadows name 'roleStr' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 17,
                  "charOffset": 7434,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "charOffset": 7385,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 80:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2c4db4c4da2586f66fa00b394bd8d5057f2dbedd35df67d730fe74717d67296"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'role' from outer scope",
            "markdown": "Shadows name 'role' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 13,
                  "charOffset": 7539,
                  "charLength": 4,
                  "snippet": {
                    "text": "role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 273,
                  "startColumn": 1,
                  "charOffset": 7499,
                  "charLength": 125,
                  "snippet": {
                    "text": "\n        elif newLvl < 100:\n            role = None  # TODO: get lvl 90 role and add to user\n\n            if currentLvl < 90:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3cbf81bc196f284a896a2e4983e7211fd2f06d8efba1a539da6b6fe62c73dced"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'roleStr' from outer scope",
            "markdown": "Shadows name 'roleStr' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 17,
                  "charOffset": 7641,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 276,
                  "startColumn": 1,
                  "charOffset": 7592,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 90:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6435b3e1cba003c7767e07167c3a1e097c8f6140b80892588d4cc5cc556858f3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'role' from outer scope",
            "markdown": "Shadows name 'role' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 13,
                  "charOffset": 7747,
                  "charLength": 4,
                  "snippet": {
                    "text": "role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 280,
                  "startColumn": 1,
                  "charOffset": 7706,
                  "charLength": 128,
                  "snippet": {
                    "text": "\n        elif newLvl >= 100:\n            role = None  # TODO: get lvl 100 role and add to user\n\n            if currentLvl < 100:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8a6d12f4137c9c5735bb4bf142f4aa73ab8771150e504c453058bee07260a1d4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'roleStr' from outer scope",
            "markdown": "Shadows name 'roleStr' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 17,
                  "charOffset": 7851,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 283,
                  "startColumn": 1,
                  "charOffset": 7801,
                  "charLength": 115,
                  "snippet": {
                    "text": "\n            if currentLvl < 100:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "07272b24b57bb49be33df9444d1866e5b2769104f7eb0af3fef17f51bd1e5808"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'dmMSG' from outer scope",
            "markdown": "Shadows name 'dmMSG' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 13,
                  "charOffset": 7951,
                  "charLength": 5,
                  "snippet": {
                    "text": "dmMSG"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 288,
                  "startColumn": 1,
                  "charOffset": 7917,
                  "charLength": 161,
                  "snippet": {
                    "text": "        if isNewLvl:\n\n            dmMSG = f\"{member.mention}, you've reached level **{newLvl}** in Study VC!\" \\\n                    f\"{roleStr}\"\n            try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0054f2c720be3c3c5a3007d16f99bfd9f323bb6a19b0400769e3c860bf057eef"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'StudySessionQ' from outer scope",
            "markdown": "Shadows name 'StudySessionQ' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 5,
                  "charOffset": 8198,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 298,
                  "startColumn": 1,
                  "charOffset": 8172,
                  "charLength": 141,
                  "snippet": {
                    "text": "        return False\n\n    StudySessionQ = StudySessionQ.get()\n    StudySessionQ.StartTime = datetime.now(EST)\n    StudySessionQ.Paused = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b64e0937110c28b5e97ceced6f2ab7da774455c9061d5b53477f0ef569cfe89e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'StudySessionQ' from outer scope",
            "markdown": "Shadows name 'StudySessionQ' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 5,
                  "charOffset": 8694,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 315,
                  "startColumn": 1,
                  "charOffset": 8681,
                  "charLength": 180,
                  "snippet": {
                    "text": "    \"\"\"\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6a4a1873f666b86e83587cd8db08ac3395b3c0552e3778ef72e006e58cd4250c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'StudySessionQ' from outer scope",
            "markdown": "Shadows name 'StudySessionQ' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 9,
                  "charOffset": 8826,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 317,
                  "startColumn": 1,
                  "charOffset": 8690,
                  "charLength": 240,
                  "snippet": {
                    "text": "    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        StudySessionQ.delete_instance()\n        StudySessionQ.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2196571764f3c9f5f81bcf155cbcb6888d79acb426de811bf27ceb0e34391a3f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'newLvl' from outer scope",
            "markdown": "Shadows name 'newLvl' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 14,
                  "charOffset": 9059,
                  "charLength": 6,
                  "snippet": {
                    "text": "newLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 329,
                  "startColumn": 1,
                  "charOffset": 9029,
                  "charLength": 108,
                  "snippet": {
                    "text": "    return True\n\n        elif newLvl < 40:\n            role = None  # TODO: get lvl 30 role and add to user\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "45219de0fa301074505cbbe823c6786a2a0168f0be9de98396120e8f741ebe9b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'role' from outer scope",
            "markdown": "Shadows name 'role' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 13,
                  "charOffset": 9084,
                  "charLength": 4,
                  "snippet": {
                    "text": "role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 330,
                  "startColumn": 1,
                  "charOffset": 9045,
                  "charLength": 124,
                  "snippet": {
                    "text": "\n        elif newLvl < 40:\n            role = None  # TODO: get lvl 30 role and add to user\n\n            if currentLvl < 30:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "498f6c0b07261f3a2851e56114b46ee62a4ac59c79ba2766630a64743b135658"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'roleStr' from outer scope",
            "markdown": "Shadows name 'roleStr' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 17,
                  "charOffset": 9186,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 333,
                  "startColumn": 1,
                  "charOffset": 9137,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 30:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6a798cd415c06ac7791f17031e599c147c56207cd97467218048e61ae91ed3d1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'StudySessionQ' from outer scope",
            "markdown": "Shadows name 'StudySessionQ' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 5,
                  "charOffset": 11476,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 414,
                  "startColumn": 1,
                  "charOffset": 11463,
                  "charLength": 180,
                  "snippet": {
                    "text": "    \"\"\"\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ae8602b82b711642a5ddc26851a579620b5653034fb539ba4eca321eceb18457"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'StudySessionQ' from outer scope",
            "markdown": "Shadows name 'StudySessionQ' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 9,
                  "charOffset": 11608,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 416,
                  "startColumn": 1,
                  "charOffset": 11472,
                  "charLength": 240,
                  "snippet": {
                    "text": "    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        StudySessionQ.delete_instance()\n        StudySessionQ.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dc02ec1302e17980f221894b12892fb0634a6df965a7276eed554fb5f98339b1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'bar' from outer scope",
            "markdown": "Shadows name 'bar' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 107,
                  "charOffset": 2969,
                  "charLength": 3,
                  "snippet": {
                    "text": "bar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 2816,
                  "charLength": 219,
                  "snippet": {
                    "text": "            await self.tree.sync(guild=guild)\n\n        with alive_bar(len(get_extensions()), ctrl_c=False, bar=\"bubbles\", title=\"Initializing Cogs:\") as bar:\n            for ext in get_extensions():\n                try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3ef237c91976a45900902846a7dcec2cda4f24502e2905d0e802ddb678680c78"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'ext' from outer scope",
            "markdown": "Shadows name 'ext' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 17,
                  "charOffset": 2990,
                  "charLength": 3,
                  "snippet": {
                    "text": "ext"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 2862,
                  "charLength": 223,
                  "snippet": {
                    "text": "\n        with alive_bar(len(get_extensions()), ctrl_c=False, bar=\"bubbles\", title=\"Initializing Cogs:\") as bar:\n            for ext in get_extensions():\n                try:\n                    await bot.load_extension(ext)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ed2d6317f25c0c5cde7f4edc2431332da1c804d8d5317ed88361ffdc02a52e55"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'query' from outer scope",
            "markdown": "Shadows name 'query' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 9,
                  "charOffset": 3457,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 120,
                  "startColumn": 1,
                  "charOffset": 3376,
                  "charLength": 189,
                  "snippet": {
                    "text": "    async def is_owner(self, user: discord.User):\n        admin_ids = []\n        query = database.Administrators.select().where(\n            database.Administrators.TierLevel >= 3\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5848147f9453aa3cf20477889944db9e666d9c28553a8fb73f4dbbcf7ef3f003"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'query' from outer scope",
            "markdown": "Shadows name 'query' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 5,
                  "charOffset": 9101,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 297,
                  "startColumn": 1,
                  "charOffset": 9078,
                  "charLength": 123,
                  "snippet": {
                    "text": "\n    adminIDs = []\n    query = database.Administrators.select().where(\n        database.Administrators.TierLevel == 4\n    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c34ddf793d4538ac472c33c949da6560aa0cb15196343853f66cedbe848806c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyListCreationInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "This list creation could be rewritten as a list literal",
            "markdown": "This list creation could be rewritten as a list literal"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cog_tests.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 5,
                  "charOffset": 157,
                  "charLength": 15,
                  "snippet": {
                    "text": "extensions = []"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 1,
                  "charOffset": 130,
                  "charLength": 135,
                  "snippet": {
                    "text": "\ndef get_extensions():\n    extensions = []\n    extensions.append(\"jishaku\")\n    if sys.platform == \"win32\" or sys.platform == \"cygwin\":"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6148fc3f9c70739e2ca8d0c36a7fcf0daf957c67f3ec6ae1eaf88100b7d8310e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 5,
                  "charOffset": 386,
                  "charLength": 13,
                  "snippet": {
                    "text": "predicate_LV1"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 380,
                  "charLength": 52,
                  "snippet": {
                    "text": "\n\ndef predicate_LV1(ctx) -> bool:\n    adminIDs = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "62f841ce9888cc03f5739196678f58e7dc92b3b6cbc0c76ffba235e078a991e1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 5,
                  "charOffset": 418,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 381,
                  "charLength": 103,
                  "snippet": {
                    "text": "\ndef predicate_LV1(ctx) -> bool:\n    adminIDs = []\n\n    query = database.Administrators.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d1b700f8d4655fa08e6119576ebc9a620e6571afdcad2dc5dd171af8cf5df2f9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 5,
                  "charOffset": 693,
                  "charLength": 13,
                  "snippet": {
                    "text": "predicate_LV2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 687,
                  "charLength": 52,
                  "snippet": {
                    "text": "\n\ndef predicate_LV2(ctx) -> bool:\n    adminIDs = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f4b34ebae3dac985003decce326a26763f92394e77478f72eef383580b0aa5ae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 5,
                  "charOffset": 725,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 688,
                  "charLength": 103,
                  "snippet": {
                    "text": "\ndef predicate_LV2(ctx) -> bool:\n    adminIDs = []\n\n    query = database.Administrators.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7fc918fb156859136b4faca8222a8300abff0a7910df4ef8f997214e943e8cc1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 5,
                  "charOffset": 1001,
                  "charLength": 13,
                  "snippet": {
                    "text": "predicate_LV3"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 995,
                  "charLength": 44,
                  "snippet": {
                    "text": "\n\ndef predicate_LV3(ctx):\n    adminIDs = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5b553236608c0a31c2fde61baabf9c7ea3af47b22a6a0c7696a12e4444527a49"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 5,
                  "charOffset": 1025,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 996,
                  "charLength": 95,
                  "snippet": {
                    "text": "\ndef predicate_LV3(ctx):\n    adminIDs = []\n\n    query = database.Administrators.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c8a0cba5c088816dfb213f4fbfc18c51297432d0fd917be9f91f9e7aefe6981b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 5,
                  "charOffset": 1301,
                  "charLength": 13,
                  "snippet": {
                    "text": "predicate_LV4"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 1295,
                  "charLength": 44,
                  "snippet": {
                    "text": "\n\ndef predicate_LV4(ctx):\n    adminIDs = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f406747314179bde9f72a1f4603b761b73b5eb076a01f1a2460ed3b9fc1a5565"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 5,
                  "charOffset": 1325,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 1296,
                  "charLength": 95,
                  "snippet": {
                    "text": "\ndef predicate_LV4(ctx):\n    adminIDs = []\n\n    query = database.Administrators.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "52ee8116e3f87c31d9671c73826a33fefab5534fe8c8c294694788e982b9bb81"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 5,
                  "charOffset": 3219,
                  "charLength": 16,
                  "snippet": {
                    "text": "mktCommissionAdd"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 138,
                  "startColumn": 1,
                  "charOffset": 3213,
                  "charLength": 76,
                  "snippet": {
                    "text": "\n\ndef mktCommissionAdd(ctx):\n    rolesID = [\n        MKT_ID.r_designManager,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80075d7f28ef0ca67d031583e8cad0533e0d7e84be8379bbd3a3fdce47dcc5fe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 5,
                  "charOffset": 3246,
                  "charLength": 7,
                  "snippet": {
                    "text": "rolesID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "charOffset": 3214,
                  "charLength": 104,
                  "snippet": {
                    "text": "\ndef mktCommissionAdd(ctx):\n    rolesID = [\n        MKT_ID.r_designManager,\n        MKT_ID.r_designTeam,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "688ff36282c9d306d35725e715a772261bc82bbe23d1a29660830caf83b50840"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 5,
                  "charOffset": 3563,
                  "charLength": 13,
                  "snippet": {
                    "text": "TimmyBetaHost"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 153,
                  "startColumn": 1,
                  "charOffset": 3557,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n\ndef TimmyBetaHost(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "77f01496ae5282c3c1c054cbdcd7dfa940fa9bd3f126c1f6b965104318861ca7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 5,
                  "charOffset": 3587,
                  "charLength": 7,
                  "snippet": {
                    "text": "runPath"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "charOffset": 3558,
                  "charLength": 113,
                  "snippet": {
                    "text": "\ndef TimmyBetaHost(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b8a6d1ad6416a2f56d77134ffa1d903c68d3f50d9c3157e677b3c461147f06ee"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 5,
                  "charOffset": 3628,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 155,
                  "startColumn": 1,
                  "charOffset": 3559,
                  "charLength": 139,
                  "snippet": {
                    "text": "def TimmyBetaHost(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n\n    if runDir is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d5e58d7e47e8f7495a2f97a65c8d215587871d018dfa713f401e54569a87d4d1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 9,
                  "charOffset": 3707,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 158,
                  "startColumn": 1,
                  "charOffset": 3671,
                  "charLength": 92,
                  "snippet": {
                    "text": "\n    if runDir is not None:\n        runDir = runDir.group(0)\n    else:\n        runDir = None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "62179ad6717e124fff210251ef68066d892b970611320f8dd14f6527d360215e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 9,
                  "charOffset": 3750,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "charOffset": 3699,
                  "charLength": 105,
                  "snippet": {
                    "text": "        runDir = runDir.group(0)\n    else:\n        runDir = None\n\n    return runDir == \"/home/timmy-beta\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a7cfb91a59b6ed99f245565afc0503d574725de37a493abf40c44c4cfd5c312"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 11,
                  "charOffset": 1942,
                  "charLength": 9,
                  "snippet": {
                    "text": "rawExport"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 1930,
                  "charLength": 121,
                  "snippet": {
                    "text": "\n\nasync def rawExport(channel, response, user: discord.User):\n    transcript = await chat_exporter.export(channel, None)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0cc68e6bc995e79eb896af897a8c141ead47ed0cb4defb5bd9ffe431931a81f2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 5,
                  "charOffset": 7859,
                  "charLength": 14,
                  "snippet": {
                    "text": "S3_upload_file"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 231,
                  "startColumn": 1,
                  "charOffset": 7853,
                  "charLength": 96,
                  "snippet": {
                    "text": "\n\ndef S3_upload_file(file_name, bucket, object_name=None):\n    \"\"\"Upload a file to an S3 bucket\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8575056d618161ad7e3b78435822a5f92d6284585c73ac6987645f579dd55387"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 7,
                  "charOffset": 9115,
                  "charLength": 7,
                  "snippet": {
                    "text": "MAIN_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 264,
                  "startColumn": 1,
                  "charOffset": 9107,
                  "charLength": 55,
                  "snippet": {
                    "text": "\n\nclass MAIN_ID:\n    \"\"\"\n    IDs of the SS Main server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f5ff7863f8fae67e5952c203e172bbcc0188e907bf196aae5dc9f0abef054fa7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 7,
                  "charOffset": 14825,
                  "charLength": 8,
                  "snippet": {
                    "text": "STAFF_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 421,
                  "startColumn": 1,
                  "charOffset": 14817,
                  "charLength": 67,
                  "snippet": {
                    "text": "\n\nclass STAFF_ID:\n    \"\"\"\n    IDs of the SS Staff Community server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "416175351e8ae9d1bca22a24df4c41c7f7b009dc2f21f4155b85004e15a3c780"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 7,
                  "charOffset": 18597,
                  "charLength": 10,
                  "snippet": {
                    "text": "DIGITAL_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 526,
                  "startColumn": 1,
                  "charOffset": 18589,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\nclass DIGITAL_ID:\n    \"\"\"\n    IDs of the SS Staff Community server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a380b8c76e9292a3b0602c8ddce93a17af1aaec6e9727adc514cecafffa8cd0f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 7,
                  "charOffset": 20367,
                  "charLength": 7,
                  "snippet": {
                    "text": "TECH_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 586,
                  "startColumn": 1,
                  "charOffset": 20359,
                  "charLength": 92,
                  "snippet": {
                    "text": "\n\nclass TECH_ID:\n    \"\"\"\n    IDs of the 'The Department of Information & Technology' server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0ba29bfe5574141f41deca1587da0641abe22a6cc286d8092fc790e35e507009"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 720,
                  "startColumn": 7,
                  "charOffset": 24483,
                  "charLength": 5,
                  "snippet": {
                    "text": "CH_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 718,
                  "startColumn": 1,
                  "charOffset": 24475,
                  "charLength": 57,
                  "snippet": {
                    "text": "\n\nclass CH_ID:\n    \"\"\"\n    IDs of the Chat Helper server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "724e9b728bfcdf869e178bf132ed59f5c535b4e1a8a13db92b3e1d1b49e24eb7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 740,
                  "startColumn": 7,
                  "charOffset": 25115,
                  "charLength": 6,
                  "snippet": {
                    "text": "MKT_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 738,
                  "startColumn": 1,
                  "charOffset": 25107,
                  "charLength": 70,
                  "snippet": {
                    "text": "\n\nclass MKT_ID:\n    \"\"\"\n    IDs of the SS Marketing Department server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e233f9b6058f792969b847031674078752b970a3a1401e645b482cdd70302837"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 818,
                  "startColumn": 7,
                  "charOffset": 27626,
                  "charLength": 6,
                  "snippet": {
                    "text": "TUT_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 816,
                  "startColumn": 1,
                  "charOffset": 27618,
                  "charLength": 67,
                  "snippet": {
                    "text": "\n\nclass TUT_ID:\n    \"\"\"\n    IDs of the SS Tutoring Division server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "039de356a7e65bf69776aeb6797071764c252476b23abbf3d2c3b486ffc384fd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 872,
                  "startColumn": 7,
                  "charOffset": 29403,
                  "charLength": 5,
                  "snippet": {
                    "text": "HR_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 870,
                  "startColumn": 1,
                  "charOffset": 29395,
                  "charLength": 62,
                  "snippet": {
                    "text": "\n\nclass HR_ID:\n    \"\"\"\n    IDs of the SS HR Department server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2933e8eff4b439df42dd0fe2c8e71fb2131907764be56a08aec73ee100f80c01"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 899,
                  "startColumn": 7,
                  "charOffset": 30544,
                  "charLength": 9,
                  "snippet": {
                    "text": "LEADER_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 897,
                  "startColumn": 1,
                  "charOffset": 30536,
                  "charLength": 67,
                  "snippet": {
                    "text": "\n\nclass LEADER_ID:\n    \"\"\"\n    IDs of the Leadership Lounge server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "31d3b2937d30287162bff67d34363be9281b0b74ad4f732332046699e97693c1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 947,
                  "startColumn": 7,
                  "charOffset": 33459,
                  "charLength": 6,
                  "snippet": {
                    "text": "SET_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 945,
                  "startColumn": 1,
                  "charOffset": 33451,
                  "charLength": 53,
                  "snippet": {
                    "text": "\n\nclass SET_ID:\n    \"\"\"\n    IDs of the SSD SET SERVER"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b6cc35c8e65093143536c589098b65071dc95ebc0adbc02a1562648ce3bba658"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 975,
                  "startColumn": 7,
                  "charOffset": 34265,
                  "charLength": 9,
                  "snippet": {
                    "text": "LEADER_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 973,
                  "startColumn": 1,
                  "charOffset": 34257,
                  "charLength": 56,
                  "snippet": {
                    "text": "\n\nclass LEADER_ID:\n    \"\"\"\n    IDs of the SSD SET SERVER"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1dfbe61d5afd19f4e4d0123d673f90265def43e3f7a0fcdebd6eae219dcaa3c7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1050,
                  "startColumn": 7,
                  "charOffset": 36781,
                  "charLength": 10,
                  "snippet": {
                    "text": "CheckDB_CC"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1048,
                  "startColumn": 1,
                  "charOffset": 36773,
                  "charLength": 66,
                  "snippet": {
                    "text": "\n\nclass CheckDB_CC:\n    \"\"\"\n    Checks and Safeguards for the Bot."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee87b21e65ffad426794c56f63070fe566b60a1d825636ffd865f8107f00f9e5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1108,
                  "startColumn": 5,
                  "charOffset": 38810,
                  "charLength": 11,
                  "snippet": {
                    "text": "jsonPayload"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1106,
                  "startColumn": 1,
                  "charOffset": 38720,
                  "charLength": 187,
                  "snippet": {
                    "text": "    user = os.getenv(\"CONFIG_CC_USER\")\n    password = os.getenv(\"CONFIG_CC_PASSWORD\")\n    jsonPayload = [{\"op\": \"replace\", \"path\": \"/value\", \"value\": str(value)}]\n\n    r = requests.patch("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e283cd29dd88020f17d74c1ff5466594022a3b1b99f3452a25c801a33123bae4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1286,
                  "startColumn": 7,
                  "charOffset": 49019,
                  "charLength": 7,
                  "snippet": {
                    "text": "bcolors"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1284,
                  "startColumn": 1,
                  "charOffset": 48802,
                  "charLength": 273,
                  "snippet": {
                    "text": "deprecatedFiles = [\"TTScreds.json\", \"tokenA.json\", \"staff_verifyClient.json\", \"gmailAPI_credentials.json\", \"gmail_token.json\", \"docs_token.json\", \"docs_credentials.json\", \"credentialsA.json\", \"admincred.json\"]\n\nclass bcolors:\n    HEADER = \"\\033[95m\"\n    OKBLUE = \"\\033[94m\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dbaa2ea4a647b27c2b6ce937ec5c5fce48143ff37cf38882f6c84a351406b4e9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1518,
                  "startColumn": 5,
                  "charOffset": 58121,
                  "charLength": 12,
                  "snippet": {
                    "text": "getGuildList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1516,
                  "startColumn": 1,
                  "charOffset": 58115,
                  "charLength": 126,
                  "snippet": {
                    "text": "\n\ndef getGuildList(bot: commands.Bot, exemptServer: List[int] = None) -> list:\n    guildList = []\n    for guild in bot.guilds:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d3149ad363b24fed5cb7a14602a6d02c74c2a396a284765635f0c7877df08eb5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1518,
                  "startColumn": 37,
                  "charOffset": 58153,
                  "charLength": 30,
                  "snippet": {
                    "text": "exemptServer: List[int] = None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1516,
                  "startColumn": 1,
                  "charOffset": 58115,
                  "charLength": 126,
                  "snippet": {
                    "text": "\n\ndef getGuildList(bot: commands.Bot, exemptServer: List[int] = None) -> list:\n    guildList = []\n    for guild in bot.guilds:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "82b318728ebc0b45cad634d5462d22c81829bd7009bed7605e761d43ff3267ba"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1519,
                  "startColumn": 5,
                  "charOffset": 58198,
                  "charLength": 9,
                  "snippet": {
                    "text": "guildList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1517,
                  "startColumn": 1,
                  "charOffset": 58116,
                  "charLength": 162,
                  "snippet": {
                    "text": "\ndef getGuildList(bot: commands.Bot, exemptServer: List[int] = None) -> list:\n    guildList = []\n    for guild in bot.guilds:\n        if guild.id in exemptServer:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4208c1a07a5e44d727d1d80cb47524543075fbd3cfe44b63d5ab2a025e38331f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1543,
                  "startColumn": 9,
                  "charOffset": 58796,
                  "charLength": 13,
                  "snippet": {
                    "text": "TranscriptLOG"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1541,
                  "startColumn": 1,
                  "charOffset": 58703,
                  "charLength": 216,
                  "snippet": {
                    "text": "            self, button: discord.ui.Button, interaction: discord.Interaction\n    ):\n        TranscriptLOG = self.bot.get_channel(TECH_ID.ch_ticketLog)\n        ch = await self.bot.get_channel(interaction.channel_id)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2e3aabf997e67dd735a9a8cefc1a407ba29d2d1292620bb2ad03bfa200c8740b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1574,
                  "startColumn": 9,
                  "charOffset": 59884,
                  "charLength": 19,
                  "snippet": {
                    "text": "TempConfirmInstance"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1572,
                  "startColumn": 1,
                  "charOffset": 59786,
                  "charLength": 186,
                  "snippet": {
                    "text": "        self.value = True\n        ch = await self.bot.get_channel(interaction.channel_id)\n        TempConfirmInstance = TechnicalCommissionConfirm(self.bot)\n\n        msg = await ch.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a54b78863989376afdc336c87a8e923fa2383da1226e294a0e79686e35fd068a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1659,
                  "startColumn": 9,
                  "charOffset": 62855,
                  "charLength": 19,
                  "snippet": {
                    "text": "TempConfirmInstance"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1657,
                  "startColumn": 1,
                  "charOffset": 62757,
                  "charLength": 169,
                  "snippet": {
                    "text": "        self.value = True\n        ch = await self.bot.get_channel(interaction.channel_id)\n        TempConfirmInstance = TicketTempConfirm()\n\n        msg = await ch.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc3b48a35f2f78082a6d0d9a5550de81dd2fd2dea5d8f620d7c158b834963713"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1797,
                  "startColumn": 9,
                  "charOffset": 67595,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1795,
                  "startColumn": 1,
                  "charOffset": 67509,
                  "charLength": 255,
                  "snippet": {
                    "text": "async def id_generator(size=3, chars=string.ascii_uppercase):\n    while True:\n        ID = \"\".join(random.choice(chars) for _ in range(size))\n        query = database.TutorBot_Sessions.select().where(\n            database.TutorBot_Sessions.SessionID == ID"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0ab81e33bc7ec868398115d431fa31c41109ade74d84f7e16da27c0756946b93"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1834,
                  "startColumn": 9,
                  "charOffset": 68592,
                  "charLength": 9,
                  "snippet": {
                    "text": "runThread"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1832,
                  "startColumn": 1,
                  "charOffset": 68519,
                  "charLength": 146,
                  "snippet": {
                    "text": "        theproc = subprocess.Popen([sys.executable, \"main.py\"])\n\n        runThread = Thread(target=theproc.communicate)\n        runThread.start()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "54bf8469a24a5a3a8c815216901dc4b9893d02a5314fd61171980f3e8bea0cc3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1862,
                  "startColumn": 5,
                  "charOffset": 69375,
                  "charLength": 10,
                  "snippet": {
                    "text": "getHostDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1860,
                  "startColumn": 1,
                  "charOffset": 69369,
                  "charLength": 70,
                  "snippet": {
                    "text": "\n\ndef getHostDir():\n    \"\"\"\n    Get the directory of the current host."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "91d32eb9e817a3743804151eb521bbeaa7caed4d9de190bdec6e24773d8e6bd8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1873,
                  "startColumn": 5,
                  "charOffset": 69575,
                  "charLength": 7,
                  "snippet": {
                    "text": "runPath"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1871,
                  "startColumn": 1,
                  "charOffset": 69562,
                  "charLength": 115,
                  "snippet": {
                    "text": "    \"\"\"\n\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n    print(runPath)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a70b78f24727c9ccf19e5b1b75cc33095dbdb823b93cda6cbdc0e4310c270f72"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1874,
                  "startColumn": 5,
                  "charOffset": 69616,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1872,
                  "startColumn": 1,
                  "charOffset": 69570,
                  "charLength": 134,
                  "snippet": {
                    "text": "\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n    print(runPath)\n    if runDir is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68f574eee715224c1eaa5d62c22f0dfc45b6da0bf802224c61645a62be71d767"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1877,
                  "startColumn": 9,
                  "charOffset": 69713,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1875,
                  "startColumn": 1,
                  "charOffset": 69659,
                  "charLength": 110,
                  "snippet": {
                    "text": "    print(runPath)\n    if runDir is not None:\n        runDir = runDir.group(0)\n    else:\n        runDir = None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4970b31eef89f8e64126c1010dcb44f8c584b9e25130106c46df9b7376f5afb3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1879,
                  "startColumn": 9,
                  "charOffset": 69756,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1877,
                  "startColumn": 1,
                  "charOffset": 69705,
                  "charLength": 100,
                  "snippet": {
                    "text": "        runDir = runDir.group(0)\n    else:\n        runDir = None\n    print(runDir)\n    return runDir"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "303275bfaa332a145460b7eaf60083af1ff2cee7786b2da24677a6b029f19d79"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1884,
                  "startColumn": 5,
                  "charOffset": 69812,
                  "charLength": 17,
                  "snippet": {
                    "text": "stringTimeConvert"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1882,
                  "startColumn": 1,
                  "charOffset": 69806,
                  "charLength": 150,
                  "snippet": {
                    "text": "\n\ndef stringTimeConvert(string: str):\n    \"\"\"\n    Filters out the different time units from a string (e.g. from '2d 4h 6m 7s') and returns a ``dict``."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b253d82b3c011a9217c23761e3c5d5d974c79eab719eb8785b481cd869f8603c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1895,
                  "startColumn": 5,
                  "charOffset": 70292,
                  "charLength": 8,
                  "snippet": {
                    "text": "timeDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1893,
                  "startColumn": 1,
                  "charOffset": 70279,
                  "charLength": 70,
                  "snippet": {
                    "text": "    \"\"\"\n\n    timeDict: dict = {}\n\n    days = re.search(\"\\d+d\", string)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb3031f6ed1279bed3b564c345bd045d7837e48b778910d21a01ae41a2353ca3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1925,
                  "startColumn": 5,
                  "charOffset": 71023,
                  "charLength": 17,
                  "snippet": {
                    "text": "searchCustomEmoji"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1923,
                  "startColumn": 1,
                  "charOffset": 71017,
                  "charLength": 140,
                  "snippet": {
                    "text": "\n\ndef searchCustomEmoji(string: str):\n    \"\"\"\n    Searches for a custom emoji in a specific ``str`` and returns it or None if nothing found."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e7912204726796b0a73d6537918ea0e8cd6789904e608686798d95b7ecdd2b3d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1936,
                  "startColumn": 5,
                  "charOffset": 71376,
                  "charLength": 11,
                  "snippet": {
                    "text": "customEmoji"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1934,
                  "startColumn": 1,
                  "charOffset": 71363,
                  "charLength": 100,
                  "snippet": {
                    "text": "    \"\"\"\n\n    customEmoji = re.search(\"<[^:]*:[^:]*:(\\d)+>\", string)\n\n    if customEmoji is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "087567ecb33e6bce1d8a578361f174f4ba88dd20efa935a8f2d2b0a73990b5a1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1939,
                  "startColumn": 9,
                  "charOffset": 71472,
                  "charLength": 11,
                  "snippet": {
                    "text": "customEmoji"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1937,
                  "startColumn": 1,
                  "charOffset": 71431,
                  "charLength": 112,
                  "snippet": {
                    "text": "\n    if customEmoji is not None:\n        customEmoji = customEmoji.group(0)\n    else:\n        customEmoji = None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "32ba46cdd121d7be966d6c177928bb6deab6acf4da698609528b7051bf11073a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1941,
                  "startColumn": 9,
                  "charOffset": 71525,
                  "charLength": 11,
                  "snippet": {
                    "text": "customEmoji"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1939,
                  "startColumn": 1,
                  "charOffset": 71464,
                  "charLength": 103,
                  "snippet": {
                    "text": "        customEmoji = customEmoji.group(0)\n    else:\n        customEmoji = None\n\n    return customEmoji"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f7a8434987ea73cd8bff84b142d2f2f419d9a08d89af80360749c4a76bfd505"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 7,
                  "charOffset": 4714,
                  "charLength": 24,
                  "snippet": {
                    "text": "TutorSession_GracePeriod"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 164,
                  "startColumn": 1,
                  "charOffset": 4706,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\nclass TutorSession_GracePeriod(BaseModel):\n    \"\"\"\n    # IgnoreThis"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2fb3a9046e54192a27503df43c42ba2a88b387eab27be1b2f7d842e5d0bb604d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 7,
                  "charOffset": 10330,
                  "charLength": 17,
                  "snippet": {
                    "text": "TutorBot_Sessions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 439,
                  "startColumn": 1,
                  "charOffset": 10322,
                  "charLength": 68,
                  "snippet": {
                    "text": "\n\nclass TutorBot_Sessions(BaseModel):\n    \"\"\"\n    #TutorBot Sessions"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3bd3509464d05511c1999d849e09b522d8835f057158ab08329cb914e0faa343"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 9,
                  "charOffset": 2148,
                  "charLength": 8,
                  "snippet": {
                    "text": "ListData"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 2088,
                  "charLength": 147,
                  "snippet": {
                    "text": "        data = r.json()\n        data = data[\"data\"]\n        ListData = []\n        for object in range(len(data) - 1):\n            # object = object"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d3bb1d9e31afe85a19a2a4f9598c7fbf4e63dc3e997526eb271cfa5f6f59b644"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 13,
                  "charOffset": 2248,
                  "charLength": 7,
                  "snippet": {
                    "text": "FullURL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "charOffset": 2162,
                  "charLength": 220,
                  "snippet": {
                    "text": "        for object in range(len(data) - 1):\n            # object = object\n            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d25c66365b002e76fae13869dee2e7e2221a34c73322b4d52d982c3923d6488f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 13,
                  "charOffset": 2309,
                  "charLength": 12,
                  "snippet": {
                    "text": "ParsedDomain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 2206,
                  "charLength": 213,
                  "snippet": {
                    "text": "            # object = object\n            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "368a9b63d6898db6a3b96684d879643b8b19502fc8a173965742794515803585"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 13,
                  "charOffset": 2354,
                  "charLength": 6,
                  "snippet": {
                    "text": "Domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2236,
                  "charLength": 184,
                  "snippet": {
                    "text": "            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a154760569e62c33bbe3e9be9b8301745a09bb0cdc71376549b81b894086e4f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 13,
                  "charOffset": 2395,
                  "charLength": 4,
                  "snippet": {
                    "text": "Path"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 1,
                  "charOffset": 2297,
                  "charLength": 152,
                  "snippet": {
                    "text": "            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path\n\n            ListData.append("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d822bee505b56e032920e99c5257e8185a68c42e967c05cf85eadae604dfc9f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 9,
                  "charOffset": 3466,
                  "charLength": 7,
                  "snippet": {
                    "text": "FullURL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 1,
                  "charOffset": 3419,
                  "charLength": 172,
                  "snippet": {
                    "text": "        object = range(len(r.json()))\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f3acaa1d2441e79091a3cbcda9d4f2afa9a9097cf75d52652740f35821a3291"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 9,
                  "charOffset": 3522,
                  "charLength": 12,
                  "snippet": {
                    "text": "ParsedDomain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 3457,
                  "charLength": 167,
                  "snippet": {
                    "text": "\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "356ac68809059ca167d6bf6d2544386513404746f3cb05aae0a6d364745f1c21"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 9,
                  "charOffset": 3563,
                  "charLength": 6,
                  "snippet": {
                    "text": "Domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "charOffset": 3458,
                  "charLength": 167,
                  "snippet": {
                    "text": "        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66acdd6d67980b92f1395e69a925c6a52adb53d45e7b55ac09a7cf6093dedf80"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 9,
                  "charOffset": 3600,
                  "charLength": 4,
                  "snippet": {
                    "text": "Path"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 3514,
                  "charLength": 141,
                  "snippet": {
                    "text": "        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n\n        return RedirectPizza("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "466accff80ea7ccda5e5c1f606467b474ca8070abe91299b9f11bbc180ca021f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 9,
                  "charOffset": 5238,
                  "charLength": 7,
                  "snippet": {
                    "text": "FullURL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "charOffset": 5197,
                  "charLength": 166,
                  "snippet": {
                    "text": "        pprint.pprint(r.json())\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "63b9d2aefc90c7a134ab5cc26f9b6ff915e2578010eeb353b82df835d07e9e5d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 9,
                  "charOffset": 5294,
                  "charLength": 12,
                  "snippet": {
                    "text": "ParsedDomain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 5229,
                  "charLength": 167,
                  "snippet": {
                    "text": "\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3dc0970c9b190909c0ffe92137c84f20559d4f8fe1f072646be7bd33e9a0db5c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 9,
                  "charOffset": 5335,
                  "charLength": 6,
                  "snippet": {
                    "text": "Domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 5230,
                  "charLength": 167,
                  "snippet": {
                    "text": "        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c176a28695d03276fe0319ccc1d6de12d8b7f47054dbff47cf129c2cedfaaab3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 9,
                  "charOffset": 5372,
                  "charLength": 4,
                  "snippet": {
                    "text": "Path"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 179,
                  "startColumn": 1,
                  "charOffset": 5286,
                  "charLength": 141,
                  "snippet": {
                    "text": "        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n\n        return RedirectPizza("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b6dced980e59175727af4b8e3f4504e0acd09fe0822ac7c2fd23e4373812c28"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 9,
                  "charOffset": 2601,
                  "charLength": 2,
                  "snippet": {
                    "text": "IP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2559,
                  "charLength": 169,
                  "snippet": {
                    "text": "\n    if not os.getenv(\"USEREAL\"):\n        IP = os.getenv(\"IP\")\n        databaseField = (\n            f\"{bcolors.OKGREEN}Selected Database: External ({IP}){bcolors.ENDC}\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ad42b3d389ec7c918e2ce0590e3aeae379a6c7ed65cadf710b383acdb64b6dea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 9,
                  "charOffset": 2630,
                  "charLength": 13,
                  "snippet": {
                    "text": "databaseField"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 2560,
                  "charLength": 178,
                  "snippet": {
                    "text": "    if not os.getenv(\"USEREAL\"):\n        IP = os.getenv(\"IP\")\n        databaseField = (\n            f\"{bcolors.OKGREEN}Selected Database: External ({IP}){bcolors.ENDC}\"\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6eb1dec2cbf9365fdc15e052edbb3c1446ab55c81c0ade4fa8cb353471cacbd8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 9,
                  "charOffset": 2757,
                  "charLength": 13,
                  "snippet": {
                    "text": "databaseField"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 1,
                  "charOffset": 2729,
                  "charLength": 206,
                  "snippet": {
                    "text": "        )\n    else:\n        databaseField = (\n            f\"{bcolors.FAIL}Selected Database: localhost{bcolors.ENDC}\\n{bcolors.WARNING}WARNING: Not \"\n            f\"recommended to use SQLite.{bcolors.ENDC} \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "48bb993e1e16c9830a48c1a93bea7de78b7003467fc919a9bb09543c39c659bc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 13,
                  "charOffset": 10486,
                  "charLength": 10,
                  "snippet": {
                    "text": "GITHUB_API"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 289,
                  "startColumn": 1,
                  "charOffset": 10420,
                  "charLength": 185,
                  "snippet": {
                    "text": "            data = \"\\n\".join([l.strip() for l in f])\n\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0971c7108fa39c698680c7820c9ae204505bf91e4883e36ee987792f4620c55"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 13,
                  "charOffset": 10536,
                  "charLength": 9,
                  "snippet": {
                    "text": "API_TOKEN"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 290,
                  "startColumn": 1,
                  "charOffset": 10473,
                  "charLength": 196,
                  "snippet": {
                    "text": "\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\"\n            headers = {\"Authorization\": \"token %s\" % API_TOKEN}"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "143547ae7fdd07da52213534f6de15e5b4bd2d00e6a42d4f47319612b75235b8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 13,
                  "charOffset": 11078,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 303,
                  "startColumn": 1,
                  "charOffset": 11015,
                  "charLength": 156,
                  "snippet": {
                    "text": "            )\n            j = json.loads(res.text)\n            ID = j[\"id\"]\n            gisturl = f\"https://gist.github.com/{ID}\"\n            print(gisturl)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c1cc3a0c3ab038ba3827b04a46ec6b49bc9a845ba9c909103540b373391c697d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 5,
                  "charOffset": 14102,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 385,
                  "startColumn": 1,
                  "charOffset": 14051,
                  "charLength": 163,
                  "snippet": {
                    "text": "        blacklisted_users.append(p.discordID)\n\n    adminIDs = []\n    query = database.Administrators.select().where(\n        database.Administrators.TierLevel == 4"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "de08d5d3df10c41399c8665270f6da21c323288e9830e1029718d455495d19cd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 5,
                  "charOffset": 15425,
                  "charLength": 12,
                  "snippet": {
                    "text": "initializeDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 434,
                  "startColumn": 1,
                  "charOffset": 15380,
                  "charLength": 156,
                  "snippet": {
                    "text": "        return CheckDB_CC.elseSituation\n\ndef initializeDB(bot):\n    \"\"\"\n    Initializes the database, and creates the needed table data if they don't exist."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9b5d08045e49bca0c5f757c9777dea94ee90fefeecad3659f8b4c64f49df1431"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 5,
                  "charOffset": 15593,
                  "charLength": 3,
                  "snippet": {
                    "text": "UpQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 439,
                  "startColumn": 1,
                  "charOffset": 15537,
                  "charLength": 285,
                  "snippet": {
                    "text": "    \"\"\"\n    database.db.connect(reuse_if_open=True)\n    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a34fc059d032e43a746239e8fcc8bea86081af7635fa3519a012376e501c5a7a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 5,
                  "charOffset": 15659,
                  "charLength": 3,
                  "snippet": {
                    "text": "CIQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 440,
                  "startColumn": 1,
                  "charOffset": 15545,
                  "charLength": 356,
                  "snippet": {
                    "text": "    database.db.connect(reuse_if_open=True)\n    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "de62bfd4dd101d94477f0460747bd9884fdecf6ecba73ecc1d6ea2f33cd5b040"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 5,
                  "charOffset": 15745,
                  "charLength": 3,
                  "snippet": {
                    "text": "BTE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 441,
                  "startColumn": 1,
                  "charOffset": 15589,
                  "charLength": 313,
                  "snippet": {
                    "text": "    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72f7d418614bc77d6ee19bc50b989cf39bc9c399b936d83e1e33546c55020311"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 444,
                  "startColumn": 5,
                  "charOffset": 15827,
                  "charLength": 2,
                  "snippet": {
                    "text": "SM"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 442,
                  "startColumn": 1,
                  "charOffset": 15655,
                  "charLength": 272,
                  "snippet": {
                    "text": "    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)\n\n    if not UpQ.exists():"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee1968f3cd260955b41ae751672d56a6431e97017cfe6e6e291e7f9367d8686b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 17,
                  "charOffset": 5564,
                  "charLength": 8,
                  "snippet": {
                    "text": "banEntry"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "charOffset": 5466,
                  "charLength": 182,
                  "snippet": {
                    "text": "            member = ctx.guild.get_member(user.id)\n            if member is None:\n                banEntry = await ctx.guild.fetch_ban(user)\n\n                if banEntry is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e7f2ab83ac7d0b1e3fad776fe5a8c317a6dc432e7a9ae8e75adf26cd6b383539"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 17,
                  "charOffset": 1750,
                  "charLength": 14,
                  "snippet": {
                    "text": "banReasonAUDIT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 1616,
                  "charLength": 226,
                  "snippet": {
                    "text": "            # We need to check who banned the person.\n            if moderator.id == 548410451818708993:  # Wick's ID\n                banReasonAUDIT = logs.reason\n\n                if \"No reason specified by\" in banReasonAUDIT:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a2bf6519acfdc3ec686ea50f6ea58628b9bb8829ddec90962dc830bbc4bfe1f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 29,
                  "charOffset": 1871,
                  "charLength": 15,
                  "snippet": {
                    "text": "fullUsernameMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 1779,
                  "charLength": 203,
                  "snippet": {
                    "text": "\n                if \"No reason specified by\" in banReasonAUDIT:\n                    random, fullUsernameMOD = banReasonAUDIT.split(\n                        \"No reason specified by \"\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "289d6918afdb7ebe2bd49172e9532983379d5bb70270a6078ec1a7ee2fcaaeb9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 21,
                  "charOffset": 2003,
                  "charLength": 9,
                  "snippet": {
                    "text": "banReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 1911,
                  "charLength": 143,
                  "snippet": {
                    "text": "                        \"No reason specified by \"\n                    )\n                    banReason = \"None Specified\"\n\n                else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b602777aaffc3c522d0c34fd9f2068881ec17ea67666df33dffaa2b95e207f0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 21,
                  "charOffset": 2075,
                  "charLength": 9,
                  "snippet": {
                    "text": "banReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "charOffset": 2032,
                  "charLength": 158,
                  "snippet": {
                    "text": "\n                else:\n                    banReason = re.match(r\"[^[]*\\[([^]]*)\\]\", banReasonAUDIT).groups()[\n                        0\n                    ]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "427c44cb7196e3d5bcd6bef9c2453a46680155a1ba836af8ea2105491a99b15f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 33,
                  "charOffset": 2249,
                  "charLength": 15,
                  "snippet": {
                    "text": "fullUsernameMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "charOffset": 2191,
                  "charLength": 190,
                  "snippet": {
                    "text": "\n                    try:\n                        random, fullUsernameMOD = banReasonAUDIT.split(\"- \")\n                    except ValueError:\n                        fullUsernameMOD = \"Wick\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "84deaffbb939c6a3935787b8d4bbdc231356814a9335121aa87292095e4149f7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 25,
                  "charOffset": 2357,
                  "charLength": 15,
                  "snippet": {
                    "text": "fullUsernameMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 1,
                  "charOffset": 2217,
                  "charLength": 183,
                  "snippet": {
                    "text": "                        random, fullUsernameMOD = banReasonAUDIT.split(\"- \")\n                    except ValueError:\n                        fullUsernameMOD = \"Wick\"\n\n            else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21b42171de91566afb2dcca9ca4d612e797e975b81f6515e90be5b1daadd2983"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 17,
                  "charOffset": 2417,
                  "charLength": 9,
                  "snippet": {
                    "text": "banReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "charOffset": 2382,
                  "charLength": 191,
                  "snippet": {
                    "text": "\n            else:\n                banReason = logs.reason\n                # Get full username with tag\n                fullUsernameMOD = f\"{moderator.display_name}#{moderator.discriminator}\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1d40fcc0d14f2357c769b609175846a9559512adb9be891814c093ad90764026"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 17,
                  "charOffset": 2502,
                  "charLength": 15,
                  "snippet": {
                    "text": "fullUsernameMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 2401,
                  "charLength": 248,
                  "snippet": {
                    "text": "                banReason = logs.reason\n                # Get full username with tag\n                fullUsernameMOD = f\"{moderator.display_name}#{moderator.discriminator}\"\n\n            # Okay now we got our reason, we need to get a few more things"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5e7e1aaa5da2b05f1f76ed907e48052cb7f85f5471a19c03991d62e1c6751ad0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 13,
                  "charOffset": 2783,
                  "charLength": 18,
                  "snippet": {
                    "text": "fullUsernameTARGET"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2729,
                  "charLength": 187,
                  "snippet": {
                    "text": "\n            # Get full username with tag\n            fullUsernameTARGET = f\"{target.display_name}#{target.discriminator}\"\n\n            # Get everything into a list so we can bulk insert."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0c423f9bc66d15bc2bd57a0132fc9c834948cde30fa4f05559ad7969c7db85d3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 13,
                  "charOffset": 3252,
                  "charLength": 10,
                  "snippet": {
                    "text": "ModChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "charOffset": 3167,
                  "charLength": 169,
                  "snippet": {
                    "text": "            sheet.insert_row(row, 2)  # Insert data, and boom. We done!\n\n            ModChannel = self.bot.get_channel(self.ModLogID)\n\n            embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f5f14aa41dce65871a3706aebe6109491a9a9e4b906eb6a45c38101b89fc0eef"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "CamelCase variable imported as lowercase",
            "markdown": "CamelCase variable imported as lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 38,
                  "charOffset": 251,
                  "charLength": 3,
                  "snippet": {
                    "text": "hex"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "charOffset": 147,
                  "charLength": 163,
                  "snippet": {
                    "text": "from core import database\nfrom core.checks import is_hostTimmyBeta\nfrom core.common import hexColors as hex\nfrom core.common import Emoji\nfrom core.common import ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "afe939a57e33324ed2b5755746aff669155188e8a23555f9373c06fc6e0aef71"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 9,
                  "charOffset": 4689,
                  "charLength": 9,
                  "snippet": {
                    "text": "msgIDList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 4639,
                  "charLength": 135,
                  "snippet": {
                    "text": "\n        query = database.Voting.select()\n        msgIDList = [msg.msgID for msg in query]\n\n        interMsgID = interaction.message.id"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ce21861e2c0b4a59062cf2edc0a41180f07de162ba1b12aba8f01360fca7a3cd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 9,
                  "charOffset": 4739,
                  "charLength": 10,
                  "snippet": {
                    "text": "interMsgID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 4681,
                  "charLength": 172,
                  "snippet": {
                    "text": "        msgIDList = [msg.msgID for msg in query]\n\n        interMsgID = interaction.message.id\n        print(f\"interMsgID: {interMsgID}\")\n        if interMsgID in msgIDList:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bf1caaa67286581125024245ea47dead62131bbfa56fd2e300097a334e938769"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 13,
                  "charOffset": 4866,
                  "charLength": 13,
                  "snippet": {
                    "text": "componentsStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "charOffset": 4775,
                  "charLength": 299,
                  "snippet": {
                    "text": "        print(f\"interMsgID: {interMsgID}\")\n        if interMsgID in msgIDList:\n            componentsStr = database.Voting.select().where(database.Voting.msgID == interMsgID).get().components\n            componentsDict = ast.literal_eval(componentsStr)\n            interactionData = interaction.data"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9b1f67c190d8c965e708d89587a2857ce23098489af8aebc5e01eff1664c5055"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 13,
                  "charOffset": 4979,
                  "charLength": 14,
                  "snippet": {
                    "text": "componentsDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 132,
                  "startColumn": 1,
                  "charOffset": 4818,
                  "charLength": 257,
                  "snippet": {
                    "text": "        if interMsgID in msgIDList:\n            componentsStr = database.Voting.select().where(database.Voting.msgID == interMsgID).get().components\n            componentsDict = ast.literal_eval(componentsStr)\n            interactionData = interaction.data\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aebc3b9be9e5161dd380e02c2b738b7dc030753207fbba5ef075fa81a0fcf03e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 13,
                  "charOffset": 5040,
                  "charLength": 15,
                  "snippet": {
                    "text": "interactionData"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 1,
                  "charOffset": 4854,
                  "charLength": 277,
                  "snippet": {
                    "text": "            componentsStr = database.Voting.select().where(database.Voting.msgID == interMsgID).get().components\n            componentsDict = ast.literal_eval(componentsStr)\n            interactionData = interaction.data\n\n            print(componentsDict, type(componentsDict))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a1d95433052f731199ab780c634eb90f79713418451fb9792b8e5457668c0ea8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 9,
                  "charOffset": 5695,
                  "charLength": 19,
                  "snippet": {
                    "text": "acceptedChannelsStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 5635,
                  "charLength": 165,
                  "snippet": {
                    "text": "    async def create(self, ctx: commands.Context):\n\n        acceptedChannelsStr = \"\"\n        noneChannels = []\n        for channelID in self.acceptedAnnouncementCHs:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "afd804f586abcaf410725a50cf3806172545552bf363d4d09a5b7126f18911a6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 9,
                  "charOffset": 5728,
                  "charLength": 12,
                  "snippet": {
                    "text": "noneChannels"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 158,
                  "startColumn": 1,
                  "charOffset": 5686,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n        acceptedChannelsStr = \"\"\n        noneChannels = []\n        for channelID in self.acceptedAnnouncementCHs:\n            acceptedChannel = self.bot.get_channel(channelID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b7e0c56cfc112d09f21f859fdacc8c4e8da1418eb505dba9303171184fc97f78"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 13,
                  "charOffset": 5813,
                  "charLength": 15,
                  "snippet": {
                    "text": "acceptedChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "charOffset": 5720,
                  "charLength": 187,
                  "snippet": {
                    "text": "        noneChannels = []\n        for channelID in self.acceptedAnnouncementCHs:\n            acceptedChannel = self.bot.get_channel(channelID)\n\n            if acceptedChannel is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c80669ff8b536941acb754f2f8822845e416b1d661d697e1a883e0e2d021d926"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 9,
                  "charOffset": 6156,
                  "charLength": 8,
                  "snippet": {
                    "text": "randomID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 169,
                  "startColumn": 1,
                  "charOffset": 6100,
                  "charLength": 254,
                  "snippet": {
                    "text": "        print(f\"noneChannels: {noneChannels}\")\n\n        randomID = \"\".join(random.choices(string.ascii_uppercase + string.digits, k=6))\n        tempVoteCHsPath = f\"./TEMP_voteCHS_{randomID}.txt\"\n        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "089f60c9bdc9cdab4e88207ae44be98cdb2822bbdaca59519fc8ecf53641a17d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 9,
                  "charOffset": 6244,
                  "charLength": 15,
                  "snippet": {
                    "text": "tempVoteCHsPath"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 170,
                  "startColumn": 1,
                  "charOffset": 6147,
                  "charLength": 208,
                  "snippet": {
                    "text": "\n        randomID = \"\".join(random.choices(string.ascii_uppercase + string.digits, k=6))\n        tempVoteCHsPath = f\"./TEMP_voteCHS_{randomID}.txt\"\n        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b44a9c3f09f4a5d767b5957a416b4919fe7650f1287669ee8d08ff14d5dc480d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 9,
                  "charOffset": 6303,
                  "charLength": 19,
                  "snippet": {
                    "text": "tempVoteCHsFilename"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 1,
                  "charOffset": 6148,
                  "charLength": 266,
                  "snippet": {
                    "text": "        randomID = \"\".join(random.choices(string.ascii_uppercase + string.digits, k=6))\n        tempVoteCHsPath = f\"./TEMP_voteCHS_{randomID}.txt\"\n        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\"\n\n        tempVoteCHsFileWrite = open(tempVoteCHsPath, \"w+\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0980fc126a4c8c44e6be603623df699ff8bc92ab650a38425ba03c36e4029e77"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 9,
                  "charOffset": 6364,
                  "charLength": 20,
                  "snippet": {
                    "text": "tempVoteCHsFileWrite"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 1,
                  "charOffset": 6295,
                  "charLength": 241,
                  "snippet": {
                    "text": "        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\"\n\n        tempVoteCHsFileWrite = open(tempVoteCHsPath, \"w+\")\n        tempVoteCHsFileWrite.write(f\"Accepted channels:\" f\"\\n{acceptedChannelsStr}\")\n        tempVoteCHsFileWrite.close()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "279487cb1d20d1ae1cff57a7f3c5a8236979d32d2e67401dbaad6fda150b27f8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 9,
                  "charOffset": 6545,
                  "charLength": 15,
                  "snippet": {
                    "text": "tempVoteCHsFile"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "charOffset": 6415,
                  "charLength": 243,
                  "snippet": {
                    "text": "        tempVoteCHsFileWrite.write(f\"Accepted channels:\" f\"\\n{acceptedChannelsStr}\")\n        tempVoteCHsFileWrite.close()\n        tempVoteCHsFile = discord.File(tempVoteCHsPath, filename=tempVoteCHsFilename)\n\n        os.remove(tempVoteCHsPath)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d06ffc84d1698584100ef113d007325a520acd2319831c9858d2a13726e16a7f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 9,
                  "charOffset": 6668,
                  "charLength": 11,
                  "snippet": {
                    "text": "ch_snakePit"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 6624,
                  "charLength": 228,
                  "snippet": {
                    "text": "        os.remove(tempVoteCHsPath)\n\n        ch_snakePit = self.bot.get_channel(TECH_ID.ch_snakePit)\n        msgVoteCHsFile = await ch_snakePit.send(file=tempVoteCHsFile)\n        voteCHsFileURL = msgVoteCHsFile.attachments[0].url"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "729dff473eda9a94439578e49b574893390ba6edac954677c367f28edf06e0f2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 9,
                  "charOffset": 6732,
                  "charLength": 14,
                  "snippet": {
                    "text": "msgVoteCHsFile"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 181,
                  "startColumn": 1,
                  "charOffset": 6659,
                  "charLength": 231,
                  "snippet": {
                    "text": "\n        ch_snakePit = self.bot.get_channel(TECH_ID.ch_snakePit)\n        msgVoteCHsFile = await ch_snakePit.send(file=tempVoteCHsFile)\n        voteCHsFileURL = msgVoteCHsFile.attachments[0].url\n        await msgVoteCHsFile.delete()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "41f45df4c3a88642b994627ea07e0eaa73b7b8894d9a8214a144da30e263fece"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 9,
                  "charOffset": 6802,
                  "charLength": 14,
                  "snippet": {
                    "text": "voteCHsFileURL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 6660,
                  "charLength": 267,
                  "snippet": {
                    "text": "        ch_snakePit = self.bot.get_channel(TECH_ID.ch_snakePit)\n        msgVoteCHsFile = await ch_snakePit.send(file=tempVoteCHsFile)\n        voteCHsFileURL = msgVoteCHsFile.attachments[0].url\n        await msgVoteCHsFile.delete()\n        embedServer = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4bbf32855e9946409a04cbce8d8c72b23c99d30eef0fa6682926da4fb069f2d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 9,
                  "charOffset": 6899,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedServer"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 184,
                  "startColumn": 1,
                  "charOffset": 6794,
                  "charLength": 202,
                  "snippet": {
                    "text": "        voteCHsFileURL = msgVoteCHsFile.attachments[0].url\n        await msgVoteCHsFile.delete()\n        embedServer = discord.Embed(\n            color=hex.ss_blurple,\n            title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f3e48473964a2b706ca47afad3229e5005fff47a412339ce16ff0871a4879ec"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 9,
                  "charOffset": 7466,
                  "charLength": 15,
                  "snippet": {
                    "text": "viewAcceptedCHs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 194,
                  "startColumn": 1,
                  "charOffset": 7374,
                  "charLength": 188,
                  "snippet": {
                    "text": "        embedServer.set_footer(text=\"Type 'cancel' to cancel | Timeout after 60s\")\n\n        viewAcceptedCHs = discord.ui.View()\n        viewAcceptedCHs.add_item(\n            ButtonHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0febc2c8c0b22596586d1cc58503a1d3c276e880b3c523176c746fe8bc219395"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 9,
                  "charOffset": 7722,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgSetup"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 202,
                  "startColumn": 1,
                  "charOffset": 7690,
                  "charLength": 152,
                  "snippet": {
                    "text": "            )\n        )\n        msgSetup = await ctx.send(embed=embedServer, view=viewAcceptedCHs)\n\n        def msgInputCheck(message: discord.Message):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa7b7b9e043a2c11fb1a371830dc821724c44a4e801bd786b3a26c65fca05662"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 13,
                  "charOffset": 7802,
                  "charLength": 13,
                  "snippet": {
                    "text": "msgInputCheck"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 204,
                  "startColumn": 1,
                  "charOffset": 7714,
                  "charLength": 212,
                  "snippet": {
                    "text": "        msgSetup = await ctx.send(embed=embedServer, view=viewAcceptedCHs)\n\n        def msgInputCheck(message: discord.Message):\n            return message.channel == ctx.channel and message.author == ctx.author\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7a0602082161af93f14bc99fe612a18269429c0f0257785cda5144f51c6720eb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 9,
                  "charOffset": 8010,
                  "charLength": 18,
                  "snippet": {
                    "text": "datetimeExpiration"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 210,
                  "startColumn": 1,
                  "charOffset": 7949,
                  "charLength": 161,
                  "snippet": {
                    "text": "        text = ...  # type: str\n        options = []\n        datetimeExpiration = ...  # type: datetime.datetime\n\n        msgError = ...  # type: discord.Message"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a4c9955650f746e98f109c9f6e186baf631d0ba17476d407c832c61b7a4cb13"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 9,
                  "charOffset": 8071,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 212,
                  "startColumn": 1,
                  "charOffset": 8002,
                  "charLength": 147,
                  "snippet": {
                    "text": "        datetimeExpiration = ...  # type: datetime.datetime\n\n        msgError = ...  # type: discord.Message\n        viewReset = discord.ui.View()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f5970e1b598728b5b2ae33c6514cbed6b8182ebfce4398bc215019aeb84e9866"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 9,
                  "charOffset": 8119,
                  "charLength": 9,
                  "snippet": {
                    "text": "viewReset"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 213,
                  "startColumn": 1,
                  "charOffset": 8062,
                  "charLength": 117,
                  "snippet": {
                    "text": "\n        msgError = ...  # type: discord.Message\n        viewReset = discord.ui.View()\n\n        setupFinished = False"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "beae632f02c059ffbfc97f446221c455bfed776b34ce9fe2780e2e5b2acead28"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 9,
                  "charOffset": 8158,
                  "charLength": 13,
                  "snippet": {
                    "text": "setupFinished"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 215,
                  "startColumn": 1,
                  "charOffset": 8111,
                  "charLength": 106,
                  "snippet": {
                    "text": "        viewReset = discord.ui.View()\n\n        setupFinished = False\n        index = 0\n        while True:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a62ab581a386043410d9d568ec06b499a71b5e2f1473a5123400898bdd552fee"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 17,
                  "charOffset": 8251,
                  "charLength": 11,
                  "snippet": {
                    "text": "msgResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 219,
                  "startColumn": 1,
                  "charOffset": 8198,
                  "charLength": 189,
                  "snippet": {
                    "text": "        while True:\n            try:\n                msgResponse: discord.Message = await self.bot.wait_for(\n                    \"message\", check=msgInputCheck, timeout=60\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "725e59abdef40f0154d22ef211b1bae683a2d62125402310ba4ff05c5e8f1d6c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 17,
                  "charOffset": 8445,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedTimeout"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 223,
                  "startColumn": 1,
                  "charOffset": 8370,
                  "charLength": 189,
                  "snippet": {
                    "text": "                )\n            except asyncio.TimeoutError:\n                embedTimeout = discord.Embed(\n                    color=hex.red_cancel,\n                    title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b23667c51270e04582c7a7e654a9206b3c65374463b6f62e17d12c262f149e89"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 17,
                  "charOffset": 9104,
                  "charLength": 10,
                  "snippet": {
                    "text": "msgContent"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 243,
                  "startColumn": 1,
                  "charOffset": 9069,
                  "charLength": 119,
                  "snippet": {
                    "text": "\n            else:\n                msgContent = msgResponse.content\n\n                if msgContent.lower() == \"cancel\":"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "62c8d0fb6279100f57a5e1178b785633321e5273f7730921e2fea8f5ce9e4fe5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 21,
                  "charOffset": 9209,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedCancel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 246,
                  "startColumn": 1,
                  "charOffset": 9137,
                  "charLength": 193,
                  "snippet": {
                    "text": "\n                if msgContent.lower() == \"cancel\":\n                    embedCancel = discord.Embed(\n                        color=hex.red_cancel,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cba32b16be54ff4957cbc64cce7cfcb2641496ab18ddd30c44db6a0860a2dba1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 21,
                  "charOffset": 10052,
                  "charLength": 13,
                  "snippet": {
                    "text": "embedNotFound"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 270,
                  "startColumn": 1,
                  "charOffset": 10002,
                  "charLength": 172,
                  "snippet": {
                    "text": "                        pass\n\n                    embedNotFound = discord.Embed(\n                        color=hex.red_error,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cc8b34e7e183d3f68f2e268fa34854364f1d415e5af50d01c7cad9ca10c947ae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 21,
                  "charOffset": 10650,
                  "charLength": 12,
                  "snippet": {
                    "text": "tempChannels"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 281,
                  "startColumn": 1,
                  "charOffset": 10553,
                  "charLength": 220,
                  "snippet": {
                    "text": "                    embedNotFound.set_footer(text=\"Use 'cancel' to cancel\")\n\n                    tempChannels = []\n                    if \",\" in msgContent:\n                        channelsStrList = msgContent.split(\",\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a015f7055ac266f304c17e0cf22f235453a9078f11baa0a7a84b6dfdbe508adf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 25,
                  "charOffset": 10734,
                  "charLength": 15,
                  "snippet": {
                    "text": "channelsStrList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 283,
                  "startColumn": 1,
                  "charOffset": 10630,
                  "charLength": 267,
                  "snippet": {
                    "text": "                    tempChannels = []\n                    if \",\" in msgContent:\n                        channelsStrList = msgContent.split(\",\")\n                        for channelStr in channelsStrList:\n                            stripChannelStr = channelStr.strip()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49093673d74477c62adedc5370e438086de42cbe56bcd685a757c898a576dbb8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 29,
                  "charOffset": 10861,
                  "charLength": 15,
                  "snippet": {
                    "text": "stripChannelStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 285,
                  "startColumn": 1,
                  "charOffset": 10710,
                  "charLength": 298,
                  "snippet": {
                    "text": "                        channelsStrList = msgContent.split(\",\")\n                        for channelStr in channelsStrList:\n                            stripChannelStr = channelStr.strip()\n                            channelsStrList[\n                                channelsStrList.index(channelStr)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "643bbd8e2cb5c9fddf1cf65a48e92df5f604ed6adb17dd3c8737642a1625e278"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 29,
                  "charOffset": 11943,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 309,
                  "startColumn": 1,
                  "charOffset": 11858,
                  "charLength": 227,
                  "snippet": {
                    "text": "                            )\n                        ):\n                            msgError = await ctx.send(embed=embedNotFound)\n                            try:\n                                await msgError.delete(delay=7)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2d9b4a0fb7ebefc8e5ec2dff4152bb2809b55e36157d5ebc1a558358cd2b9e0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 25,
                  "charOffset": 12248,
                  "charLength": 10,
                  "snippet": {
                    "text": "channelStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 318,
                  "startColumn": 1,
                  "charOffset": 12197,
                  "charLength": 207,
                  "snippet": {
                    "text": "\n                    else:\n                        channelStr = msgContent.strip()\n                        if channelStr.isdigit():\n                            channel = self.bot.get_channel(int(channelStr))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1fe197e949822a0b7506dac677205329daa085b2631e8c687e1732ddb103065a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 29,
                  "charOffset": 12758,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 330,
                  "startColumn": 1,
                  "charOffset": 12625,
                  "charLength": 275,
                  "snippet": {
                    "text": "                            or channel.id not in self.acceptedAnnouncementCHs\n                        ):\n                            msgError = await ctx.send(embed=embedNotFound)\n                            try:\n                                await msgError.delete(delay=7)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "27feb354999e9a1e1127c8e9a82cc150cbffa1715fe130a9e138a4d1b891a31f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 21,
                  "charOffset": 13132,
                  "charLength": 9,
                  "snippet": {
                    "text": "embedText"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 342,
                  "startColumn": 1,
                  "charOffset": 13067,
                  "charLength": 184,
                  "snippet": {
                    "text": "                    channels = tempChannels\n\n                    embedText = discord.Embed(\n                        color=hex.ss_blurple,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6cc4b70923f2b77ecad1d785114afff51e8f6bd515b671459bb14c5c29f03867"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 25,
                  "charOffset": 14355,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedTooLong"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 369,
                  "startColumn": 1,
                  "charOffset": 14283,
                  "charLength": 201,
                  "snippet": {
                    "text": "\n                    if len(msgContent) > 2000:\n                        embedTooLong = discord.Embed(\n                            color=hex.red_error,\n                            title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df40a08fd698490607bdfb473b1849fa1e7d4ae0be059ca2827cafb94ed81ee5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 25,
                  "charOffset": 14885,
                  "charLength": 10,
                  "snippet": {
                    "text": "msgTooLong"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 378,
                  "startColumn": 1,
                  "charOffset": 14756,
                  "charLength": 266,
                  "snippet": {
                    "text": "                        )\n                        embedTooLong.set_footer(text=\"Use 'cancel' to cancel\")\n                        msgTooLong = await ctx.send(embed=embedTooLong)\n                        try:\n                            await msgTooLong.delete(delay=7)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2e5205c7a7e0c1fe3645b8514b745ace0327665c13119e7d3f8b94a0d556a0af"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 21,
                  "charOffset": 15182,
                  "charLength": 9,
                  "snippet": {
                    "text": "embedText"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 388,
                  "startColumn": 1,
                  "charOffset": 15123,
                  "charLength": 178,
                  "snippet": {
                    "text": "                    text = msgContent\n\n                    embedText = discord.Embed(\n                        color=hex.ss_blurple,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "905c05b3f237449930d6619c1cba02d5654537b3ca8b0791481899adc9352bc9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 414,
                  "startColumn": 21,
                  "charOffset": 16239,
                  "charLength": 14,
                  "snippet": {
                    "text": "optionsStrList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 412,
                  "startColumn": 1,
                  "charOffset": 16189,
                  "charLength": 199,
                  "snippet": {
                    "text": "                        pass\n\n                    optionsStrList = msgContent.split(\",\")\n                    for optionStr in optionsStrList:\n                        options.append(optionStr.strip())"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e576723f1531f75f42b59bad3ebe80726f675778b3535807dba8d2fa590e3e8b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 21,
                  "charOffset": 16410,
                  "charLength": 13,
                  "snippet": {
                    "text": "embedDuration"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 416,
                  "startColumn": 1,
                  "charOffset": 16331,
                  "charLength": 202,
                  "snippet": {
                    "text": "                        options.append(optionStr.strip())\n\n                    embedDuration = discord.Embed(\n                        color=hex.ss_blurple,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7dc467bcbf95361911c0214961d392100ee9f18dc87514724563253b8d8c0811"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 21,
                  "charOffset": 17338,
                  "charLength": 8,
                  "snippet": {
                    "text": "timeDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 439,
                  "startColumn": 1,
                  "charOffset": 17288,
                  "charLength": 186,
                  "snippet": {
                    "text": "                        pass\n\n                    timeDict: dict = stringTimeConvert(msgContent)\n                    days = timeDict[\"days\"]\n                    hours = timeDict[\"hours\"]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b454df3559a55de67e2be7ae37c02669af0687456d8fdd6d71d2581adcf5c65a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 453,
                  "startColumn": 25,
                  "charOffset": 17815,
                  "charLength": 13,
                  "snippet": {
                    "text": "embedNotFound"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 451,
                  "startColumn": 1,
                  "charOffset": 17724,
                  "charLength": 221,
                  "snippet": {
                    "text": "                        and seconds is None\n                    ):\n                        embedNotFound = discord.Embed(\n                            color=hex.red_error,\n                            title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89ec715d17fa568406ee91385abeeeb2dbbd1d7574fa11ec088203d690d4ff95"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 462,
                  "startColumn": 25,
                  "charOffset": 18346,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 460,
                  "startColumn": 1,
                  "charOffset": 18216,
                  "charLength": 264,
                  "snippet": {
                    "text": "                        )\n                        embedNotFound.set_footer(text=\"Use 'cancel' to cancel\")\n                        msgError = await ctx.send(embed=embedNotFound)\n                        try:\n                            await msgError.delete(delay=7)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f42b98af3b366178d6c9a9225dc883f0877a0e4e406711b86c9f3546f681bfe8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 482,
                  "startColumn": 21,
                  "charOffset": 18899,
                  "charLength": 11,
                  "snippet": {
                    "text": "datetimeNow"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 480,
                  "startColumn": 1,
                  "charOffset": 18842,
                  "charLength": 174,
                  "snippet": {
                    "text": "                        seconds = 0\n\n                    datetimeNow = datetime.datetime.now(self.est)\n                    try:\n                        datetimeExpiration = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5349535b41f8dac0f62c371eec07c3d4c72de8bf16580f6165fc526fd6690325"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 484,
                  "startColumn": 25,
                  "charOffset": 18994,
                  "charLength": 18,
                  "snippet": {
                    "text": "datetimeExpiration"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 482,
                  "startColumn": 1,
                  "charOffset": 18879,
                  "charLength": 237,
                  "snippet": {
                    "text": "                    datetimeNow = datetime.datetime.now(self.est)\n                    try:\n                        datetimeExpiration = (\n                            datetimeNow\n                            + datetime.timedelta(days=days)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "455c278eb31798e4c51c57cc6d71e15950178659c3730737c84644d8065d30d2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 25,
                  "charOffset": 19413,
                  "charLength": 13,
                  "snippet": {
                    "text": "embedOverflow"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 490,
                  "startColumn": 1,
                  "charOffset": 19311,
                  "charLength": 232,
                  "snippet": {
                    "text": "                        )\n                    except OverflowError as _error:\n                        embedOverflow = discord.Embed(\n                            color=hex.red_error,\n                            title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83eecf91b6c9f1628e21545841c3af0b9ff7ac4e0a1e659fc7207f753a202ff3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 502,
                  "startColumn": 25,
                  "charOffset": 20046,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 500,
                  "startColumn": 1,
                  "charOffset": 19916,
                  "charLength": 264,
                  "snippet": {
                    "text": "                        )\n                        embedOverflow.set_footer(text=\"Use 'cancel' to cancel\")\n                        msgError = await ctx.send(embed=embedOverflow)\n                        try:\n                            await msgError.delete(delay=7)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "15838c32536ac55cb939d02b5aa4dea556a5c97aadf30a1de8e52f6c2ed62e3d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 21,
                  "charOffset": 20301,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedFinish"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 508,
                  "startColumn": 1,
                  "charOffset": 20247,
                  "charLength": 175,
                  "snippet": {
                    "text": "                        continue\n\n                    embedFinish = discord.Embed(\n                        color=hex.ss_blurple,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cfcf90c3caabf33a74fc3af7355d72b6df59d9fc338236b6c44eabeb55b36c3e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 21,
                  "charOffset": 20822,
                  "charLength": 17,
                  "snippet": {
                    "text": "expLongDateTimeTP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 520,
                  "startColumn": 1,
                  "charOffset": 20757,
                  "charLength": 223,
                  "snippet": {
                    "text": "                    await msgSetup.delete()\n\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ea1971e5cd2f25ad5cefd4766f7f095e6363135bb049754e581cd40043b31f47"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 21,
                  "charOffset": 20911,
                  "charLength": 17,
                  "snippet": {
                    "text": "expRelativeTimeTP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 521,
                  "startColumn": 1,
                  "charOffset": 20801,
                  "charLength": 228,
                  "snippet": {
                    "text": "\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedPseudo = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0fcb590cf5e76d291502b6f856fe2d467e20848cba692eaaae9052ffb73ac4cc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 525,
                  "startColumn": 21,
                  "charOffset": 21001,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedPseudo"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 523,
                  "startColumn": 1,
                  "charOffset": 20891,
                  "charLength": 224,
                  "snippet": {
                    "text": "                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedPseudo = discord.Embed(\n                        color=hex.ss_blurple,\n                        title=\"Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4c698200ae8e570bb9220538c354974dc1f04eba3ede9a39d4465202fd82c643"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 21,
                  "charOffset": 21513,
                  "charLength": 12,
                  "snippet": {
                    "text": "viewOverview"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 534,
                  "startColumn": 1,
                  "charOffset": 21470,
                  "charLength": 119,
                  "snippet": {
                    "text": "                    )\n\n                    viewOverview = discord.ui.View()\n\n                    for option in options:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2759f15eb8172977b060b1b381e093c56714c8daa8733e341c7ab3cfbd974a4d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 25,
                  "charOffset": 21615,
                  "charLength": 11,
                  "snippet": {
                    "text": "customEmoji"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 538,
                  "startColumn": 1,
                  "charOffset": 21547,
                  "charLength": 233,
                  "snippet": {
                    "text": "                    for option in options:\n\n                        customEmoji = searchCustomEmoji(option)\n                        if customEmoji is not None:\n                            option = option.replace(f\"{customEmoji}\", \"\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2f069d1b49e613dde5c146ef4011f9b019d26752bd1303eb6e1a597f80beccf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 21,
                  "charOffset": 22232,
                  "charLength": 13,
                  "snippet": {
                    "text": "setupFinished"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 553,
                  "startColumn": 1,
                  "charOffset": 22138,
                  "charLength": 141,
                  "snippet": {
                    "text": "                    await ctx.send(embed=embedPseudo, view=viewOverview)\n\n                    setupFinished = True\n                    break\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "87f27a983405bdbb4874ff4b03d6f5ec0c90fa120a41a4b0345bbf3e195c67b0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 564,
                  "startColumn": 13,
                  "charOffset": 22417,
                  "charLength": 11,
                  "snippet": {
                    "text": "strChannels"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 562,
                  "startColumn": 1,
                  "charOffset": 22383,
                  "charLength": 120,
                  "snippet": {
                    "text": "                pass\n\n            strChannels = \"\"\n            for channel in channels:\n                strChannels += ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71d07a5fc1ae3fcef1108d76c1d14915c384f8a92329fd7ea7ed9e556c75a29f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 13,
                  "charOffset": 22620,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedConfirm"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 568,
                  "startColumn": 1,
                  "charOffset": 22589,
                  "charLength": 127,
                  "snippet": {
                    "text": "                )\n\n            embedConfirm = discord.Embed(\n                color=hex.yellow,\n                title=\"Confirm\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "412c21ceda6a6b0d73b0f6316f6b14c2071bd9a65e69b0b067f47aa229f2711f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 583,
                  "startColumn": 13,
                  "charOffset": 23227,
                  "charLength": 10,
                  "snippet": {
                    "text": "msgConfirm"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 581,
                  "startColumn": 1,
                  "charOffset": 23111,
                  "charLength": 257,
                  "snippet": {
                    "text": "                text=\"Abusing this feature has severe consequences! | Timeout after 120s\"\n            )\n            msgConfirm = await ctx.send(embed=embedConfirm)\n            await msgConfirm.add_reaction(\"✅\")\n            await msgConfirm.add_reaction(\"❌\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68adbcec107922b7e8273ae9243a4660c01d8aa368727c596fee8dff284b24e2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 587,
                  "startColumn": 17,
                  "charOffset": 23386,
                  "charLength": 12,
                  "snippet": {
                    "text": "confirmCheck"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 585,
                  "startColumn": 1,
                  "charOffset": 23322,
                  "charLength": 163,
                  "snippet": {
                    "text": "            await msgConfirm.add_reaction(\"❌\")\n\n            def confirmCheck(reaction, user):\n                return (\n                    user.id == ctx.author.id"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f932cfb181fbf305e536d3eeb6c196e9e513c39648231fd073faaf97371a557"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 595,
                  "startColumn": 17,
                  "charOffset": 23657,
                  "charLength": 16,
                  "snippet": {
                    "text": "reactionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 593,
                  "startColumn": 1,
                  "charOffset": 23623,
                  "charLength": 177,
                  "snippet": {
                    "text": "\n            try:\n                reactionResponse, userResponse = await self.bot.wait_for(\n                    \"reaction_add\", check=confirmCheck, timeout=120\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78a61f449537c3060b49338aaa7dc55cc79159b43c027fb58f5eb0956be09aa2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 595,
                  "startColumn": 35,
                  "charOffset": 23675,
                  "charLength": 12,
                  "snippet": {
                    "text": "userResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 593,
                  "startColumn": 1,
                  "charOffset": 23623,
                  "charLength": 177,
                  "snippet": {
                    "text": "\n            try:\n                reactionResponse, userResponse = await self.bot.wait_for(\n                    \"reaction_add\", check=confirmCheck, timeout=120\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b22b1e1206f5595e1a5a637c1fd9d282802ab4e0af47b3d3ab064639a9da3b36"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 599,
                  "startColumn": 17,
                  "charOffset": 23858,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedTimeout"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 597,
                  "startColumn": 1,
                  "charOffset": 23783,
                  "charLength": 182,
                  "snippet": {
                    "text": "                )\n            except asyncio.TimeoutError:\n                embedTimeout = discord.Embed(\n                    color=hex.red_error,\n                    title=\"Confirm\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17876cc715c296aac232d4f0a28e36eaa8c68f5d3c1a165455280f5d3d8d90db"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 615,
                  "startColumn": 21,
                  "charOffset": 24530,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedSending"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 613,
                  "startColumn": 1,
                  "charOffset": 24454,
                  "charLength": 188,
                  "snippet": {
                    "text": "                    await msgConfirm.clear_reactions()\n\n                    embedSending = discord.Embed(\n                        color=hex.yellow,\n                        title=\"Confirm\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4eb28e92619a6a0691b298e52db40f0a70f03d25029b4534c4e2af8e478481e5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 624,
                  "startColumn": 21,
                  "charOffset": 24883,
                  "charLength": 17,
                  "snippet": {
                    "text": "expLongDateTimeTP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 622,
                  "startColumn": 1,
                  "charOffset": 24788,
                  "charLength": 253,
                  "snippet": {
                    "text": "                    print(\"sending\")  # TODO: Sending to original channel\n\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0efae8e0f698ada893bcab82d2ebe1847de3d317186b9f1c60b69af9d286e536"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 625,
                  "startColumn": 21,
                  "charOffset": 24972,
                  "charLength": 17,
                  "snippet": {
                    "text": "expRelativeTimeTP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 623,
                  "startColumn": 1,
                  "charOffset": 24862,
                  "charLength": 228,
                  "snippet": {
                    "text": "\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedVoting = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d36e05b5f5a78c04ae2f01a0b7292fec8a70addc7644919abed99497c3d129f8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 627,
                  "startColumn": 21,
                  "charOffset": 25062,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedVoting"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 625,
                  "startColumn": 1,
                  "charOffset": 24952,
                  "charLength": 224,
                  "snippet": {
                    "text": "                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedVoting = discord.Embed(\n                        color=hex.ss_blurple,\n                        title=\"Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "45f3fd1072be769a94b1402de449cf8eacc8e8af5bef55a465d0bd02725a5200"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 637,
                  "startColumn": 21,
                  "charOffset": 25503,
                  "charLength": 10,
                  "snippet": {
                    "text": "viewVoting"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 635,
                  "startColumn": 1,
                  "charOffset": 25460,
                  "charLength": 117,
                  "snippet": {
                    "text": "                    )\n\n                    viewVoting = discord.ui.View()\n                    for option in options:\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bd0bdb5d565d8b7f014ac756b5078456eea301eb54ec8a6fda5c7f1dc2ee5f41"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 25,
                  "charOffset": 25602,
                  "charLength": 11,
                  "snippet": {
                    "text": "customEmoji"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 638,
                  "startColumn": 1,
                  "charOffset": 25534,
                  "charLength": 233,
                  "snippet": {
                    "text": "                    for option in options:\n\n                        customEmoji = searchCustomEmoji(option)\n                        if customEmoji is not None:\n                            option = option.replace(f\"{customEmoji}\", \"\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "16fbb83ac9fbc2abf49a0d511c766f7411e36a7aa7337d997a2300d788272c73"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 653,
                  "startColumn": 21,
                  "charOffset": 26143,
                  "charLength": 11,
                  "snippet": {
                    "text": "channelTest"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 651,
                  "startColumn": 1,
                  "charOffset": 26096,
                  "charLength": 184,
                  "snippet": {
                    "text": "                        )\n\n                    channelTest = self.bot.get_channel(942076483290161203)\n                    try:\n                        msgVote = await channelTest.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac47f7c31baa54022de7d8d2bc0c299b32bf76ee724851833a196c8b1e0ef2ee"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 655,
                  "startColumn": 25,
                  "charOffset": 26247,
                  "charLength": 7,
                  "snippet": {
                    "text": "msgVote"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 653,
                  "startColumn": 1,
                  "charOffset": 26123,
                  "charLength": 286,
                  "snippet": {
                    "text": "                    channelTest = self.bot.get_channel(942076483290161203)\n                    try:\n                        msgVote = await channelTest.send(\n                            content=\"@ everyone\", embed=embedVoting, view=viewVoting\n                        )  # TODO: everyone"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e8f24f743a375325307587f5362c0f78c776c4a1561521c35959dbd95e3fb2e3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 659,
                  "startColumn": 25,
                  "charOffset": 26482,
                  "charLength": 10,
                  "snippet": {
                    "text": "embedError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 657,
                  "startColumn": 1,
                  "charOffset": 26366,
                  "charLength": 259,
                  "snippet": {
                    "text": "                        )  # TODO: everyone\n                    except Exception as _error:\n                        embedError = discord.Embed(\n                            color=hex.red_error,\n                            title=\"Error while sending message/s\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bf3ef6fd3e534d0ab39a59781c3c9913bc3cde52a46ab0e3128acadfdac7113f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 674,
                  "startColumn": 25,
                  "charOffset": 27329,
                  "charLength": 8,
                  "snippet": {
                    "text": "compDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 672,
                  "startColumn": 1,
                  "charOffset": 27215,
                  "charLength": 223,
                  "snippet": {
                    "text": "                        await msgConfirm.edit(embed=embedError)\n                    else:\n                        compDict = {}\n                        for option in options:\n                            compDict[option] = 0"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c29b249338458ef167c03def98560954c67fc7a211eec86425a41ab2435ec96d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 678,
                  "startColumn": 25,
                  "charOffset": 27464,
                  "charLength": 8,
                  "snippet": {
                    "text": "compDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 676,
                  "startColumn": 1,
                  "charOffset": 27390,
                  "charLength": 227,
                  "snippet": {
                    "text": "                            compDict[option] = 0\n\n                        compDict = json.dumps(compDict)\n                        query = database.Voting.create(\n                            msgID=msgVote.id, components=compDict"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca970b45dd844cbcba8d0e0aed54c2974816ceec7efec5a6e444ceba73f93a86"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 684,
                  "startColumn": 25,
                  "charOffset": 27706,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedSuccess"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 682,
                  "startColumn": 1,
                  "charOffset": 27644,
                  "charLength": 189,
                  "snippet": {
                    "text": "                        query.save()\n\n                        embedSuccess = discord.Embed(\n                            color=hex.green_confirm,\n                            title=\"Confirm\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "526efc133b5a167cc7d445524933184735400e81dd01188dc7233658c30d369c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 695,
                  "startColumn": 21,
                  "charOffset": 28201,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedCancel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 693,
                  "startColumn": 1,
                  "charOffset": 28125,
                  "charLength": 191,
                  "snippet": {
                    "text": "                    await msgConfirm.clear_reactions()\n\n                    embedCancel = discord.Embed(\n                        color=hex.red_cancel,\n                        title=\"Confirm\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4141c886a6c92aeca0a2dff5e434f7519c54d43deae280f4f55f22820977b51e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 40,
                  "charOffset": 717,
                  "charLength": 19,
                  "snippet": {
                    "text": "xUser: discord.User"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 622,
                  "charLength": 241,
                  "snippet": {
                    "text": "\nclass TicTacToeButton(discord.ui.Button[\"TicTacToe\"]):\n    def __init__(self, x: int, y: int, xUser: discord.User, yUser: discord.User):\n        super().__init__(style=discord.ButtonStyle.secondary, label=\"\\u200b\", row=y)\n        self.x = x"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2652319fc3a1369f0a4c32b22db62efb828787ffa189120b0526a4e4f175393"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 61,
                  "charOffset": 738,
                  "charLength": 19,
                  "snippet": {
                    "text": "yUser: discord.User"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 622,
                  "charLength": 241,
                  "snippet": {
                    "text": "\nclass TicTacToeButton(discord.ui.Button[\"TicTacToe\"]):\n    def __init__(self, x: int, y: int, xUser: discord.User, yUser: discord.User):\n        super().__init__(style=discord.ButtonStyle.secondary, label=\"\\u200b\", row=y)\n        self.x = x"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b992062d46d02aa88fe02027365b6f9791128f73a1efd2300f9a0694acab0a4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 24,
                  "charOffset": 3292,
                  "charLength": 7,
                  "snippet": {
                    "text": "XPlayer"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3256,
                  "charLength": 118,
                  "snippet": {
                    "text": "    Tie = 2\n\n    def __init__(self, XPlayer, OPlayer):\n        super().__init__()\n        self.current_player = self.X"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2dad37373c6c13a76da2fadcebe251042f3f5454db615b4f2fd6c067a006d844"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 33,
                  "charOffset": 3301,
                  "charLength": 7,
                  "snippet": {
                    "text": "OPlayer"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3256,
                  "charLength": 118,
                  "snippet": {
                    "text": "    Tie = 2\n\n    def __init__(self, XPlayer, OPlayer):\n        super().__init__()\n        self.current_player = self.X"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5f73940aece7c8060d3e8d083bb69e8ad1ee15501330c1a8a62b8460d3cca60b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 9,
                  "charOffset": 10829,
                  "charLength": 17,
                  "snippet": {
                    "text": "timmyDonation_png"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 319,
                  "startColumn": 1,
                  "charOffset": 10713,
                  "charLength": 232,
                  "snippet": {
                    "text": "    @commands.cooldown(1, 10, commands.BucketType.guild)\n    async def donate(self, ctx: commands.Context):\n        timmyDonation_png = discord.File(\n            Others.timmyDonation_path, filename=Others.timmyDonation_png\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8145b2359d58b569ea446843af85886172618fe3644ba02833aea33bf8ecb7d8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 9,
                  "charOffset": 10955,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedDonate"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 323,
                  "startColumn": 1,
                  "charOffset": 10936,
                  "charLength": 113,
                  "snippet": {
                    "text": "        )\n\n        embedDonate = discord.Embed(\n            color=Colors.ss_blurple,\n            title=f\"Donate\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "10d53cc655e3ef6d5d1b1a50fd825cee31047303d2b4090a3c912f4285eff2ae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 9,
                  "charOffset": 12108,
                  "charLength": 9,
                  "snippet": {
                    "text": "DebateBan"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 347,
                  "startColumn": 1,
                  "charOffset": 11984,
                  "charLength": 230,
                  "snippet": {
                    "text": "    @commands.has_any_role(\"Moderator\")\n    async def debateban(self, ctx, member: discord.Member, *, reason=None):\n        DebateBan = discord.utils.get(ctx.guild.roles, name=\"NoDebate\")\n\n        if member.id == self.bot.user.id:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "22936f132cbff03b0076eb4e133bd6df5697cbfefea9249a71e03e24e6e0e33f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 17,
                  "charOffset": 12977,
                  "charLength": 12,
                  "snippet": {
                    "text": "UpdateReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 371,
                  "startColumn": 1,
                  "charOffset": 12933,
                  "charLength": 235,
                  "snippet": {
                    "text": "                    return\n\n                UpdateReason = f\"DebateBan requested by {ctx.author.display_name} | Reason: {reason}\"\n                await member.add_roles(DebateBan, reason=UpdateReason)\n            except Exception as e:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "149e4763565162fa67a7f7e47d0883111e9af4cd92a13df5fca3648163226400"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 17,
                  "charOffset": 13747,
                  "charLength": 12,
                  "snippet": {
                    "text": "UpdateReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 390,
                  "startColumn": 1,
                  "charOffset": 13683,
                  "charLength": 261,
                  "snippet": {
                    "text": "                    reason = \"No Reason Given\"\n\n                UpdateReason = f\"Debate UnBan requested by {ctx.author.display_name} | Reason: {reason}\"\n                await member.remove_roles(DebateBan, reason=UpdateReason)\n            except Exception as e:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "40f1c041c7e473c2504e825a5632e0146b2e94ca89b51f5755793f28b45a1480"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 9,
                  "charOffset": 14765,
                  "charLength": 7,
                  "snippet": {
                    "text": "NoCount"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 413,
                  "startColumn": 1,
                  "charOffset": 14642,
                  "charLength": 229,
                  "snippet": {
                    "text": "    @commands.has_any_role(\"Moderator\")\n    async def countban(self, ctx, member: discord.Member, *, reason=None):\n        NoCount = discord.utils.get(ctx.guild.roles, name=\"NoCounting\")\n\n        if member.id == self.bot.user.id:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "617142a9490db4e2fc7fa8b8bad008b5c351e63acb4e22f1ada6120e27004529"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 17,
                  "charOffset": 15637,
                  "charLength": 12,
                  "snippet": {
                    "text": "UpdateReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 437,
                  "startColumn": 1,
                  "charOffset": 15593,
                  "charLength": 232,
                  "snippet": {
                    "text": "                    return\n\n                UpdateReason = f\"CountBan requested by {ctx.author.display_name} | Reason: {reason}\"\n                await member.add_roles(NoCount, reason=UpdateReason)\n            except Exception as e:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "426440231700ea7d3554cf1a1402e7b0cb542dbbf769c61eefcfeb08af7e8666"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 17,
                  "charOffset": 16402,
                  "charLength": 12,
                  "snippet": {
                    "text": "UpdateReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 456,
                  "startColumn": 1,
                  "charOffset": 16338,
                  "charLength": 258,
                  "snippet": {
                    "text": "                    reason = \"No Reason Given\"\n\n                UpdateReason = f\"Count UnBan requested by {ctx.author.display_name} | Reason: {reason}\"\n                await member.remove_roles(NoCount, reason=UpdateReason)\n            except Exception as e:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7fba787d63b93311778e9b628d5147707eeab87a5ac109e0c357ed102b1c9ca6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 601,
                  "startColumn": 17,
                  "charOffset": 21638,
                  "charLength": 2,
                  "snippet": {
                    "text": "NE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 599,
                  "startColumn": 1,
                  "charOffset": 21527,
                  "charLength": 222,
                  "snippet": {
                    "text": "                await message.delete()\n                database.db.connect(reuse_if_open=True)\n                NE = database.AdminLogging.create(\n                    discordID=ctx.author.id, action=\"KILL\"\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "258449d8b6075f5eab46714637732e36166583b7244276c244337594ca816f67"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 9,
                  "charOffset": 22804,
                  "charLength": 7,
                  "snippet": {
                    "text": "userObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 638,
                  "startColumn": 1,
                  "charOffset": 22770,
                  "charLength": 73,
                  "snippet": {
                    "text": "\n        userinput = None\n        userObj = None\n\n        await ctx.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c7b13742862d9cd8ad27101e685a44d09f62ca6b3c541df0b226d92234ae0734"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 647,
                  "startColumn": 13,
                  "charOffset": 23030,
                  "charLength": 8,
                  "snippet": {
                    "text": "inputMSG"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 645,
                  "startColumn": 1,
                  "charOffset": 22974,
                  "charLength": 193,
                  "snippet": {
                    "text": "\n        while userinput != str(randomnum):\n            inputMSG = await self.bot.wait_for(\"message\", check=check)\n            userinput = inputMSG.content\n            userObj = inputMSG.author"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0bcb9254037d55ad81d12a9002f49a97171cca26a5247b1d8bb03852c1d1eda6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 13,
                  "charOffset": 23142,
                  "charLength": 7,
                  "snippet": {
                    "text": "userObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 647,
                  "startColumn": 1,
                  "charOffset": 23018,
                  "charLength": 174,
                  "snippet": {
                    "text": "            inputMSG = await self.bot.wait_for(\"message\", check=check)\n            userinput = inputMSG.content\n            userObj = inputMSG.author\n\n        await ctx.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "31ee82180ec732fbb8f8e9ef1f333017133cfdc256e75829b8f1308c13ed283f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 705,
                  "startColumn": 9,
                  "charOffset": 24972,
                  "charLength": 8,
                  "snippet": {
                    "text": "UserList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 703,
                  "startColumn": 1,
                  "charOffset": 24953,
                  "charLength": 55,
                  "snippet": {
                    "text": "        )\n\n        UserList = []\n        RoleList = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34ee3652e5bf20d187dd0e3c3dd6cbd8e587445b16f01556912ccbd52c79cd10"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 706,
                  "startColumn": 9,
                  "charOffset": 24994,
                  "charLength": 8,
                  "snippet": {
                    "text": "RoleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 704,
                  "startColumn": 1,
                  "charOffset": 24963,
                  "charLength": 72,
                  "snippet": {
                    "text": "\n        UserList = []\n        RoleList = []\n\n        for user in users:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2432a7f0cbc9279536ee42a44542e0ab89ee8d639161eb412456f4e5dd486544"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 713,
                  "startColumn": 9,
                  "charOffset": 25156,
                  "charLength": 8,
                  "snippet": {
                    "text": "UserList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 711,
                  "startColumn": 1,
                  "charOffset": 25105,
                  "charLength": 121,
                  "snippet": {
                    "text": "            RoleList.append(role.mention)\n\n        UserList = \", \".join(UserList)\n        RoleList = \", \".join(RoleList)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "54626b6c300a9db08ef0980b443f4ff79b1d8d6827b765d0b58fb38a540de1da"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 714,
                  "startColumn": 9,
                  "charOffset": 25195,
                  "charLength": 8,
                  "snippet": {
                    "text": "RoleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 712,
                  "startColumn": 1,
                  "charOffset": 25147,
                  "charLength": 104,
                  "snippet": {
                    "text": "\n        UserList = \", \".join(UserList)\n        RoleList = \", \".join(RoleList)\n\n        embed.add_field("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c285468becc81de571a4e05ee4478ea3dc224e248813eef89f1e6340477d37b0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 739,
                  "startColumn": 9,
                  "charOffset": 26025,
                  "charLength": 12,
                  "snippet": {
                    "text": "ViewResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 737,
                  "startColumn": 1,
                  "charOffset": 25964,
                  "charLength": 202,
                  "snippet": {
                    "text": "        await view.wait()\n        await msg.delete()\n        ViewResponse = str(view.children[0].values)\n        RoleID = self.decodeDict[ViewResponse]\n        await ctx.send(f\"<@&{RoleID}>\\n{message}\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f0c447fd3ad066495fc36d3db270da54dea72c84faf5d6953c9b50350f845ef9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 740,
                  "startColumn": 9,
                  "charOffset": 26077,
                  "charLength": 6,
                  "snippet": {
                    "text": "RoleID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 738,
                  "startColumn": 1,
                  "charOffset": 25990,
                  "charLength": 177,
                  "snippet": {
                    "text": "        await msg.delete()\n        ViewResponse = str(view.children[0].values)\n        RoleID = self.decodeDict[ViewResponse]\n        await ctx.send(f\"<@&{RoleID}>\\n{message}\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "067e45d2d0c212328955f2a390df8a096d631a40a7144e2b80908e93552bf464"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 776,
                  "startColumn": 9,
                  "charOffset": 27663,
                  "charLength": 2,
                  "snippet": {
                    "text": "NE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 774,
                  "startColumn": 1,
                  "charOffset": 27596,
                  "charLength": 178,
                  "snippet": {
                    "text": "    @is_botAdmin\n    async def say(self, ctx, *, message):\n        NE = database.AdminLogging.create(\n            discordID=ctx.author.id, action=\"SAY\", content=message\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "959fd868e7387f87de88fd140870844c4a017f4c8d2b4054634c0ec517902d95"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 804,
                  "startColumn": 9,
                  "charOffset": 28511,
                  "charLength": 2,
                  "snippet": {
                    "text": "NE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 802,
                  "startColumn": 1,
                  "charOffset": 28483,
                  "charLength": 138,
                  "snippet": {
                    "text": "            return\n\n        NE = database.AdminLogging.create(\n            discordID=ctx.author.id, action=\"SAYVC\", content=text\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9e489308757d11b6dd163aea7834a6d14371097060a805a9546408df5e2d21f7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 810,
                  "startColumn": 9,
                  "charOffset": 28711,
                  "charLength": 9,
                  "snippet": {
                    "text": "TTSClient"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 808,
                  "startColumn": 1,
                  "charOffset": 28640,
                  "charLength": 184,
                  "snippet": {
                    "text": "\n        # Lets prepare our text, and then save the audio file\n        TTSClient = texttospeech.TextToSpeechClient(\n            credentials=access_secret(\"ttscreds\", True, 2)\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e028bfaab3a5bd68a9e327b75fe547ec9242033479cc01cd551de1724130f987"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/todocommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 9,
                  "charOffset": 2610,
                  "charLength": 8,
                  "snippet": {
                    "text": "todoList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 2553,
                  "charLength": 184,
                  "snippet": {
                    "text": "        database.db.connect(reuse_if_open=True)\n\n        todoList = []\n        query = database.ToDo.select().where(database.ToDo.discordID == ctx.author.id)\n        for todo in query:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "134876b5a2ae60cf0dddf599445f791d1927d50cb32a2414dc7131cdd2dbbb01"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/todocommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 9,
                  "charOffset": 2807,
                  "charLength": 9,
                  "snippet": {
                    "text": "todoFinal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 1,
                  "charOffset": 2738,
                  "charLength": 129,
                  "snippet": {
                    "text": "            todoList.append(f\"{str(todo.id)}) {todo.item}\")\n\n        todoFinal = \"\\n\".join(todoList)\n\n        database.db.close()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a7f9bdd8d8318fa4952db8dfcc49a5c81dd8d7195e5028635454c5313fedf7b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 15,
                  "charOffset": 1123,
                  "charLength": 7,
                  "snippet": {
                    "text": "Fmodify"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "charOffset": 1067,
                  "charLength": 190,
                  "snippet": {
                    "text": "    @commands.command()\n    @is_botAdmin4\n    async def Fmodify(self, ctx, num: int, val: bool):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1462fbce95695b275ace435f5cf3d043465a951e8490c52657b9280a1e6bd2ad"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 9,
                  "charOffset": 1172,
                  "charLength": 7,
                  "snippet": {
                    "text": "CheckDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1091,
                  "charLength": 224,
                  "snippet": {
                    "text": "    @is_botAdmin4\n    async def Fmodify(self, ctx, num: int, val: bool):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f8717d8bfa8d5761cb4b37b55333a967e946e5a0a876e0f553bc4fec938d383e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 9,
                  "charOffset": 1358,
                  "charLength": 14,
                  "snippet": {
                    "text": "databaseValues"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 1339,
                  "charLength": 117,
                  "snippet": {
                    "text": "        )\n\n        databaseValues = {\n            1: \"CheckDB.MasterMaintenance\",\n            2: \"CheckDB.guildNone\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "20ffa0ac764d2ef47327a1f281cad68b037a70b0d650ef194f70f0b2100a980a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 9,
                  "charOffset": 2544,
                  "charLength": 7,
                  "snippet": {
                    "text": "CheckDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2482,
                  "charLength": 205,
                  "snippet": {
                    "text": "    @filters.command()\n    async def list(self, ctx):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "27e301e249047b561e6ffaa8f37f2747aab8167312f1100abc1826908644d69f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 9,
                  "charOffset": 3805,
                  "charLength": 17,
                  "snippet": {
                    "text": "WhitelistedPrefix"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 1,
                  "charOffset": 3736,
                  "charLength": 227,
                  "snippet": {
                    "text": "    @is_botAdmin3\n    async def delete(self, ctx, num: int):\n        WhitelistedPrefix: database.WhitelistedPrefix = (\n            database.WhitelistedPrefix.select()\n                .where(database.WhitelistedPrefix.id == num)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "64c26ba5560f1ea4ecda00ddfc6eb4bbc79f12afbe820d7bd50d097c0a222fe7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 9,
                  "charOffset": 4206,
                  "charLength": 17,
                  "snippet": {
                    "text": "WhitelistedPrefix"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 4142,
                  "charLength": 167,
                  "snippet": {
                    "text": "    @is_botAdmin3\n    async def add(self, ctx, prefix):\n        WhitelistedPrefix = database.WhitelistedPrefix.create(\n            prefix=prefix, status=True\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ef4a653dbd2b447a22b3f80c3db88bcdbcf1b48c334ec6bf57ca9ad71f9123e8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 9,
                  "charOffset": 4450,
                  "charLength": 8,
                  "snippet": {
                    "text": "PrefixDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 4410,
                  "charLength": 100,
                  "snippet": {
                    "text": "    async def list(self, ctx):\n\n        PrefixDB = database.WhitelistedPrefix\n        response = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d990c265a89cdca42d415db7e3e67e6859bae7d11738c9e42cfbb887ab25ca51"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 17,
                  "charOffset": 4596,
                  "charLength": 12,
                  "snippet": {
                    "text": "statusFilter"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 1,
                  "charOffset": 4542,
                  "charLength": 137,
                  "snippet": {
                    "text": "\n            if entry.status is True:\n                statusFilter = \"ACTIVE\"\n            else:\n                statusFilter = \"DISABLED\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83dd79e52a7fd37afa119ea92c6a6d510ae5e322877f1a402a8ac3a0890a02ed"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 17,
                  "charOffset": 4654,
                  "charLength": 12,
                  "snippet": {
                    "text": "statusFilter"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 1,
                  "charOffset": 4580,
                  "charLength": 188,
                  "snippet": {
                    "text": "                statusFilter = \"ACTIVE\"\n            else:\n                statusFilter = \"DISABLED\"\n\n            response.append(f\"Prefix `{entry.prefix}`:\\n{Emoji.barrow} {statusFilter}\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17f43ac1369a02f829a9906c77d79b1eadb82b234ce64cc89e2a21b7fb791c80"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 9,
                  "charOffset": 8024,
                  "charLength": 7,
                  "snippet": {
                    "text": "hostDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 251,
                  "startColumn": 1,
                  "charOffset": 7995,
                  "charLength": 124,
                  "snippet": {
                    "text": "        output = \"\"\n\n        hostDir = getHostDir()\n        if hostDir == \"/home/timmya\":\n            branch = \"origin/main\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "06a5434198ff073327974d4046ad3e77a03832fdf81245f89eaea0d6282a7e44"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 9,
                  "charOffset": 10060,
                  "charLength": 7,
                  "snippet": {
                    "text": "hostDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 313,
                  "startColumn": 1,
                  "charOffset": 10031,
                  "charLength": 124,
                  "snippet": {
                    "text": "        output = \"\"\n\n        hostDir = getHostDir()\n        if hostDir == \"/home/timmya\":\n            branch = \"origin/main\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dead021a98b4cd8464f1a34d0ccd156f7a8db904d508da919d0ff45d0ad708bf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 9,
                  "charOffset": 12828,
                  "charLength": 9,
                  "snippet": {
                    "text": "adminList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 392,
                  "startColumn": 1,
                  "charOffset": 12772,
                  "charLength": 128,
                  "snippet": {
                    "text": "    @is_botAdmin\n    async def list(self, ctx):\n        adminList = []\n\n        query1 = database.Administrators.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85325ffdbe1316645f1a37f846da5212158c22f7f819f72e97e14c7b9b5a28f0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 9,
                  "charOffset": 13116,
                  "charLength": 11,
                  "snippet": {
                    "text": "adminLEVEL1"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 401,
                  "startColumn": 1,
                  "charOffset": 13045,
                  "charLength": 129,
                  "snippet": {
                    "text": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL1 = \"\\n\".join(adminList)\n\n        adminList = []"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "226970c05bd42d93979900e73601f2465b0a5f3ba0d3ca6abc80c5769b932778"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 9,
                  "charOffset": 13160,
                  "charLength": 9,
                  "snippet": {
                    "text": "adminList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 403,
                  "startColumn": 1,
                  "charOffset": 13108,
                  "charLength": 174,
                  "snippet": {
                    "text": "        adminLEVEL1 = \"\\n\".join(adminList)\n\n        adminList = []\n        query2 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 2"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "afd9b3c1f4cc4e3cb33e68a4188361546c8ed290f80dab436f209cb3f7187e75"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 9,
                  "charOffset": 13447,
                  "charLength": 11,
                  "snippet": {
                    "text": "adminLEVEL2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 411,
                  "startColumn": 1,
                  "charOffset": 13376,
                  "charLength": 129,
                  "snippet": {
                    "text": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL2 = \"\\n\".join(adminList)\n\n        adminList = []"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e18b7a317461bda28ffb51d5da50c1863e9442909a993fd90b04e76b69d426fa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 9,
                  "charOffset": 13491,
                  "charLength": 9,
                  "snippet": {
                    "text": "adminList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 413,
                  "startColumn": 1,
                  "charOffset": 13439,
                  "charLength": 174,
                  "snippet": {
                    "text": "        adminLEVEL2 = \"\\n\".join(adminList)\n\n        adminList = []\n        query3 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 3"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e01c8da8dac68ddc87aca5ea9ebaab49333d2471d9acbb78b281efe62b1f9b98"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 9,
                  "charOffset": 13778,
                  "charLength": 11,
                  "snippet": {
                    "text": "adminLEVEL3"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 421,
                  "startColumn": 1,
                  "charOffset": 13707,
                  "charLength": 129,
                  "snippet": {
                    "text": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL3 = \"\\n\".join(adminList)\n\n        adminList = []"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6ef2da23b82bb2bf60a91e77e348c831e2ab234e60aef0118ba5acbd9feb1e37"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 9,
                  "charOffset": 13822,
                  "charLength": 9,
                  "snippet": {
                    "text": "adminList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 423,
                  "startColumn": 1,
                  "charOffset": 13770,
                  "charLength": 174,
                  "snippet": {
                    "text": "        adminLEVEL3 = \"\\n\".join(adminList)\n\n        adminList = []\n        query4 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 4"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b700072ac29cf2afe437f1e4f9911bb5deb9734732c401cebe8a623e4dad4201"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 433,
                  "startColumn": 9,
                  "charOffset": 14109,
                  "charLength": 11,
                  "snippet": {
                    "text": "adminLEVEL4"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 431,
                  "startColumn": 1,
                  "charOffset": 14038,
                  "charLength": 137,
                  "snippet": {
                    "text": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL4 = \"\\n\".join(adminList)\n\n        embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "baf6cf9c4fc869b0355a22cdf092a13b83d320b9da5ea52ebfb560caac98ef73"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 33,
                  "charOffset": 15012,
                  "charLength": 16,
                  "snippet": {
                    "text": "ID: discord.User"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 454,
                  "startColumn": 1,
                  "charOffset": 14945,
                  "charLength": 134,
                  "snippet": {
                    "text": "    @w.command()\n    @is_botAdmin4\n    async def remove(self, ctx, ID: discord.User):\n        database.db.connect(reuse_if_open=True)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8d410eb833594cb02b6ea3b7a7738eb24032e9b28de172514f5e329bcd9cb3d1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 30,
                  "charOffset": 15909,
                  "charLength": 16,
                  "snippet": {
                    "text": "ID: discord.User"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 484,
                  "startColumn": 1,
                  "charOffset": 15845,
                  "charLength": 143,
                  "snippet": {
                    "text": "    @w.command()\n    @is_botAdmin4\n    async def add(self, ctx, ID: discord.User, level: int):\n        database.db.connect(reuse_if_open=True)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89ac5e7a5827ea9985d438c110314ef1b0b84d207d696c1704a00b71a840cf8d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 13,
                  "charOffset": 17316,
                  "charLength": 9,
                  "snippet": {
                    "text": "runThread"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 528,
                  "startColumn": 1,
                  "charOffset": 17235,
                  "charLength": 158,
                  "snippet": {
                    "text": "            theproc = subprocess.Popen([sys.executable, \"main.py\"])\n\n            runThread = Thread(target=theproc.communicate)\n            runThread.start()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e788e5c4b43bb143670a6873e1b2153da3b23ea61ccc91ec3b3f9732da1d7226"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 9,
                  "charOffset": 1751,
                  "charLength": 7,
                  "snippet": {
                    "text": "HR_Role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 1665,
                  "charLength": 273,
                  "snippet": {
                    "text": "        organizationunit: Literal[\"Personal Account\", \"Team Account\"],\n    ):\n        HR_Role = discord.utils.get(interaction.user.guild.roles, id=HR_ID.r_hrStaff)\n        if HR_Role not in interaction.user.roles:\n            return await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cf9f2b1774fdccb8230ae347724bb7ef8ae438bc02242e7cffe2447888e98c83"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 9,
                  "charOffset": 3417,
                  "charLength": 7,
                  "snippet": {
                    "text": "HR_Role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 1,
                  "charOffset": 3291,
                  "charLength": 308,
                  "snippet": {
                    "text": "    @app_commands.guilds(HR_ID.g_hr)\n    async def delete_gsuite(self, interaction: discord.Interaction, email: str):\n        HR_Role = discord.utils.get(interaction.guild.roles, id=HR_ID.r_hrStaff)\n        if HR_Role not in interaction.user.roles:\n            return await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "18e03e856ebff994d5dad0e3821a24ec3613711106c2758eb12b2d15acd41083"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/RedirectService.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 29,
                  "charOffset": 1173,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 1059,
                  "charLength": 207,
                  "snippet": {
                    "text": "    @commands.command(alliases=[\"redirectremove\", \"removeredirect\"])\n    @is_botAdmin\n    async def rr(self, ctx, ID):\n        self.raOBJ.del_redirect(ID)\n        await ctx.send(f\"Redirect removed for {ID}\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "09499689c056c386fd5180d4720129773ad27badb5505f6a835ab5a1798f8b5e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 15,
                  "charOffset": 3551,
                  "charLength": 9,
                  "snippet": {
                    "text": "techEmbed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 3496,
                  "charLength": 188,
                  "snippet": {
                    "text": "    @commands.command()\n    @is_botAdmin\n    async def techEmbed(self, ctx):\n        embed = discord.Embed(\n            title=\"Bot Developer Commissions\", color=discord.Color.brand_green()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c7c956b3d5e23da5580dbe807ec419efbc4166b304e200891910df6cc5b017ff"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 15,
                  "charOffset": 4391,
                  "charLength": 11,
                  "snippet": {
                    "text": "closeThread"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 130,
                  "startColumn": 1,
                  "charOffset": 4352,
                  "charLength": 204,
                  "snippet": {
                    "text": "\n    @commands.command()\n    async def closeThread(self, ctx: commands.Context):\n        channel: discord.TextChannel = self.bot.get_channel(TECH_ID.ch_botreq)\n        thread: discord.Thread = ctx.channel"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "959f017fc9cf0c24dbe34de2169d475993e0d5f97b80dbe5cfabcb6b7273d79e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 15,
                  "charOffset": 4896,
                  "charLength": 10,
                  "snippet": {
                    "text": "openThread"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 1,
                  "charOffset": 4857,
                  "charLength": 203,
                  "snippet": {
                    "text": "\n    @commands.command()\n    async def openThread(self, ctx: commands.Context):\n        channel: discord.TextChannel = self.bot.get_channel(TECH_ID.ch_botreq)\n        thread: discord.Thread = ctx.channel"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f835b528c9976352be9faee5f110dd3a352acfb100a629317c189835d855f9d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 15,
                  "charOffset": 5605,
                  "charLength": 19,
                  "snippet": {
                    "text": "autoUnarchiveThread"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 5560,
                  "charLength": 179,
                  "snippet": {
                    "text": "\n    @tasks.loop(seconds=60.0)\n    async def autoUnarchiveThread(self):\n        \"\"\"\n        Creates a task loop to make sure threads don't automatically archive due to inactivity."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8092a3407a814acb6f3b6439aea121d851a716089c8fae3c6bec2ad19c665132"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 5,
                  "charOffset": 672,
                  "charLength": 14,
                  "snippet": {
                    "text": "showFutureTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 666,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "35b6bb5914c9cfd8adfd9a5e1706dc8dca842953777f7929e5c14c5ddc7c4fdd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 5,
                  "charOffset": 953,
                  "charLength": 16,
                  "snippet": {
                    "text": "showTotalMinutes"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 947,
                  "charLength": 71,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b229beebff5eeb26f49c4dd6ba1e556f7d5609bb3017549322000fd3bf9c8022"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 22,
                  "charOffset": 970,
                  "charLength": 17,
                  "snippet": {
                    "text": "dateObj: datetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 947,
                  "charLength": 71,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bd60cd5ae665eb92f16d484ecfc25d4dba96c8b14525c0b32958ac4589ac3200"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 5,
                  "charOffset": 1023,
                  "charLength": 9,
                  "snippet": {
                    "text": "deltaTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "charOffset": 990,
                  "charLength": 110,
                  "snippet": {
                    "text": "    now = datetime.now(EST)\n\n    deltaTime = now - dateObj\n\n    minutes = str(deltaTime.total_seconds() // 60)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c91483b385bd8b4d0ab235f873de52cccd5b56c837b04018a3ce8ede2c93a7d2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 21,
                  "charOffset": 7278,
                  "charLength": 12,
                  "snippet": {
                    "text": "SelectedGame"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 230,
                  "startColumn": 1,
                  "charOffset": 7182,
                  "charLength": 223,
                  "snippet": {
                    "text": "                timeout = await view.wait()\n                if not timeout:\n                    SelectedGame = var.view_response\n                else:\n                    return await ctx.send(\"Timed out, try again later.\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d6d949e374cad0e8206b95a131c521d38f6f3a13825414bca076e81bd79af6b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 17,
                  "charOffset": 7422,
                  "charLength": 6,
                  "snippet": {
                    "text": "GameID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 233,
                  "startColumn": 1,
                  "charOffset": 7311,
                  "charLength": 267,
                  "snippet": {
                    "text": "                else:\n                    return await ctx.send(\"Timed out, try again later.\")\n                GameID = GameDict[SelectedGame]\n                code = str(await self._create_invite(ctx.author.voice, GameID))\n                await ctx.send(\"Loading...\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "daae979964259a3f591b3844ebde5d31bbb966966f98990be0d96f53ddb44b0b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 21,
                  "charOffset": 9968,
                  "charLength": 12,
                  "snippet": {
                    "text": "SelectedGame"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 289,
                  "startColumn": 1,
                  "charOffset": 9872,
                  "charLength": 223,
                  "snippet": {
                    "text": "                timeout = await view.wait()\n                if not timeout:\n                    SelectedGame = var.view_response\n                else:\n                    return await ctx.send(\"Timed out, try again later.\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "11ef3bddb28a135078f04b0d591842dcf822f679e394c0bf407e9b158c50d4eb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 17,
                  "charOffset": 10148,
                  "charLength": 6,
                  "snippet": {
                    "text": "GameID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 293,
                  "startColumn": 1,
                  "charOffset": 10023,
                  "charLength": 333,
                  "snippet": {
                    "text": "                    return await ctx.send(\"Timed out, try again later.\")\n                print(SelectedGame)\n                GameID = GameDict[SelectedGame]\n                code = str(await self._create_invite(ctx.author.voice, GameID))\n                await ctx.send(f\"**Click the link to get started!**\\nhttps://discord.gg/{code}\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2538f27ad943e5f9a7d5d3cab4181ce4bfdc12a412e1f996413f3b0d7fdeb06"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 17,
                  "charOffset": 11742,
                  "charLength": 8,
                  "snippet": {
                    "text": "GameLink"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 329,
                  "startColumn": 1,
                  "charOffset": 11667,
                  "charLength": 230,
                  "snippet": {
                    "text": "                    int(query.ChannelID)\n                )\n                GameLink = str(await channel.create_activity_invite(880218394199220334))\n                await ctx.send(f\"**Click the link to get started!**\\n{GameLink}\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "51edfa311fd807ce8ef889cd356915755e57b0161dd03b502d2757cfe6396312"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 17,
                  "charOffset": 13698,
                  "charLength": 8,
                  "snippet": {
                    "text": "GameLink"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 372,
                  "startColumn": 1,
                  "charOffset": 13663,
                  "charLength": 190,
                  "snippet": {
                    "text": "                )\n\n                GameLink = str(await channel.create_activity_invite(880218394199220334))\n                await ctx.send(f\"**Click the link to get started!**\\n{GameLink}\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a66eed019ae52bf913430b062a8b85a6653324faf906b978a973ba0295add616"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 9,
                  "charOffset": 14458,
                  "charLength": 2,
                  "snippet": {
                    "text": "SB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 389,
                  "startColumn": 1,
                  "charOffset": 14355,
                  "charLength": 227,
                  "snippet": {
                    "text": "    async def rename(self, ctx, *, name=None):\n        database.db.connect(reuse_if_open=True)\n        SB = discord.utils.get(ctx.guild.roles, name=self.SB)\n        legend = discord.utils.get(ctx.guild.roles, name=self.Legend)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dc86cd6b4823157b420b7a9308bc0a942de8766f11d60161c05edf1899bdb107"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 9,
                  "charOffset": 14591,
                  "charLength": 2,
                  "snippet": {
                    "text": "MT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 392,
                  "startColumn": 1,
                  "charOffset": 14512,
                  "charLength": 259,
                  "snippet": {
                    "text": "        legend = discord.utils.get(ctx.guild.roles, name=self.Legend)\n\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d446d83d36929206ccee4b11623b9edd036e640599e71423f7947cd094758c6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 9,
                  "charOffset": 14654,
                  "charLength": 3,
                  "snippet": {
                    "text": "MAT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 393,
                  "startColumn": 1,
                  "charOffset": 14582,
                  "charLength": 251,
                  "snippet": {
                    "text": "\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5029f68ed1f4bd1ad6e94352d418e98bf58743fa0b7f4853542fdc259f155c9a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 9,
                  "charOffset": 14718,
                  "charLength": 2,
                  "snippet": {
                    "text": "TT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 394,
                  "startColumn": 1,
                  "charOffset": 14583,
                  "charLength": 312,
                  "snippet": {
                    "text": "        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "954ecc0fce10a79539268ea5b6f163518ddd4f3b51026ac5cf3a1fb3131de8d3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 9,
                  "charOffset": 14780,
                  "charLength": 2,
                  "snippet": {
                    "text": "AT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 395,
                  "startColumn": 1,
                  "charOffset": 14646,
                  "charLength": 311,
                  "snippet": {
                    "text": "        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d6d7f670abea859425800518526d95b644642b3ca4cdd21f6291b567a87595d5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 9,
                  "charOffset": 14842,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 396,
                  "startColumn": 1,
                  "charOffset": 14710,
                  "charLength": 248,
                  "snippet": {
                    "text": "        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4b75b942f2dd2cf9f4959a3ab393c49107e8ad14516f4c637fc4182678ef2d35"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 9,
                  "charOffset": 14904,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 397,
                  "startColumn": 1,
                  "charOffset": 14772,
                  "charLength": 252,
                  "snippet": {
                    "text": "        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7725f2dab799a1bd9a6d47fb64f49d57c567b445a0ac2375675e7aae121edae5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 9,
                  "charOffset": 14967,
                  "charLength": 4,
                  "snippet": {
                    "text": "L120"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 399,
                  "startColumn": 1,
                  "charOffset": 14896,
                  "charLength": 260,
                  "snippet": {
                    "text": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "42cc9abaaab2a15216dbb96f05a40392848a3d1e4a8cdbb2e4070599baed66e2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 9,
                  "charOffset": 15033,
                  "charLength": 4,
                  "snippet": {
                    "text": "L110"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 400,
                  "startColumn": 1,
                  "charOffset": 14958,
                  "charLength": 262,
                  "snippet": {
                    "text": "\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85a10e4dd1319ba08691bc7cd587c84c084738775947feac019f7ddd98a9339b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 9,
                  "charOffset": 15099,
                  "charLength": 4,
                  "snippet": {
                    "text": "L100"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 401,
                  "startColumn": 1,
                  "charOffset": 14959,
                  "charLength": 325,
                  "snippet": {
                    "text": "        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5419d84677934d895f073dd23d6c7e0e379f0b9c223b276f167e9315137e477a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 9,
                  "charOffset": 15165,
                  "charLength": 3,
                  "snippet": {
                    "text": "L90"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 402,
                  "startColumn": 1,
                  "charOffset": 15025,
                  "charLength": 323,
                  "snippet": {
                    "text": "        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "97cb105606ed238ba14656e2f91cf3973d80aa0fc84a412cf792edf3c020440b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 9,
                  "charOffset": 15229,
                  "charLength": 3,
                  "snippet": {
                    "text": "L80"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 403,
                  "startColumn": 1,
                  "charOffset": 15091,
                  "charLength": 321,
                  "snippet": {
                    "text": "        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ce339f915c0bbb7d4c58b97f288f1c78d5348cc2c02bfb05dbfc349a57e38478"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 9,
                  "charOffset": 15293,
                  "charLength": 3,
                  "snippet": {
                    "text": "L70"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 404,
                  "startColumn": 1,
                  "charOffset": 15157,
                  "charLength": 319,
                  "snippet": {
                    "text": "        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5948a3fcb2e042e09a33d7ab2e7c311b8a02b31a6dd7fc7e5aff1b40c7defab6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 407,
                  "startColumn": 9,
                  "charOffset": 15357,
                  "charLength": 3,
                  "snippet": {
                    "text": "L60"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 405,
                  "startColumn": 1,
                  "charOffset": 15221,
                  "charLength": 319,
                  "snippet": {
                    "text": "        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f00ed02d7104d3674df4bbcf84bfe3fff916bc4f62cb2fecae063eb15d510c5f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 9,
                  "charOffset": 15421,
                  "charLength": 3,
                  "snippet": {
                    "text": "L50"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 406,
                  "startColumn": 1,
                  "charOffset": 15285,
                  "charLength": 256,
                  "snippet": {
                    "text": "        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "592616e65ba2f28616bcc22176373ef5d8a6050a1b6e929268bf1c1c669931b8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 9,
                  "charOffset": 15485,
                  "charLength": 3,
                  "snippet": {
                    "text": "L40"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 407,
                  "startColumn": 1,
                  "charOffset": 15349,
                  "charLength": 213,
                  "snippet": {
                    "text": "        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n\n        roleList = ["
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7029fcff7bb0fd8e3ecb555f7e4109fdf4d7afe611db42dd777a0a47d7bdc59d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 9,
                  "charOffset": 15550,
                  "charLength": 8,
                  "snippet": {
                    "text": "roleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 409,
                  "startColumn": 1,
                  "charOffset": 15477,
                  "charLength": 117,
                  "snippet": {
                    "text": "        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n\n        roleList = [\n            SB,\n            AT,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7ee3a21210148f52c36183190c0248b2f2df84504d57bdc4d3fdc92141560a21"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 563,
                  "startColumn": 17,
                  "charOffset": 21543,
                  "charLength": 10,
                  "snippet": {
                    "text": "VCDatetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 561,
                  "startColumn": 1,
                  "charOffset": 21454,
                  "charLength": 201,
                  "snippet": {
                    "text": "                )\n                print(f\"T: {query.TutorBotSessionID}\")\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(\n                    query.datetimeObj\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f1a2b9e8ff197c575aac67a369de461cd0afb1c7883ed0eced99df9819c02e6e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 17,
                  "charOffset": 21729,
                  "charLength": 6,
                  "snippet": {
                    "text": "daySTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 566,
                  "startColumn": 1,
                  "charOffset": 21656,
                  "charLength": 186,
                  "snippet": {
                    "text": "\n                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb2e6a85fe869b4ec3d5cde9dc67bf6eeb42c687bb6f6a31c354e951c329e1df"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 17,
                  "charOffset": 21782,
                  "charLength": 6,
                  "snippet": {
                    "text": "nowSTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 567,
                  "startColumn": 1,
                  "charOffset": 21657,
                  "charLength": 186,
                  "snippet": {
                    "text": "                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "430bc12a2d13fea4e815ce3b62ca4488308a25f88ab6fd6add397a7f2406c108"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 17,
                  "charOffset": 22604,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 586,
                  "startColumn": 1,
                  "charOffset": 22540,
                  "charLength": 223,
                  "snippet": {
                    "text": "\n                print(query.TutorBotSessionID)\n                tutorSession = database.TutorBot_Sessions.select().where(\n                    database.TutorBot_Sessions.SessionID == query.TutorBotSessionID\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "713ca0fad2c25b2d36ed333307c5a9b6ed11e944fe76a4e3054e95c70a485538"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 595,
                  "startColumn": 21,
                  "charOffset": 22868,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 593,
                  "startColumn": 1,
                  "charOffset": 22805,
                  "charLength": 169,
                  "snippet": {
                    "text": "\n                if tutorSession.exists():\n                    tutorSession = tutorSession.get()\n\n                    student = self.bot.get_user(tutorSession.StudentID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "38f8ac785af7cd00803b69077c5186ef4e011fb77404f27c86da94bfc2dbda9f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 600,
                  "startColumn": 21,
                  "charOffset": 23064,
                  "charLength": 6,
                  "snippet": {
                    "text": "HOURCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 598,
                  "startColumn": 1,
                  "charOffset": 22975,
                  "charLength": 181,
                  "snippet": {
                    "text": "                    tutor = self.bot.get_user(tutorSession.TutorID)\n\n                    HOURCH = self.bot.get_channel(self.TutorLogID)\n\n                    hourlog = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1d77a4c48d71a79f9bd156e2ed0f0715d3de9a29070a533ae354367f59ac27b5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 667,
                  "startColumn": 17,
                  "charOffset": 26018,
                  "charLength": 10,
                  "snippet": {
                    "text": "VCDatetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 665,
                  "startColumn": 1,
                  "charOffset": 25957,
                  "charLength": 188,
                  "snippet": {
                    "text": "                )\n                tag.save()\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(q.datetimeObj)\n\n                day, now = showTotalMinutes(VCDatetime)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3a9eb0f8eb161481a397b22e9a9cfb06a696a61768c1a6553ca6619311d5245c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 670,
                  "startColumn": 17,
                  "charOffset": 26162,
                  "charLength": 6,
                  "snippet": {
                    "text": "daySTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 668,
                  "startColumn": 1,
                  "charOffset": 26089,
                  "charLength": 186,
                  "snippet": {
                    "text": "\n                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fbb84fe0424abb12b31c328d647722bfa99a31a444f9bbe74b4f9511125f8fd1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 671,
                  "startColumn": 17,
                  "charOffset": 26215,
                  "charLength": 6,
                  "snippet": {
                    "text": "nowSTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 669,
                  "startColumn": 1,
                  "charOffset": 26090,
                  "charLength": 186,
                  "snippet": {
                    "text": "                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f00b5e724532fec1291327097ee44dabeb44ac8ab8e8d27bec898feddf4b06b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 688,
                  "startColumn": 17,
                  "charOffset": 26959,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 686,
                  "startColumn": 1,
                  "charOffset": 26899,
                  "charLength": 215,
                  "snippet": {
                    "text": "\n                print(q.TutorBotSessionID)\n                tutorSession = database.TutorBot_Sessions.select().where(\n                    database.TutorBot_Sessions.SessionID == q.TutorBotSessionID\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b92fcfaf7fd8e281b8d8775c0a272063e9df77e96e7e813e7dcae59c31dfaf5c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 692,
                  "startColumn": 21,
                  "charOffset": 27177,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 690,
                  "startColumn": 1,
                  "charOffset": 27097,
                  "charLength": 186,
                  "snippet": {
                    "text": "                )\n                if tutorSession.exists():\n                    tutorSession = tutorSession.get()\n\n                    student = self.bot.get_user(tutorSession.StudentID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "658eae6b037412d5cef8188efbc6080705ea497db7ab6e0dbbe2263f0ce49310"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 697,
                  "startColumn": 21,
                  "charOffset": 27373,
                  "charLength": 6,
                  "snippet": {
                    "text": "HOURCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 695,
                  "startColumn": 1,
                  "charOffset": 27284,
                  "charLength": 178,
                  "snippet": {
                    "text": "                    tutor = self.bot.get_user(tutorSession.TutorID)\n\n                    HOURCH = self.bot.get_user(self.TutorLogID)\n\n                    hourlog = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1425fe76dcf16ff8afa6358a9fae283c0a48391b63e71af3001a6ff26c8b2b75"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 817,
                  "startColumn": 17,
                  "charOffset": 32601,
                  "charLength": 10,
                  "snippet": {
                    "text": "VCDatetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 815,
                  "startColumn": 1,
                  "charOffset": 32540,
                  "charLength": 188,
                  "snippet": {
                    "text": "                    .get()\n                )\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(q.datetimeObj)\n\n                day, now = showTotalMinutes(VCDatetime)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c73d98c54cb6b9175f4245bb7dd6e21b5f76e7360a298bee9e66f29a7eeee49"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 873,
                  "startColumn": 9,
                  "charOffset": 34899,
                  "charLength": 3,
                  "snippet": {
                    "text": "BOT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 871,
                  "startColumn": 1,
                  "charOffset": 34837,
                  "charLength": 223,
                  "snippet": {
                    "text": "        member = ctx.guild.get_member(ctx.author.id)\n\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0fd9a21fc025843333a63a69c30f883629bcc52796a5e9ab0eaed9c447734f08"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 874,
                  "startColumn": 9,
                  "charOffset": 34952,
                  "charLength": 5,
                  "snippet": {
                    "text": "OWNER"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 872,
                  "startColumn": 1,
                  "charOffset": 34890,
                  "charLength": 234,
                  "snippet": {
                    "text": "\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7b98869c60046e65f21d222e2a62ee8d5640d4e6d0c1e974238b90dcfa488220"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 875,
                  "startColumn": 9,
                  "charOffset": 35003,
                  "charLength": 4,
                  "snippet": {
                    "text": "TMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 873,
                  "startColumn": 1,
                  "charOffset": 34891,
                  "charLength": 299,
                  "snippet": {
                    "text": "        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8497b85a91ed0a6ab1b4984c1472326e58749df60c032a1062df1d788144db86"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 876,
                  "startColumn": 9,
                  "charOffset": 35069,
                  "charLength": 3,
                  "snippet": {
                    "text": "MOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 874,
                  "startColumn": 1,
                  "charOffset": 34944,
                  "charLength": 308,
                  "snippet": {
                    "text": "        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e26c36c5859afa677ec5acbccae2686b306f6a610ebc34e719dd3d27d2a7af7e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 877,
                  "startColumn": 9,
                  "charOffset": 35133,
                  "charLength": 4,
                  "snippet": {
                    "text": "SMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 875,
                  "startColumn": 1,
                  "charOffset": 34995,
                  "charLength": 319,
                  "snippet": {
                    "text": "        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5152040e9e497ac43a77368f49c067ddcff60a97ea7fdc4d469a5aa0f82d0e83"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 878,
                  "startColumn": 9,
                  "charOffset": 35199,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 876,
                  "startColumn": 1,
                  "charOffset": 35061,
                  "charLength": 315,
                  "snippet": {
                    "text": "        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0f75d065dc4a8e4aa8f976263ca8e44b7dccbdfac97052d39093dcb08f1e3ec7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 879,
                  "startColumn": 9,
                  "charOffset": 35261,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 877,
                  "startColumn": 1,
                  "charOffset": 35125,
                  "charLength": 252,
                  "snippet": {
                    "text": "        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "18f1b2f28bc0416631cdd3fe0e564d012ee9f2f480c302d5537d60ecf727ab32"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 880,
                  "startColumn": 9,
                  "charOffset": 35323,
                  "charLength": 2,
                  "snippet": {
                    "text": "ST"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 878,
                  "startColumn": 1,
                  "charOffset": 35191,
                  "charLength": 259,
                  "snippet": {
                    "text": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f5110b781cd7e5738aa8d1aaf1bc8637028db02ddadeac171115673c59b0640"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 882,
                  "startColumn": 9,
                  "charOffset": 35386,
                  "charLength": 2,
                  "snippet": {
                    "text": "SE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 880,
                  "startColumn": 1,
                  "charOffset": 35315,
                  "charLength": 269,
                  "snippet": {
                    "text": "        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "048f30514303e7a0a335006d5bb627bf79a7b6747622d983da8a704e79fcbd74"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 883,
                  "startColumn": 9,
                  "charOffset": 35459,
                  "charLength": 2,
                  "snippet": {
                    "text": "BM"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 881,
                  "startColumn": 1,
                  "charOffset": 35377,
                  "charLength": 242,
                  "snippet": {
                    "text": "\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")\n        roles = [BM, SE, E, OWNER]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a4de3ab73fad898b12cb5fd2d1b03eebe9859e30a4cb8d644c6b6afbc5a1532"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 884,
                  "startColumn": 9,
                  "charOffset": 35528,
                  "charLength": 1,
                  "snippet": {
                    "text": "E"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 882,
                  "startColumn": 1,
                  "charOffset": 35378,
                  "charLength": 242,
                  "snippet": {
                    "text": "        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")\n        roles = [BM, SE, E, OWNER]\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4d840599f4551bd84c1741c09c7d2b079e157c6f8e9c6641938977bd16ae64d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 916,
                  "startColumn": 21,
                  "charOffset": 36920,
                  "charLength": 4,
                  "snippet": {
                    "text": "LOCK"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 914,
                  "startColumn": 1,
                  "charOffset": 36864,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n                if query.exists():\n                    LOCK: database.VCChannelInfo = (\n                        database.VCChannelInfo.select()\n                        .where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "22ea71bda43f900ef1b925b05ae4545d0b5966b132f71b3577d7df7a03804805"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 995,
                  "startColumn": 9,
                  "charOffset": 40603,
                  "charLength": 2,
                  "snippet": {
                    "text": "TR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 993,
                  "startColumn": 1,
                  "charOffset": 40525,
                  "charLength": 214,
                  "snippet": {
                    "text": "    @commands.command()\n    async def settutor(self, ctx, tutorcode):\n        TR = discord.utils.get(ctx.guild.roles, name=self.TutorRole)\n\n        if TR not in ctx.author.roles or ctx.guild.id == STAFF_ID.g_staff:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "39d8e7c380148e1a7cb34e4fa12195e6c6858fca42d1ce164a8fa2e0ea6b21df"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1012,
                  "startColumn": 13,
                  "charOffset": 41281,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1010,
                  "startColumn": 1,
                  "charOffset": 41217,
                  "charLength": 201,
                  "snippet": {
                    "text": "                return await ctx.send(embed=embed)\n\n            tutorSession = database.TutorBot_Sessions.select().where(\n                database.TutorBot_Sessions.SessionID == tutorcode\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59dcb80eea690150166e83d6b940b8babde36a934a4d13df212893df88d532bb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1016,
                  "startColumn": 17,
                  "charOffset": 41473,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1014,
                  "startColumn": 1,
                  "charOffset": 41405,
                  "charLength": 174,
                  "snippet": {
                    "text": "            )\n            if tutorSession.exists():\n                tutorSession = tutorSession.get()\n                if member.voice.channel.category_id in self.categoryID:\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4f478825e3e3a0931e0c4e612556527a4b8a09a660617bbdfaf63a15f8676301"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1104,
                  "startColumn": 21,
                  "charOffset": 45658,
                  "charLength": 4,
                  "snippet": {
                    "text": "LOCK"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1102,
                  "startColumn": 1,
                  "charOffset": 45602,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n                if query.exists():\n                    LOCK: database.VCChannelInfo = (\n                        database.VCChannelInfo.select()\n                        .where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71862d58017e559674b56a31a9c2e9bc79a7845573963d2a08512af51805fe54"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1184,
                  "startColumn": 33,
                  "charOffset": 49249,
                  "charLength": 10,
                  "snippet": {
                    "text": "typeAction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1182,
                  "startColumn": 1,
                  "charOffset": 49138,
                  "charLength": 253,
                  "snippet": {
                    "text": "    @commands.command()\n    @commands.cooldown(1, 5, commands.BucketType.user)\n    async def permit(self, ctx, typeAction, user: discord.Member = None):\n        database.db.connect(reuse_if_open=True)\n        member = ctx.guild.get_member(ctx.author.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d834eef5df25fae7cc020129ef54276c197abe738a030e43771cfe58eb44b7c6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1284,
                  "startColumn": 29,
                  "charOffset": 54131,
                  "charLength": 9,
                  "snippet": {
                    "text": "formatVer"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1282,
                  "startColumn": 1,
                  "charOffset": 54032,
                  "charLength": 184,
                  "snippet": {
                    "text": "                                    randomlist.append(x.display_name)\n\n                            formatVer = \"\\n\".join(randomlist)\n\n                            embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2e964b81e169162e24927fa78f4b3d64699c0c5fe016a31f221fd9263377b45d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1359,
                  "startColumn": 9,
                  "charOffset": 58021,
                  "charLength": 2,
                  "snippet": {
                    "text": "MT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1357,
                  "startColumn": 1,
                  "charOffset": 57959,
                  "charLength": 242,
                  "snippet": {
                    "text": "        member = ctx.guild.get_member(ctx.author.id)\n\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "45f4b42f08a840c2a309380e2424cae2cc7d09ccdd61f0114de67fea3d4fdb09"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1360,
                  "startColumn": 9,
                  "charOffset": 58084,
                  "charLength": 3,
                  "snippet": {
                    "text": "MAT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1358,
                  "startColumn": 1,
                  "charOffset": 58012,
                  "charLength": 251,
                  "snippet": {
                    "text": "\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4f3a0300a2ff7249aa5d2d40edfa3e27de2487df2cd6bfab849b6c6e6c673b51"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1361,
                  "startColumn": 9,
                  "charOffset": 58148,
                  "charLength": 2,
                  "snippet": {
                    "text": "TT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1359,
                  "startColumn": 1,
                  "charOffset": 58013,
                  "charLength": 312,
                  "snippet": {
                    "text": "        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "724ab99938be184a3d2912d249e50e80ae85292a2b7a67a405de52666fe15c77"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1362,
                  "startColumn": 9,
                  "charOffset": 58210,
                  "charLength": 2,
                  "snippet": {
                    "text": "AT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1360,
                  "startColumn": 1,
                  "charOffset": 58076,
                  "charLength": 311,
                  "snippet": {
                    "text": "        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8450e0cebeb2104c404bd379b9e9717584f51d0b99640a8bbab1579dbfe1752"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1363,
                  "startColumn": 9,
                  "charOffset": 58272,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1361,
                  "startColumn": 1,
                  "charOffset": 58140,
                  "charLength": 248,
                  "snippet": {
                    "text": "        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c06ad6e8cb5683e0f30c8b1dedeed875abcccc0424a0854003aa21d501e56c8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1364,
                  "startColumn": 9,
                  "charOffset": 58334,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1362,
                  "startColumn": 1,
                  "charOffset": 58202,
                  "charLength": 231,
                  "snippet": {
                    "text": "        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        roleList = [MT, MAT, TT, AT, VP, CO]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d953e8ba5cec1f977ca8118ed48752349319550987f7c20a1cb4ef05fd01846"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1366,
                  "startColumn": 9,
                  "charOffset": 58397,
                  "charLength": 8,
                  "snippet": {
                    "text": "roleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1364,
                  "startColumn": 1,
                  "charOffset": 58326,
                  "charLength": 143,
                  "snippet": {
                    "text": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        roleList = [MT, MAT, TT, AT, VP, CO]\n\n        voice_state = member.voice"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f61858fb5b387ca527e04ba26583fc2aeed580dadcb85b0eaac5cacbb86adb50"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1398,
                  "startColumn": 25,
                  "charOffset": 59773,
                  "charLength": 10,
                  "snippet": {
                    "text": "voiceLIMIT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1396,
                  "startColumn": 1,
                  "charOffset": 59689,
                  "charLength": 228,
                  "snippet": {
                    "text": "                if query.exists():\n                    try:\n                        voiceLIMIT = int(new_voice_limit)\n                    except:\n                        return await ctx.send(f\"{Emoji.deny} Not a valid number!\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dbe52e1b981819ff7dad3712195fd10af7db501f46f4b13534c23f5701fd34f5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1555,
                  "startColumn": 15,
                  "charOffset": 67296,
                  "charLength": 7,
                  "snippet": {
                    "text": "startVC"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1553,
                  "startColumn": 1,
                  "charOffset": 67240,
                  "charLength": 144,
                  "snippet": {
                    "text": "\n    @commands.command(aliases=[\"start\"])\n    async def startVC(self, ctx):\n        embed = discord.Embed(\n            title=\"Private Channels\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e46ab637f812fdb356a21fb5f656d3b214e66db1bdb6813368580eed9502ff66"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 5,
                  "charOffset": 571,
                  "charLength": 14,
                  "snippet": {
                    "text": "showFutureTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 565,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c12a75dee80fd934e6b1bb6a977016d2d53152b7a987b36a73d1dca83a0c208e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 5,
                  "charOffset": 829,
                  "charLength": 16,
                  "snippet": {
                    "text": "showTotalMinutes"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 823,
                  "charLength": 71,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6e8928b4a05ae71f66f301b7b203ebc66f682224c9ce5ed67ce3b9edd60c65c6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 22,
                  "charOffset": 846,
                  "charLength": 17,
                  "snippet": {
                    "text": "dateObj: datetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 823,
                  "charLength": 71,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a7468d0c1b1f87a935718b5384b2d19c0f5879d925f20d7e1c287c27fa98365"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 5,
                  "charOffset": 899,
                  "charLength": 9,
                  "snippet": {
                    "text": "deltaTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 866,
                  "charLength": 106,
                  "snippet": {
                    "text": "    now = datetime.now(EST)\n\n    deltaTime = now - dateObj\n\n    totalmin = deltaTime.total_seconds() // 60"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "42d1837afc461570025044c8700c7af4b27751752e8ec30199e1e2fa672a6c97"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 5,
                  "charOffset": 1005,
                  "charLength": 12,
                  "snippet": {
                    "text": "getConsoleCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 999,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f5123e5f4781d23c7ce815e765fa132561ad945f3f48bf07fce8e8849c37b9e4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 5,
                  "charOffset": 1158,
                  "charLength": 10,
                  "snippet": {
                    "text": "ColumnDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1064,
                  "charLength": 164,
                  "snippet": {
                    "text": "        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n    )\n    ColumnDict = {\n        0: q.ch_tv_console,\n        1: q.ch_tv_startvc,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "128fcfd27d21a508a7f9deb748b099c87b4bd595e33e36a14d3b7416bb77d24f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 9,
                  "charOffset": 3305,
                  "charLength": 10,
                  "snippet": {
                    "text": "lobbyStart"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "charOffset": 3198,
                  "charLength": 229,
                  "snippet": {
                    "text": "        database.db.connect(reuse_if_open=True)\n        print(self.LobbyStartIDs[member.guild.id])\n        lobbyStart = member.guild.get_channel(self.LobbyStartIDs[member.guild.id])\n        if lobbyStart == None:\n            try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ccc52d3c1b3f967ada2f938b99666f0a4ddb3f3cf4ea3be18087733971e8c528"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 17,
                  "charOffset": 3444,
                  "charLength": 10,
                  "snippet": {
                    "text": "lobbyStart"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 3380,
                  "charLength": 172,
                  "snippet": {
                    "text": "        if lobbyStart == None:\n            try:\n                lobbyStart = self.bot.get_channel(\n                    self.LobbyStartIDs[member.guild.id]\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "572f95cbe2160032f982ebc6f3faf4aef8758e4136c5ed4a2345bef3a65130ca"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 13,
                  "charOffset": 3952,
                  "charLength": 11,
                  "snippet": {
                    "text": "acadChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 145,
                  "startColumn": 1,
                  "charOffset": 3928,
                  "charLength": 214,
                  "snippet": {
                    "text": "        ):\n\n            acadChannel = self.bot.get_channel(self.channel_id[member.guild.id])\n            query = database.VCChannelInfo.select().where(\n                (database.VCChannelInfo.authorID == member.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1901027ef3fff00896917f80cfab703345caf27c32a8091746efe6a4bcadebab"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 13,
                  "charOffset": 4321,
                  "charLength": 11,
                  "snippet": {
                    "text": "ignoreQuery"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 4217,
                  "charLength": 284,
                  "snippet": {
                    "text": "                & (database.VCChannelInfo.GuildID == before.channel.guild.id)\n            )\n            ignoreQuery = database.IgnoreThis.select().where(\n                (database.IgnoreThis.authorID == member.id)\n                & (database.IgnoreThis.channelID == before.channel.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "52623e4af2f35f9e5e91637ab5651be3ea7433fb2f664fb82d0d4b011b8b8105"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 21,
                  "charOffset": 5667,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 181,
                  "startColumn": 1,
                  "charOffset": 5608,
                  "charLength": 180,
                  "snippet": {
                    "text": "                )\n                try:\n                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e1b8f0abddad5d359d369be90c68760023b19e4d2a7c0d199f08da87eebde7ae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 21,
                  "charOffset": 5769,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 5647,
                  "charLength": 204,
                  "snippet": {
                    "text": "                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None\n\n                if query.ChannelID == str(before.channel.id):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "12f2d72899a655f14e2be1d90f0ecd26412a354e780d5ba9fb43be2072cb788c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 29,
                  "charOffset": 8650,
                  "charLength": 10,
                  "snippet": {
                    "text": "VCDatetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 242,
                  "startColumn": 1,
                  "charOffset": 8553,
                  "charLength": 233,
                  "snippet": {
                    "text": "                                .get()\n                            )\n                            VCDatetime = pytz.timezone(\"America/New_York\").localize(\n                                query.datetimeObj\n                            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a48eeb69e253a39328547480e1e13002a0425e19a948421231c485bbd5c2fd4d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 29,
                  "charOffset": 8884,
                  "charLength": 6,
                  "snippet": {
                    "text": "daySTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 247,
                  "startColumn": 1,
                  "charOffset": 8787,
                  "charLength": 192,
                  "snippet": {
                    "text": "\n                            day, now = showTotalMinutes(VCDatetime)\n                            daySTR = int(VCDatetime.timestamp())\n                            nowSTR = int(now.timestamp())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "81370e173aee683a40bb09abc0f3666f552d845be8916a7418bea35b6da7262b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 29,
                  "charOffset": 8949,
                  "charLength": 6,
                  "snippet": {
                    "text": "nowSTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 248,
                  "startColumn": 1,
                  "charOffset": 8788,
                  "charLength": 243,
                  "snippet": {
                    "text": "                            day, now = showTotalMinutes(VCDatetime)\n                            daySTR = int(VCDatetime.timestamp())\n                            nowSTR = int(now.timestamp())\n\n                            query.delete_instance()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "25d94eabe217b4ff0cfeab7a5742d971316498d9b7c3d7b884a29af391863931"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 33,
                  "charOffset": 10179,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 271,
                  "startColumn": 1,
                  "charOffset": 10041,
                  "charLength": 310,
                  "snippet": {
                    "text": "                                    content=member.mention, embed=embed\n                                )\n                                tutorSession = (\n                                    database.TutorBot_Sessions.select().where(\n                                        database.TutorBot_Sessions.SessionID"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "69b49e1e88fb6b4db226fc34952f889b43561b7d632675cbaf2f6c64ce5f2662"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 37,
                  "charOffset": 10586,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 279,
                  "startColumn": 1,
                  "charOffset": 10491,
                  "charLength": 194,
                  "snippet": {
                    "text": "                                if tutorSession.exists():\n\n                                    tutorSession = tutorSession.get()\n\n                                    student = self.bot.get_user("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "301602e03a614b4c515dfe540fe27dd07a376bfa78a6640760101c0e08ca2d43"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 37,
                  "charOffset": 10985,
                  "charLength": 6,
                  "snippet": {
                    "text": "HOURCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 287,
                  "startColumn": 1,
                  "charOffset": 10850,
                  "charLength": 259,
                  "snippet": {
                    "text": "                                        tutorSession.TutorID\n                                    )\n                                    HOURCH = self.bot.get_channel(\n                                        self.TutorLogID\n                                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f1378df85e89342329e2f86c4861c9fd66ccc33e8a4e4261867007589f0ad6c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 13,
                  "charOffset": 14017,
                  "charLength": 11,
                  "snippet": {
                    "text": "acadChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 341,
                  "startColumn": 1,
                  "charOffset": 13963,
                  "charLength": 155,
                  "snippet": {
                    "text": "            and not member.bot\n        ):\n            acadChannel = self.bot.get_channel(\n                self.LobbyStartIDs[member.guild.id]\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "50428278042513909e0819611b56837f2c054eaa35f584612537055ba97558c4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 13,
                  "charOffset": 14186,
                  "charLength": 2,
                  "snippet": {
                    "text": "SB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 345,
                  "startColumn": 1,
                  "charOffset": 14105,
                  "charLength": 215,
                  "snippet": {
                    "text": "            )\n            print(acadChannel, after.channel.guild.id)\n            SB = discord.utils.get(member.guild.roles, name=self.SB)\n\n            legend = discord.utils.get(member.guild.roles, name=self.Legend)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d4282dda8db6cd8b56f2ba2c921d1e0e437f2c98014e0b73e945a4640294b741"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 13,
                  "charOffset": 14334,
                  "charLength": 2,
                  "snippet": {
                    "text": "MT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 349,
                  "startColumn": 1,
                  "charOffset": 14244,
                  "charLength": 287,
                  "snippet": {
                    "text": "            legend = discord.utils.get(member.guild.roles, name=self.Legend)\n\n            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72483e5db4b3c24c50eb4489f49e2cde0478709c7d4712bca1b9d33240096d98"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 13,
                  "charOffset": 14404,
                  "charLength": 3,
                  "snippet": {
                    "text": "MAT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 350,
                  "startColumn": 1,
                  "charOffset": 14321,
                  "charLength": 279,
                  "snippet": {
                    "text": "\n            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2001b9be0a35e271903d9b518315728bc60c149ac978d31ac8a65a46113cc65c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 13,
                  "charOffset": 14475,
                  "charLength": 2,
                  "snippet": {
                    "text": "TT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 351,
                  "startColumn": 1,
                  "charOffset": 14322,
                  "charLength": 347,
                  "snippet": {
                    "text": "            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2d77d9870c332709005110160a7fed172371ef7ec1e22de4436ba20ff1395d1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 13,
                  "charOffset": 14544,
                  "charLength": 2,
                  "snippet": {
                    "text": "AT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 352,
                  "startColumn": 1,
                  "charOffset": 14392,
                  "charLength": 346,
                  "snippet": {
                    "text": "            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc0175546f9e7dacadbe7280d3ca2ca9609714fa3daef130df016662e2d853fe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 13,
                  "charOffset": 14613,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 353,
                  "startColumn": 1,
                  "charOffset": 14463,
                  "charLength": 276,
                  "snippet": {
                    "text": "            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d33021c7b250a672d8f1c29c2c07e3ed1417b279d87a7bf047fcd571e4972ec1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 13,
                  "charOffset": 14682,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 354,
                  "startColumn": 1,
                  "charOffset": 14532,
                  "charLength": 268,
                  "snippet": {
                    "text": "            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)\n\n            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d1bed80cd0e7d67da745ab99b0db394b190f74abba58b6ba3f5fa58a277fb5ca"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 13,
                  "charOffset": 14752,
                  "charLength": 8,
                  "snippet": {
                    "text": "roleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 356,
                  "startColumn": 1,
                  "charOffset": 14670,
                  "charLength": 214,
                  "snippet": {
                    "text": "            CO = discord.utils.get(member.guild.roles, name=self.CO)\n\n            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]\n\n            TutorRole = discord.utils.get(member.guild.roles, name=self.TutorRole)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f42571887ec8f0a0055cefbeb03e2fb7cecdfb9713e1a733d95f0af7e3b4746"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 13,
                  "charOffset": 14814,
                  "charLength": 9,
                  "snippet": {
                    "text": "TutorRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 358,
                  "startColumn": 1,
                  "charOffset": 14740,
                  "charLength": 187,
                  "snippet": {
                    "text": "            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]\n\n            TutorRole = discord.utils.get(member.guild.roles, name=self.TutorRole)\n\n            category = discord.utils.get("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "02f2c3aaaa22b430e74c4a18c709a83114e7aefe1e474d367386172dded4ce09"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 17,
                  "charOffset": 15899,
                  "charLength": 13,
                  "snippet": {
                    "text": "moveToChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 379,
                  "startColumn": 1,
                  "charOffset": 15838,
                  "charLength": 158,
                  "snippet": {
                    "text": "            )\n            if query.exists():\n                moveToChannel = (\n                    database.VCChannelInfo.select()\n                    .where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9b5211c38d09a89acc8b9f184e3c1a7eb2c6b844d75c307d2d0bcec5a481fe0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 21,
                  "charOffset": 16712,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 395,
                  "startColumn": 1,
                  "charOffset": 16653,
                  "charLength": 170,
                  "snippet": {
                    "text": "                )\n                try:\n                    tutorChannel = self.bot.get_channel(\n                        int(moveToChannel.ChannelID)\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ba1b9512ff04f94bf678dc4aa312b9a6271479e34c1ea1938d9f39906322cc45"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 15,
                  "charOffset": 651,
                  "charLength": 12,
                  "snippet": {
                    "text": "TTSWeekCheck"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 608,
                  "charLength": 146,
                  "snippet": {
                    "text": "\n    @tasks.loop(seconds=10)\n    async def TTSWeekCheck(self):\n        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d8031e9c7e64a5798982a38b974ef29837c1ad746855ceaf98010a59ff36df0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 9,
                  "charOffset": 725,
                  "charLength": 10,
                  "snippet": {
                    "text": "weekdayNow"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 637,
                  "charLength": 147,
                  "snippet": {
                    "text": "    async def TTSWeekCheck(self):\n        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()\n        timeNow = now.time()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c1c18a575dc706aa306ae09d3498527b942bf75156cca02c69be80f945f28c33"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 9,
                  "charOffset": 763,
                  "charLength": 7,
                  "snippet": {
                    "text": "timeNow"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 671,
                  "charLength": 168,
                  "snippet": {
                    "text": "        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()\n        timeNow = now.time()\n\n        queryLeaderboard = StudyVCLeaderboard.select()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "65bdcbffb812948b30ca1a152a815c6a4b2717ec240feb26445f1d1e8f7d090d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 9,
                  "charOffset": 793,
                  "charLength": 16,
                  "snippet": {
                    "text": "queryLeaderboard"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 755,
                  "charLength": 144,
                  "snippet": {
                    "text": "        timeNow = now.time()\n\n        queryLeaderboard = StudyVCLeaderboard.select()\n        entries = [entry.id for entry in queryLeaderboard]\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3415d2e664f9bce5037ae80f8187f6226f9843fbdd030d099e2326c98edc3b6e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 13,
                  "charOffset": 1026,
                  "charLength": 9,
                  "snippet": {
                    "text": "lastReset"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 899,
                  "charLength": 275,
                  "snippet": {
                    "text": "\n        if weekdayNow == 1 and (now - self.lastReset >= datetime.timedelta(days=7)) and timeNow >= self.midnight:\n            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(StudyVCLeaderboard.id == entry)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "63dc79142887b527f0ac12ed5e2420fb0737147edcd91d298060ea79ef7499fc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 17,
                  "charOffset": 1092,
                  "charLength": 16,
                  "snippet": {
                    "text": "queryLeaderboard"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 1014,
                  "charLength": 263,
                  "snippet": {
                    "text": "            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(StudyVCLeaderboard.id == entry)\n                queryLeaderboard = queryLeaderboard.get()\n                queryLeaderboard.TTSWeek = 0"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "708ba9e5119b53592cd53100a2271e0192c8f4a04a4181a03f36797ea58855fe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 17,
                  "charOffset": 1191,
                  "charLength": 16,
                  "snippet": {
                    "text": "queryLeaderboard"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 1042,
                  "charLength": 275,
                  "snippet": {
                    "text": "            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(StudyVCLeaderboard.id == entry)\n                queryLeaderboard = queryLeaderboard.get()\n                queryLeaderboard.TTSWeek = 0\n                queryLeaderboard.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6186cc5d75d3320fd6995049157ce0506a0d1c6daf022f214336711b4488fd3a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 5,
                  "charOffset": 988,
                  "charLength": 14,
                  "snippet": {
                    "text": "showFutureTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 982,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2bd147885d32c01ddf9ac0171cca4cada0653b5caedbfae079f9befeaab464fb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 5,
                  "charOffset": 1246,
                  "charLength": 16,
                  "snippet": {
                    "text": "showTotalMinutes"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 1240,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6b0db09bad396931051ea2eab25a3337f95c28a04c2c164a63f40032101ff1fc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 22,
                  "charOffset": 1263,
                  "charLength": 17,
                  "snippet": {
                    "text": "dateObj: datetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 1240,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d8615d519c638524d72d8b838eae63f7cb9ac68aa06d2fda4b73004169a057e7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 5,
                  "charOffset": 1315,
                  "charLength": 7,
                  "snippet": {
                    "text": "dateObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 1242,
                  "charLength": 165,
                  "snippet": {
                    "text": "def showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)\n\n    deltaTime = now - dateObj"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ba3caadb7881c832fb7a6b76b1a57b0caf878efd6a777473f5d539b64e796fc0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 5,
                  "charOffset": 1382,
                  "charLength": 9,
                  "snippet": {
                    "text": "deltaTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 1311,
                  "charLength": 144,
                  "snippet": {
                    "text": "    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)\n\n    deltaTime = now - dateObj\n\n    totalmin = deltaTime.total_seconds() // 60"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "568a7eabd820d107405a994cb6acde5a215dd2ca7dd0dc4e815b05408bbf1a9d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 5,
                  "charOffset": 1488,
                  "charLength": 16,
                  "snippet": {
                    "text": "_getXPForNextLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 1482,
                  "charLength": 96,
                  "snippet": {
                    "text": "\n\ndef _getXPForNextLvl(lvl: int):\n    \"\"\"\n    Get the XP the user needs to reach the next level."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dad28ac048d2a57cc1666f7ebab17294f9df6c039fe4d0eb6a67f7a9e7f8cce6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 5,
                  "charOffset": 1666,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 1653,
                  "charLength": 79,
                  "snippet": {
                    "text": "    \"\"\"\n\n    xpNeeded = (5 * lvl * lvl) + (50 * lvl) + 100\n\n    return xpNeeded"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4b1eb899a65d9ae771bfdc25df3b247a9a7537abc2bac4a42b4a0f72bbd10975"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 5,
                  "charOffset": 1739,
                  "charLength": 12,
                  "snippet": {
                    "text": "_shortNumber"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "charOffset": 1733,
                  "charLength": 107,
                  "snippet": {
                    "text": "\n\ndef _shortNumber(number: int) -> str:\n    \"\"\"\n    Shorts a number and adds the number abbreviation to it."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "282c4a4aaa4e47072cea69af4227a3922ba4c14b3ca6a9c09dc1d2850430d2b2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 5,
                  "charOffset": 2087,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2074,
                  "charLength": 67,
                  "snippet": {
                    "text": "    \"\"\"\n\n    numberStr = ...     # type: str\n\n    if number < 1000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "daacfe95c48c29bd94f79b49be7f4e29a2ee48433dfb248ef659c500f366bfea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 9,
                  "charOffset": 2150,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 2119,
                  "charLength": 82,
                  "snippet": {
                    "text": "\n    if number < 1000:\n        numberStr = f\"{number}\"\n\n    elif number < 1000000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a934f6d978417e065497959feb060010f650b56ee3d0da3e641b49573592aef"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 9,
                  "charOffset": 2267,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 2202,
                  "charLength": 120,
                  "snippet": {
                    "text": "        number /= 1000\n        number = round(number, 2)\n        numberStr = f\"{number}K\"\n\n    elif number < 1000000000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cd2edec33f2533403b5ceedcd3d557dcea749793c4ebd360016f8da12deca70c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 9,
                  "charOffset": 2391,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 2323,
                  "charLength": 126,
                  "snippet": {
                    "text": "        number /= 1000000\n        number = round(number, 2)\n        numberStr = f\"{number}M\"\n\n    elif number < 1000000000000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37148bf622142edabfe975a592b9e632b1a6278455acad9a0177d50deda97af3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 9,
                  "charOffset": 2521,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 2450,
                  "charLength": 132,
                  "snippet": {
                    "text": "        number /= 1000000000\n        number = round(number, 2)\n        numberStr = f\"{number}B\"\n\n    elif number < 1000000000000000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "554a89ac7c265716da6e1e855eb59dcdb4595d4b8326f219f51abfc1b3bd3241"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 9,
                  "charOffset": 2657,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 116,
                  "startColumn": 1,
                  "charOffset": 2583,
                  "charLength": 109,
                  "snippet": {
                    "text": "        number /= 1000000000000\n        number = round(number, 2)\n        numberStr = f\"{number}T\"\n\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "364d6845b53bc3fe73c38b8bf49fda87ca3aa8be8c0bb5b667810d3fb2b24b99"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 11,
                  "charOffset": 2784,
                  "charLength": 22,
                  "snippet": {
                    "text": "addLeaderboardProgress"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 2772,
                  "charLength": 198,
                  "snippet": {
                    "text": "\n\nasync def addLeaderboardProgress(member: discord.Member):\n    \"\"\"\n    Updates the data in the database table `StudyVCLeaderboard` of a specific member and adds level roles to the member if needed."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3981f53ccb42be232ab6803dfc71b576f13034e2b5c20438dbbeb027a3c823bf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 5,
                  "charOffset": 3122,
                  "charLength": 11,
                  "snippet": {
                    "text": "xpPerMinute"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 132,
                  "startColumn": 1,
                  "charOffset": 3042,
                  "charLength": 194,
                  "snippet": {
                    "text": "    :return: Whenever the user has been found in the database: bool\n    \"\"\"\n    xpPerMinute = 30\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d032381c93f4f41c48358ef9749b5970e900f68bbf8e0c6753af955439fe1a7b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 5,
                  "charOffset": 3144,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 1,
                  "charOffset": 3118,
                  "charLength": 193,
                  "snippet": {
                    "text": "    xpPerMinute = 30\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b41e0be7986c9c11689bc673170dcb7250cc168704fa948084b849c87dd0f11b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 9,
                  "charOffset": 3276,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 3140,
                  "charLength": 359,
                  "snippet": {
                    "text": "    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where(database.StudyVCLeaderboard.discordID == member.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72d1f0cd99912e7f1c450949827c42e29188c317a25d6422787afa1a850c7c7d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 9,
                  "charOffset": 3386,
                  "charLength": 16,
                  "snippet": {
                    "text": "leaderboardQuery"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 138,
                  "startColumn": 1,
                  "charOffset": 3268,
                  "charLength": 257,
                  "snippet": {
                    "text": "        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where(database.StudyVCLeaderboard.discordID == member.id)\n\n        isNewLvl = False"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fb2124b50f153547ffd75e4c0cf9f9f65e37dfeed7abe382ded6983538382bba"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 9,
                  "charOffset": 3509,
                  "charLength": 8,
                  "snippet": {
                    "text": "isNewLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 140,
                  "startColumn": 1,
                  "charOffset": 3378,
                  "charLength": 239,
                  "snippet": {
                    "text": "        leaderboardQuery = database.StudyVCLeaderboard.select().where(database.StudyVCLeaderboard.discordID == member.id)\n\n        isNewLvl = False\n        if leaderboardQuery.exists():\n            leaderboardQuery = leaderboardQuery.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "19fac9edac71da83b75dde3e277ef9fa27b107e842b1a531d1cfb11a3e7cf609"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 13,
                  "charOffset": 3576,
                  "charLength": 16,
                  "snippet": {
                    "text": "leaderboardQuery"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 1,
                  "charOffset": 3501,
                  "charLength": 258,
                  "snippet": {
                    "text": "        isNewLvl = False\n        if leaderboardQuery.exists():\n            leaderboardQuery = leaderboardQuery.get()\n            leaderboardQuery.TTS = totalmin + leaderboardQuery.TTS\n            leaderboardQuery.TTSWeek = totalmin + leaderboardQuery.TTSWeek"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0ff13fca4aae8e3091a8b754d8e8e62173b4df7f891ab3def8226cdf97f6751b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 13,
                  "charOffset": 3853,
                  "charLength": 10,
                  "snippet": {
                    "text": "currentLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 147,
                  "startColumn": 1,
                  "charOffset": 3760,
                  "charLength": 226,
                  "snippet": {
                    "text": "            leaderboardQuery.totalSessions = leaderboardQuery.totalSessions + 1\n\n            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8987bd5f5bbb8e073ebfef6150e0d96643719b1a75b5a7cae0f1aba45c58c6e3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 13,
                  "charOffset": 3901,
                  "charLength": 9,
                  "snippet": {
                    "text": "currentXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 148,
                  "startColumn": 1,
                  "charOffset": 3840,
                  "charLength": 147,
                  "snippet": {
                    "text": "\n            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d87580322155864980923116600740e1f6dfb09e673d11543fa0d4bd6b0146a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 13,
                  "charOffset": 3945,
                  "charLength": 14,
                  "snippet": {
                    "text": "currentTotalXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 3841,
                  "charLength": 198,
                  "snippet": {
                    "text": "            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP\n\n            xpNeeded = _getXPForNextLvl(currentLvl)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3c30f138a805dddb256f9387f138c51a44640da382d77ac173ec9dcb2c622e98"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 13,
                  "charOffset": 4000,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 3933,
                  "charLength": 153,
                  "snippet": {
                    "text": "            currentTotalXP = leaderboardQuery.totalXP\n\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "216a80d1a241e910d1184568ea299de344221f3910ab9b35b4369625842221e5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 13,
                  "charOffset": 4052,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpEarned"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 152,
                  "startColumn": 1,
                  "charOffset": 3987,
                  "charLength": 140,
                  "snippet": {
                    "text": "\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "861ec94e63d127422f666c4284835c93bae4c19ed86494dcb7b6d25766336170"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 13,
                  "charOffset": 4099,
                  "charLength": 5,
                  "snippet": {
                    "text": "newXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "charOffset": 4040,
                  "charLength": 170,
                  "snippet": {
                    "text": "            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "12397bce33af8f55e8b698d54ce09535854cca7dcb850103e54ae521be599c9b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 13,
                  "charOffset": 4140,
                  "charLength": 10,
                  "snippet": {
                    "text": "newTotalXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 155,
                  "startColumn": 1,
                  "charOffset": 4086,
                  "charLength": 125,
                  "snippet": {
                    "text": "\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66120af1e29c4e30ef3555d6cbd5a9190964143f33f337d04e3c12ec67aaafae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 13,
                  "charOffset": 4191,
                  "charLength": 6,
                  "snippet": {
                    "text": "newLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 156,
                  "startColumn": 1,
                  "charOffset": 4087,
                  "charLength": 158,
                  "snippet": {
                    "text": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ecd073dec41adcc9529394d039fcf1885ed58ef2ea2b89533b9c2afd44aee836"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 17,
                  "charOffset": 4263,
                  "charLength": 8,
                  "snippet": {
                    "text": "isNewLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "charOffset": 4212,
                  "charLength": 149,
                  "snippet": {
                    "text": "            if newXP >= xpNeeded:\n\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "862bc62ba327c9673b7cec85efbeaa5844d255eedea6f775c48f582958686609"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 17,
                  "charOffset": 4295,
                  "charLength": 11,
                  "snippet": {
                    "text": "newXPNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 161,
                  "startColumn": 1,
                  "charOffset": 4246,
                  "charLength": 156,
                  "snippet": {
                    "text": "\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:\n                    newXP -= newXPNeeded"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8fbe4fca5a3183f7cdf82e8a6c4e161cb0dca8a18f177aa2e7bd45c50b93997a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 21,
                  "charOffset": 4455,
                  "charLength": 11,
                  "snippet": {
                    "text": "newXPNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 165,
                  "startColumn": 1,
                  "charOffset": 4362,
                  "charLength": 172,
                  "snippet": {
                    "text": "                    newXP -= newXPNeeded\n                    newLvl += 1\n                    newXPNeeded = _getXPForNextLvl(newLvl)\n\n            leaderboardQuery.xp = newXP"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e9c99a65fe88852e253aa4e44548184da283f5f2447d2af4442bc0bc5ededf59"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 13,
                  "charOffset": 4693,
                  "charLength": 10,
                  "snippet": {
                    "text": "currentLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 1,
                  "charOffset": 4666,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n        else:\n            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "65e8be5eb5bef8cbba6d7464ead9513c9eadf69847e816c2a317d27ccbdc7d57"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 13,
                  "charOffset": 4720,
                  "charLength": 9,
                  "snippet": {
                    "text": "currentXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 175,
                  "startColumn": 1,
                  "charOffset": 4667,
                  "charLength": 98,
                  "snippet": {
                    "text": "        else:\n            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "528e8cc3eadff3db2bd24c5e1d9c0d6753d96c1e870975252e38b9bffb914ad8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 13,
                  "charOffset": 4746,
                  "charLength": 14,
                  "snippet": {
                    "text": "currentTotalXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "charOffset": 4681,
                  "charLength": 136,
                  "snippet": {
                    "text": "            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0\n\n            xpNeeded = _getXPForNextLvl(currentLvl)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "106a4d01eff00883cbca43fca52fa3118bfa62fa35a1b88c3978368ee74c800c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 13,
                  "charOffset": 4778,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 4734,
                  "charLength": 130,
                  "snippet": {
                    "text": "            currentTotalXP = 0\n\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bf4b7a513513a444d0a47e8c1f196cc956dcb0aabf2c44e335e7437b4b2ffbac"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 13,
                  "charOffset": 4830,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpEarned"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 179,
                  "startColumn": 1,
                  "charOffset": 4765,
                  "charLength": 140,
                  "snippet": {
                    "text": "\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bde5b12f9053d9ace5016f049da29a6cbb1528b9c1743a17ca0735540abd855e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 13,
                  "charOffset": 4877,
                  "charLength": 5,
                  "snippet": {
                    "text": "newXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 181,
                  "startColumn": 1,
                  "charOffset": 4818,
                  "charLength": 170,
                  "snippet": {
                    "text": "            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ddefc34fbfef35e4760130d3c9635b8fe3dcd34178299b29f1d5f2a07fb80e1e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 13,
                  "charOffset": 4918,
                  "charLength": 10,
                  "snippet": {
                    "text": "newTotalXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 4864,
                  "charLength": 125,
                  "snippet": {
                    "text": "\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "414b18b32a790a3ab884b8c6cbe7fb2c1eb7d4bad077c3243f925149e2150a9d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 13,
                  "charOffset": 4969,
                  "charLength": 6,
                  "snippet": {
                    "text": "newLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 4865,
                  "charLength": 158,
                  "snippet": {
                    "text": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bce7c1ee1e733180a05b8bcacc10e78aae3c4f3937941494c54b4484c6e2fc67"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 17,
                  "charOffset": 5041,
                  "charLength": 8,
                  "snippet": {
                    "text": "isNewLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 1,
                  "charOffset": 4990,
                  "charLength": 149,
                  "snippet": {
                    "text": "            if newXP >= xpNeeded:\n\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "48a99769be8a50f23f6e94b2f3fe70ed39f761c03dfe5c6fc22d3458f1e399fb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 17,
                  "charOffset": 5073,
                  "charLength": 11,
                  "snippet": {
                    "text": "newXPNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 188,
                  "startColumn": 1,
                  "charOffset": 5024,
                  "charLength": 156,
                  "snippet": {
                    "text": "\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:\n                    newXP -= newXPNeeded"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f30a61b6f08a02239c1d7c00a95271c0f9b3e01145ff449f16640c7a1bff4b88"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 21,
                  "charOffset": 5233,
                  "charLength": 11,
                  "snippet": {
                    "text": "newXPNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 192,
                  "startColumn": 1,
                  "charOffset": 5140,
                  "charLength": 184,
                  "snippet": {
                    "text": "                    newXP -= newXPNeeded\n                    newLvl += 1\n                    newXPNeeded = _getXPForNextLvl(newLvl)\n\n            q = database.StudyVCLeaderboard.create("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fff55a7b7e35b9e332eb4dec02ee96b000efadff3b7526f6f60632e0f44f954a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 9,
                  "charOffset": 5594,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 205,
                  "startColumn": 1,
                  "charOffset": 5564,
                  "charLength": 82,
                  "snippet": {
                    "text": "            q.save()\n\n        roleStr = \"\"\n        if newLvl < 5:\n            pass"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9cfb3941c2ee9266d70f4b598fa4741d60c8df3d4f0a801d051c3706721fb6e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 17,
                  "charOffset": 5786,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 213,
                  "startColumn": 1,
                  "charOffset": 5738,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n            if currentLvl < 5:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f01aa4536fdec4011d559d1cf24117ffed693f26ca59473ac4b1f53bfb6c3e0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 17,
                  "charOffset": 5992,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 220,
                  "startColumn": 1,
                  "charOffset": 5943,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 10:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dea6d4a994c7c26171e1a63e1da38843950f67846a1802a33393a1ab4b8efcd0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 17,
                  "charOffset": 6198,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 227,
                  "startColumn": 1,
                  "charOffset": 6149,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 20:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0dd04f1c3ce13f3601a76fb428d97a877df4788d4839c8f45688bd58aa616d64"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 17,
                  "charOffset": 6404,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 234,
                  "startColumn": 1,
                  "charOffset": 6355,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 30:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cc5497dcc4e19d69b9ea828987257aa2a35bc1fbcf9fe5c753b394116407e864"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 17,
                  "charOffset": 6610,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 241,
                  "startColumn": 1,
                  "charOffset": 6561,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 40:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6c17b9cb83972762847f4f64f0f0703d4b31e0d29bc4fdb40b1908c23f68a74e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 17,
                  "charOffset": 6816,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 248,
                  "startColumn": 1,
                  "charOffset": 6767,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 50:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9c264163175c1d5e216153142620eabcd47be3f13956453e59cef82fb38c6e1a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 17,
                  "charOffset": 7022,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 255,
                  "startColumn": 1,
                  "charOffset": 6973,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 60:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "39ef610e3399d54ecae1a76090b27f2b2b1dc9aeb4b9d90c29d15bb81d907505"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 17,
                  "charOffset": 7228,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 262,
                  "startColumn": 1,
                  "charOffset": 7179,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 70:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0325bd603022e3482fe61d430e7829dd4df9b131723248ef06594e03f51b9d25"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 17,
                  "charOffset": 7434,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "charOffset": 7385,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 80:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0034f43c6f78a9b37e4a6e1c982242291f425d751ae76dc2e37af0a547a6e3ad"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 17,
                  "charOffset": 7641,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 276,
                  "startColumn": 1,
                  "charOffset": 7592,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 90:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e263b1694f6d702b6d153ad6ffe3b6a1585accdfd6ffc57220bca84423629c48"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 17,
                  "charOffset": 7851,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 283,
                  "startColumn": 1,
                  "charOffset": 7801,
                  "charLength": 115,
                  "snippet": {
                    "text": "\n            if currentLvl < 100:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0f9453b94315eb50de732e7a23460b205c3edaf6535008a446e96860753841c0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 13,
                  "charOffset": 7951,
                  "charLength": 5,
                  "snippet": {
                    "text": "dmMSG"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 288,
                  "startColumn": 1,
                  "charOffset": 7917,
                  "charLength": 161,
                  "snippet": {
                    "text": "        if isNewLvl:\n\n            dmMSG = f\"{member.mention}, you've reached level **{newLvl}** in Study VC!\" \\\n                    f\"{roleStr}\"\n            try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a019d3de630a12b119ce3a23255020a64e08d81c61bb78dc0dde6da9bf70cb34"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 5,
                  "charOffset": 8198,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 298,
                  "startColumn": 1,
                  "charOffset": 8172,
                  "charLength": 141,
                  "snippet": {
                    "text": "        return False\n\n    StudySessionQ = StudySessionQ.get()\n    StudySessionQ.StartTime = datetime.now(EST)\n    StudySessionQ.Paused = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7502f9cdb8d879c8aa588ca63600750eb6ce4473571d42c92001dfe0af5053ae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 11,
                  "charOffset": 8368,
                  "charLength": 10,
                  "snippet": {
                    "text": "endSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 306,
                  "startColumn": 1,
                  "charOffset": 8356,
                  "charLength": 180,
                  "snippet": {
                    "text": "\n\nasync def endSession(member: discord.Member):\n    \"\"\"\n    Ends the session by kicking the user out of the voice channel and removing the user from the database table `StudyVCDB`."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "18219902452a5bbd44977fd5d3d4cfe40e6baf03d3e1e9f8dfccc2bc730bd362"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 5,
                  "charOffset": 8694,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 315,
                  "startColumn": 1,
                  "charOffset": 8681,
                  "charLength": 180,
                  "snippet": {
                    "text": "    \"\"\"\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3566313c6325e7bc71c32a550ed82c3779af1cc2d4da1c7ecfd5872b777ff12e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 9,
                  "charOffset": 8826,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 317,
                  "startColumn": 1,
                  "charOffset": 8690,
                  "charLength": 240,
                  "snippet": {
                    "text": "    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        StudySessionQ.delete_instance()\n        StudySessionQ.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7a8a3cc57e20cf00a4f8af8cf53486a7ca8372fb1b269d26fd2137b6886060df"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 17,
                  "charOffset": 9186,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 333,
                  "startColumn": 1,
                  "charOffset": 9137,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 30:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a63053097fc3aa4013de1efc6c64bfc56bd39e6f7ee73262336b16bf7e9616ac"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 407,
                  "startColumn": 11,
                  "charOffset": 11150,
                  "charLength": 10,
                  "snippet": {
                    "text": "endSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 405,
                  "startColumn": 1,
                  "charOffset": 11138,
                  "charLength": 180,
                  "snippet": {
                    "text": "\n\nasync def endSession(member: discord.Member):\n    \"\"\"\n    Ends the session by kicking the user out of the voice channel and removing the user from the database table `StudyVCDB`."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb68ad611182c3cb569a194e13332131eade74ec18421412b652945f0c6388c1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 5,
                  "charOffset": 11476,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 414,
                  "startColumn": 1,
                  "charOffset": 11463,
                  "charLength": 180,
                  "snippet": {
                    "text": "    \"\"\"\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7adb85542e9d137a111296255c328477e44fb914e497fc60f8e57c16e1fc7071"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 9,
                  "charOffset": 11608,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 416,
                  "startColumn": 1,
                  "charOffset": 11472,
                  "charLength": 240,
                  "snippet": {
                    "text": "    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        StudySessionQ.delete_instance()\n        StudySessionQ.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d275ddf2ab2532e4296c87b901fec5d6b5bca7707df3369e73eaee4bd2c2ae4b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 478,
                  "startColumn": 9,
                  "charOffset": 13542,
                  "charLength": 12,
                  "snippet": {
                    "text": "isInDatabase"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 476,
                  "startColumn": 1,
                  "charOffset": 13451,
                  "charLength": 172,
                  "snippet": {
                    "text": "        Removes an item from the study to-do list of the author/owner.\n        \"\"\"\n        isInDatabase = await addLeaderboardProgress(ctx.author)\n\n        if isInDatabase:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7a689255c78882c65538e177317914e2a2872adf099db92ae887dfc5a6c58afe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 9,
                  "charOffset": 14769,
                  "charLength": 6,
                  "snippet": {
                    "text": "lbList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 511,
                  "startColumn": 1,
                  "charOffset": 14696,
                  "charLength": 209,
                  "snippet": {
                    "text": "        guild = await self.bot.fetch_guild(self.StudyVCGuildID)\n\n        lbList = []\n        i = 1\n        for entry in database.StudyVCLeaderboard.select().order_by(database.StudyVCLeaderboard.totalXP.desc(),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5abaadd3b1e3713c691f967d2a23a4ec276e3bdce255c2d58b7ce86da0b471c5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 533,
                  "startColumn": 17,
                  "charOffset": 15398,
                  "charLength": 10,
                  "snippet": {
                    "text": "totalXPStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 531,
                  "startColumn": 1,
                  "charOffset": 15342,
                  "charLength": 193,
                  "snippet": {
                    "text": "                    place = f\"`{i}th`\"\n\n                totalXPStr = _shortNumber(entry.totalXP)\n                lbList.append(f\"{place} **{member}**: `{totalXPStr} XP`\")\n                i += 1"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73922da7ae3ee3d7631b4526dc0f7020409a77123ba71c81d79efb6cfad3866d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 9,
                  "charOffset": 15566,
                  "charLength": 13,
                  "snippet": {
                    "text": "FormattedList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 535,
                  "startColumn": 1,
                  "charOffset": 15513,
                  "charLength": 156,
                  "snippet": {
                    "text": "                i += 1\n        print(lbList)\n        FormattedList = \"\\n\".join(lbList)\n        embed = discord.Embed(\n            title=\"Study Leaderboard\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c5860a84ff5f42476c0a56a39ed6ef2d188831d22e73efcf62e90b9a8f0887b4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "charOffset": 844,
                  "charLength": 15,
                  "snippet": {
                    "text": "setNewStudyGoal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 832,
                  "charLength": 109,
                  "snippet": {
                    "text": "\n\nasync def setNewStudyGoal(self, console, member: discord.Member, renew: bool):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "51308434d6c98e5cf751c47ac97dea5e5e14cba1fd1953496f1ae6e0f2775fa1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 5,
                  "charOffset": 1060,
                  "charLength": 3,
                  "snippet": {
                    "text": "MSV"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 956,
                  "charLength": 252,
                  "snippet": {
                    "text": "        query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id).get()\n\n    MSV = discord.ui.View(timeout=60)\n    var = SelectMenuHandler(\n        SSTypes, \"temp_view:studybot_st1\", \"Select a duration for your study session\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "01359202fb74a93281cbbd21f5ff0ea820c5689a32c548e09d34db81c61d3757"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 5,
                  "charOffset": 1242,
                  "charLength": 7,
                  "snippet": {
                    "text": "msgView"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 1215,
                  "charLength": 185,
                  "snippet": {
                    "text": "    MSV.add_item(var)\n\n    msgView = await console.send(\n        f\"{member.mention} You have joined a study channel. Please choose the duration of your study session!\",\n        view=MSV"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b7262a21b59bd85b81e85c066d0e82f5b90ac1c57590afda01e1c02a0e3d31b0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 9,
                  "charOffset": 1520,
                  "charLength": 12,
                  "snippet": {
                    "text": "MSV_disabled"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1501,
                  "charLength": 158,
                  "snippet": {
                    "text": "\n    else:\n        MSV_disabled = discord.ui.View()\n        var = SelectMenuHandler(\n            SSTypes, \"temp_view:studybot_st1\", \"Timed out\", disabled=True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d6ac1dfe283ecd861f0ce4a93ad3fcfe947796311b608f31dd3029b72582c26f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 5,
                  "charOffset": 3073,
                  "charLength": 12,
                  "snippet": {
                    "text": "getConsoleCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 3067,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eada4c6c3cc5878616dd5a0a27bdb4602ecfcc776c113aa410e4d4f606a88f27"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 5,
                  "charOffset": 3226,
                  "charLength": 10,
                  "snippet": {
                    "text": "ColumnDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 3132,
                  "charLength": 164,
                  "snippet": {
                    "text": "        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n    )\n    ColumnDict = {\n        0: q.ch_tv_console,\n        1: q.ch_tv_startvc,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b7b34ee7b96eb7f8c7c25559abc8ce63747d0fd1f172a46cce95b069c276c00"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 15,
                  "charOffset": 3838,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudyVCModule"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "charOffset": 3771,
                  "charLength": 127,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener(\"on_voice_state_update\")\n    async def StudyVCModule(\n        self,\n        member: discord.Member,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9c268e2dd4c81655e26b3b0d5561302a71318421f64881c02558853bf8872ed9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 13,
                  "charOffset": 4437,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 4413,
                  "charLength": 208,
                  "snippet": {
                    "text": "        ):\n\n            StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if StudySessionQ.exists():\n                await addLeaderboardProgress(member)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0aeeb591c6c5fab21d365bd98e742ec9336f9cb48cb318e624e3c3a23fc11440"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 17,
                  "charOffset": 5326,
                  "charLength": 7,
                  "snippet": {
                    "text": "dateObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 1,
                  "charOffset": 5280,
                  "charLength": 191,
                  "snippet": {
                    "text": "                query.save()\n\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b9b542b351cb87eb04dce3016a94c1c57075a2efb8f8a00f0b6d374ae7a0ed92"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 15,
                  "charOffset": 6761,
                  "charLength": 14,
                  "snippet": {
                    "text": "StudyVCChecker"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 198,
                  "startColumn": 1,
                  "charOffset": 6677,
                  "charLength": 234,
                  "snippet": {
                    "text": "\n    @tasks.loop(seconds=10) # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\"\n        print(\"loop StudyVCChecker\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "105694faa3a2ca2f5a04f1d1baa46771a04c064b1ac1f986af1384dfffaa59e0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 9,
                  "charOffset": 6921,
                  "charLength": 15,
                  "snippet": {
                    "text": "StudyVCGuildObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 202,
                  "startColumn": 1,
                  "charOffset": 6875,
                  "charLength": 179,
                  "snippet": {
                    "text": "        print(\"loop StudyVCChecker\")\n\n        StudyVCGuildObj = self.bot.get_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7a6b0f88f0b6b0d061ec08dd474775146c35542305977c2cbb7b1da4745f1b69"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 9,
                  "charOffset": 6985,
                  "charLength": 17,
                  "snippet": {
                    "text": "StudyVCConsoleObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 203,
                  "startColumn": 1,
                  "charOffset": 6912,
                  "charLength": 179,
                  "snippet": {
                    "text": "\n        StudyVCGuildObj = self.bot.get_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a60aff32768d9bf85ec7d3acb9a2f54a350d94b6b48861e2285a8a1f1371cd6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 13,
                  "charOffset": 7104,
                  "charLength": 7,
                  "snippet": {
                    "text": "dateObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 206,
                  "startColumn": 1,
                  "charOffset": 7054,
                  "charLength": 179,
                  "snippet": {
                    "text": "\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n\n            member = StudyVCGuildObj.get_member(q.discordID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "55c283e2fb4daa88a8d1016723016a328173c76d02a9061847cfda3cd26bc629"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "charOffset": 844,
                  "charLength": 15,
                  "snippet": {
                    "text": "setNewStudyGoal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 832,
                  "charLength": 109,
                  "snippet": {
                    "text": "\n\nasync def setNewStudyGoal(self, console, member: discord.Member, renew: bool):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "67453a007fba65ee98cdc62f5617237a9290c23983120f41056f58e6168e90b5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 5,
                  "charOffset": 1060,
                  "charLength": 3,
                  "snippet": {
                    "text": "MSV"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 956,
                  "charLength": 252,
                  "snippet": {
                    "text": "        query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id).get()\n\n    MSV = discord.ui.View(timeout=60)\n    var = SelectMenuHandler(\n        SSTypes, \"temp_view:studybot_st1\", \"Select a duration for your study session\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab3d54f94c03effbfee3986876aad1a26b474dd7b54674b9937c288bdcfbe56e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 5,
                  "charOffset": 1242,
                  "charLength": 7,
                  "snippet": {
                    "text": "msgView"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 1215,
                  "charLength": 185,
                  "snippet": {
                    "text": "    MSV.add_item(var)\n\n    msgView = await console.send(\n        f\"{member.mention} You have joined a study channel. Please choose the duration of your study session!\",\n        view=MSV"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8b0f8a9dd6975f80609b0f1eee75b43eb3de3e800f4621034e1c7c1fe241455"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 9,
                  "charOffset": 1520,
                  "charLength": 12,
                  "snippet": {
                    "text": "MSV_disabled"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1501,
                  "charLength": 158,
                  "snippet": {
                    "text": "\n    else:\n        MSV_disabled = discord.ui.View()\n        var = SelectMenuHandler(\n            SSTypes, \"temp_view:studybot_st1\", \"Timed out\", disabled=True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0851ddfd77bae56bfdea0a9e2bf06bf5aaf5247208cb90c6a3764df90765fec6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 5,
                  "charOffset": 3073,
                  "charLength": 12,
                  "snippet": {
                    "text": "getConsoleCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 3067,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85eec57d13306bb631c6460bfd124439486b127b224dde2ed8bc689093567380"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 5,
                  "charOffset": 3226,
                  "charLength": 10,
                  "snippet": {
                    "text": "ColumnDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 3132,
                  "charLength": 164,
                  "snippet": {
                    "text": "        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n    )\n    ColumnDict = {\n        0: q.ch_tv_console,\n        1: q.ch_tv_startvc,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a0d93679f89b59d24e37160c3ddc07d11bd6e2647df9004e993dc9f52d4cae7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 15,
                  "charOffset": 3838,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudyVCModule"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "charOffset": 3771,
                  "charLength": 127,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener(\"on_voice_state_update\")\n    async def StudyVCModule(\n        self,\n        member: discord.Member,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "38c8a4c2cd41fea4a99bba0a645096c2e091cc5f6ec620d55e71ecf71ae598be"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 13,
                  "charOffset": 4443,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 4389,
                  "charLength": 238,
                  "snippet": {
                    "text": "            and not member.bot\n        ):\n            StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if StudySessionQ.exists():\n                await addLeaderboardProgress(member)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "53a2456fc19f2ac63b7bab8242793653d1db0282460ce0ee2f3114121fc2d178"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 17,
                  "charOffset": 5331,
                  "charLength": 7,
                  "snippet": {
                    "text": "dateObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 170,
                  "startColumn": 1,
                  "charOffset": 5285,
                  "charLength": 191,
                  "snippet": {
                    "text": "                query.save()\n\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b04c6e62f2b79ffd47f390dea29978d9d3b769649a3c58c94401688d4983e85a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 15,
                  "charOffset": 6766,
                  "charLength": 14,
                  "snippet": {
                    "text": "StudyVCChecker"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 195,
                  "startColumn": 1,
                  "charOffset": 6682,
                  "charLength": 234,
                  "snippet": {
                    "text": "\n    @tasks.loop(seconds=10) # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\"\n        print(\"loop StudyVCChecker\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e65cebdf5af44d1015c2294035a08b860fe4a59d4de7039fe3365f80914921f2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 9,
                  "charOffset": 6926,
                  "charLength": 15,
                  "snippet": {
                    "text": "StudyVCGuildObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 199,
                  "startColumn": 1,
                  "charOffset": 6880,
                  "charLength": 195,
                  "snippet": {
                    "text": "        print(\"loop StudyVCChecker\")\n\n        StudyVCGuildObj = await self.bot.fetch_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = await StudyVCGuildObj.fetch_channel(self.StudyVCConsole)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa954b8463ebaa9ea909b476b21820f170b87dd2f2cb13223b272b21c11c9482"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 9,
                  "charOffset": 6998,
                  "charLength": 17,
                  "snippet": {
                    "text": "StudyVCConsoleObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 200,
                  "startColumn": 1,
                  "charOffset": 6917,
                  "charLength": 195,
                  "snippet": {
                    "text": "\n        StudyVCGuildObj = await self.bot.fetch_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = await StudyVCGuildObj.fetch_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e04782a1f2427271c084486e4ff5f519caa810ada1607657f4f79b2ef512e84"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 13,
                  "charOffset": 7125,
                  "charLength": 7,
                  "snippet": {
                    "text": "dateObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 203,
                  "startColumn": 1,
                  "charOffset": 7075,
                  "charLength": 187,
                  "snippet": {
                    "text": "\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n\n            member = await StudyVCGuildObj.fetch_member(q.discordID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c289f5a20e6acd718eab1cff3a671c89133880d936d258fd53d746a5b6163a58"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 9,
                  "charOffset": 386,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 300,
                  "charLength": 255,
                  "snippet": {
                    "text": "async def id_generator(size=3, chars=string.ascii_uppercase):\n    while True:\n        ID = \"\".join(random.choice(chars) for _ in range(size))\n        query = database.TutorBot_Sessions.select().where(\n            database.TutorBot_Sessions.SessionID == ID"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a89d1b2fbb474c4d0919b0996bfa5001676076553259ea912c6c5fa229f50e3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 562,
                  "startColumn": 9,
                  "charOffset": 20629,
                  "charLength": 13,
                  "snippet": {
                    "text": "DropdownClass"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 560,
                  "startColumn": 1,
                  "charOffset": 20570,
                  "charLength": 123,
                  "snippet": {
                    "text": "    def __init__(self):\n        super().__init__()\n        DropdownClass = Dropdown()\n\n        self.add_item(DropdownClass)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3bc37cfe27e5b2b7b6d246d35495b76ab08bf801f1863b4915c12cf0b692090a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 13,
                  "charOffset": 659,
                  "charLength": 12,
                  "snippet": {
                    "text": "TutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 561,
                  "charLength": 228,
                  "snippet": {
                    "text": "        now = datetime.now(self.est)\n        for entry in database.TutorBot_Sessions:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.Date)\n            val = int((TutorSession - now).total_seconds())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b62561c9cb3b5ac0a929392251e8f1a77b171cf8a203d4d800126914519c3884"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 17,
                  "charOffset": 3283,
                  "charLength": 7,
                  "snippet": {
                    "text": "GP_DATE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 3237,
                  "charLength": 127,
                  "snippet": {
                    "text": "                geten.save()\n\n                GP_DATE = old + new\n\n                gp_en: database.TutorSession_GracePeriod = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3c353c0facc2682a69d1bfc53ff971b361a43f77d2452e21264fe4aedc5cc115"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 13,
                  "charOffset": 4451,
                  "charLength": 12,
                  "snippet": {
                    "text": "TutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 122,
                  "startColumn": 1,
                  "charOffset": 4346,
                  "charLength": 238,
                  "snippet": {
                    "text": "        now = datetime.now(self.est)\n        for entry in database.TutorSession_GracePeriod:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.GP_DATE)\n            val = int((TutorSession - now).total_seconds())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d5a39c2cdd8a637757809c44e9fb5392f5fbc750bdc2e5c236b7cb4e2bbdba11"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 15,
                  "charOffset": 195,
                  "charLength": 16,
                  "snippet": {
                    "text": "create_TicketSys"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 1,
                  "charOffset": 139,
                  "charLength": 223,
                  "snippet": {
                    "text": "class SimulatorProfile:\n    @staticmethod\n    async def create_TicketSys(ctx: commands.Context):\n        # category = discord.utils.get(ctx.guild.categories, id=TECH_ID.cat_sandbox)\n        query: database.SandboxConfig = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7b4c7db662964013ca3170eb2681f538aebc247ff75f7d828be07b549bc8f6fa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 9,
                  "charOffset": 563,
                  "charLength": 9,
                  "snippet": {
                    "text": "ListofCat"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 494,
                  "charLength": 192,
                  "snippet": {
                    "text": "\n        await ctx.guild.create_text_channel(\"🧧┃chat-help\")\n        ListofCat = [\n            [\"Math Tickets\", query.cat_mathticket],\n            [\"Science Tickets\", query.cat_scienceticket],"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7daee06a5440fe8b43ebc147fcf5dfc1a7cac1116bf8f50ada162dc3e552464c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 9,
                  "charOffset": 1517,
                  "charLength": 9,
                  "snippet": {
                    "text": "ListofCat"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1411,
                  "charLength": 229,
                  "snippet": {
                    "text": "            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n        )\n        ListofCat = [\n            [\"Math Tickets\", query.cat_mathticket],\n            [\"Science Tickets\", query.cat_scienceticket],"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0aa0257c7d5d473723246223a11315ea5c68cd8aa0477b8ead2260421b3ceb60"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 15,
                  "charOffset": 2280,
                  "charLength": 16,
                  "snippet": {
                    "text": "create_PrivVCSys"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 2247,
                  "charLength": 200,
                  "snippet": {
                    "text": "\n    @staticmethod\n    async def create_PrivVCSys(ctx: commands.Context):\n        category = discord.utils.get(ctx.guild.categories, id=SandboxConfig.cat_sandbox)\n        q: database.SandboxConfig = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc39b00a299861b29c2ad6cbb69e1b7d8ee017ce17397b70f9e112526ad155f1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 15,
                  "charOffset": 2886,
                  "charLength": 17,
                  "snippet": {
                    "text": "cleanup_PrivVCSys"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2853,
                  "charLength": 200,
                  "snippet": {
                    "text": "\n    @staticmethod\n    async def cleanup_PrivVCSys(ctx: commands.Context):\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f4f345a14a3d666675fa666ff2c72ff8830d08d68ac673719b85f9de27d73d52"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 9,
                  "charOffset": 3768,
                  "charLength": 2,
                  "snippet": {
                    "text": "SP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3681,
                  "charLength": 236,
                  "snippet": {
                    "text": "    @sim.command()\n    async def create(self, ctx: commands.Context, profile):\n        SP = SimulatorProfile()\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a82b00181b78f668fd09b0556f1475ee8f917be5fd976e49cbc128f0057bfe61"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 9,
                  "charOffset": 4809,
                  "charLength": 2,
                  "snippet": {
                    "text": "SP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "charOffset": 4732,
                  "charLength": 226,
                  "snippet": {
                    "text": "    @sim.command()\n    async def clear(self, ctx: commands.Context):\n        SP = SimulatorProfile()\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eb2b263a741e79b410ad556e7b43ae0998448e1be0c27c7f4c4d7f711242c7cb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 11,
                  "charOffset": 2405,
                  "charLength": 12,
                  "snippet": {
                    "text": "TicketExport"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 2393,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\nasync def TicketExport(\n    self,\n    channel: discord.TextChannel,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2721e883d8f3074959f4cee0a6b71ffd3965a60d87ed7b4dcdd5a1ec4fd20f1c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 5,
                  "charOffset": 2595,
                  "charLength": 30,
                  "snippet": {
                    "text": "directTranscript: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 2505,
                  "charLength": 183,
                  "snippet": {
                    "text": "    user: discord.User = None,\n    responsesauthor: typing.List[discord.User] = None,\n    directTranscript: bool = False,\n):\n    transcript = await chat_exporter.export(channel, None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9b1c76a953f5f45ced0658fa4ffae830454e23da560fa56b0e86262f1a3d5c06"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 5,
                  "charOffset": 2825,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 2800,
                  "charLength": 100,
                  "snippet": {
                    "text": "        .get()\n    )\n    TicketOwner = self.bot.get_user(query.authorID)\n\n    if transcript is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3f1e16e9389c9c8f442f0cd17e63171d9487fe7509b6e2d5bc8425efc6337067"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 5,
                  "charOffset": 3571,
                  "charLength": 4,
                  "snippet": {
                    "text": "myIO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "charOffset": 3560,
                  "charLength": 108,
                  "snippet": {
                    "text": "    )\n\n    myIO = BytesIO()\n    myIO.write(var)\n    with open(f\"transcript-{channel.name}.html\", \"wb\") as f:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "09375c7f63da02f6b809c09057718c63c0f41db026aa3b5afe75c1ff10efce80"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 5,
                  "charOffset": 3783,
                  "charLength": 6,
                  "snippet": {
                    "text": "S3_URL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "charOffset": 3703,
                  "charLength": 253,
                  "snippet": {
                    "text": "\n    S3_upload_file(f\"transcript-{channel.name}.html\", \"ch-transcriptlogs\")\n    S3_URL = f\"[Direct Transcript Link](https://acad-transcripts.schoolsimplified.org/transcript-{channel.name}.html)\"\n    embed.add_field(name=\"Transcript Link\", value=S3_URL)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9422cf2b468df30eb57cd0af95f6d6caf8cfc6038f886bd59b1e7067e8b132df"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 5,
                  "charOffset": 4554,
                  "charLength": 10,
                  "snippet": {
                    "text": "decodeDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 4548,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21174bd1753fc9fb2db20e45e174901578807f88386083afdb9e9bcce741dbb8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 5,
                  "charOffset": 4838,
                  "charLength": 12,
                  "snippet": {
                    "text": "EssayOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 167,
                  "startColumn": 1,
                  "charOffset": 4825,
                  "charLength": 127,
                  "snippet": {
                    "text": "    \"\"\"\n\n    EssayOptions = [\n        discord.SelectOption(label=\"Essay Reviser\"),\n        discord.SelectOption(label=\"Other\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "13eab29e70fce1eddc6ce550b45bdb61ba651a7a27a38f79dee7eff29aed5fac"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 5,
                  "charOffset": 4964,
                  "charLength": 14,
                  "snippet": {
                    "text": "EnglishOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 172,
                  "startColumn": 1,
                  "charOffset": 4953,
                  "charLength": 143,
                  "snippet": {
                    "text": "    ]\n\n    EnglishOptions = [\n        discord.SelectOption(label=\"English Language\"),\n        discord.SelectOption(label=\"English Literature\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "32d518240a3d086e71576be6edbcc5981dfa92a267ddc1dd7a964c33f78d1e09"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 5,
                  "charOffset": 5153,
                  "charLength": 11,
                  "snippet": {
                    "text": "MathOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 5142,
                  "charLength": 121,
                  "snippet": {
                    "text": "    ]\n\n    MathOptions = [\n        discord.SelectOption(label=\"Algebra\"),\n        discord.SelectOption(label=\"Geometry\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "09f97de8e8c56af399473842b6feb70493690c23584f21150dad34712848c5e2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 5,
                  "charOffset": 5481,
                  "charLength": 14,
                  "snippet": {
                    "text": "ScienceOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 1,
                  "charOffset": 5470,
                  "charLength": 125,
                  "snippet": {
                    "text": "    ]\n\n    ScienceOptions = [\n        discord.SelectOption(label=\"Biology\"),\n        discord.SelectOption(label=\"Chemistry\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "35ecb7fc53cb75e2876b76e9081ea9f67aa91815b6def970683879cd34c2f3e2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 5,
                  "charOffset": 5744,
                  "charLength": 20,
                  "snippet": {
                    "text": "SocialStudiesOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 195,
                  "startColumn": 1,
                  "charOffset": 5733,
                  "charLength": 138,
                  "snippet": {
                    "text": "    ]\n\n    SocialStudiesOptions = [\n        discord.SelectOption(label=\"World History\"),\n        discord.SelectOption(label=\"US History\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "77a6998a4aedd9f885820dc471466f1a73529cd087b247dff1ecc3f974415ae8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 5,
                  "charOffset": 6114,
                  "charLength": 15,
                  "snippet": {
                    "text": "LanguageOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 205,
                  "startColumn": 1,
                  "charOffset": 6103,
                  "charLength": 123,
                  "snippet": {
                    "text": "    ]\n\n    LanguageOptions = [\n        discord.SelectOption(label=\"French\"),\n        discord.SelectOption(label=\"Chinese\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c67e9fb003a7f010188710bcb523c4962ebd468db82701541bcb8f22ec82be61"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 5,
                  "charOffset": 6376,
                  "charLength": 12,
                  "snippet": {
                    "text": "OtherOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 213,
                  "startColumn": 1,
                  "charOffset": 6365,
                  "charLength": 132,
                  "snippet": {
                    "text": "    ]\n\n    OtherOptions = [\n        discord.SelectOption(label=\"Computer Science\"),\n        discord.SelectOption(label=\"Fine Arts\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f5facde602947d40fce93ced364588b0a6a63d7115f3a2e4d52e33d44887e3a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 5,
                  "charOffset": 6604,
                  "charLength": 10,
                  "snippet": {
                    "text": "decodeName"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 220,
                  "startColumn": 1,
                  "charOffset": 6593,
                  "charLength": 119,
                  "snippet": {
                    "text": "    ]\n\n    decodeName = {\n        \"['Math Helpers']\": \"Math Helpers\",\n        \"['Science Helpers']\": \"Science Helpers\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "87b91b7d76e1b4ffb1cc966423e9cbaa7994b3c30fe8ce0be1e4c415f971ec4e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 5,
                  "charOffset": 6982,
                  "charLength": 13,
                  "snippet": {
                    "text": "decodeOptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 230,
                  "startColumn": 1,
                  "charOffset": 6971,
                  "charLength": 116,
                  "snippet": {
                    "text": "    }\n\n    decodeOptList = {\n        \"['Math Helpers']\": MathOptions,\n        \"['Science Helpers']\": ScienceOptions,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4653205490aa1feaf94c77277c5148695bfd504d14b71dcf2553a1639c227ded"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 9,
                  "charOffset": 7497,
                  "charLength": 8,
                  "snippet": {
                    "text": "decodeID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 244,
                  "startColumn": 1,
                  "charOffset": 7391,
                  "charLength": 224,
                  "snippet": {
                    "text": "            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n        )\n        decodeID = {\n            \"['Math Helpers']\": q.cat_mathticket,\n            \"['Science Helpers']\": q.cat_scienceticket,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e2d0ceebc7a581900baeef17758f45ac1ada48573a71cc6bae860ea59549c1b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 9,
                  "charOffset": 7928,
                  "charLength": 8,
                  "snippet": {
                    "text": "decodeID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 254,
                  "startColumn": 1,
                  "charOffset": 7900,
                  "charLength": 158,
                  "snippet": {
                    "text": "        }\n    else:\n        decodeID = {\n            \"['Math Helpers']\": MAIN_ID.cat_mathTicket,\n            \"['Science Helpers']\": MAIN_ID.cat_scienceTicket,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3309ac2a38a914486c827f7809ab093ce99fd1f2b0a127a01f47fc6cb3fad6c2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 5,
                  "charOffset": 8417,
                  "charLength": 10,
                  "snippet": {
                    "text": "CategoryID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 265,
                  "startColumn": 1,
                  "charOffset": 8383,
                  "charLength": 127,
                  "snippet": {
                    "text": "\n    name = decodeName[value]\n    CategoryID = decodeID[value]\n    if type(decodeOptList[value]) == int:\n        OptList = name"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d19c69b0f96c8e188d5d96c3937a1e29cf0f4e5fda7b8a3f52bdee976e903f7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 9,
                  "charOffset": 8496,
                  "charLength": 7,
                  "snippet": {
                    "text": "OptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 267,
                  "startColumn": 1,
                  "charOffset": 8413,
                  "charLength": 146,
                  "snippet": {
                    "text": "    CategoryID = decodeID[value]\n    if type(decodeOptList[value]) == int:\n        OptList = name\n    else:\n        OptList = decodeOptList[value]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "673fd970293dac1816dc9fd382fb918d025f71c57b9f6b2b7e21e1515a73b159"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 9,
                  "charOffset": 8529,
                  "charLength": 7,
                  "snippet": {
                    "text": "OptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "charOffset": 8488,
                  "charLength": 109,
                  "snippet": {
                    "text": "        OptList = name\n    else:\n        OptList = decodeOptList[value]\n\n    return name, CategoryID, OptList"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a85f14280defab2eadf607dfe8104c1209ba70990103c63319cb26a17d5f212a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 5,
                  "charOffset": 8604,
                  "charLength": 7,
                  "snippet": {
                    "text": "getRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 274,
                  "startColumn": 1,
                  "charOffset": 8598,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "476e4dead5b13742d4a7c5dd47dea16e3d5ed23d3177e729e3140e8f919cf3ab"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 27,
                  "charOffset": 8639,
                  "charLength": 16,
                  "snippet": {
                    "text": "mainSubject: str"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 275,
                  "startColumn": 1,
                  "charOffset": 8599,
                  "charLength": 152,
                  "snippet": {
                    "text": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f03549957c7f3fa41c1d6891c62f20f239a8a3dddb50e49f43c4f0cdf8eac96"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 5,
                  "charOffset": 8975,
                  "charLength": 11,
                  "snippet": {
                    "text": "mainSubject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 288,
                  "startColumn": 1,
                  "charOffset": 8962,
                  "charLength": 77,
                  "snippet": {
                    "text": "    \"\"\"\n\n    mainSubject = mainSubject.title()\n    subject = subject.title()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "18221d5f3a9d7f5d1f1f721df4afd71757896685114180da478eeb72c870af15"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 9,
                  "charOffset": 10125,
                  "charLength": 7,
                  "snippet": {
                    "text": "Sandbox"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 326,
                  "startColumn": 1,
                  "charOffset": 10052,
                  "charLength": 174,
                  "snippet": {
                    "text": "\n    async def callback(self, interaction: discord.Interaction):\n        Sandbox = False\n        if interaction.message.guild.id == TECH_ID.g_tech:\n            Sandbox = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "05ca347f2174943eee7109e37a75e4d874770b66baff0e7481da7e8142541422"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 13,
                  "charOffset": 10212,
                  "charLength": 7,
                  "snippet": {
                    "text": "Sandbox"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 328,
                  "startColumn": 1,
                  "charOffset": 10117,
                  "charLength": 180,
                  "snippet": {
                    "text": "        Sandbox = False\n        if interaction.message.guild.id == TECH_ID.g_tech:\n            Sandbox = True\n\n        bucket = self.view.cd_mapping.get_bucket(interaction.message)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6a5854ca20ab9db6e8084fd2ad9fee854d9a72124c45e80142c18a2fdee6389f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 13,
                  "charOffset": 10718,
                  "charLength": 9,
                  "snippet": {
                    "text": "DMChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 341,
                  "startColumn": 1,
                  "charOffset": 10622,
                  "charLength": 206,
                  "snippet": {
                    "text": "            guild = interaction.message.guild\n            author = interaction.user\n            DMChannel = await author.create_dm()\n            try:\n                await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "39ec07b5c864afb6c1ff008356b2002ec1ce08cb6ef9eb906107691da19a6de0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 13,
                  "charOffset": 11237,
                  "charLength": 3,
                  "snippet": {
                    "text": "MSV"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 356,
                  "startColumn": 1,
                  "charOffset": 11206,
                  "charLength": 178,
                  "snippet": {
                    "text": "                )\n\n            MSV = discord.ui.View()\n            var = SelectMenuHandler(\n                MasterSubjectOptions, \"persistent_view:ticketdrop\", \"Click a subject!\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d005e3348896e664265792eace603bbcb6c2c560497e1eaa97c864ff969b90bd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 17,
                  "charOffset": 11989,
                  "charLength": 17,
                  "snippet": {
                    "text": "MasterSubjectView"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 373,
                  "startColumn": 1,
                  "charOffset": 11906,
                  "charLength": 213,
                  "snippet": {
                    "text": "            timeout = await MSV.wait()\n            if not timeout:\n                MasterSubjectView = var.view_response\n            else:\n                return await DMChannel.send(\"Timed out, try again later.\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "855fbf49212d1b8f61bec18a6b1c3581112b35ed908e7170b3b8a61f0667a606"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 13,
                  "charOffset": 12133,
                  "charLength": 12,
                  "snippet": {
                    "text": "ViewResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 377,
                  "startColumn": 1,
                  "charOffset": 12045,
                  "charLength": 237,
                  "snippet": {
                    "text": "                return await DMChannel.send(\"Timed out, try again later.\")\n\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3a7a9ee81153a285d886e0910a9ec2b44c5faa61cd3059a6085edd624e46ab3b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 13,
                  "charOffset": 12183,
                  "charLength": 11,
                  "snippet": {
                    "text": "TypeSubject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 378,
                  "startColumn": 1,
                  "charOffset": 12120,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ab7823136064b1308cd682e1372a84a1597dd78cba23e5d0d96f95820a66785"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 26,
                  "charOffset": 12196,
                  "charLength": 10,
                  "snippet": {
                    "text": "CategoryID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 378,
                  "startColumn": 1,
                  "charOffset": 12120,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ef1986e7fc945747d0c82828f10770ceefef92f0c3741382ee372772a821ab1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 38,
                  "charOffset": 12208,
                  "charLength": 7,
                  "snippet": {
                    "text": "OptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 378,
                  "startColumn": 1,
                  "charOffset": 12120,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4bf55d1ae3f3795bfd5c9157d891ce3d7bd432d7bd81af8d32885db8f6d41067"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 17,
                  "charOffset": 12429,
                  "charLength": 11,
                  "snippet": {
                    "text": "MiscOptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 384,
                  "startColumn": 1,
                  "charOffset": 12369,
                  "charLength": 168,
                  "snippet": {
                    "text": "\n            if not TypeSubject == OptList:\n                MiscOptList = discord.ui.View()\n                MiscOptList.add_item(\n                    SelectMenuHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c13f6ea545169578efa265b2d2b8463890941e9f7e828eb8f4245aafd4341d0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 13,
                  "charOffset": 17843,
                  "charLength": 10,
                  "snippet": {
                    "text": "CounterNum"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 508,
                  "startColumn": 1,
                  "charOffset": 17753,
                  "charLength": 221,
                  "snippet": {
                    "text": "                        return await DMChannel.send(\"No attachments found.\")\n\n            CounterNum = (\n                database.BaseTickerInfo.select()\n                .where(database.BaseTickerInfo.guildID == guild.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aa656774fc4f69d30b958e9e49717af1a3c6095978e2b141db5a52c99396a949"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 13,
                  "charOffset": 18024,
                  "charLength": 4,
                  "snippet": {
                    "text": "TNUM"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 513,
                  "startColumn": 1,
                  "charOffset": 17975,
                  "charLength": 160,
                  "snippet": {
                    "text": "                .get()\n            )\n            TNUM = CounterNum.counter\n            CounterNum.counter = CounterNum.counter + 1\n            CounterNum.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0b479e37d57c8a01919c7925d161dcf67faa43ebe218b4bb65f99f737334f7c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 13,
                  "charOffset": 18149,
                  "charLength": 3,
                  "snippet": {
                    "text": "LDC"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 517,
                  "startColumn": 1,
                  "charOffset": 18106,
                  "charLength": 156,
                  "snippet": {
                    "text": "            CounterNum.save()\n\n            LDC = await DMChannel.send(\n                f\"Please wait, creating your ticket {Emoji.loadingGIF}\"\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "99d16f1618b9d1e378099fdd0c5662c8891bfbc7e623fb1f6f9fe9b767198016"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 17,
                  "charOffset": 18330,
                  "charLength": 11,
                  "snippet": {
                    "text": "mainSubject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 522,
                  "startColumn": 1,
                  "charOffset": 18263,
                  "charLength": 142,
                  "snippet": {
                    "text": "\n            if TypeSubject == \"Language Helpers\":\n                mainSubject = \"languages\"\n            else:\n                mainSubject = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "57a012384076bbfddd6a3f2935e01009ef9bf6b2b83eeef7e823fa9e4b715201"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 526,
                  "startColumn": 17,
                  "charOffset": 18390,
                  "charLength": 11,
                  "snippet": {
                    "text": "mainSubject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 524,
                  "startColumn": 1,
                  "charOffset": 18314,
                  "charLength": 173,
                  "snippet": {
                    "text": "                mainSubject = \"languages\"\n            else:\n                mainSubject = (\n                    c.name.replace(\"═\", \"\")\n                    .replace(\"⁃\", \"\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "82e023a8fecbd21a2e66a51543a11654106bdacc3a32f8cecb4f85253fd48335"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 21,
                  "charOffset": 19792,
                  "charLength": 7,
                  "snippet": {
                    "text": "RoleOBJ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 563,
                  "startColumn": 1,
                  "charOffset": 19719,
                  "charLength": 190,
                  "snippet": {
                    "text": "                ]\n                for role in roles:\n                    RoleOBJ = discord.utils.get(\n                        interaction.message.guild.roles, name=role\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f01eeaba3108b2151ff59b3f1c57ad0d8c8d2240069a4a3536235b49a3f43491"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 21,
                  "charOffset": 20258,
                  "charLength": 7,
                  "snippet": {
                    "text": "RoleOBJ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 574,
                  "startColumn": 1,
                  "charOffset": 20169,
                  "charLength": 195,
                  "snippet": {
                    "text": "                        reason=\"Ticket Perms\",\n                    )\n                    RoleOBJ = discord.utils.get(guild.roles, name=role)\n                    if (\n                        not ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c565028ded0f395dfe4edeeb6c17948659caaf7fbae18378b859dcf9c375f130"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 608,
                  "startColumn": 25,
                  "charOffset": 21765,
                  "charLength": 7,
                  "snippet": {
                    "text": "RoleOBJ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 606,
                  "startColumn": 1,
                  "charOffset": 21656,
                  "charLength": 234,
                  "snippet": {
                    "text": "                    roles = [\"Essay Reviser\"]\n                    for role in roles:\n                        RoleOBJ = discord.utils.get(\n                            interaction.message.guild.roles, name=role\n                        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "53581c1b5def12c72e75a55b3c667ef023519808203d031deacede0a45d4d6f6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 25,
                  "charOffset": 22300,
                  "charLength": 7,
                  "snippet": {
                    "text": "RoleOBJ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 618,
                  "startColumn": 1,
                  "charOffset": 22178,
                  "charLength": 247,
                  "snippet": {
                    "text": "                    roles = [\"Chat Helper\", \"Lead Helper\"]\n                    for role in roles:\n                        RoleOBJ = discord.utils.get(\n                            interaction.message.guild.roles, name=role\n                        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "70b49f0b167c6ecdecfc185eb9a13131fcb05d690791735e61106a756ad8f155"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 642,
                  "startColumn": 13,
                  "charOffset": 23138,
                  "charLength": 13,
                  "snippet": {
                    "text": "controlTicket"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 640,
                  "startColumn": 1,
                  "charOffset": 23111,
                  "charLength": 170,
                  "snippet": {
                    "text": "            )\n\n            controlTicket = discord.Embed(\n                title=\"Control Panel\",\n                description=\"To end this ticket, click the lock button!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "100f436710e7e9e8b7209651366729007544500f47fb07593c266b2b3dac3dc8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 647,
                  "startColumn": 13,
                  "charOffset": 23353,
                  "charLength": 17,
                  "snippet": {
                    "text": "LockControlButton"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 645,
                  "startColumn": 1,
                  "charOffset": 23282,
                  "charLength": 179,
                  "snippet": {
                    "text": "                color=discord.Colour.gold(),\n            )\n            LockControlButton = discord.ui.View()\n            LockControlButton.add_item(\n                ButtonHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8e1e3c0579954b373ca6eeb85380f75227ac356c81e24c511876872cab1517e4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 659,
                  "startColumn": 13,
                  "charOffset": 23733,
                  "charLength": 3,
                  "snippet": {
                    "text": "LCM"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 657,
                  "startColumn": 1,
                  "charOffset": 23706,
                  "charLength": 152,
                  "snippet": {
                    "text": "            )\n\n            LCM = await channel.send(\n                interaction.user.mention, embed=controlTicket, view=LockControlButton\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cc9e609d72a24e10c4c689f5dd55557871da4123381fc436a3ae3603794d916d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 700,
                  "startColumn": 17,
                  "charOffset": 25538,
                  "charLength": 11,
                  "snippet": {
                    "text": "mentionRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 698,
                  "startColumn": 1,
                  "charOffset": 25499,
                  "charLength": 177,
                  "snippet": {
                    "text": "                    )\n\n                mentionRole = getRole(interaction.guild, mainSubject, selection_str)\n\n                await channel.send(mentionRole.mention, embed=embed)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a32a6209307d2eff983956f7af1a194d31d28dc4d15dec47ab02c1e51ddd1d8e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 15,
                  "charOffset": 27735,
                  "charLength": 14,
                  "snippet": {
                    "text": "TicketDropdown"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 758,
                  "startColumn": 1,
                  "charOffset": 27675,
                  "charLength": 163,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def TicketDropdown(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6afe02ed5c934ee6cb54290637cdae5f6417750fef0045b785eb3fdd77835e58"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 761,
                  "startColumn": 9,
                  "charOffset": 27799,
                  "charLength": 19,
                  "snippet": {
                    "text": "InteractionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 759,
                  "startColumn": 1,
                  "charOffset": 27676,
                  "charLength": 202,
                  "snippet": {
                    "text": "    @commands.Cog.listener(\"on_interaction\")\n    async def TicketDropdown(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eec2b55ecddf49419dd19b2a84aed7ff2e6e051bee2ba486c63d6a4ad014bfd1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 13,
                  "charOffset": 28798,
                  "charLength": 11,
                  "snippet": {
                    "text": "ButtonViews"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 790,
                  "startColumn": 1,
                  "charOffset": 28728,
                  "charLength": 166,
                  "snippet": {
                    "text": "                color=discord.Colour.red(),\n            )\n            ButtonViews = discord.ui.View()\n            ButtonViews.add_item(\n                ButtonHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "87a1d8b5982e6717e2e04bbe7804fd391c9c8d87c886728b1688fa4507581b76"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 836,
                  "startColumn": 17,
                  "charOffset": 30382,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 834,
                  "startColumn": 1,
                  "charOffset": 30348,
                  "charLength": 153,
                  "snippet": {
                    "text": "\n            try:\n                TicketOwner = guild.get_member(query.authorID)\n            except discord.NotFound:\n                await channel.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d1b67eccda272f11840190941f1331e1606b6f1e48c607254cc88edfb765161"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 852,
                  "startColumn": 13,
                  "charOffset": 31095,
                  "charLength": 12,
                  "snippet": {
                    "text": "ButtonViews2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 850,
                  "startColumn": 1,
                  "charOffset": 31003,
                  "charLength": 160,
                  "snippet": {
                    "text": "            )\n            embed.set_footer(text=\"This ticket has been closed!\")\n            ButtonViews2 = discord.ui.View()\n\n            ButtonViews2.add_item("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1317761e9cfc77f1a3fc64338623b86448b926b7866dc63fabf4c9ba93f6c331"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 924,
                  "startColumn": 17,
                  "charOffset": 33700,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 922,
                  "startColumn": 1,
                  "charOffset": 33653,
                  "charLength": 166,
                  "snippet": {
                    "text": "            )\n            try:\n                TicketOwner = guild.get_member(query.authorID)\n            except discord.NotFound:\n                await channel.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e24c8f782c695c05e8b99fb1d72af9236a0b5c23b29cd649bd9e25f6b9575d05"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 945,
                  "startColumn": 17,
                  "charOffset": 34565,
                  "charLength": 18,
                  "snippet": {
                    "text": "ResponseLogChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 943,
                  "startColumn": 1,
                  "charOffset": 34452,
                  "charLength": 240,
                  "snippet": {
                    "text": "            channel = interaction.channel\n            if interaction.guild.id == MAIN_ID.g_main:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    MAIN_ID.ch_transcriptLogs\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aea72f67ebff3e8993a1407f8b09c4361a4be52121c4f2b73a1d5dbfdc7950d0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 949,
                  "startColumn": 17,
                  "charOffset": 34727,
                  "charLength": 18,
                  "snippet": {
                    "text": "ResponseLogChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 947,
                  "startColumn": 1,
                  "charOffset": 34675,
                  "charLength": 174,
                  "snippet": {
                    "text": "                )\n            else:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    TECH_ID.ch_ticketLog\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "af55ed2ed4d4c1bf9dca653d73488511da0d86f8f924608e7a54e7c6a3125c65"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 957,
                  "startColumn": 24,
                  "charOffset": 35082,
                  "charLength": 6,
                  "snippet": {
                    "text": "S3_URL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 955,
                  "startColumn": 1,
                  "charOffset": 35044,
                  "charLength": 150,
                  "snippet": {
                    "text": "            )\n\n            msg, file, S3_URL = await TicketExport(\n                self, channel, ResponseLogChannel, author, None, True\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "352f6136b295bced6bec3a6368080404181ac4dda9064ca52063a4238afa24a8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1007,
                  "startColumn": 17,
                  "charOffset": 37242,
                  "charLength": 18,
                  "snippet": {
                    "text": "ResponseLogChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1005,
                  "startColumn": 1,
                  "charOffset": 37133,
                  "charLength": 236,
                  "snippet": {
                    "text": "            author = interaction.user\n            if interaction.guild.id == MAIN_ID.g_main:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    MAIN_ID.ch_transcriptLogs\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1454861c72d9b91d6db290e2c7436458824e4328c7ace0226c77c91dc8564087"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1011,
                  "startColumn": 17,
                  "charOffset": 37404,
                  "charLength": 18,
                  "snippet": {
                    "text": "ResponseLogChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1009,
                  "startColumn": 1,
                  "charOffset": 37352,
                  "charLength": 174,
                  "snippet": {
                    "text": "                )\n            else:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    TECH_ID.ch_ticketLog\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4b51cf351a8271743abdb68bfae2ef625b83c1dd6accf94ebfbf391b9ce185d6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1019,
                  "startColumn": 13,
                  "charOffset": 37723,
                  "charLength": 4,
                  "snippet": {
                    "text": "msgO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1017,
                  "startColumn": 1,
                  "charOffset": 37674,
                  "charLength": 224,
                  "snippet": {
                    "text": "                .get()\n            )\n            msgO = await interaction.channel.send(\n                f\"{author.mention}\\nPlease wait, generating a transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "08813934c9724d16d6c3c74b6eff85e3b34af090436979cb5b54b313fc489a7c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1022,
                  "startColumn": 13,
                  "charOffset": 37911,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1020,
                  "startColumn": 1,
                  "charOffset": 37762,
                  "charLength": 264,
                  "snippet": {
                    "text": "                f\"{author.mention}\\nPlease wait, generating a transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )\n            TicketOwner = self.bot.get_user(query.authorID)\n\n            messages = await channel.history(limit=None).flatten()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9aeee88c41fd016466c238e2a43dcb036f86f0d251562364058d0cbebf6aa0d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1025,
                  "startColumn": 13,
                  "charOffset": 38039,
                  "charLength": 10,
                  "snippet": {
                    "text": "authorList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1023,
                  "startColumn": 1,
                  "charOffset": 37959,
                  "charLength": 129,
                  "snippet": {
                    "text": "\n            messages = await channel.history(limit=None).flatten()\n            authorList = []\n\n            for msg in messages:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6f41d4b372e5add6581c1e2ab7c97ab8e79d7dae60569889a400450472370503"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1098,
                  "startColumn": 13,
                  "charOffset": 41184,
                  "charLength": 11,
                  "snippet": {
                    "text": "ButtonViews"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1096,
                  "startColumn": 1,
                  "charOffset": 41114,
                  "charLength": 166,
                  "snippet": {
                    "text": "                color=discord.Colour.red(),\n            )\n            ButtonViews = discord.ui.View()\n            ButtonViews.add_item(\n                ButtonHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "88bdd1d1de7f9a032eb6f833a39cc8259dc8bf922c262d35627370141e6988c4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1122,
                  "startColumn": 15,
                  "charOffset": 42021,
                  "charLength": 14,
                  "snippet": {
                    "text": "TicketInactive"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1120,
                  "startColumn": 1,
                  "charOffset": 41977,
                  "charLength": 143,
                  "snippet": {
                    "text": "\n    @tasks.loop(minutes=1.0)\n    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        for entry in TicketInfoTB:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "307188b884bc3e30bc5a6163f325bfa265e52fcc8c98e0f1da339b6089ba6084"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1123,
                  "startColumn": 9,
                  "charOffset": 42051,
                  "charLength": 12,
                  "snippet": {
                    "text": "TicketInfoTB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1121,
                  "startColumn": 1,
                  "charOffset": 41978,
                  "charLength": 159,
                  "snippet": {
                    "text": "    @tasks.loop(minutes=1.0)\n    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        for entry in TicketInfoTB:\n            try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3a1a745db69542e1a82324dcd1c58bea8ff38bb25e821e0d2b597ab5d2c03475"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1131,
                  "startColumn": 13,
                  "charOffset": 42333,
                  "charLength": 12,
                  "snippet": {
                    "text": "fetchMessage"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1129,
                  "startColumn": 1,
                  "charOffset": 42261,
                  "charLength": 254,
                  "snippet": {
                    "text": "            except Exception as e:\n                continue\n            fetchMessage = await channel.history(limit=1).flatten()\n            TicketOwner = self.bot.get_user(entry.authorID)\n            messages = await channel.history(limit=None).flatten()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d902727e93336f8790205ae91d5bf61b0205785df8cd4af4c9bb498f6c9717a0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1132,
                  "startColumn": 13,
                  "charOffset": 42401,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1130,
                  "startColumn": 1,
                  "charOffset": 42296,
                  "charLength": 287,
                  "snippet": {
                    "text": "                continue\n            fetchMessage = await channel.history(limit=1).flatten()\n            TicketOwner = self.bot.get_user(entry.authorID)\n            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1594c6f38fce8fa0cacb81294d32e93ca7e201c3ae9d84b5433452fb11b02da0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1134,
                  "startColumn": 13,
                  "charOffset": 42528,
                  "charLength": 5,
                  "snippet": {
                    "text": "LogCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1132,
                  "startColumn": 1,
                  "charOffset": 42389,
                  "charLength": 257,
                  "snippet": {
                    "text": "            TicketOwner = self.bot.get_user(entry.authorID)\n            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0964b2e2f2e2b1e5d8a478ee0654a54f15f8ef1f8d46e840f3e7818a42c91b98"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1135,
                  "startColumn": 13,
                  "charOffset": 42596,
                  "charLength": 10,
                  "snippet": {
                    "text": "authorList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1133,
                  "startColumn": 1,
                  "charOffset": 42449,
                  "charLength": 222,
                  "snippet": {
                    "text": "            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:\n                continue"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "256483d4e29d884e45ff1ee37c8113ee2ac450a9cba9caa68df96b5d8ccfe7a3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1143,
                  "startColumn": 17,
                  "charOffset": 42871,
                  "charLength": 12,
                  "snippet": {
                    "text": "ButtonViews2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1141,
                  "startColumn": 1,
                  "charOffset": 42777,
                  "charLength": 166,
                  "snippet": {
                    "text": "                - timedelta(minutes=self.TICKET_INACTIVE_TIME)\n            ):\n                ButtonViews2 = discord.ui.View()\n\n                ButtonViews2.add_item("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5f0a8f42de0d0d65ed82aa2d98d4dc4dc13743c45e9b772da0ccc92bd6ebdbf3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1214,
                  "startColumn": 15,
                  "charOffset": 45870,
                  "charLength": 13,
                  "snippet": {
                    "text": "sendCHTKTView"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1212,
                  "startColumn": 1,
                  "charOffset": 45815,
                  "charLength": 162,
                  "snippet": {
                    "text": "    @commands.command()\n    @is_botAdmin\n    async def sendCHTKTView(self, ctx):\n        MasterSubjectView = discord.ui.View()\n        MasterSubjectView.add_item("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab579e51079f8b5e388688173bdd4cf53e3f2bf2ec96b1a343771d8b6e841b52"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1215,
                  "startColumn": 9,
                  "charOffset": 45904,
                  "charLength": 17,
                  "snippet": {
                    "text": "MasterSubjectView"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1213,
                  "startColumn": 1,
                  "charOffset": 45839,
                  "charLength": 169,
                  "snippet": {
                    "text": "    @is_botAdmin\n    async def sendCHTKTView(self, ctx):\n        MasterSubjectView = discord.ui.View()\n        MasterSubjectView.add_item(\n            SelectMenuHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "342f11850b30f27a4ef5cfcffc490003d041daf13c3224751355ca40d6938bce"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 15,
                  "charOffset": 1218,
                  "charLength": 12,
                  "snippet": {
                    "text": "GSuiteVerify"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 1158,
                  "charLength": 200,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def GSuiteVerify(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n        if interaction.message is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0db664ed9d3a6f977b746e007a78d2934da1019901ff8d31e58cd2edf3cd1a3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 9,
                  "charOffset": 1280,
                  "charLength": 19,
                  "snippet": {
                    "text": "InteractionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1159,
                  "charLength": 218,
                  "snippet": {
                    "text": "    @commands.Cog.listener(\"on_interaction\")\n    async def GSuiteVerify(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n        if interaction.message is None:\n            return"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c96d0baada745254d3dd55f28008f844776e1737d120c2f32a4b3f8415da2a7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 15,
                  "charOffset": 7666,
                  "charLength": 17,
                  "snippet": {
                    "text": "pasteGSuiteButton"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 175,
                  "startColumn": 1,
                  "charOffset": 7611,
                  "charLength": 166,
                  "snippet": {
                    "text": "    @commands.command()\n    @is_botAdmin\n    async def pasteGSuiteButton(self, ctx):\n        embed = discord.Embed(\n            title=\"Alternate Verification Method\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3e67bb850947ed992a12e03e7c9c0896f95f4ed4c398e17fcbd715da4bcf89c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 9,
                  "charOffset": 7979,
                  "charLength": 12,
                  "snippet": {
                    "text": "GSuiteButton"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 7920,
                  "charLength": 144,
                  "snippet": {
                    "text": "            color=discord.Color.green(),\n        )\n        GSuiteButton = GSuiteVerify()\n        await ctx.send(embed=embed, view=GSuiteButton)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66d3e5794585cedd98f0eab98a4498e9de048faf3043bba40b16e2e085f543dc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "charOffset": 239,
                  "charLength": 12,
                  "snippet": {
                    "text": "getEqualRank"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "charOffset": 233,
                  "charLength": 74,
                  "snippet": {
                    "text": "\n\ndef getEqualRank(query):\n    if query not in config:\n        return None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4f79584cde8da264f0a7ec3dccbc16904bf5d9c964a2cc745e475643bc80eaf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 11,
                  "charOffset": 365,
                  "charLength": 13,
                  "snippet": {
                    "text": "roleNameCheck"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 353,
                  "charLength": 119,
                  "snippet": {
                    "text": "\n\nasync def roleNameCheck(self, name: str, guild: discord.Guild, user: discord.Member):\n    check = getEqualRank(name)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "af19b7186f2d59ed1da853567e89c2446e699862ef98ca337d0a41a4d18ccb17"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 15,
                  "charOffset": 1205,
                  "charLength": 17,
                  "snippet": {
                    "text": "StaffVerification"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 1145,
                  "charLength": 166,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b00d9c715ebe8a9b5235a43a60585c6f12a895d123d25ff4adb89c0db807dd8c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 9,
                  "charOffset": 1272,
                  "charLength": 19,
                  "snippet": {
                    "text": "InteractionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 1146,
                  "charLength": 205,
                  "snippet": {
                    "text": "    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "738ba4c6c18b868c3f608dc807412adbef25cfdce1e346f80221b95edd3e750d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 13,
                  "charOffset": 1567,
                  "charLength": 11,
                  "snippet": {
                    "text": "staffServer"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 1515,
                  "charLength": 151,
                  "snippet": {
                    "text": "            print(interaction.user.id)\n\n            staffServer: discord.Guild = self.bot.get_guild(\n                interaction.guild_id\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f11f861c4aee049c36c8f2af845ac8401f9598a5d1c9a1b56b5268860c134011"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 13,
                  "charOffset": 1710,
                  "charLength": 17,
                  "snippet": {
                    "text": "StaffServerMember"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 1653,
                  "charLength": 166,
                  "snippet": {
                    "text": "            )\n            print(staffServer)\n            StaffServerMember: discord.Member = staffServer.get_member(\n                interaction.user.id\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dc2d591758cf7dc4f920bbf599eb0126efc2c54c6a5769fec91100d0669ab99d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 17,
                  "charOffset": 1943,
                  "charLength": 17,
                  "snippet": {
                    "text": "StaffServerMember"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 1,
                  "charOffset": 1858,
                  "charLength": 202,
                  "snippet": {
                    "text": "            if StaffServerMember is None:\n                print(\"h\")\n                StaffServerMember: discord.Member = staffServer.get_member(\n                    interaction.user.id\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "523aa7d153de24f2d84d103346bafa9bcea7d8e770b5e4c226c54d3817fa684f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 13,
                  "charOffset": 3276,
                  "charLength": 19,
                  "snippet": {
                    "text": "VerificationChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 1,
                  "charOffset": 3236,
                  "charLength": 183,
                  "snippet": {
                    "text": "                    return\n\n            VerificationChannel = interaction.channel\n            logchannel = self.bot.get_channel(\n                self.staffServer[interaction.guild_id]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f920e0042cb26a5226ec88e6b12902f87832586a04ceebb402d552316386727"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 13,
                  "charOffset": 3447,
                  "charLength": 13,
                  "snippet": {
                    "text": "VerifiedRoles"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3420,
                  "charLength": 78,
                  "snippet": {
                    "text": "            )\n\n            VerifiedRoles = []\n            VerifiedGuilds = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7e48cea8c98ed5fe9e2a21b8cdc7ff000e057f5a8175a4300ce222659ec3530c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 13,
                  "charOffset": 3478,
                  "charLength": 14,
                  "snippet": {
                    "text": "VerifiedGuilds"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 105,
                  "startColumn": 1,
                  "charOffset": 3434,
                  "charLength": 102,
                  "snippet": {
                    "text": "\n            VerifiedRoles = []\n            VerifiedGuilds = []\n\n            for ID in self.ServerIDs:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e617c616961a83ffb0393ae74d645500bfa6f831e18d7ccadcaba8c433a850a6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 21,
                  "charOffset": 3641,
                  "charLength": 12,
                  "snippet": {
                    "text": "ServerMember"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 1,
                  "charOffset": 3537,
                  "charLength": 219,
                  "snippet": {
                    "text": "                server: discord.Guild = self.bot.get_guild(ID)\n                try:\n                    ServerMember: discord.Member = server.get_member(\n                        interaction.user.id\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "370ca2d44d38acfdf58e2f448c8910b594f3572cf7454ebf9b85ee680c4ff476"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 21,
                  "charOffset": 3915,
                  "charLength": 9,
                  "snippet": {
                    "text": "roleNames"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 119,
                  "startColumn": 1,
                  "charOffset": 3872,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n                else:\n                    roleNames = [role for role in ServerMember.roles]\n\n                    for role in roleNames:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0bd162534789e310dc0edb19cd1286f424ef0bd7e5141a5d752a0ac5617148ab"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 29,
                  "charOffset": 4189,
                  "charLength": 8,
                  "snippet": {
                    "text": "checkSTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 4114,
                  "charLength": 243,
                  "snippet": {
                    "text": "\n                        if check is not None:\n                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "20cd06a3e627703585856c20fe2388c25cbe20bccd9fd6078ce88188e590847a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 29,
                  "charOffset": 4245,
                  "charLength": 12,
                  "snippet": {
                    "text": "markdownRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 127,
                  "startColumn": 1,
                  "charOffset": 4115,
                  "charLength": 243,
                  "snippet": {
                    "text": "                        if check is not None:\n                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9151c2bba09e90ef8ab7076ab9c3c8cce0d2074e1ea814ebd1ae45ead7e7f8e6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 29,
                  "charOffset": 4323,
                  "charLength": 13,
                  "snippet": {
                    "text": "markdownGuild"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 4161,
                  "charLength": 263,
                  "snippet": {
                    "text": "                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\"\n\n                            if markdownRole not in VerifiedRoles:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "af78d73eb1f74abecb469f376769f41e358e38a65ef203f5fac3a001e39e2c1c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 37,
                  "charOffset": 4826,
                  "charLength": 8,
                  "snippet": {
                    "text": "jsonROLE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 1,
                  "charOffset": 4657,
                  "charLength": 305,
                  "snippet": {
                    "text": "                            for elem in check:\n                                if elem in [role.name for role in staffServer.roles]:\n                                    jsonROLE = discord.utils.get(\n                                        staffServer.roles, name=elem\n                                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ab6da7de1cc555bf5a037d51f78631857f3c8c30ba3e1aeafd20da6f39b21a2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 17,
                  "charOffset": 6275,
                  "charLength": 12,
                  "snippet": {
                    "text": "VerifiedRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 166,
                  "startColumn": 1,
                  "charOffset": 6207,
                  "charLength": 186,
                  "snippet": {
                    "text": "                await logchannel.send(embed=embed)\n\n                VerifiedRole: discord.Role = discord.utils.get(\n                    staffServer.roles, name=\"Member\"\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "43972bb40f7ddb2478280bcb18949003a17bd1d76850e9c148b2fa9ea80f6f84"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 15,
                  "charOffset": 9102,
                  "charLength": 23,
                  "snippet": {
                    "text": "pasteVerificationButton"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 229,
                  "startColumn": 1,
                  "charOffset": 9063,
                  "charLength": 166,
                  "snippet": {
                    "text": "\n    @commands.command()\n    async def pasteVerificationButton(self, ctx):\n        button = VerifyButton()\n        await ctx.send(\"Click here to verify\", view=button)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "964ffcec6726648d908076d32a705e6c0f330f207f9aed472534301f03c002eb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 15,
                  "charOffset": 9269,
                  "charLength": 22,
                  "snippet": {
                    "text": "pasteVerificationEmbed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 234,
                  "startColumn": 1,
                  "charOffset": 9230,
                  "charLength": 156,
                  "snippet": {
                    "text": "\n    @commands.command()\n    async def pasteVerificationEmbed(self, ctx: commands.Context):\n        embed = discord.Embed(\n            title=\"Verification\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ad194ec9bf2df9aae8dfd0fc15f9e11d794ae52e037ddfcdb5ea81bc10dc6acc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 11,
                  "charOffset": 7575,
                  "charLength": 12,
                  "snippet": {
                    "text": "tictactoeCTX"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 250,
                  "startColumn": 1,
                  "charOffset": 7512,
                  "charLength": 162,
                  "snippet": {
                    "text": "\n@bot.user_command(name=\"Play TicTacToe with them!\")\nasync def tictactoeCTX(ctx, member: discord.Member):\n    if member is None:\n        return await ctx.respond("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e8a9151e3a8fc0034f435a77ff39bad7aa4fb226d461e4c387dce14ef97846a4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 11,
                  "charOffset": 8688,
                  "charLength": 13,
                  "snippet": {
                    "text": "mainModeCheck"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 286,
                  "startColumn": 1,
                  "charOffset": 8666,
                  "charLength": 179,
                  "snippet": {
                    "text": "\n@bot.check\nasync def mainModeCheck(ctx: commands.Context):\n    \"\"\"MT = discord.utils.get(ctx.guild.roles, name=\"Moderator\")\n    VP = discord.utils.get(ctx.guild.roles, name=\"VP\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "42f1a1c40c51176f062fc23d7cfaf6cac08ee87ab0da3aa937f426fecc6db3ae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 5,
                  "charOffset": 8978,
                  "charLength": 16,
                  "snippet": {
                    "text": "blacklistedUsers"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 292,
                  "startColumn": 1,
                  "charOffset": 8901,
                  "charLength": 176,
                  "snippet": {
                    "text": "    SS = discord.utils.get(ctx.guild.roles, name=844013914609680384)\"\"\"\n\n    blacklistedUsers = []\n    for p in database.Blacklist:\n        blacklistedUsers.append(p.discordID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "82226429e3ea7f89df0b087fe6b1fae3dfe3cd34afdcdf31caf4ae0185c487af"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 5,
                  "charOffset": 9083,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 296,
                  "startColumn": 1,
                  "charOffset": 9033,
                  "charLength": 162,
                  "snippet": {
                    "text": "        blacklistedUsers.append(p.discordID)\n\n    adminIDs = []\n    query = database.Administrators.select().where(\n        database.Administrators.TierLevel == 4"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "87ad2ff7a5b65952b565348b4528a617c7211983dbfc5ebcaab047b8ce119b32"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyAttributeOutsideInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Instance attribute index defined outside __init__",
            "markdown": "Instance attribute index defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 9,
                  "charOffset": 15397,
                  "charLength": 10,
                  "snippet": {
                    "text": "self.index"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 368,
                  "startColumn": 1,
                  "charOffset": 15298,
                  "charLength": 144,
                  "snippet": {
                    "text": "    async def get_page(self, page_number: int) -> Any:\n        # The front page is a dummy\n        self.index = page_number\n        return self\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "96187197b969788c302b05280a402f4d5ff2af3646817d02710acced06ef97ee"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyAttributeOutsideInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Instance attribute style defined outside __init__",
            "markdown": "Instance attribute style defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 13,
                  "charOffset": 1623,
                  "charLength": 10,
                  "snippet": {
                    "text": "self.style"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 1525,
                  "charLength": 200,
                  "snippet": {
                    "text": "\n        elif view.current_player == view.O and self.yUser.id == interaction.user.id:\n            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7ab6f11654ad037d778b407d05a5d1b61bd54052695c8a837909a729568fb136"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyAttributeOutsideInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Instance attribute label defined outside __init__",
            "markdown": "Instance attribute label defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 13,
                  "charOffset": 1676,
                  "charLength": 10,
                  "snippet": {
                    "text": "self.label"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 1526,
                  "charLength": 247,
                  "snippet": {
                    "text": "        elif view.current_player == view.O and self.yUser.id == interaction.user.id:\n            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True\n            view.board[self.y][self.x] = view.O"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "98e41187b425283a26c3228edf0c06981fcf1c786d0e8ecc122f2525c3c65fb7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyAttributeOutsideInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Instance attribute disabled defined outside __init__",
            "markdown": "Instance attribute disabled defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 13,
                  "charOffset": 1705,
                  "charLength": 13,
                  "snippet": {
                    "text": "self.disabled"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 1,
                  "charOffset": 1611,
                  "charLength": 203,
                  "snippet": {
                    "text": "            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True\n            view.board[self.y][self.x] = view.O\n            view.current_player = view.X"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "de4838714fb5ab020c29bbd5f2fc32c701a40b06d1dfe11b1afdd0e29aa8ca24"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 9,
                  "charOffset": 7806,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 225,
                  "startColumn": 1,
                  "charOffset": 7745,
                  "charLength": 86,
                  "snippet": {
                    "text": "        try:\n            os.remove(\"cred_file.json\")\n        except:\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f6e12dfbdba258918b8eab7a65177cdef5e185bb1cde90d4dbd24bc346e06dd8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 17,
                  "charOffset": 9013,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 237,
                  "startColumn": 1,
                  "charOffset": 8932,
                  "charLength": 114,
                  "snippet": {
                    "text": "                try:\n                    await msgError.delete()\n                except:\n                    pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8576cf463c335f00eb27f8e3819ef564241775a235fb8a6b38a027093b7f4bf5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 21,
                  "charOffset": 9805,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 259,
                  "startColumn": 1,
                  "charOffset": 9712,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1293b396dfb9152d9b12d8e047b684fc90b2d522b50add1cbed884ecfeb292d6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 21,
                  "charOffset": 9994,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 267,
                  "startColumn": 1,
                  "charOffset": 9901,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e08e6fde1b2f60599a74dd408b0835ac68281b5eac76421c1eaf79b0496dce9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 29,
                  "charOffset": 12114,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 312,
                  "startColumn": 1,
                  "charOffset": 11990,
                  "charLength": 169,
                  "snippet": {
                    "text": "                            try:\n                                await msgError.delete(delay=7)\n                            except:\n                                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "42f64368c0f02ce3b598180d7d7dd2da64e91218665f92d31cad1134cc05331b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 29,
                  "charOffset": 12929,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 333,
                  "startColumn": 1,
                  "charOffset": 12805,
                  "charLength": 169,
                  "snippet": {
                    "text": "                            try:\n                                await msgError.delete(delay=7)\n                            except:\n                                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9e2bbf6a409d713bd67e514f72d2b559a91a9fc1c2d471a04c955a087ad5f7c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 21,
                  "charOffset": 14246,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 365,
                  "startColumn": 1,
                  "charOffset": 14153,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d536f350c353191d69296342bc79767fb2fee1117123fd8b57f2bb00415d3dc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 25,
                  "charOffset": 15047,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 381,
                  "startColumn": 1,
                  "charOffset": 14933,
                  "charLength": 155,
                  "snippet": {
                    "text": "                        try:\n                            await msgTooLong.delete(delay=7)\n                        except:\n                            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72a9800716b18855d220de646e3c17b120f3d9b16bee7841e3abeb3b11efe0e6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 21,
                  "charOffset": 16181,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 409,
                  "startColumn": 1,
                  "charOffset": 16088,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a5c48bfb172b9a6cc4a3c2b4b752f8054ec5c9286ee26eac4f452a90db1c060f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 21,
                  "charOffset": 17280,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 436,
                  "startColumn": 1,
                  "charOffset": 17187,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d877c997b4705c47bea65830769b2ed46f668accf956f2104c5a465393538bce"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 465,
                  "startColumn": 25,
                  "charOffset": 18505,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 463,
                  "startColumn": 1,
                  "charOffset": 18393,
                  "charLength": 153,
                  "snippet": {
                    "text": "                        try:\n                            await msgError.delete(delay=7)\n                        except:\n                            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "000710b34b8d1fc80642894c96379521fec43a8edd5e283ccf4b87cf6540e961"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 25,
                  "charOffset": 20205,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 503,
                  "startColumn": 1,
                  "charOffset": 20093,
                  "charLength": 153,
                  "snippet": {
                    "text": "                        try:\n                            await msgError.delete(delay=7)\n                        except:\n                            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "52223c04764914b8793956911be52dd099ae2b381e5cf280b2dfeec23feee7be"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 561,
                  "startColumn": 13,
                  "charOffset": 22375,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 559,
                  "startColumn": 1,
                  "charOffset": 22306,
                  "charLength": 98,
                  "snippet": {
                    "text": "            try:\n                await msgError.delete()\n            except:\n                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bfdfbc13006a4f134805df2537cf4752fa44d0c43ee9c598f47536c7f23945f1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/Blacklist.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 13,
                  "charOffset": 2405,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 2279,
                  "charLength": 178,
                  "snippet": {
                    "text": "                user = self.bot.get_user(p.id)\n                empty_list.append(f\"`{user.name}` -> `{user.id}`\")\n            except:\n                empty_list.append(f\"`{p}`\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2cf99823f2516ef1bf61dd9a42f02c0c8a209b014a3f82ee32480cd6a9300d2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 9,
                  "charOffset": 3804,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 3723,
                  "charLength": 234,
                  "snippet": {
                    "text": "        try:\n            service.users().delete(userKey=email).execute()\n        except:\n            return await interaction.response.send_message(\n                f\"{interaction.user.mention} The account **{email}** does not exist.\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cfe2dead09fd6a25be63a5fd8dcc1622a491d72d1e40900ede900e14f7e8eb30"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 5,
                  "charOffset": 538,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 469,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f8e463e657a8aa0d97f42b873341ff85df8b83a4fc76abc23722433dd45569ca"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 9,
                  "charOffset": 2068,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 1954,
                  "charLength": 201,
                  "snippet": {
                    "text": "                database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n            )\n        except:\n            q = database.SandboxConfig.create(mode=\"None\")\n            q.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59f6d7d00e697e8b8026d0c4b7507cab09d60abcafea3e6c175923dc7e8c4a7f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 752,
                  "startColumn": 17,
                  "charOffset": 29911,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 750,
                  "startColumn": 1,
                  "charOffset": 29842,
                  "charLength": 199,
                  "snippet": {
                    "text": "                        .get()\n                    )\n                except:\n                    embed = discord.Embed(\n                        title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "782490965390259767df3c73b9c046bf26c3b940fcc424c579582db26339735b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 965,
                  "startColumn": 21,
                  "charOffset": 39183,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 963,
                  "startColumn": 1,
                  "charOffset": 39102,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6a0b892b525991c3330b1df9f59b18eb124cc28f2ecd048c671252725909863b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1153,
                  "startColumn": 21,
                  "charOffset": 47802,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1151,
                  "startColumn": 1,
                  "charOffset": 47721,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dd407f883bca5e8961b01c2aa1b068a1bde134598c62982b3234e8ab53127d35"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1328,
                  "startColumn": 21,
                  "charOffset": 56534,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1326,
                  "startColumn": 1,
                  "charOffset": 56453,
                  "charLength": 219,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6b87a116ed16729c8e91834988537edf76802f6f84b0164074a059864ca84458"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1399,
                  "startColumn": 21,
                  "charOffset": 59827,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1397,
                  "startColumn": 1,
                  "charOffset": 59724,
                  "charLength": 219,
                  "snippet": {
                    "text": "                    try:\n                        voiceLIMIT = int(new_voice_limit)\n                    except:\n                        return await ctx.send(f\"{Emoji.deny} Not a valid number!\")\n                    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c1995d6b544597a7dfc2367f54e820078358fc0369967b77b39f26cd7cd5ba6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1449,
                  "startColumn": 21,
                  "charOffset": 62275,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1447,
                  "startColumn": 1,
                  "charOffset": 62194,
                  "charLength": 219,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cfa9677d43d2a9cd68ad575467cd1d1ce3a62e238d601ef5d31ad5ed4915c046"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1528,
                  "startColumn": 21,
                  "charOffset": 65929,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1526,
                  "startColumn": 1,
                  "charOffset": 65848,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f4f049283411fb05700d46d3cc2622cd96fbefc94e6429ffd56577eb185d10eb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "charOffset": 437,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "charOffset": 368,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "159971b27ac743f358ee38e65887311cd688f6b476e0bc9febe7f1512452660a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 17,
                  "charOffset": 5741,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 5626,
                  "charLength": 163,
                  "snippet": {
                    "text": "                try:\n                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "187234edd894c166f807f329d6c9a705e0dd30bb1cff109eb24caf3e795512a1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 25,
                  "charOffset": 6622,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 199,
                  "startColumn": 1,
                  "charOffset": 6483,
                  "charLength": 273,
                  "snippet": {
                    "text": "                                tutorChannel, reason=\"Hogging the VC Start Channel.\"\n                            )\n                        except:\n                            await member.move_to(\n                                None, reason=\"Hogging the VC Start Channel.\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d070aedfee0cf909233b4c8814bf9faccedb8cbf2785d46ba8b7b670b57b15ea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 17,
                  "charOffset": 17019,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 402,
                  "startColumn": 1,
                  "charOffset": 16904,
                  "charLength": 246,
                  "snippet": {
                    "text": "                        reason=\"Maximum Channel Ownership Allowance [TRUE]\",\n                    )\n                except:\n                    await member.move_to(\n                        None, reason=\"Maximum Channel Ownership Allowance [FAIL]\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a24e5169f46adddbf1194388b010f39e07355a9cbb8bfe1d36609f3b92aa6e61"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 5,
                  "charOffset": 854,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 785,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d4bff045e4db573c8e379ddc41b02db3ba6c25208fc8c1c5bb90392ff2260ff"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 13,
                  "charOffset": 8132,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 292,
                  "startColumn": 1,
                  "charOffset": 8062,
                  "charLength": 99,
                  "snippet": {
                    "text": "            try:\n                await member.send(dmMSG)\n            except:\n                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ae7eca8fe53566be2dba735ffca988f732e63f922e66a6df87a1a5b60c81680"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 13,
                  "charOffset": 10914,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 391,
                  "startColumn": 1,
                  "charOffset": 10844,
                  "charLength": 99,
                  "snippet": {
                    "text": "            try:\n                await member.send(dmMSG)\n            except:\n                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a84aa845cddf0d37f09bb715e5ed8ab3c31a6c4ac84c37c07770cdaa819cadaa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 13,
                  "charOffset": 3041,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 2943,
                  "charLength": 179,
                  "snippet": {
                    "text": "            try:\n                await interaction.response.send_message(embed=embed)\n            except:\n                await interaction.channel.send(embed=embed)\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "27a123e414431d1f6d9135d993baa84a686b8fb3276a1f719dd2cacee1a192c5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 17,
                  "charOffset": 4452,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 4342,
                  "charLength": 199,
                  "snippet": {
                    "text": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n            else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5140d1228b4782fbeb2f675c04cda51f488465ac9b14ebcb68be4c8ae7d98111"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 17,
                  "charOffset": 4902,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 1,
                  "charOffset": 4792,
                  "charLength": 182,
                  "snippet": {
                    "text": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "436e4706ce3508ee349d73eb53bfda696b4332ffd86d37783211578bf2a559b4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 17,
                  "charOffset": 1983,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 1896,
                  "charLength": 213,
                  "snippet": {
                    "text": "                try:\n                    await tutor.send(embed=embed)\n                except:\n                    await botch.send(\n                        f\"Unable to send a reminder DM to you {tutor.mention}!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0f4c204441033f3f3fe467393b7ba44111febd72a0bc91cebd41bf337c01f764"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 17,
                  "charOffset": 2258,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 2169,
                  "charLength": 173,
                  "snippet": {
                    "text": "                try:\n                    await student.send(embed=embed)\n                except:\n                    print(f\"Unable to Send a Reminder DM to: {student.id}\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4f47dd558be55bf82be53b550bc49bb2329b50bdaa0a8af62e30c0110766f508"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 20,
                  "charOffset": 4185,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 140,
                  "startColumn": 1,
                  "charOffset": 4101,
                  "charLength": 159,
                  "snippet": {
                    "text": "            try:\n                await UAuthor.send(embed=embed)\n            except Exception:\n                continue\n        if user not in responsesauthor:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8cd3c9888b22a3614dcec56181101ab979bab1710486712d9088a6001e4d9b81"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 20,
                  "charOffset": 4342,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 145,
                  "startColumn": 1,
                  "charOffset": 4261,
                  "charLength": 121,
                  "snippet": {
                    "text": "            try:\n                await user.send(embed=embed)\n            except Exception:\n                pass\n    try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b13f90a0317aa0295cb4b52e3335864b6995efe2a805c7b2d2821d289eb71e3f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 5,
                  "charOffset": 4440,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 4374,
                  "charLength": 87,
                  "snippet": {
                    "text": "    try:\n        os.remove(f\"transcript-{channel.name}.html\")\n    except:\n        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2efcefb693ef7faa942f2753157c17a5a678b475520b2bf41943cd42e752dcde"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 20,
                  "charOffset": 10921,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 346,
                  "startColumn": 1,
                  "charOffset": 10829,
                  "charLength": 187,
                  "snippet": {
                    "text": "                    \"Check your DM's!\", ephemeral=True\n                )\n            except Exception:\n                await interaction.followup.send(\"Check your DM's!\", ephemeral=True)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "751233084677ff0fdbcec7d919ac2a9ad195b77ff8eb42082bd6d3684a7ca0c3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 20,
                  "charOffset": 11670,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 366,
                  "startColumn": 1,
                  "charOffset": 11603,
                  "charLength": 246,
                  "snippet": {
                    "text": "                    view=MSV,\n                )\n            except Exception as e:\n                await interaction.channel.send(\n                    f\"{interaction.user.mention} I can't send you messages, please check you're privacy settings!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "591e03111c4d71164e9920d701a42a88ddf8d6bbba5ad42b9459128c520e3f76"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 24,
                  "charOffset": 13058,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 400,
                  "startColumn": 1,
                  "charOffset": 12942,
                  "charLength": 215,
                  "snippet": {
                    "text": "                try:\n                    await DMChannel.send(embed=embed, view=MiscOptList)\n                except Exception as e:\n                    await interaction.followup.send(embed=embed, view=MiscOptList)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f98ddccddd6c5519ef0df11b4145bad7be2b3d16527160de11e38364a2a7d32b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 815,
                  "startColumn": 13,
                  "charOffset": 29609,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 813,
                  "startColumn": 1,
                  "charOffset": 29506,
                  "charLength": 192,
                  "snippet": {
                    "text": "                    f\"{author.mention}\\n\", embed=embed, view=ButtonViews\n                )\n            except:\n                try:\n                    await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "056131b5d9844b403ca12761baff15954e38ba7b1f6970d32246438a5c85c009"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 820,
                  "startColumn": 17,
                  "charOffset": 29814,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 818,
                  "startColumn": 1,
                  "charOffset": 29699,
                  "charLength": 239,
                  "snippet": {
                    "text": "                        f\"{author.mention}\\n\", embed=embed, view=ButtonViews\n                    )\n                except:\n                    await channel.send(\n                        f\"{author.mention}\\n\", embed=embed, view=ButtonViews"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "76f2e5ebb194a83eb0bbbe38428ea89dcd2c5930e7e6158c58bb1ebdc96a52de"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 905,
                  "startColumn": 20,
                  "charOffset": 33000,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 903,
                  "startColumn": 1,
                  "charOffset": 32877,
                  "charLength": 267,
                  "snippet": {
                    "text": "                    f\"{author.mention} Alright, canceling request.\", delete_after=5.0\n                )\n            except Exception:\n                await interaction.channel.send(\n                    f\"{author.mention} Alright, canceling request.\", delete_after=5.0"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d48ed3d6a2bdbc3cf3e5ccef142ab34948f455041c60b324728de13f60bdbdc1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1072,
                  "startColumn": 20,
                  "charOffset": 40114,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1070,
                  "startColumn": 1,
                  "charOffset": 39957,
                  "charLength": 225,
                  "snippet": {
                    "text": "                    f\"{author.mention}\\nTranscript Created!\\n>>> `Jump Link:` {msg.jump_url}\\n`Transcript Link:` {url}\"\n                )\n            except Exception:\n                try:\n                    await msgO.edit("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fb142ceae386c84187c42b56099f1683ca23f78888d851ef2975d722b3f0fdd6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1077,
                  "startColumn": 24,
                  "charOffset": 40352,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1075,
                  "startColumn": 1,
                  "charOffset": 40183,
                  "charLength": 340,
                  "snippet": {
                    "text": "                        f\"{author.mention}\\nTranscript Created!\\n>>> `Jump Link:` {msg.jump_url}\\n`Transcript Link:` {url}\"\n                    )\n                except Exception:\n                    await msgO.edit(\n                        f\"{author.mention}\\nTranscript Created!\\n>>> `Jump Link:` {msg.jump_url}\\n`Transcript Link:` {url}\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a0272b824d4fd81641b321292a6fc74ff502acb154db8fcea19350ea86556c8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1129,
                  "startColumn": 20,
                  "charOffset": 42280,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1127,
                  "startColumn": 1,
                  "charOffset": 42207,
                  "charLength": 181,
                  "snippet": {
                    "text": "                    entry.ChannelID\n                )\n            except Exception as e:\n                continue\n            fetchMessage = await channel.history(limit=1).flatten()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c96d396f0d3215260c3d5264b7a15be6d9d89d517be6d77adb69559636076ef"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 28,
                  "charOffset": 4194,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 4074,
                  "charLength": 250,
                  "snippet": {
                    "text": "                    try:\n                        self.flow.fetch_token(code=answer1.content)\n                    except Exception as e:\n                        return await dm_channel.send(\"Invalid code, try again later...\")\n                    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0fe159d67e6f1fe089b639d9b7e2e9fb9a1eaa8556a459756fb71b5af4a33607"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 21,
                  "charOffset": 2835,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 2745,
                  "charLength": 236,
                  "snippet": {
                    "text": "                            ephemeral=True,\n                        )\n                    except:\n                        await interaction.channel.send(\n                            f\"{interaction.user.mention} An error occurred while \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6029212613ccdeabf4c034ae708182da63b96d94ca16b615e475df365324f452"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "charOffset": 3781,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 3735,
                  "charLength": 136,
                  "snippet": {
                    "text": "                    )\n\n                except Exception as e:\n                    print(\"member not found\")\n                    continue"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "46dfe5b71393849ab815d8169e06c838ff2b6138b28331c3702d1d3ab77a7a42"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 21,
                  "charOffset": 6972,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 6856,
                  "charLength": 262,
                  "snippet": {
                    "text": "                            \"You have been verified!\", ephemeral=True\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} You have been verified!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "239c5a6f71f5ddd452e7c0bb528709ac61b7a7f7a0252de6140e750cb292c55d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 21,
                  "charOffset": 8737,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 221,
                  "startColumn": 1,
                  "charOffset": 8647,
                  "charLength": 268,
                  "snippet": {
                    "text": "                            ephemeral=True,\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} I didn't seem to find any roles to give you, please try \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4fb2e17708da490c9eaee4e6be930c36e95eb2e30f69496fbafc5b5e6ef9e63a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyProtectedMemberInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Access to a protected member _meta of a class",
            "markdown": "Access to a protected member _meta of a class"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 27,
                  "charOffset": 2466,
                  "charLength": 21,
                  "snippet": {
                    "text": "model_dict[key]._meta"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2383,
                  "charLength": 233,
                  "snippet": {
                    "text": "        else:\n            db.connect(reuse_if_open=True)\n            for column in model_dict[key]._meta.sorted_fields:\n                if not db.column_exists(key, column.name):\n                    db.create_column(key, column.name)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6197070ee6850c7385951d1322326ea03f294f311cb74208b291d7d2461f0549"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyProtectedMemberInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Access to a protected member _prepare_once of a class",
            "markdown": "Access to a protected member _prepare_once of a class"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "charOffset": 6003,
                  "charLength": 25,
                  "snippet": {
                    "text": "self.source._prepare_once"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 141,
                  "startColumn": 1,
                  "charOffset": 5969,
                  "charLength": 162,
                  "snippet": {
                    "text": "            return\n\n        await self.source._prepare_once()\n        page = await self.source.get_page(0)\n        kwargs = await self._get_kwargs_from_page(page)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e327017e586695d2d2af2607c6b6802a8f0e0a132c42f6fac4b9329fc793c760"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyProtectedMemberInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Access to a protected member _prepare_once of a class",
            "markdown": "Access to a protected member _prepare_once of a class"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 15,
                  "charOffset": 14719,
                  "charLength": 25,
                  "snippet": {
                    "text": "self.source._prepare_once"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 349,
                  "startColumn": 1,
                  "charOffset": 14674,
                  "charLength": 173,
                  "snippet": {
                    "text": "        self.current_page = 0\n\n        await self.source._prepare_once()\n        page = await self.source.get_page(0)\n        kwargs = await self._get_kwargs_from_page(page)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9f4fb9aff7f34c7013155939b4fd35a7979d5c9e8d88fc7882650d3228313896"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (123 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (123 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 121,
                  "charOffset": 132,
                  "charLength": 3,
                  "snippet": {
                    "text": "re!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 4,
                  "charLength": 187,
                  "snippet": {
                    "text": "SETUP:\n\nIf you require a specific command to be protected, you can use the built in @is_botAdmin check or create your own one here!\n\nIf you wish to use the @is_botAdmin check, DM Space.\"."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ded0517cb34154aa20064082b79b82ad424b0fcd5b1326bd15c50e6f6a68563b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (175 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (175 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 121,
                  "charOffset": 5554,
                  "charLength": 55,
                  "snippet": {
                    "text": "for you to authenticate with an API. Defaults to False."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 5331,
                  "charLength": 350,
                  "snippet": {
                    "text": "        secret_id (str): The secret ID to access. (Options: doc_t, doc_c, tts_c, tsa_c, svc_c, adm_t)\n\n        google_auth_load_mode (bool, optional): If marked as True, the function will return a specific credential class for you to authenticate with an API. Defaults to False.\n\n        type_auth (int, optional): Type of credential class to return."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6f54d92ee2f20cad2954f074459431f212ccac63b7e04ecc5687467981e43e18"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (169 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (169 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 121,
                  "charOffset": 5802,
                  "charLength": 49,
                  "snippet": {
                    "text": "ount.ServiceAccountCredentials) Defaults to None."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 5610,
                  "charLength": 367,
                  "snippet": {
                    "text": "\n        type_auth (int, optional): Type of credential class to return.\n        (0: oauth2.credentials.Credentials, 1: oauthlib.flow.Flow, 2: oauth2.service_account.Credentials, 3: service_account.ServiceAccountCredentials) Defaults to None.\n\n        scopes (list[str], optional): Scopes to access, this is required when using google_auth_load_mode. Defaults to None."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "74f2b98de4cd6bfb04d27704499fd9baa4853083095359a188b11cd8e9590113"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (124 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (124 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 121,
                  "charOffset": 5973,
                  "charLength": 4,
                  "snippet": {
                    "text": "one."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 5682,
                  "charLength": 422,
                  "snippet": {
                    "text": "        (0: oauth2.credentials.Credentials, 1: oauthlib.flow.Flow, 2: oauth2.service_account.Credentials, 3: service_account.ServiceAccountCredentials) Defaults to None.\n\n        scopes (list[str], optional): Scopes to access, this is required when using google_auth_load_mode. Defaults to None.\n\n        redirect_uri (str, optional): Redirect URL to configure, required when using authentication mode 1. Defaults to None."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b9ebd065828c119ace9d9e3ebeb3859b55ff28a42bb67e922fa04efc7e01a8d5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (125 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (125 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 121,
                  "charOffset": 6099,
                  "charLength": 5,
                  "snippet": {
                    "text": "None."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 184,
                  "startColumn": 1,
                  "charOffset": 5853,
                  "charLength": 265,
                  "snippet": {
                    "text": "        scopes (list[str], optional): Scopes to access, this is required when using google_auth_load_mode. Defaults to None.\n\n        redirect_uri (str, optional): Redirect URL to configure, required when using authentication mode 1. Defaults to None.\n\n    Returns:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7eccdbbf41a6cc1af4fbe60786a2a85e0c0c8f087918ed5d783ebc0df3cbce89"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 9,
                  "charOffset": 7806,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 225,
                  "startColumn": 1,
                  "charOffset": 7745,
                  "charLength": 86,
                  "snippet": {
                    "text": "        try:\n            os.remove(\"cred_file.json\")\n        except:\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "81c2e2749af20ecf0a859e19f95dcfe1cbaf5d80ac75ac0056b38547ec4404e3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (179 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (179 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 9,
                  "charOffset": 8888,
                  "charLength": 171,
                  "snippet": {
                    "text": "# s3_object.copy_from(CopySource={'Bucket':'ch-transcriptlogs', 'x-amz-meta-content-type':'binary/oc..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 258,
                  "startColumn": 1,
                  "charOffset": 8732,
                  "charLength": 357,
                  "snippet": {
                    "text": "        # s3_object = s3_client.Object('ch-transcriptlogs', file_name)\n        # s3_object.metadata.update({'x-amz-meta-content-type':'text/html'})\n        # s3_object.copy_from(CopySource={'Bucket':'ch-transcriptlogs', 'x-amz-meta-content-type':'binary/octet-stream'}, Metadata=s3_object.metadata, MetadataDirective='REPLACE')\n\n    except ClientError as e:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f5b57b5db0f9d4a3145c32ff3384c9637fdbbfb082d31069c22ad88421edbf9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E124 closing bracket does not match visual indentation",
            "markdown": "PEP 8: E124 closing bracket does not match visual indentation"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 5,
                  "charOffset": 12087,
                  "charLength": 1,
                  "snippet": {
                    "text": ")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 345,
                  "startColumn": 1,
                  "charOffset": 11959,
                  "charLength": 244,
                  "snippet": {
                    "text": "    )\n    cat_socialStudiesTicket = int(ConfigcatClient.MAIN_ID_CC.get_value(\"cat_socialstudiesticket\", 800481237608824882)\n    )\n    cat_englishTicket = int(\n        ConfigcatClient.MAIN_ID_CC.get_value(\"cat_englishticket\", 800475854353596469)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3a30a4a0144911e0f237e8e4beeeb2e815e0f4ff9f06ad22db465d399c6acccc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (4)",
            "markdown": "PEP 8: E303 too many blank lines (4)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 975,
                  "startColumn": 1,
                  "charOffset": 34259,
                  "charLength": 16,
                  "snippet": {
                    "text": "class LEADER_ID:"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 973,
                  "startColumn": 1,
                  "charOffset": 34257,
                  "charLength": 56,
                  "snippet": {
                    "text": "\n\nclass LEADER_ID:\n    \"\"\"\n    IDs of the SSD SET SERVER"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7bf21fdd41875725752d67f69e855c23f4d297e4a38112f446ff7e280686b8be"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (136 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (136 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1204,
                  "startColumn": 21,
                  "charOffset": 42321,
                  "charLength": 116,
                  "snippet": {
                    "text": "\"https://media.discordapp.net/attachments/875233489727922177/876603875329732618/timmy_book.png?width..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1202,
                  "startColumn": 1,
                  "charOffset": 42140,
                  "charLength": 479,
                  "snippet": {
                    "text": "    timmyLaptop_png = \"https://i.gyazo.com/5cffb6cd45e5e1ee9b1d015bccbdf9e6.png\"\n    timmyHappy_png = \"https://i.gyazo.com/a0b221679db0f980504e64535885a5fd.png\"\n    timmyBook_png = \"https://media.discordapp.net/attachments/875233489727922177/876603875329732618/timmy_book.png?width=411&height=533\"\n    timmyTeacher_png = \"https://media.discordapp.net/attachments/875233489727922177/877378910214586368/tutoring.png?width=411&height=532\"\n    timmyDonation_png = \"timmydonation.png\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7bd6c6d8bf829efcc5dfa54dd317cea308e35129db43cd1f381433fcf5e7dd71"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (137 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (137 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1205,
                  "startColumn": 24,
                  "charOffset": 42461,
                  "charLength": 114,
                  "snippet": {
                    "text": "\"https://media.discordapp.net/attachments/875233489727922177/877378910214586368/tutoring.png?width=4..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1203,
                  "startColumn": 1,
                  "charOffset": 42221,
                  "charLength": 473,
                  "snippet": {
                    "text": "    timmyHappy_png = \"https://i.gyazo.com/a0b221679db0f980504e64535885a5fd.png\"\n    timmyBook_png = \"https://media.discordapp.net/attachments/875233489727922177/876603875329732618/timmy_book.png?width=411&height=533\"\n    timmyTeacher_png = \"https://media.discordapp.net/attachments/875233489727922177/877378910214586368/tutoring.png?width=411&height=532\"\n    timmyDonation_png = \"timmydonation.png\"\n    timmyDonation_path = \"./utils/bots/CoreBot/LogFiles/timmydonation.png\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80e29d120d57d78970415d51430149826041ba256895a077674e8d4a6c3fc279"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (154 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (154 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1268,
                  "startColumn": 121,
                  "charOffset": 44663,
                  "charLength": 1,
                  "snippet": {
                    "text": "}"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1266,
                  "startColumn": 1,
                  "charOffset": 44528,
                  "charLength": 653,
                  "snippet": {
                    "text": "\nrulesDict = {\n    1: f\"All Terms of Service and Community Guidelines apply. && {Emoji.barrow} https://discord.com/terms\\n{Emoji.barrow} https://discord.com/guidelines\",\n    2: f\"Keep chats and conversations mainly in English. && {Emoji.barrow} Full-blown conversations in a different language that disrupt the environment are not allowed.\\n{Emoji.barrow} Disrupting an existing conversation in English in voice chat is not allowed.\",\n    3: f\"Keep chats and conversations relevant. && {Emoji.barrow} Keep discussions about politics or anything else in <#773366189648642069>.\\n{Emoji.barrow} Ask homework questions in the homework channels or tickets.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "24a61a0128cd769928dc10103c7105a0840c41fcb70088216b3b03c481ec7400"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (264 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (264 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1269,
                  "startColumn": 75,
                  "charOffset": 44772,
                  "charLength": 97,
                  "snippet": {
                    "text": "Full-blown conversations in a different language that disrupt the environment are not allowed.\\n"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1267,
                  "startColumn": 1,
                  "charOffset": 44529,
                  "charLength": 1131,
                  "snippet": {
                    "text": "rulesDict = {\n    1: f\"All Terms of Service and Community Guidelines apply. && {Emoji.barrow} https://discord.com/terms\\n{Emoji.barrow} https://discord.com/guidelines\",\n    2: f\"Keep chats and conversations mainly in English. && {Emoji.barrow} Full-blown conversations in a different language that disrupt the environment are not allowed.\\n{Emoji.barrow} Disrupting an existing conversation in English in voice chat is not allowed.\",\n    3: f\"Keep chats and conversations relevant. && {Emoji.barrow} Keep discussions about politics or anything else in <#773366189648642069>.\\n{Emoji.barrow} Ask homework questions in the homework channels or tickets.\",\n    4: f\"No content that does not belong in a school server. && {Emoji.barrow} No inappropriate user profiles, avatars, banners, statuses, about me, usernames, or nicknames.\\n{Emoji.barrow} No sharing of content that glorifies or promotes suicide or self-harm.\\n{Emoji.barrow} No trolling, raiding, epileptic, disturbing, suggestive, or offensive behavior.\\n{Emoji.barrow} No sexist, racist, homophobic, transphobic, xenophobic, islamophobic, pedophilic, creepy behavior, etc.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "869effaa79d48a04fd0be236ba91b788555f130e99e788c5b4c17b9c31da9bf3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (218 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (218 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1270,
                  "startColumn": 66,
                  "charOffset": 45028,
                  "charLength": 77,
                  "snippet": {
                    "text": "Keep discussions about politics or anything else in <#773366189648642069>.\\n"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1268,
                  "startColumn": 1,
                  "charOffset": 44543,
                  "charLength": 1417,
                  "snippet": {
                    "text": "    1: f\"All Terms of Service and Community Guidelines apply. && {Emoji.barrow} https://discord.com/terms\\n{Emoji.barrow} https://discord.com/guidelines\",\n    2: f\"Keep chats and conversations mainly in English. && {Emoji.barrow} Full-blown conversations in a different language that disrupt the environment are not allowed.\\n{Emoji.barrow} Disrupting an existing conversation in English in voice chat is not allowed.\",\n    3: f\"Keep chats and conversations relevant. && {Emoji.barrow} Keep discussions about politics or anything else in <#773366189648642069>.\\n{Emoji.barrow} Ask homework questions in the homework channels or tickets.\",\n    4: f\"No content that does not belong in a school server. && {Emoji.barrow} No inappropriate user profiles, avatars, banners, statuses, about me, usernames, or nicknames.\\n{Emoji.barrow} No sharing of content that glorifies or promotes suicide or self-harm.\\n{Emoji.barrow} No trolling, raiding, epileptic, disturbing, suggestive, or offensive behavior.\\n{Emoji.barrow} No sexist, racist, homophobic, transphobic, xenophobic, islamophobic, pedophilic, creepy behavior, etc.\",\n    5: f\"No advertising or self-promotion (unless given explicit permission). && {Emoji.barrow} Self-advertising a website, group, or anything else through DMs, VC or in the server is not allowed.\\n{Emoji.barrow} Explicitly asking users to look at advertisements in status/About Me is not allowed.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bf6131b0dd3c8804a13ff3c06e3159280f392c93498783aa9a2aa40eb1ebcdb8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (478 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (478 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1271,
                  "startColumn": 79,
                  "charOffset": 45260,
                  "charLength": 97,
                  "snippet": {
                    "text": "No inappropriate user profiles, avatars, banners, statuses, about me, usernames, or nicknames.\\n"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1269,
                  "startColumn": 1,
                  "charOffset": 44698,
                  "charLength": 1710,
                  "snippet": {
                    "text": "    2: f\"Keep chats and conversations mainly in English. && {Emoji.barrow} Full-blown conversations in a different language that disrupt the environment are not allowed.\\n{Emoji.barrow} Disrupting an existing conversation in English in voice chat is not allowed.\",\n    3: f\"Keep chats and conversations relevant. && {Emoji.barrow} Keep discussions about politics or anything else in <#773366189648642069>.\\n{Emoji.barrow} Ask homework questions in the homework channels or tickets.\",\n    4: f\"No content that does not belong in a school server. && {Emoji.barrow} No inappropriate user profiles, avatars, banners, statuses, about me, usernames, or nicknames.\\n{Emoji.barrow} No sharing of content that glorifies or promotes suicide or self-harm.\\n{Emoji.barrow} No trolling, raiding, epileptic, disturbing, suggestive, or offensive behavior.\\n{Emoji.barrow} No sexist, racist, homophobic, transphobic, xenophobic, islamophobic, pedophilic, creepy behavior, etc.\",\n    5: f\"No advertising or self-promotion (unless given explicit permission). && {Emoji.barrow} Self-advertising a website, group, or anything else through DMs, VC or in the server is not allowed.\\n{Emoji.barrow} Explicitly asking users to look at advertisements in status/About Me is not allowed.\",\n    6: f\"No toxic behavior or harassment. && {Emoji.barrow} No discriminatory jokes or language towards an individual or group due to race, ethnicity, nationality, sex, gender, sexual orientation, religious affiliation, or disabilities.\\n{Emoji.barrow} Disrespect of members is not allowed, especially if it is continuous, repetitive, or severe.\\n{Emoji.barrow} Encouraging toxicity, harassment, bullying, and anything of the sort is prohibited.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f74a04b5a5f4bb3b3c985bc09366a7796fa9945d822c2634acb96daf48c0d3ab"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (299 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (299 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1272,
                  "startColumn": 96,
                  "charOffset": 45756,
                  "charLength": 103,
                  "snippet": {
                    "text": "Self-advertising a website, group, or anything else through DMs, VC or in the server is not allowed...."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1270,
                  "startColumn": 1,
                  "charOffset": 44963,
                  "charLength": 1801,
                  "snippet": {
                    "text": "    3: f\"Keep chats and conversations relevant. && {Emoji.barrow} Keep discussions about politics or anything else in <#773366189648642069>.\\n{Emoji.barrow} Ask homework questions in the homework channels or tickets.\",\n    4: f\"No content that does not belong in a school server. && {Emoji.barrow} No inappropriate user profiles, avatars, banners, statuses, about me, usernames, or nicknames.\\n{Emoji.barrow} No sharing of content that glorifies or promotes suicide or self-harm.\\n{Emoji.barrow} No trolling, raiding, epileptic, disturbing, suggestive, or offensive behavior.\\n{Emoji.barrow} No sexist, racist, homophobic, transphobic, xenophobic, islamophobic, pedophilic, creepy behavior, etc.\",\n    5: f\"No advertising or self-promotion (unless given explicit permission). && {Emoji.barrow} Self-advertising a website, group, or anything else through DMs, VC or in the server is not allowed.\\n{Emoji.barrow} Explicitly asking users to look at advertisements in status/About Me is not allowed.\",\n    6: f\"No toxic behavior or harassment. && {Emoji.barrow} No discriminatory jokes or language towards an individual or group due to race, ethnicity, nationality, sex, gender, sexual orientation, religious affiliation, or disabilities.\\n{Emoji.barrow} Disrespect of members is not allowed, especially if it is continuous, repetitive, or severe.\\n{Emoji.barrow} Encouraging toxicity, harassment, bullying, and anything of the sort is prohibited.\",\n    7: f\"No illegal or explicit material. && {Emoji.barrow} Discussing or sharing illegal content is prohibited. This includes, but is not limited to: copyrighted content, pirated content, illegal activities, crimes, IPGrabbers, phishing links.\\n{Emoji.barrow} Any form of NSFW, NSFL, or explicit content (pornographic, overtly sexual, overly gory) is pro"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "beec4a651f0cc64db56d3527be8e96da94ef52744ecf0125274abb627ea6b8be"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (447 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (447 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1273,
                  "startColumn": 60,
                  "charOffset": 46020,
                  "charLength": 179,
                  "snippet": {
                    "text": "No discriminatory jokes or language towards an individual or group due to race, ethnicity, nationali..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1271,
                  "startColumn": 1,
                  "charOffset": 45182,
                  "charLength": 1801,
                  "snippet": {
                    "text": "    4: f\"No content that does not belong in a school server. && {Emoji.barrow} No inappropriate user profiles, avatars, banners, statuses, about me, usernames, or nicknames.\\n{Emoji.barrow} No sharing of content that glorifies or promotes suicide or self-harm.\\n{Emoji.barrow} No trolling, raiding, epileptic, disturbing, suggestive, or offensive behavior.\\n{Emoji.barrow} No sexist, racist, homophobic, transphobic, xenophobic, islamophobic, pedophilic, creepy behavior, etc.\",\n    5: f\"No advertising or self-promotion (unless given explicit permission). && {Emoji.barrow} Self-advertising a website, group, or anything else through DMs, VC or in the server is not allowed.\\n{Emoji.barrow} Explicitly asking users to look at advertisements in status/About Me is not allowed.\",\n    6: f\"No toxic behavior or harassment. && {Emoji.barrow} No discriminatory jokes or language towards an individual or group due to race, ethnicity, nationality, sex, gender, sexual orientation, religious affiliation, or disabilities.\\n{Emoji.barrow} Disrespect of members is not allowed, especially if it is continuous, repetitive, or severe.\\n{Emoji.barrow} Encouraging toxicity, harassment, bullying, and anything of the sort is prohibited.\",\n    7: f\"No illegal or explicit material. && {Emoji.barrow} Discussing or sharing illegal content is prohibited. This includes, but is not limited to: copyrighted content, pirated content, illegal activities, crimes, IPGrabbers, phishing links.\\n{Emoji.barrow} Any form of NSFW, NSFL, or explicit content (pornographic, overtly sexual, overly gory) is prohibited.\",\n    8: f\"No DDoS, dox, death or any other sort of threats. && {Emoji.barrow} Indirect or direct threats to harm someone else are strictly prohibited and causes for immediate ban.\\n{Emoji.barrow} DDoS (Distrib"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5bc16d64f7294dfef63f31a4c4e49d8eb7f5bb49697e88275fc585d1abce3619"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (365 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (365 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1274,
                  "startColumn": 60,
                  "charOffset": 46468,
                  "charLength": 187,
                  "snippet": {
                    "text": "Discussing or sharing illegal content is prohibited. This includes, but is not limited to: copyright..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1272,
                  "startColumn": 1,
                  "charOffset": 45661,
                  "charLength": 1754,
                  "snippet": {
                    "text": "    5: f\"No advertising or self-promotion (unless given explicit permission). && {Emoji.barrow} Self-advertising a website, group, or anything else through DMs, VC or in the server is not allowed.\\n{Emoji.barrow} Explicitly asking users to look at advertisements in status/About Me is not allowed.\",\n    6: f\"No toxic behavior or harassment. && {Emoji.barrow} No discriminatory jokes or language towards an individual or group due to race, ethnicity, nationality, sex, gender, sexual orientation, religious affiliation, or disabilities.\\n{Emoji.barrow} Disrespect of members is not allowed, especially if it is continuous, repetitive, or severe.\\n{Emoji.barrow} Encouraging toxicity, harassment, bullying, and anything of the sort is prohibited.\",\n    7: f\"No illegal or explicit material. && {Emoji.barrow} Discussing or sharing illegal content is prohibited. This includes, but is not limited to: copyrighted content, pirated content, illegal activities, crimes, IPGrabbers, phishing links.\\n{Emoji.barrow} Any form of NSFW, NSFL, or explicit content (pornographic, overtly sexual, overly gory) is prohibited.\",\n    8: f\"No DDoS, dox, death or any other sort of threats. && {Emoji.barrow} Indirect or direct threats to harm someone else are strictly prohibited and causes for immediate ban.\\n{Emoji.barrow} DDoS (Distributed Denial of Service): sending a large amount of requests in a short amount of time.\\n{Emoji.barrow} Dox: revealing any private information of another member, such as real name or address, without consent.\",\n    9: f\"No slurs and excessive or harmful profanity usage. && {Emoji.barrow} Using or attempting to use slurs and racist terms is prohibited.\\n{Emoji.barrow} Excessive profanity, verbal abuse and insults are prohibited.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3cf44b5cbc2f2e4e844f2458ee4910316ca14bba705831342c5fb9aa493d51d6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (417 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (417 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1275,
                  "startColumn": 77,
                  "charOffset": 46851,
                  "charLength": 104,
                  "snippet": {
                    "text": "Indirect or direct threats to harm someone else are strictly prohibited and causes for immediate ban..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1273,
                  "startColumn": 1,
                  "charOffset": 45961,
                  "charLength": 1601,
                  "snippet": {
                    "text": "    6: f\"No toxic behavior or harassment. && {Emoji.barrow} No discriminatory jokes or language towards an individual or group due to race, ethnicity, nationality, sex, gender, sexual orientation, religious affiliation, or disabilities.\\n{Emoji.barrow} Disrespect of members is not allowed, especially if it is continuous, repetitive, or severe.\\n{Emoji.barrow} Encouraging toxicity, harassment, bullying, and anything of the sort is prohibited.\",\n    7: f\"No illegal or explicit material. && {Emoji.barrow} Discussing or sharing illegal content is prohibited. This includes, but is not limited to: copyrighted content, pirated content, illegal activities, crimes, IPGrabbers, phishing links.\\n{Emoji.barrow} Any form of NSFW, NSFL, or explicit content (pornographic, overtly sexual, overly gory) is prohibited.\",\n    8: f\"No DDoS, dox, death or any other sort of threats. && {Emoji.barrow} Indirect or direct threats to harm someone else are strictly prohibited and causes for immediate ban.\\n{Emoji.barrow} DDoS (Distributed Denial of Service): sending a large amount of requests in a short amount of time.\\n{Emoji.barrow} Dox: revealing any private information of another member, such as real name or address, without consent.\",\n    9: f\"No slurs and excessive or harmful profanity usage. && {Emoji.barrow} Using or attempting to use slurs and racist terms is prohibited.\\n{Emoji.barrow} Excessive profanity, verbal abuse and insults are prohibited.\",\n    10: f\"No cheating in any form. && {Emoji.barrow} It is strictly prohibited to cheat or engage in academic dishonesty anywhere in the server.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "03281e44790eb46402124016573e88f8a900b4776d9d7ee15386de5ef29e37c8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (222 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (222 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1276,
                  "startColumn": 78,
                  "charOffset": 47270,
                  "charLength": 67,
                  "snippet": {
                    "text": "Using or attempting to use slurs and racist terms is prohibited.\\n"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1274,
                  "startColumn": 1,
                  "charOffset": 46409,
                  "charLength": 1315,
                  "snippet": {
                    "text": "    7: f\"No illegal or explicit material. && {Emoji.barrow} Discussing or sharing illegal content is prohibited. This includes, but is not limited to: copyrighted content, pirated content, illegal activities, crimes, IPGrabbers, phishing links.\\n{Emoji.barrow} Any form of NSFW, NSFL, or explicit content (pornographic, overtly sexual, overly gory) is prohibited.\",\n    8: f\"No DDoS, dox, death or any other sort of threats. && {Emoji.barrow} Indirect or direct threats to harm someone else are strictly prohibited and causes for immediate ban.\\n{Emoji.barrow} DDoS (Distributed Denial of Service): sending a large amount of requests in a short amount of time.\\n{Emoji.barrow} Dox: revealing any private information of another member, such as real name or address, without consent.\",\n    9: f\"No slurs and excessive or harmful profanity usage. && {Emoji.barrow} Using or attempting to use slurs and racist terms is prohibited.\\n{Emoji.barrow} Excessive profanity, verbal abuse and insults are prohibited.\",\n    10: f\"No cheating in any form. && {Emoji.barrow} It is strictly prohibited to cheat or engage in academic dishonesty anywhere in the server.\",\n    11: f\"No spamming in any form. && {Emoji.barrow} Spamming links, images, messages, roles, emojis, emotes, emote reactions, or anything else is not allowed.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fac4dea9326d8684a7ca1c74868c31d7b3da4be4b66e2e87df0209df9e25afbb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (146 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (146 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1277,
                  "startColumn": 53,
                  "charOffset": 47468,
                  "charLength": 92,
                  "snippet": {
                    "text": "It is strictly prohibited to cheat or engage in academic dishonesty anywhere in the server."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1275,
                  "startColumn": 1,
                  "charOffset": 46775,
                  "charLength": 1154,
                  "snippet": {
                    "text": "    8: f\"No DDoS, dox, death or any other sort of threats. && {Emoji.barrow} Indirect or direct threats to harm someone else are strictly prohibited and causes for immediate ban.\\n{Emoji.barrow} DDoS (Distributed Denial of Service): sending a large amount of requests in a short amount of time.\\n{Emoji.barrow} Dox: revealing any private information of another member, such as real name or address, without consent.\",\n    9: f\"No slurs and excessive or harmful profanity usage. && {Emoji.barrow} Using or attempting to use slurs and racist terms is prohibited.\\n{Emoji.barrow} Excessive profanity, verbal abuse and insults are prohibited.\",\n    10: f\"No cheating in any form. && {Emoji.barrow} It is strictly prohibited to cheat or engage in academic dishonesty anywhere in the server.\",\n    11: f\"No spamming in any form. && {Emoji.barrow} Spamming links, images, messages, roles, emojis, emotes, emote reactions, or anything else is not allowed.\",\n    12: f\"No impersonation in any form. && {Emoji.barrow} Changing your username or avatar to something similar as any staff or members with the intent to mimic them and create confusion is prohibited. \","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "caee1fca8c19f3533557f8422faffd82b344d7c58d484630fec587dee639da45"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (161 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (161 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1278,
                  "startColumn": 53,
                  "charOffset": 47615,
                  "charLength": 107,
                  "snippet": {
                    "text": "Spamming links, images, messages, roles, emojis, emotes, emote reactions, or anything else is not al..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1276,
                  "startColumn": 1,
                  "charOffset": 47193,
                  "charLength": 1026,
                  "snippet": {
                    "text": "    9: f\"No slurs and excessive or harmful profanity usage. && {Emoji.barrow} Using or attempting to use slurs and racist terms is prohibited.\\n{Emoji.barrow} Excessive profanity, verbal abuse and insults are prohibited.\",\n    10: f\"No cheating in any form. && {Emoji.barrow} It is strictly prohibited to cheat or engage in academic dishonesty anywhere in the server.\",\n    11: f\"No spamming in any form. && {Emoji.barrow} Spamming links, images, messages, roles, emojis, emotes, emote reactions, or anything else is not allowed.\",\n    12: f\"No impersonation in any form. && {Emoji.barrow} Changing your username or avatar to something similar as any staff or members with the intent to mimic them and create confusion is prohibited. \",\n    13: f\"No disruptive behavior in voice chat. && {Emoji.barrow} No continuous hopping between voice chats.\\n{Emoji.barrow} No starting and closing streams in short intervals.\\n{Emoji.barrow} No loud, annoying, or high-pitched noises.\\n{Emoji.barrow} No voice changers if asked to stop.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "98e464a853c5bee53f507275d0d92bcb1f2c28a317741c9d329058735cd7e5cc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (204 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (204 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1279,
                  "startColumn": 58,
                  "charOffset": 47782,
                  "charLength": 145,
                  "snippet": {
                    "text": "Changing your username or avatar to something similar as any staff or members with the intent to mim..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1277,
                  "startColumn": 1,
                  "charOffset": 47416,
                  "charLength": 1382,
                  "snippet": {
                    "text": "    10: f\"No cheating in any form. && {Emoji.barrow} It is strictly prohibited to cheat or engage in academic dishonesty anywhere in the server.\",\n    11: f\"No spamming in any form. && {Emoji.barrow} Spamming links, images, messages, roles, emojis, emotes, emote reactions, or anything else is not allowed.\",\n    12: f\"No impersonation in any form. && {Emoji.barrow} Changing your username or avatar to something similar as any staff or members with the intent to mimic them and create confusion is prohibited. \",\n    13: f\"No disruptive behavior in voice chat. && {Emoji.barrow} No continuous hopping between voice chats.\\n{Emoji.barrow} No starting and closing streams in short intervals.\\n{Emoji.barrow} No loud, annoying, or high-pitched noises.\\n{Emoji.barrow} No voice changers if asked to stop.\",\n    14: f\"No evading user blocks, punishments, or bans by using alternate accounts. && {Emoji.barrow} Sending unwanted, repeated friend requests or messages to contact someone who has blocked you is prohibited.\\n{Emoji.barrow} Creating alternate accounts to evade a punishment or ban, harass or impersonate someone, or participate in a raid are all strictly prohibited.\\n{Emoji.barrow} Suspicions of being an alternate account are cause for a ban with no prior warning.\\n{Emoji.barrow} To discuss punishments or warnings, create a support ticket or talk to a moderator in DMs.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "067423d7b45856b4418c638e2e4c657791fce728be9b8933328471c87d578a42"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (289 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (289 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1280,
                  "startColumn": 118,
                  "charOffset": 48047,
                  "charLength": 6,
                  "snippet": {
                    "text": "barrow"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1278,
                  "startColumn": 1,
                  "charOffset": 47563,
                  "charLength": 1237,
                  "snippet": {
                    "text": "    11: f\"No spamming in any form. && {Emoji.barrow} Spamming links, images, messages, roles, emojis, emotes, emote reactions, or anything else is not allowed.\",\n    12: f\"No impersonation in any form. && {Emoji.barrow} Changing your username or avatar to something similar as any staff or members with the intent to mimic them and create confusion is prohibited. \",\n    13: f\"No disruptive behavior in voice chat. && {Emoji.barrow} No continuous hopping between voice chats.\\n{Emoji.barrow} No starting and closing streams in short intervals.\\n{Emoji.barrow} No loud, annoying, or high-pitched noises.\\n{Emoji.barrow} No voice changers if asked to stop.\",\n    14: f\"No evading user blocks, punishments, or bans by using alternate accounts. && {Emoji.barrow} Sending unwanted, repeated friend requests or messages to contact someone who has blocked you is prohibited.\\n{Emoji.barrow} Creating alternate accounts to evade a punishment or ban, harass or impersonate someone, or participate in a raid are all strictly prohibited.\\n{Emoji.barrow} Suspicions of being an alternate account are cause for a ban with no prior warning.\\n{Emoji.barrow} To discuss punishments or warnings, create a support ticket or talk to a moderator in DMs.\",\n}"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37d7683897c0244bcce87adcd63258317d947e41ba3703ef28ed67071e919197"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (578 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (578 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1281,
                  "startColumn": 102,
                  "charOffset": 48321,
                  "charLength": 111,
                  "snippet": {
                    "text": "Sending unwanted, repeated friend requests or messages to contact someone who has blocked you is pro..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1279,
                  "startColumn": 1,
                  "charOffset": 47725,
                  "charLength": 1076,
                  "snippet": {
                    "text": "    12: f\"No impersonation in any form. && {Emoji.barrow} Changing your username or avatar to something similar as any staff or members with the intent to mimic them and create confusion is prohibited. \",\n    13: f\"No disruptive behavior in voice chat. && {Emoji.barrow} No continuous hopping between voice chats.\\n{Emoji.barrow} No starting and closing streams in short intervals.\\n{Emoji.barrow} No loud, annoying, or high-pitched noises.\\n{Emoji.barrow} No voice changers if asked to stop.\",\n    14: f\"No evading user blocks, punishments, or bans by using alternate accounts. && {Emoji.barrow} Sending unwanted, repeated friend requests or messages to contact someone who has blocked you is prohibited.\\n{Emoji.barrow} Creating alternate accounts to evade a punishment or ban, harass or impersonate someone, or participate in a raid are all strictly prohibited.\\n{Emoji.barrow} Suspicions of being an alternate account are cause for a ban with no prior warning.\\n{Emoji.barrow} To discuss punishments or warnings, create a support ticket or talk to a moderator in DMs.\",\n}\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b4402b9269b2d0aa4e071cccb4746838f4b5e76f42b777296ad81f66dbfb0f51"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (209 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (209 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1284,
                  "startColumn": 108,
                  "charOffset": 48909,
                  "charLength": 18,
                  "snippet": {
                    "text": "\"gmail_token.json\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1282,
                  "startColumn": 1,
                  "charOffset": 48799,
                  "charLength": 228,
                  "snippet": {
                    "text": "}\n\ndeprecatedFiles = [\"TTScreds.json\", \"tokenA.json\", \"staff_verifyClient.json\", \"gmailAPI_credentials.json\", \"gmail_token.json\", \"docs_token.json\", \"docs_credentials.json\", \"credentialsA.json\", \"admincred.json\"]\n\nclass bcolors:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e968ea6ad17c5fb7e1fa7aa86402d6ca58af4df95c161c12720303d8402d5f0f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1286,
                  "startColumn": 1,
                  "charOffset": 49013,
                  "charLength": 14,
                  "snippet": {
                    "text": "class bcolors:"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1284,
                  "startColumn": 1,
                  "charOffset": 48802,
                  "charLength": 273,
                  "snippet": {
                    "text": "deprecatedFiles = [\"TTScreds.json\", \"tokenA.json\", \"staff_verifyClient.json\", \"gmailAPI_credentials.json\", \"gmail_token.json\", \"docs_token.json\", \"docs_credentials.json\", \"credentialsA.json\", \"admincred.json\"]\n\nclass bcolors:\n    HEADER = \"\\033[95m\"\n    OKBLUE = \"\\033[94m\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2237211af93977d4ce92adf6ed71e6cfe861708ca32b9049daaa866be9a68b89"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (166 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (166 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1367,
                  "startColumn": 121,
                  "charOffset": 52319,
                  "charLength": 46,
                  "snippet": {
                    "text": "after the button is pressed. Default to None."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1365,
                  "startColumn": 1,
                  "charOffset": 51977,
                  "charLength": 401,
                  "snippet": {
                    "text": "            interaction_message: The response message when pressing on a selection. Default to None.\n            ephemeral: Whenever the response message should only be visible for the select_user or not. Default to True.\n            coroutine: A coroutine that gets invoked after the button is pressed. If None is passed, the view is stopped after the button is pressed. Default to None.\n        \"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0c7397479a83b8e5c58ab3bedfbfcf96d0d72e6d5f2af5b8e02f5429f759b2c1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (166 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (166 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1459,
                  "startColumn": 121,
                  "charOffset": 56151,
                  "charLength": 46,
                  "snippet": {
                    "text": "after the button is pressed. Default to None."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1457,
                  "startColumn": 1,
                  "charOffset": 55809,
                  "charLength": 428,
                  "snippet": {
                    "text": "            interaction_message: The response message when pressing on a selection. Default to None.\n            ephemeral: Whenever the response message should only be visible for the select_user or not. Default to True.\n            coroutine: A coroutine that gets invoked after the button is pressed. If None is passed, the view is stopped after the button is pressed. Default to None.\n        \"\"\"\n        self.style_ = style"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0815fa6d7d371478cd794f0a149e5327716455c1b7cee8fd38cbb0c676a5c96f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E201 whitespace after '('",
            "markdown": "PEP 8: E201 whitespace after '('"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1546,
                  "startColumn": 25,
                  "charOffset": 58944,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1544,
                  "startColumn": 1,
                  "charOffset": 58855,
                  "charLength": 153,
                  "snippet": {
                    "text": "        ch = await self.bot.get_channel(interaction.channel_id)\n\n        await rawExport( ch, TranscriptLOG, interaction.user)\n        await ch.delete()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2992c436d11c6009ee04bb55eb0d4e820d0be5f6d81b059428bf0558cfff73fc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (245 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (245 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1633,
                  "startColumn": 17,
                  "charOffset": 61663,
                  "charLength": 228,
                  "snippet": {
                    "text": "\"https://images-ext-2.discordapp.net/external/YTk-6Mfxbbr8KwIc-3Pyy5Z_06tfpcO65MflxYgbjA8/%3Fcid%3D7..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1631,
                  "startColumn": 1,
                  "charOffset": 61581,
                  "charLength": 357,
                  "snippet": {
                    "text": "        try:\n            await interaction.response.send_message(\n                \"https://images-ext-2.discordapp.net/external/YTk-6Mfxbbr8KwIc-3Pyy5Z_06tfpcO65MflxYgbjA8/%3Fcid%3D73b8f7b119cc9225923f70c7e25a1f8e8932c7ae8ef48fe7%26rid%3Dgiphy.mp4%26ct%3Dg/https/media2.giphy.com/media/Ju7l5y9osyymQ/giphy.mp4\",\n                ephemeral=True,\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee0458d92382da4606684708004145a2710337db666d832c1e46a2cde5ee95d0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (245 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (245 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1638,
                  "startColumn": 17,
                  "charOffset": 62052,
                  "charLength": 228,
                  "snippet": {
                    "text": "\"https://images-ext-2.discordapp.net/external/YTk-6Mfxbbr8KwIc-3Pyy5Z_06tfpcO65MflxYgbjA8/%3Fcid%3D7..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1636,
                  "startColumn": 1,
                  "charOffset": 61939,
                  "charLength": 388,
                  "snippet": {
                    "text": "        except discord.errors.InteractionResponded:\n            await interaction.followup.send(\n                \"https://images-ext-2.discordapp.net/external/YTk-6Mfxbbr8KwIc-3Pyy5Z_06tfpcO65MflxYgbjA8/%3Fcid%3D73b8f7b119cc9225923f70c7e25a1f8e8932c7ae8ef48fe7%26rid%3Dgiphy.mp4%26ct%3Dg/https/media2.giphy.com/media/Ju7l5y9osyymQ/giphy.mp4\",\n                ephemeral=True,\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1e0084f9f25381250cb02a89b3bce55801769a3e5d2c49492580edc40a727dea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (210 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (210 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1726,
                  "startColumn": 121,
                  "charOffset": 64985,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1724,
                  "startColumn": 1,
                  "charOffset": 64800,
                  "charLength": 436,
                  "snippet": {
                    "text": "\n    async def callback(self, interaction: discord.Interaction):\n        response = f\"User Action: {self.children[0]}\\nSteps to reproduce the issue: {self.children[1]}\\nWhat happened: {self.children[2]}\\nExpected Result: {self.children[3]}\\nAnything else: {self.children[4]}\"\n        url = f\"https://sentry.io/api/0/projects/schoolsimplified/timmy/user-feedback/\"\n        headers = {\"Authorization\": f'Bearer {os.getenv(\"FDB_SENTRY\")}'}"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4bbe5ee5027e970b4d142ffec8c8a6ebcbcaeca5a413de9b252735f081bf633b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (132 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (132 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1771,
                  "startColumn": 119,
                  "charOffset": 66605,
                  "charLength": 7,
                  "snippet": {
                    "text": "reverse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1769,
                  "startColumn": 1,
                  "charOffset": 66425,
                  "charLength": 299,
                  "snippet": {
                    "text": "                listkeys = []\n                authorrank = ''\n                for key, value in sorted(checkrew[f'{menu.ctx.guild.id}'].items(), key=lambda pair: pair[1]['total'], reverse=True):\n                    if menu.ctx.guild.get_member(int(key)):\n                        listkeys.append(key)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6570efd30ad83229b1d321ab42035ca811ae0eecdbb6792b5ec2e71164bbc0dd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1779,
                  "startColumn": 17,
                  "charOffset": 66897,
                  "charLength": 39,
                  "snippet": {
                    "text": "if f'{menu.ctx.author.id}' in listkeys:"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1777,
                  "startColumn": 1,
                  "charOffset": 66879,
                  "charLength": 123,
                  "snippet": {
                    "text": "\n\n                if f'{menu.ctx.author.id}' in listkeys:\n                    authorrank = f\"Your rank: #{authorrank_len}\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "da9743f4c5e412ef000be9837e8a5407fb85737f157464297de238a29eb5a193"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E128 continuation line under-indented for visual indent",
            "markdown": "PEP 8: E128 continuation line under-indented for visual indent"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1787,
                  "startColumn": 17,
                  "charOffset": 67260,
                  "charLength": 2,
                  "snippet": {
                    "text": "f'"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1785,
                  "startColumn": 1,
                  "charOffset": 67085,
                  "charLength": 321,
                  "snippet": {
                    "text": "                joined = '\\n'.join(item)\n                embed = discord.Embed(color=farbegeneral, title=f'Leaderboard of {menu.ctx.guild.name}', description=\n                f'_ _'\n                f'\\n{joined}')\n                embed.set_footer(text=f'{authorrank} | page {menu.current_page + 1}/{self.get_max_pages()}')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c9bfaf5c57f2cca67676520446b9f0048c6be283774b209206abdf4d52ab4b36"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E128 continuation line under-indented for visual indent",
            "markdown": "PEP 8: E128 continuation line under-indented for visual indent"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1788,
                  "startColumn": 17,
                  "charOffset": 67283,
                  "charLength": 2,
                  "snippet": {
                    "text": "f'"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1786,
                  "startColumn": 1,
                  "charOffset": 67126,
                  "charLength": 350,
                  "snippet": {
                    "text": "                embed = discord.Embed(color=farbegeneral, title=f'Leaderboard of {menu.ctx.guild.name}', description=\n                f'_ _'\n                f'\\n{joined}')\n                embed.set_footer(text=f'{authorrank} | page {menu.current_page + 1}/{self.get_max_pages()}')\n                embed.set_thumbnail(url=f'{menu.ctx.guild.icon_url}')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7166b432828549b9182423ce883bb5f7442197ab4e04f8769b1ebc572fe0c51f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (127 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (127 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1892,
                  "startColumn": 121,
                  "charOffset": 70271,
                  "charLength": 7,
                  "snippet": {
                    "text": "None``."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1890,
                  "startColumn": 1,
                  "charOffset": 70056,
                  "charLength": 231,
                  "snippet": {
                    "text": "        string: The string which should get converted to the time units. (e.g. '2d 4h 6m 7s')\n\n    Returns: A ``dict`` which the keys are 'days', 'hours', 'minutes', 'seconds' and the value is either a ``int`` or ``None``.\n    \"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "776d8cc2544f496839b67fc93127a261bbb8cca17685efe60fd54a293fe19a80"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\d'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\d'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1897,
                  "startColumn": 22,
                  "charOffset": 70334,
                  "charLength": 6,
                  "snippet": {
                    "text": "\"\\d+d\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1895,
                  "startColumn": 1,
                  "charOffset": 70288,
                  "charLength": 139,
                  "snippet": {
                    "text": "    timeDict: dict = {}\n\n    days = re.search(\"\\d+d\", string)\n    hours = re.search(\"\\d+h\", string)\n    minutes = re.search(\"\\d+m\", string)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bdad590728323b9834d409cd1040092fc107b0cf71f346520f85e45a6152d36e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\d'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\d'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1898,
                  "startColumn": 23,
                  "charOffset": 70372,
                  "charLength": 6,
                  "snippet": {
                    "text": "\"\\d+h\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1896,
                  "startColumn": 1,
                  "charOffset": 70312,
                  "charLength": 155,
                  "snippet": {
                    "text": "\n    days = re.search(\"\\d+d\", string)\n    hours = re.search(\"\\d+h\", string)\n    minutes = re.search(\"\\d+m\", string)\n    seconds = re.search(\"\\d+s\", string)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c1c099aaa77f7bf6772b7743f535fbd055b1f1e7d44e77c3f6488750be6ffed"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\d'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\d'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1899,
                  "startColumn": 25,
                  "charOffset": 70412,
                  "charLength": 6,
                  "snippet": {
                    "text": "\"\\d+m\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1897,
                  "startColumn": 1,
                  "charOffset": 70313,
                  "charLength": 155,
                  "snippet": {
                    "text": "    days = re.search(\"\\d+d\", string)\n    hours = re.search(\"\\d+h\", string)\n    minutes = re.search(\"\\d+m\", string)\n    seconds = re.search(\"\\d+s\", string)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b6850833cec44169fdfb7db2b0a6e912477ab71146db7babe935208db2628ed6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\d'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\d'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1900,
                  "startColumn": 25,
                  "charOffset": 70452,
                  "charLength": 6,
                  "snippet": {
                    "text": "\"\\d+s\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1898,
                  "startColumn": 1,
                  "charOffset": 70350,
                  "charLength": 143,
                  "snippet": {
                    "text": "    hours = re.search(\"\\d+h\", string)\n    minutes = re.search(\"\\d+m\", string)\n    seconds = re.search(\"\\d+s\", string)\n\n    if days is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5c6c790fe6691c4fe0a2592d1bad5f1cd3d0624fec58ab258e5ec7206edc3d64"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\d'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\d'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1936,
                  "startColumn": 29,
                  "charOffset": 71400,
                  "charLength": 21,
                  "snippet": {
                    "text": "\"<[^:]*:[^:]*:(\\d)+>\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1934,
                  "startColumn": 1,
                  "charOffset": 71363,
                  "charLength": 100,
                  "snippet": {
                    "text": "    \"\"\"\n\n    customEmoji = re.search(\"<[^:]*:[^:]*:(\\d)+>\", string)\n\n    if customEmoji is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d5c9f3b09e46c019dfcc8054df338160f642e93cdd610e2a5fb160a7b5dbe20"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (241 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (241 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 5,
                  "charOffset": 1031,
                  "charLength": 237,
                  "snippet": {
                    "text": "# useDB = bool(input(f\"{bcolors.WARNING}Do you want to use MySQL? (y/n)\\n > This option should be..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 992,
                  "charLength": 303,
                  "snippet": {
                    "text": "\nelif os.getenv(\"IP\") is not None:\n    # useDB = bool(input(f\"{bcolors.WARNING}Do you want to use MySQL? (y/n)\\n    > This option should be avoided if you are testing new database structures, do not use MySQL Production if you are testing table modifications.{bcolors.ENDC}\"))\n    if useDB:\n        try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9e985c99a745623c2f47db3c1396981b3a9782092d0b62b028bef8dcce58a3c2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (155 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (155 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 121,
                  "charOffset": 2782,
                  "charLength": 35,
                  "snippet": {
                    "text": "the typehints for possible methods!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 2646,
                  "charLength": 176,
                  "snippet": {
                    "text": "DATABASE FILES\n\nThis file represents every database table and the model they follow. When fetching information from the tables, consult the typehints for possible methods!\n\n\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f257a52d90de87fefea4cc43b8d5baa13b4a31c7fa9754ed90172572bdf3b665"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (122 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (122 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 121,
                  "charOffset": 3636,
                  "charLength": 2,
                  "snippet": {
                    "text": ".*"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 116,
                  "startColumn": 1,
                  "charOffset": 3428,
                  "charLength": 248,
                  "snippet": {
                    "text": "    `used` BooleanField()\n    **DEPRECATED**: Signifies if the voice channel is active.\n    *When a voice session is archived, the database entry will also be deleted. Using this attribute will no longer work.*\n\n    `lockStatus` = bool(TextField())"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0bd35d2a614e9b56186761f3f8f5f990939e84170c9a7fe8b1b4c73168053fd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (127 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (127 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 121,
                  "charOffset": 7628,
                  "charLength": 7,
                  "snippet": {
                    "text": "False."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 308,
                  "startColumn": 1,
                  "charOffset": 7369,
                  "charLength": 299,
                  "snippet": {
                    "text": "    `MasterMaintenance`: BooleanField()\n    Ultimate Check; If this is enabled no one except Permit 4+ users are allowed to use the bot.\\n\n    '>>> **NOTE:** This attribute must always have a bypass to prevent lockouts, otherwise this check will ALWAYS return False.\n\n    `guildNone`: BooleanField()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d2573b2731a8d487b78031062b614d7e8acc5381825617964c133523e05782a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (126 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (126 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 622,
                  "startColumn": 121,
                  "charOffset": 14161,
                  "charLength": 6,
                  "snippet": {
                    "text": "value."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 620,
                  "startColumn": 1,
                  "charOffset": 14010,
                  "charLength": 166,
                  "snippet": {
                    "text": "\n    `components`: CharField()\n    A dict as a string which includes a component of the message (`msgID`) as a key and the count of the component as a value.\n    \"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "63852bf37231e3b1b41019f78e29047cdbe9a80d0404bf0ddd2235218c8a6d67"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 643,
                  "startColumn": 1,
                  "charOffset": 14463,
                  "charLength": 27,
                  "snippet": {
                    "text": "class StudyVCDB(BaseModel):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 641,
                  "startColumn": 1,
                  "charOffset": 14430,
                  "charLength": 83,
                  "snippet": {
                    "text": "    queueID = BigIntegerField()\n\nclass StudyVCDB(BaseModel):\n    \"\"\"\n    #StudyVCDB"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "30110154c72eac3580b19d5c4f0007e80bf57e8c38bbd76bac8da8a7d41c4e1f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 673,
                  "startColumn": 1,
                  "charOffset": 15137,
                  "charLength": 36,
                  "snippet": {
                    "text": "class StudyVCLeaderboard(BaseModel):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 671,
                  "startColumn": 1,
                  "charOffset": 15095,
                  "charLength": 110,
                  "snippet": {
                    "text": "    Paused = BooleanField(default=False)\n\nclass StudyVCLeaderboard(BaseModel):\n    \"\"\"\n    #StudyVCLeaderboard"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "738b88aca4c94598d40f859db68da7f1f3377522db087d5d111c9bc3058e3bc2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E305 expected 2 blank lines after class or function definition, found 1",
            "markdown": "PEP 8: E305 expected 2 blank lines after class or function definition, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 711,
                  "startColumn": 1,
                  "charOffset": 16132,
                  "charLength": 21,
                  "snippet": {
                    "text": "app = Flask(__name__)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 709,
                  "startColumn": 1,
                  "charOffset": 16090,
                  "charLength": 65,
                  "snippet": {
                    "text": "    totalXP = BigIntegerField(default=0)\n\napp = Flask(__name__)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c33acdd88b0bcab315dd9de2167a293bfe5037470251eb5dd608c8292e4d8c96"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 589,
                  "charLength": 36,
                  "snippet": {
                    "text": "class VerifyButton(discord.ui.View):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 563,
                  "charLength": 125,
                  "snippet": {
                    "text": "from pathlib import Path\n\nclass VerifyButton(discord.ui.View):\n    def __init__(self):\n        super().__init__(timeout=None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d04bf2d545903d8e89f911ae7db176fa4dfee96bf7fc41e2a6620fbe935a6d1d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 993,
                  "charLength": 48,
                  "snippet": {
                    "text": "async def before_invoke_(ctx: commands.Context):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 966,
                  "charLength": 181,
                  "snippet": {
                    "text": "        self.value = True\n\nasync def before_invoke_(ctx: commands.Context):\n    sentry_sdk.set_user(None)\n    sentry_sdk.set_user({\"id\": ctx.author.id, \"username\": ctx.author.name})"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e21676235de6ed803791b57d39371243ad8a7f695f3d2616c424fa179d85b0c5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E131 continuation line unaligned for hanging indent",
            "markdown": "PEP 8: E131 continuation line unaligned for hanging indent"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 13,
                  "charOffset": 2197,
                  "charLength": 1,
                  "snippet": {
                    "text": "."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "charOffset": 2101,
                  "charLength": 162,
                  "snippet": {
                    "text": "    query: database.CheckInformation = (\n        database.CheckInformation.select()\n            .where(database.CheckInformation.id == 1)\n            .get()\n    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "20c5c829a5f1de1adcec4af7950d66f0904d1f5225464f5fcde307dde6e822df"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E741 ambiguous variable name 'l'",
            "markdown": "PEP 8: E741 ambiguous variable name 'l'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 45,
                  "charOffset": 10464,
                  "charLength": 1,
                  "snippet": {
                    "text": "l"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 287,
                  "startColumn": 1,
                  "charOffset": 10328,
                  "charLength": 195,
                  "snippet": {
                    "text": "        with error_file.open(\"r\") as f:\n            # config, _ = core.common.load_config()\n            data = \"\\n\".join([l.strip() for l in f])\n\n            GITHUB_API = \"https://api.github.com\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a4d6bc01ebfd2e97992c0a439b3d7405dbcd43f7ff46e19a8214c907842fd037"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 1,
                  "charOffset": 15421,
                  "charLength": 22,
                  "snippet": {
                    "text": "def initializeDB(bot):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 434,
                  "startColumn": 1,
                  "charOffset": 15380,
                  "charLength": 156,
                  "snippet": {
                    "text": "        return CheckDB_CC.elseSituation\n\ndef initializeDB(bot):\n    \"\"\"\n    Initializes the database, and creates the needed table data if they don't exist."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "58ba987b85e85ee6b06cb3325f40b6fe827c82b761a0c48521522dae23b3303a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (123 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (123 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 114,
                  "charOffset": 6177,
                  "charLength": 8,
                  "snippet": {
                    "text": "**\\u0020"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 1,
                  "charOffset": 5991,
                  "charLength": 263,
                  "snippet": {
                    "text": "            if banreason is None:\n                embed = discord.Embed(\n                    description=f\"`ID: {user.id}` | {user.mention} found with the nickname: **{user.display_name}**\\u0020\",\n                    color=discord.Color.green(),\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3a509045cac4cb43d9b7ad29bf17e527d8959012e96330b4f3ebe5419811936f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E731 do not assign a lambda expression, use a def",
            "markdown": "PEP 8: E731 do not assign a lambda expression, use a def"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 13,
                  "charOffset": 18374,
                  "charLength": 3,
                  "snippet": {
                    "text": "key"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 449,
                  "startColumn": 1,
                  "charOffset": 18328,
                  "charLength": 117,
                  "snippet": {
                    "text": "\n        if sort and key is None:\n            key = lambda c: c.qualified_name\n        #\n        iterator = _commands"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6a25d761a1856480d0074e8e36086019fb8dd57284f12103aa63162825c6498d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E122 continuation line missing indentation or outdented",
            "markdown": "PEP 8: E122 continuation line missing indentation or outdented"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 17,
                  "charOffset": 20565,
                  "charLength": 1,
                  "snippet": {
                    "text": "*"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 506,
                  "startColumn": 1,
                  "charOffset": 20506,
                  "charLength": 215,
                  "snippet": {
                    "text": "            [\n                x for x in (\n                *self.bot.tree.walk_commands(guild=discord.Object(interaction.guild.id)),\n                *self.bot.tree.walk_commands(),\n                *self.bot.commands"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "071f4e8a8e20662353f4324e224872797ae141c645404a2cdf64530315674ca4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E122 continuation line missing indentation or outdented",
            "markdown": "PEP 8: E122 continuation line missing indentation or outdented"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 509,
                  "startColumn": 17,
                  "charOffset": 20655,
                  "charLength": 1,
                  "snippet": {
                    "text": "*"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 507,
                  "startColumn": 1,
                  "charOffset": 20520,
                  "charLength": 215,
                  "snippet": {
                    "text": "                x for x in (\n                *self.bot.tree.walk_commands(guild=discord.Object(interaction.guild.id)),\n                *self.bot.tree.walk_commands(),\n                *self.bot.commands\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "70a50f052ad458118f210b67da900c2a5b6e5d08a72add1fccfbb635fbe4b3de"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E122 continuation line missing indentation or outdented",
            "markdown": "PEP 8: E122 continuation line missing indentation or outdented"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 17,
                  "charOffset": 20703,
                  "charLength": 1,
                  "snippet": {
                    "text": "*"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 508,
                  "startColumn": 1,
                  "charOffset": 20549,
                  "charLength": 261,
                  "snippet": {
                    "text": "                *self.bot.tree.walk_commands(guild=discord.Object(interaction.guild.id)),\n                *self.bot.tree.walk_commands(),\n                *self.bot.commands\n            )\n                if isinstance(x, (app_commands.Command, commands.Command))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fd75b0daa976a1bf3916ff2ed0c909277918bfb35243190ffc41d4261f2ad239"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E122 continuation line missing indentation or outdented",
            "markdown": "PEP 8: E122 continuation line missing indentation or outdented"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 511,
                  "startColumn": 13,
                  "charOffset": 20734,
                  "charLength": 1,
                  "snippet": {
                    "text": ")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 509,
                  "startColumn": 1,
                  "charOffset": 20639,
                  "charLength": 186,
                  "snippet": {
                    "text": "                *self.bot.tree.walk_commands(),\n                *self.bot.commands\n            )\n                if isinstance(x, (app_commands.Command, commands.Command))\n            ],"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1144af9a99343a4a35bb0de92c66f8ce8d9bba68824b4a0c0ea1ea219d90d409"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E401 multiple imports on one line",
            "markdown": "PEP 8: E401 multiple imports on one line"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 16,
                  "charOffset": 30,
                  "charLength": 1,
                  "snippet": {
                    "text": ","
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 64,
                  "snippet": {
                    "text": "import asyncio\nimport datetime, pytz\nimport random\nimport string"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "352de6d99cdb8466d551016f12314d9c19bffe75bfa1f1e5349baf77ed421e34"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (123 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (123 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 121,
                  "charOffset": 2981,
                  "charLength": 3,
                  "snippet": {
                    "text": "s),"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "charOffset": 2639,
                  "charLength": 532,
                  "snippet": {
                    "text": "            - !! INCLUDE THESE SERVERS: Marketing Social Media Division, SSD Essay Revision, SSD Community Engagement, \n                                        SSD Notes Creation, SSD Chat Helping, Programming Simplified,\n                                        Programming Simplified Staff, (The Editorial Division), (The Division of Projects),\n                                        (Marketing Brand Strategy Division)\n            - !! Update announcements channels in configcat (not common.py) due of hack which deleted channels"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a43d00450a44ba51351e4eb2d8f72d02914d34db0e0dd7a2eef3628ab4707132"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (125 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (125 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 121,
                  "charOffset": 6028,
                  "charLength": 1,
                  "snippet": {
                    "text": "}"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 5863,
                  "charLength": 235,
                  "snippet": {
                    "text": "\n            if acceptedChannel is not None:\n                acceptedChannelsStr += f\"- {acceptedChannel.name} from {acceptedChannel.guild.name} ({acceptedChannel.id})\\n\"\n            else:\n                noneChannels.append(channelID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "357e09611ac1940a36283a6ddaf7cad5e5d09d97678a64a7b702eecd5793a93e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (122 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (122 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 25,
                  "charOffset": 7021,
                  "charLength": 98,
                  "snippet": {
                    "text": "\"Please provide the announcement-channel/s ID in which the voting should get sent. To send it to \""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 1,
                  "charOffset": 6928,
                  "charLength": 350,
                  "snippet": {
                    "text": "            color=hex.ss_blurple,\n            title=\"Create Voting\",\n            description=\"Please provide the announcement-channel/s ID in which the voting should get sent. To send it to \"\n            \"multiple channels, separate the channels with commas (`,`).\"\n            \"\\n**Click on the link below to see a list of the accepted channels.**\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1691627af487a862a7b6abac3059e38fff8e56facfa373cfa23a2fe82b80f12e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 17,
                  "charOffset": 9013,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 237,
                  "startColumn": 1,
                  "charOffset": 8932,
                  "charLength": 114,
                  "snippet": {
                    "text": "                try:\n                    await msgError.delete()\n                except:\n                    pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5aa34fc21d68fdcb346c83cf6363883a1e954a55c4d9180bbfcab86bd2833162"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 21,
                  "charOffset": 9805,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 259,
                  "startColumn": 1,
                  "charOffset": 9712,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "32ee070dda744e136bc1464d9f0d7f2b897e453db37a26dac2b340d6708db6f8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 21,
                  "charOffset": 9994,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 267,
                  "startColumn": 1,
                  "charOffset": 9901,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "94908a610d436d00c7a1b80125e021b52cb184742e2a5fbd118a9ba8ae841a2e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (123 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (123 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 39,
                  "charOffset": 10213,
                  "charLength": 84,
                  "snippet": {
                    "text": "Couldn't find one or more of the given text channels. Make sure the channel exists,"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 273,
                  "startColumn": 1,
                  "charOffset": 10083,
                  "charLength": 324,
                  "snippet": {
                    "text": "                        color=hex.red_error,\n                        title=\"Create Voting\",\n                        description=f\"Couldn't find one or more of the given text channels. Make sure the channel exists, \"\n                        f\"you provide the channel's ID and it's an accepted channel.\",\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "685edd799054ee9d81cb96a15ab4368c3e3fc78cfa9ff018e5262738e621bd56"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 29,
                  "charOffset": 12114,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 312,
                  "startColumn": 1,
                  "charOffset": 11990,
                  "charLength": 169,
                  "snippet": {
                    "text": "                            try:\n                                await msgError.delete(delay=7)\n                            except:\n                                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2aecb73d16378a0aa327a8f63f764d138e207571e3382c2c7693fed877ffd37e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 29,
                  "charOffset": 12929,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 333,
                  "startColumn": 1,
                  "charOffset": 12805,
                  "charLength": 169,
                  "snippet": {
                    "text": "                            try:\n                                await msgError.delete(delay=7)\n                            except:\n                                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df4cb950cb8cfffc7919176948606862c073808aa044ec2bcee3a2fd38ab6ef1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 21,
                  "charOffset": 14246,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 365,
                  "startColumn": 1,
                  "charOffset": 14153,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6127f430421e4c9690ba59e038d642e54563f91fd537e47c2632cb75e24a47ea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 25,
                  "charOffset": 15047,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 381,
                  "startColumn": 1,
                  "charOffset": 14933,
                  "charLength": 155,
                  "snippet": {
                    "text": "                        try:\n                            await msgTooLong.delete(delay=7)\n                        except:\n                            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3aeaa0c69a5684cfbd39e524f1d1b01537456f1e3a69c3bc7702c3aaf77a1ab8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (125 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (125 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 37,
                  "charOffset": 15338,
                  "charLength": 89,
                  "snippet": {
                    "text": "\"Please provide the options for the voting by separating the options with commas (`,`). \""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 391,
                  "startColumn": 1,
                  "charOffset": 15209,
                  "charLength": 364,
                  "snippet": {
                    "text": "                        color=hex.ss_blurple,\n                        title=\"Create Voting\",\n                        description=\"Please provide the options for the voting by separating the options with commas (`,`). \"\n                        \"They will shown as buttons.\"\n                        f\"\\n\\nFrom the example on the last message, the options would be: \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0f0a845f9e6817bfa13e265b1a793a543690145540068ee6d987a6eaaf96a214"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 21,
                  "charOffset": 16181,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 409,
                  "startColumn": 1,
                  "charOffset": 16088,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "65aaeacbf9f8472b3333e988397dae23ae4191f708186054e96bdef058bd7a45"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 21,
                  "charOffset": 17280,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 436,
                  "startColumn": 1,
                  "charOffset": 17187,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac98f28cdb948d0af500f69b8a33e5a05a084ecd17e5a3878ff162e4c63a5cc5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 465,
                  "startColumn": 25,
                  "charOffset": 18505,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 463,
                  "startColumn": 1,
                  "charOffset": 18393,
                  "charLength": 153,
                  "snippet": {
                    "text": "                        try:\n                            await msgError.delete(delay=7)\n                        except:\n                            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9e9149f0e38c0580fe1ed268f6b3a110c843d433f7b15edc9e73f6520de14b20"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (127 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (127 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 495,
                  "startColumn": 41,
                  "charOffset": 19584,
                  "charLength": 87,
                  "snippet": {
                    "text": "\"Couldn't convert it to a datetime due of a too big expiration date. Please try again.\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 493,
                  "startColumn": 1,
                  "charOffset": 19444,
                  "charLength": 340,
                  "snippet": {
                    "text": "                            color=hex.red_error,\n                            title=\"Create Voting\",\n                            description=\"Couldn't convert it to a datetime due of a too big expiration date. Please try again.\"\n                            f\"\\n\\n**Error:** `{_error.__class__.__name__}: {_error}`\",\n                        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d29dfdbff4166f4190cb0849b471fa5754e98654cc09f3989d98bc87b7e70174"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 25,
                  "charOffset": 20205,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 503,
                  "startColumn": 1,
                  "charOffset": 20093,
                  "charLength": 153,
                  "snippet": {
                    "text": "                        try:\n                            await msgError.delete(delay=7)\n                        except:\n                            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a3945a871d954300aeab09d2a32aad9c63c4dfe3dfca49e30891ca2962c0d68"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 561,
                  "startColumn": 13,
                  "charOffset": 22375,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 559,
                  "startColumn": 1,
                  "charOffset": 22306,
                  "charLength": 98,
                  "snippet": {
                    "text": "            try:\n                await msgError.delete()\n            except:\n                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cc4764e761ad44a3335cfe6a8df5491570879496ebf3440fbefc047c226eb66f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (139 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (139 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 573,
                  "startColumn": 31,
                  "charOffset": 22747,
                  "charLength": 108,
                  "snippet": {
                    "text": "Please confirm that you overviewed the voting message and that this message will be sent and ping @e..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 571,
                  "startColumn": 1,
                  "charOffset": 22650,
                  "charLength": 289,
                  "snippet": {
                    "text": "                color=hex.yellow,\n                title=\"Confirm\",\n                description=f\"Please confirm that you overviewed the voting message and that this message will be sent and ping @everyone \"\n                f\"in the following channel/s:\"\n                f\"\\n{strChannels}\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "11f71ddb8d737baace72b96b836fa4e2104221349a22498eac4e149b3fde7129"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/Blacklist.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 13,
                  "charOffset": 2405,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 2279,
                  "charLength": 178,
                  "snippet": {
                    "text": "                user = self.bot.get_user(p.id)\n                empty_list.append(f\"`{user.name}` -> `{user.id}`\")\n            except:\n                empty_list.append(f\"`{p}`\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "712cc7bafd84ebe9a200deba7046702955d1c458d80622579994f09c3a16c77e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E741 ambiguous variable name 'O'",
            "markdown": "PEP 8: E741 ambiguous variable name 'O'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 5,
                  "charOffset": 3250,
                  "charLength": 1,
                  "snippet": {
                    "text": "O"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 3199,
                  "charLength": 69,
                  "snippet": {
                    "text": "    children: List[TicTacToeButton]\n    X = -1\n    O = 1\n    Tie = 2\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ba6f44e7604d2a69dd5a3082de85b23ec7852272423b255701886b053fda451c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (124 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (124 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 514,
                  "startColumn": 117,
                  "charOffset": 18531,
                  "charLength": 6,
                  "snippet": {
                    "text": "%\\n```"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 512,
                  "startColumn": 1,
                  "charOffset": 18344,
                  "charLength": 231,
                  "snippet": {
                    "text": "        pingembed.add_field(\n            name=\"System Resource Usage\",\n            value=f\"```diff\\n- CPU Usage: {psutil.cpu_percent()}%\\n- Memory Usage: {psutil.virtual_memory().percent}%\\n```\",\n            inline=False,\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "76989451be0f85575cbc175016923e2b9cf10393d7a7447c081f671fd3d7f766"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E131 continuation line unaligned for hanging indent",
            "markdown": "PEP 8: E131 continuation line unaligned for hanging indent"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 17,
                  "charOffset": 1274,
                  "charLength": 1,
                  "snippet": {
                    "text": "."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1164,
                  "charLength": 184,
                  "snippet": {
                    "text": "        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)\n                .get()\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b81ec70b3c8edcd726e05fcda7474630543594adb18508262572733fa2daac8d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E131 continuation line unaligned for hanging indent",
            "markdown": "PEP 8: E131 continuation line unaligned for hanging indent"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 17,
                  "charOffset": 2646,
                  "charLength": 1,
                  "snippet": {
                    "text": "."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 2536,
                  "charLength": 184,
                  "snippet": {
                    "text": "        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)\n                .get()\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6124d760636c6069177fc49bfcd7f297959b73323376cc6d3d2f8f2077aacafe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E131 continuation line unaligned for hanging indent",
            "markdown": "PEP 8: E131 continuation line unaligned for hanging indent"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 17,
                  "charOffset": 3919,
                  "charLength": 1,
                  "snippet": {
                    "text": "."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 119,
                  "startColumn": 1,
                  "charOffset": 3797,
                  "charLength": 199,
                  "snippet": {
                    "text": "        WhitelistedPrefix: database.WhitelistedPrefix = (\n            database.WhitelistedPrefix.select()\n                .where(database.WhitelistedPrefix.id == num)\n                .get()\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1e3ed41952cd9bd2042c9c9ad4563eeeed38ef5c5ee9749126b24d92bfe1153d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (215 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (215 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 52,
                  "charOffset": 2969,
                  "charLength": 162,
                  "snippet": {
                    "text": "||\\n\\n**Instructions:**\\nGive the Username and the Temporary Password to the user and let them know ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 2859,
                  "charLength": 312,
                  "snippet": {
                    "text": "        )\n        await interaction.response.send_message(\n            f\"**Temporary Password:**\\n||{temppass}||\\n\\n**Instructions:**\\nGive the Username and the Temporary Password to the user and let them know they have **1 week** to setup 2FA before they get locked out. \",\n            ephemeral=True,\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f19eea11250989e7d3bef6301217c1562c5ad99e15cb1622b99605a257140180"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 9,
                  "charOffset": 3804,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 3723,
                  "charLength": 234,
                  "snippet": {
                    "text": "        try:\n            service.users().delete(userKey=email).execute()\n        except:\n            return await interaction.response.send_message(\n                f\"{interaction.user.mention} The account **{email}** does not exist.\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c48c336d8557b805fd49bba3f6cac3c92e05cb02d62ef94e2ada48ceb71fd4d8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (238 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (238 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/RedirectService.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 118,
                  "charOffset": 926,
                  "charLength": 105,
                  "snippet": {
                    "text": ". In order to delete this redirect, you'll need this ID!\\n\\nAccess it at https://rs.schoolsimplified..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 715,
                  "charLength": 343,
                  "snippet": {
                    "text": "        val = self.raOBJ.add_redirect(redirect_code, destination_url)\n        await ctx.send(\n            f\"Redirect added for {destination_url} with redirect path /{redirect_code}\\nCreated with the ID: {val.id}. In order to delete this redirect, you'll need this ID!\\n\\nAccess it at https://rs.schoolsimplified.org/{redirect_code}\"\n        )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1c82ed13cc47e13ba7b5f904c856fe26cb7412074331e42ceef469ebae8c11f3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 5,
                  "charOffset": 538,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 469,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "897c7faa3557a162c8af24d81df44f1403f39705318f28914bf80965eb6cd127"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 9,
                  "charOffset": 2068,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 1954,
                  "charLength": 201,
                  "snippet": {
                    "text": "                database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n            )\n        except:\n            q = database.SandboxConfig.create(mode=\"None\")\n            q.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23e5931e8ead62b1c29adda76a46e11c50077c48454a42be44af211db23a52cc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 9,
                  "charOffset": 2166,
                  "charLength": 41,
                  "snippet": {
                    "text": "self.channel_id = MAIN_ID.ch_controlPanel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 1,
                  "charOffset": 2156,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n\n        self.channel_id = MAIN_ID.ch_controlPanel\n        self.categoryID = [\n            MAIN_ID.cat_privateVC,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8ac2707871ad06c5ef6f5271b9eae43a81c8919665901e4d71a4377f1583d099"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (131 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (131 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 119,
                  "charOffset": 19951,
                  "charLength": 8,
                  "snippet": {
                    "text": "authorID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 520,
                  "startColumn": 1,
                  "charOffset": 19720,
                  "charLength": 343,
                  "snippet": {
                    "text": "                    embed = discord.Embed(\n                        title=f\"{Emoji.deny} Ownership Check Failed\",\n                        description=f\"You are not the owner of this voice channel, please ask the original owner <@{q.authorID}>, \"\n                        f\"to rename it!\",\n                        color=discord.Colour.dark_red(),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8ad7c8a57b1c131fe81e916d00697fb952ad64b4f020edb9e6be271acc3f04e8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 752,
                  "startColumn": 17,
                  "charOffset": 29911,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 750,
                  "startColumn": 1,
                  "charOffset": 29842,
                  "charLength": 199,
                  "snippet": {
                    "text": "                        .get()\n                    )\n                except:\n                    embed = discord.Embed(\n                        title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0da1c84e6dc75b1d86feb2877b40c7732eb8599f72c35e4a38847893f1119a45"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (125 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (125 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 947,
                  "startColumn": 25,
                  "charOffset": 38390,
                  "charLength": 100,
                  "snippet": {
                    "text": "\"\\n\\n**NOTE:** Moderators and other Administrators will always be allowed into your voice channels!\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 945,
                  "startColumn": 1,
                  "charOffset": 38182,
                  "charLength": 385,
                  "snippet": {
                    "text": "                        title=f\"{Emoji.lock} Locked Voice Channel\",\n                        description=\"Your voice channel has been locked and now only authorized users can join it!\"\n                        \"\\n\\n**NOTE:** Moderators and other Administrators will always be allowed into your voice channels!\",\n                        color=discord.Colour.green(),\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bf1d8462800473a20de1e55c7cf14085bd53495b9c194b43066e43046856ca10"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 965,
                  "startColumn": 21,
                  "charOffset": 39183,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 963,
                  "startColumn": 1,
                  "charOffset": 39102,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "00ca7e22c36855565e2429a37a69f755c8294e552db9cd2ea9fc82afb4d91c21"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1153,
                  "startColumn": 21,
                  "charOffset": 47802,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1151,
                  "startColumn": 1,
                  "charOffset": 47721,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a1f6d48ba3531445e2159cbdeb9d678280d716e43a8682cd605016fac11eb21"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1328,
                  "startColumn": 21,
                  "charOffset": 56534,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1326,
                  "startColumn": 1,
                  "charOffset": 56453,
                  "charLength": 219,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "44464ff45d06940ce4e9b7cd6003eff1d9057c678ee13fd39cb5a1693007c3d7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1399,
                  "startColumn": 21,
                  "charOffset": 59827,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1397,
                  "startColumn": 1,
                  "charOffset": 59724,
                  "charLength": 219,
                  "snippet": {
                    "text": "                    try:\n                        voiceLIMIT = int(new_voice_limit)\n                    except:\n                        return await ctx.send(f\"{Emoji.deny} Not a valid number!\")\n                    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a1ba8fe30b6ac5cf08bfff5ea9b5a888bfb0038562de0f6fb13984feb634d30"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (122 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (122 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1415,
                  "startColumn": 51,
                  "charOffset": 60674,
                  "charLength": 71,
                  "snippet": {
                    "text": "You can't increase the voice limit to something bigger then 4 members!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1413,
                  "startColumn": 1,
                  "charOffset": 60487,
                  "charLength": 294,
                  "snippet": {
                    "text": "                            if voiceLIMIT > 4 and ctx.guild.id == MAIN_ID.g_main:\n                                return await ctx.send(\n                                    f\"{Emoji.warn} You can't increase the voice limit to something bigger then 4 members!\"\n                                )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e8249306b73a91c343ab440defb677e2cc2102e7f384665b914a4adb5bb7ae6f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (123 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (123 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1427,
                  "startColumn": 51,
                  "charOffset": 61299,
                  "charLength": 72,
                  "snippet": {
                    "text": "You can't increase the voice limit to something bigger then 10 members!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1425,
                  "startColumn": 1,
                  "charOffset": 61146,
                  "charLength": 261,
                  "snippet": {
                    "text": "                            if voiceLIMIT > 10:\n                                return await ctx.send(\n                                    f\"{Emoji.warn} You can't increase the voice limit to something bigger then 10 members!\"\n                                )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0182537cfa15d0c6c818759686c9d656e17c7a361b71db187485c455c26c43f0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1449,
                  "startColumn": 21,
                  "charOffset": 62275,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1447,
                  "startColumn": 1,
                  "charOffset": 62194,
                  "charLength": 219,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c9d9aca922de2cca9ef0f0edee6d569393eb629bd884fbcb99cc951eef0725fb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (123 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (123 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1452,
                  "startColumn": 41,
                  "charOffset": 62454,
                  "charLength": 82,
                  "snippet": {
                    "text": "\"This isn't a voice channel! Please use the command on an actual private channel!\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1450,
                  "startColumn": 1,
                  "charOffset": 62283,
                  "charLength": 336,
                  "snippet": {
                    "text": "                        embed = discord.Embed(\n                            title=f\"{Emoji.invalidchannel} Ownership Check Failed\",\n                            description=\"This isn't a voice channel! Please use the command on an actual private channel!\",\n                            color=discord.Colour.red(),\n                        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fbbc85982b20fda74df026ccb4c85a8b57f640285f6f4be7de908da5d8685f8a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1528,
                  "startColumn": 21,
                  "charOffset": 65929,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1526,
                  "startColumn": 1,
                  "charOffset": 65848,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5bd0154f25297c9456f599a9d781e577646104a296bffc1a22b56a7e46f349b6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (127 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (127 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1563,
                  "startColumn": 120,
                  "charOffset": 67717,
                  "charLength": 2,
                  "snippet": {
                    "text": "id"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1561,
                  "startColumn": 1,
                  "charOffset": 67526,
                  "charLength": 315,
                  "snippet": {
                    "text": "        embed.add_field(\n            name=\"Creating a Private Channel\",\n            value=f\"The **only** way to create a voice channel is through **you** joining <#{self.StartVCIDs[ctx.guild.id]}>. \"\n            f\"There is **no command**, so please don't spam `+start` or whatever comes up in your head.\",\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0fa43db3b417f428c86ef0e0ff574468aeff2ba11235e7ad91422e35059914e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (139 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (139 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1568,
                  "startColumn": 19,
                  "charOffset": 67917,
                  "charLength": 121,
                  "snippet": {
                    "text": "\"The voice channel owner is the only person who can run any of the modifier commands. (Rename, Permi..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1566,
                  "startColumn": 1,
                  "charOffset": 67842,
                  "charLength": 414,
                  "snippet": {
                    "text": "        embed.add_field(\n            name=\"Permissions\",\n            value=\"The voice channel owner is the only person who can run any of the modifier commands. (Rename, Permit, Disconnect, etc) \"\n            \"\\n**No**, there is no way of adding extra users to manage the voice channel. \"\n            \"Anyone who tries will just get an error saying they'd have to redirect the command back to the original owner.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e5e0d8db167a76cfd72478fc4b7113174eb5ffa386d5923fcc2de008f4eb598d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (125 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (125 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1570,
                  "startColumn": 13,
                  "charOffset": 68143,
                  "charLength": 112,
                  "snippet": {
                    "text": "\"Anyone who tries will just get an error saying they'd have to redirect the command back to the orig..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1568,
                  "startColumn": 1,
                  "charOffset": 67899,
                  "charLength": 393,
                  "snippet": {
                    "text": "            value=\"The voice channel owner is the only person who can run any of the modifier commands. (Rename, Permit, Disconnect, etc) \"\n            \"\\n**No**, there is no way of adding extra users to manage the voice channel. \"\n            \"Anyone who tries will just get an error saying they'd have to redirect the command back to the original owner.\",\n            inline=False,\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3155561c2a8050b0ef42d7aed43469e1bc3e33c0101a8a06b973c55d78aec09f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (130 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (130 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1576,
                  "startColumn": 13,
                  "charOffset": 68467,
                  "charLength": 117,
                  "snippet": {
                    "text": "\"Unfortunately, if you are not above level 10 you won't be able to join the Start Private VC channel..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1574,
                  "startColumn": 1,
                  "charOffset": 68318,
                  "charLength": 303,
                  "snippet": {
                    "text": "            name=\"Rank Requirements\",\n            value=\"In order to create a private voice channel, you need to be level 10 or above. \"\n            \"Unfortunately, if you are not above level 10 you won't be able to join the Start Private VC channel and create one.\",\n            inline=False,\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6157cfbe0c1feb2ef84b1478c7fc46b18850b06c8cf8363c3c9187ea5963dadf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "charOffset": 437,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "charOffset": 368,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e98bbffa6fcb3570ceedaeefb4fd770aca740e8d76d0c3ddb9e5cd9402255221"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 23,
                  "charOffset": 3402,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 3246,
                  "charLength": 232,
                  "snippet": {
                    "text": "        print(self.LobbyStartIDs[member.guild.id])\n        lobbyStart = member.guild.get_channel(self.LobbyStartIDs[member.guild.id])\n        if lobbyStart == None:\n            try:\n                lobbyStart = self.bot.get_channel("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c1525f1d8254c70305019c79ddca99df2ccfd997955002ae91e166f5e6802490"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 17,
                  "charOffset": 5741,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 5626,
                  "charLength": 163,
                  "snippet": {
                    "text": "                try:\n                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f23131581b7c0b5e863c15fe54f3732672ce3fc321443a88ae41a993a7a754d4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 25,
                  "charOffset": 6622,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 199,
                  "startColumn": 1,
                  "charOffset": 6483,
                  "charLength": 273,
                  "snippet": {
                    "text": "                                tutorChannel, reason=\"Hogging the VC Start Channel.\"\n                            )\n                        except:\n                            await member.move_to(\n                                None, reason=\"Hogging the VC Start Channel.\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "07701521942b3f9e698068f5cf1b95a0ecbff9969be337446d74e268548330d1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (123 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (123 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 41,
                  "charOffset": 13216,
                  "charLength": 82,
                  "snippet": {
                    "text": "\"\\n**NOTE:** You'll still need to fill in your hours on the hour log spreadsheet.\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 322,
                  "startColumn": 1,
                  "charOffset": 13009,
                  "charLength": 397,
                  "snippet": {
                    "text": "                                        \"I've already went ahead and sent your session legnth \"\n                                        f\"in <#{TUT_ID.ch_hourLogs}>.\"\n                                        \"\\n**NOTE:** You'll still need to fill in your hours on the hour log spreadsheet.\",\n                                        color=discord.Color.green(),\n                                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a083aebecf68e07976621d35bd664f3bfb5ba7266adf56343c6f7f3f8aadb026"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 17,
                  "charOffset": 17019,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 402,
                  "startColumn": 1,
                  "charOffset": 16904,
                  "charLength": 246,
                  "snippet": {
                    "text": "                        reason=\"Maximum Channel Ownership Allowance [TRUE]\",\n                    )\n                except:\n                    await member.move_to(\n                        None, reason=\"Maximum Channel Ownership Allowance [FAIL]\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "48fab6d8fad9e3318fa1f3776a07861d0a280ebdc87e489807d8cd56f445e5f6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (163 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (163 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 434,
                  "startColumn": 31,
                  "charOffset": 18225,
                  "charLength": 132,
                  "snippet": {
                    "text": "\"https://timmy.schoolsimplified.org/tutorvc#voice-channel-activities-games\\nStart by running: `+star..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 432,
                  "startColumn": 1,
                  "charOffset": 18100,
                  "charLength": 318,
                  "snippet": {
                    "text": "                    embed.add_field(\n                        name=\"BETA: Check out VC Games!\",\n                        value=\"https://timmy.schoolsimplified.org/tutorvc#voice-channel-activities-games\\nStart by running: `+startgame` once in a voice channel!\",\n                        inline=False,\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3b31e81b19d05e8ce45c85af32f940494db0424d47f0804f2926103836b3219"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (163 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (163 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 31,
                  "charOffset": 19222,
                  "charLength": 132,
                  "snippet": {
                    "text": "\"https://timmy.schoolsimplified.org/tutorvc#voice-channel-activities-games\\nStart by running: `+star..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 452,
                  "startColumn": 1,
                  "charOffset": 19097,
                  "charLength": 318,
                  "snippet": {
                    "text": "                    embed.add_field(\n                        name=\"BETA: Check out VC Games!\",\n                        value=\"https://timmy.schoolsimplified.org/tutorvc#voice-channel-activities-games\\nStart by running: `+startgame` once in a voice channel!\",\n                        inline=False,\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9713c3e3b63465aeb01a4ae146dd3a8b115a438e381472ae811bc9a6b685b388"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (126 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (126 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 98,
                  "charOffset": 401,
                  "charLength": 29,
                  "snippet": {
                    "text": "# 14.03.2022 as default value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "charOffset": 234,
                  "charLength": 279,
                  "snippet": {
                    "text": "        self.bot = bot\n        self.est = pytz.timezone(\"US/Eastern\")\n        self.lastReset = parser.parse(\"14.03.2022 00:00:00 EST\", tzinfos={\"EST\": -4 * 3600})     # 14.03.2022 as default value\n        self.midnight = datetime.datetime.strptime(\"00:00:00\", \"%H:%M:%S\").time()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b4e08a5c11da6d82e08d041c849d6e4c3f89fed26a85183f27ac48ea458fe51d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 5,
                  "charOffset": 854,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 785,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac59d9250504c6bff9cda6a41d386b83b5f2b17647d17db0354640a7fc6a08bd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (130 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (130 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 121,
                  "charOffset": 2960,
                  "charLength": 10,
                  "snippet": {
                    "text": "if needed."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 2774,
                  "charLength": 266,
                  "snippet": {
                    "text": "async def addLeaderboardProgress(member: discord.Member):\n    \"\"\"\n    Updates the data in the database table `StudyVCLeaderboard` of a specific member and adds level roles to the member if needed.\n\n    :param member: The member on which the progress should apply on."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "beb5c5dc07a1390a5eac9e61a9657bf7fc5d4fbadb25ffc84faf4243d42bb7ad"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (121 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (121 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 121,
                  "charOffset": 3498,
                  "charLength": 1,
                  "snippet": {
                    "text": ")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 138,
                  "startColumn": 1,
                  "charOffset": 3268,
                  "charLength": 257,
                  "snippet": {
                    "text": "        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where(database.StudyVCLeaderboard.discordID == member.id)\n\n        isNewLvl = False"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "051478f077c91bfab25d358bacaf0a8b7a5a5dcfd203ede620ea6c8349457484"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 13,
                  "charOffset": 8132,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 292,
                  "startColumn": 1,
                  "charOffset": 8062,
                  "charLength": 99,
                  "snippet": {
                    "text": "            try:\n                await member.send(dmMSG)\n            except:\n                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df41b812f8213aa464a09ec5059d4c184eb3e8c231728c1bee2a9467a82a5539"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (124 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (124 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 121,
                  "charOffset": 8532,
                  "charLength": 4,
                  "snippet": {
                    "text": "DB`."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 308,
                  "startColumn": 1,
                  "charOffset": 8358,
                  "charLength": 253,
                  "snippet": {
                    "text": "async def endSession(member: discord.Member):\n    \"\"\"\n    Ends the session by kicking the user out of the voice channel and removing the user from the database table `StudyVCDB`.\n\n    :param member: The member which should get removed from the database."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f303652146e9f64a93fdacae4fcf4db6243c42db4e26ba6e06a25272a45c2bf6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E113 unexpected indentation",
            "markdown": "PEP 8: E113 unexpected indentation"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 9,
                  "charOffset": 9054,
                  "charLength": 4,
                  "snippet": {
                    "text": "elif"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 329,
                  "startColumn": 1,
                  "charOffset": 9029,
                  "charLength": 108,
                  "snippet": {
                    "text": "    return True\n\n        elif newLvl < 40:\n            role = None  # TODO: get lvl 30 role and add to user\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc857d5365bb49daa27c6327f029afe99fe8da6ec4f307436208fc183da6abab"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 13,
                  "charOffset": 10914,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 391,
                  "startColumn": 1,
                  "charOffset": 10844,
                  "charLength": 99,
                  "snippet": {
                    "text": "            try:\n                await member.send(dmMSG)\n            except:\n                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9e19b5db0903d68d7cba0ea4797901074e22b8b4ddf4b8b9c550ad973bf9bf24"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (124 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (124 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 121,
                  "charOffset": 11314,
                  "charLength": 4,
                  "snippet": {
                    "text": "DB`."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 407,
                  "startColumn": 1,
                  "charOffset": 11140,
                  "charLength": 253,
                  "snippet": {
                    "text": "async def endSession(member: discord.Member):\n    \"\"\"\n    Ends the session by kicking the user out of the voice channel and removing the user from the database table `StudyVCDB`.\n\n    :param member: The member which should get removed from the database."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d5dff99eecb16acbb61bcfc0c1749cf2f8d63e190bdf8cc4bb6c13811dc1461"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 5,
                  "charOffset": 12063,
                  "charLength": 39,
                  "snippet": {
                    "text": "@commands.group(aliaseS=[\"study-todo\"])"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 437,
                  "startColumn": 1,
                  "charOffset": 12057,
                  "charLength": 147,
                  "snippet": {
                    "text": "\n\n    @commands.group(aliaseS=[\"study-todo\"])\n    async def studytodo(self, ctx: commands.Context):\n        if ctx.message.content == \"+studytodo\":"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "382a5a1f29931829e0a22cc9146d59bf3a2f2235dbb688d21169ee59e1557552"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E225 missing whitespace around operator",
            "markdown": "PEP 8: E225 missing whitespace around operator"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 457,
                  "startColumn": 99,
                  "charOffset": 12775,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 455,
                  "startColumn": 1,
                  "charOffset": 12664,
                  "charLength": 186,
                  "snippet": {
                    "text": "        \"\"\"\n\n        query: database.StudyVCDB = database.StudyVCDB.select().where(database.StudyVCDB.discordID==ctx.author.id)\n        if query.exists():\n            query = query.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bbb658372e0e819d8db4cf0ddde9a663b323b3897747464971e73127ea176bf2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 473,
                  "startColumn": 5,
                  "charOffset": 13370,
                  "charLength": 20,
                  "snippet": {
                    "text": "@studytodo.command()"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 471,
                  "startColumn": 1,
                  "charOffset": 13364,
                  "charLength": 86,
                  "snippet": {
                    "text": "\n\n    @studytodo.command()\n    async def end(self, ctx: commands.Context):\n        \"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac98255f80d095b6450bcf6056df6c237641ddeff6e351f109d1bfb9ef89c492"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 5,
                  "charOffset": 13901,
                  "charLength": 20,
                  "snippet": {
                    "text": "@studytodo.command()"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 486,
                  "startColumn": 1,
                  "charOffset": 13895,
                  "charLength": 108,
                  "snippet": {
                    "text": "\n\n    @studytodo.command()\n    async def list(self, ctx):\n        query = database.StudyToDo.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "862b847ebb29752024c5563f0a29461af882cbb02c2f1755e14fca6cb7522efc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (3)",
            "markdown": "PEP 8: E303 too many blank lines (3)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 1,
                  "charOffset": 15867,
                  "charLength": 15,
                  "snippet": {
                    "text": "def setup(bot):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 548,
                  "startColumn": 1,
                  "charOffset": 15865,
                  "charLength": 50,
                  "snippet": {
                    "text": "\n\ndef setup(bot):\n    bot.add_cog(StudyToDo(bot))\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "172b5187922b3e49ef3b0b6b61a440e53d363a267d1b36d7400a8a6a3ca01e82"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 48,
                  "charOffset": 2556,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2cfe7af06d80e4cd7a180c51895a5608802051a870ac7210f4441c6decd63003"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 50,
                  "charOffset": 2558,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "97955274fb6c898f8052d12733f917832fb7182901e2ff323b5a2ffdadd091e7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 66,
                  "charOffset": 2574,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "214689725d869ac246cd2214ab54b63b4fc1e103ca8295a0a6c5713be790a3bf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 68,
                  "charOffset": 2576,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e72f11f315c8fdbfe2c3bcea838ea9526575e62952233136f6f23446f3c2161"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 84,
                  "charOffset": 2592,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d316750219129aa1c427e7e8cfe542736cf750b72270a53b77a2723a7ccf9838"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 86,
                  "charOffset": 2594,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "965b82d01fb4f328e48477db8dcab420d9b47d068118771895c5ec1fd66cda8e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 117,
                  "charOffset": 2625,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d5623f0a60566d2eb823db7662022263ebb264ceb06f76e762f4dc30e205c44"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 119,
                  "charOffset": 2627,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ed28f27f492a6b56f85908ef5ad7a32c666f360f1581331db33abe4a239e76b2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (127 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (127 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 120,
                  "charOffset": 2628,
                  "charLength": 7,
                  "snippet": {
                    "text": "renewal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "474d2aa921d0f0d9fd81637d8bd937661a8f4a3496a527a30379814e4a768c70"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (3)",
            "markdown": "PEP 8: E303 too many blank lines (3)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3069,
                  "charLength": 28,
                  "snippet": {
                    "text": "def getConsoleCH(column_id):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 3067,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7e43e31e7c0b9dc84508cb33c4caa931e0f245ea5f002d5cf603734ae9b10062"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (3)",
            "markdown": "PEP 8: E303 too many blank lines (3)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 1,
                  "charOffset": 3339,
                  "charLength": 34,
                  "snippet": {
                    "text": "class StudyVCUpdate(commands.Cog):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 3337,
                  "charLength": 102,
                  "snippet": {
                    "text": "\n\nclass StudyVCUpdate(commands.Cog):\n    def __init__(self, bot: commands.Bot):\n        self.bot = bot"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "07a4dc7a54f52ffe067b42560b429528a3ba37f1ad867cf7f91ff0e31fd0db92"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 9,
                  "charOffset": 3680,
                  "charLength": 27,
                  "snippet": {
                    "text": "self.StudyVCChecker.start()"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 3670,
                  "charLength": 39,
                  "snippet": {
                    "text": "\n\n        self.StudyVCChecker.start()\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68403071d38c26712606ac5e43aa6575ff16605c594ef5a7e3e187797b75a6b7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 5,
                  "charOffset": 3714,
                  "charLength": 21,
                  "snippet": {
                    "text": "def cog_unload(self):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 127,
                  "startColumn": 1,
                  "charOffset": 3708,
                  "charLength": 63,
                  "snippet": {
                    "text": "\n\n    def cog_unload(self):\n        self.StudyVCChecker.stop()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23b9a6305ac87f218e3ecdcd053c557237dd64c8b5f4b5ffc5e1e7dbaffa22b3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (121 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (121 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 121,
                  "charOffset": 5916,
                  "charLength": 1,
                  "snippet": {
                    "text": "\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 5669,
                  "charLength": 411,
                  "snippet": {
                    "text": "                    goal, renewal = await setNewStudyGoal(self, console, member, True)\n                    await console.send(\n                                f\"{member.mention} Successfully started your study session! Your study goal is '{goal}'.\"\n                                f\"n\\n**That's it!** Make sure you come back at {renewal.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "25252596bad2de09c9f6fc78c845e785c642b39733775da21c5ed620949821c2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (140 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (140 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 111,
                  "charOffset": 6028,
                  "charLength": 29,
                  "snippet": {
                    "text": "to renew your study session!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 5756,
                  "charLength": 325,
                  "snippet": {
                    "text": "                    await console.send(\n                                f\"{member.mention} Successfully started your study session! Your study goal is '{goal}'.\"\n                                f\"n\\n**That's it!** Make sure you come back at {renewal.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "24e1df911c12a8db40228d34dd89fe0532824817429fbbd17a97d5c8a0430a99"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (188 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (188 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 118,
                  "charOffset": 6312,
                  "charLength": 11,
                  "snippet": {
                    "text": "RenewalTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 188,
                  "startColumn": 1,
                  "charOffset": 6082,
                  "charLength": 324,
                  "snippet": {
                    "text": "                elif dateObj - datetime.now(EST) < timedelta(minutes=5):\n                    await console.send(\n                        f\"{member.mention} Your study session is ending in **less than 5 minutes**. (Ends at: {query.RenewalTime.strftime(r'%I:%M %p')})\\n\\nMaybe renew your study session?\"\n                    )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e599ff1b4f32ef6f88c1ca208a645dd2caea6e427fed13c39ce845a675de9eb6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (184 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (184 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 121,
                  "charOffset": 6589,
                  "charLength": 11,
                  "snippet": {
                    "text": "RenewalTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 193,
                  "startColumn": 1,
                  "charOffset": 6407,
                  "charLength": 269,
                  "snippet": {
                    "text": "                else:\n                    await console.send(\n                        f\"{member.mention} You already have a study session going!\\n\\nMake sure you come back at {query.RenewalTime.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ce3f54b5803755aa9da420dbc3a8a20d979a4c96fcfc0e6c721f3e69f89a748"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 5,
                  "charOffset": 6682,
                  "charLength": 64,
                  "snippet": {
                    "text": "@tasks.loop(seconds=10) # TODO: change to 60s due of rate limits"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 197,
                  "startColumn": 1,
                  "charOffset": 6676,
                  "charLength": 198,
                  "snippet": {
                    "text": "\n\n    @tasks.loop(seconds=10) # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21f934a9378359b2fff6cd5cf8bc998df4d5df92a47486c9bca37d25010c8bcb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E261 at least two spaces before inline comment",
            "markdown": "PEP 8: E261 at least two spaces before inline comment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 28,
                  "charOffset": 6705,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 197,
                  "startColumn": 1,
                  "charOffset": 6676,
                  "charLength": 198,
                  "snippet": {
                    "text": "\n\n    @tasks.loop(seconds=10) # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "868ae6e0cf1a41f8f493bc4d11dcefd7c298a2c858af24a0e5a090f54a9d147c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (132 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (132 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 103,
                  "charOffset": 7884,
                  "charLength": 29,
                  "snippet": {
                    "text": "to renew your study session!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 218,
                  "startColumn": 1,
                  "charOffset": 7618,
                  "charLength": 319,
                  "snippet": {
                    "text": "                    await StudyVCConsoleObj.send(\n                        f\"{member.mention} Successfully started your study session! Your study goal is '{goal}'.\"\n                        f\"n\\n**That's it!** Make sure you come back at {renewal.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f4e9a2e1d3bf16cd076ec513a372a2e681ade640108f9965b55e7f8409d97fc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (174 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (174 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 116,
                  "charOffset": 8168,
                  "charLength": 8,
                  "snippet": {
                    "text": "strftime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 223,
                  "startColumn": 1,
                  "charOffset": 7938,
                  "charLength": 308,
                  "snippet": {
                    "text": "            elif dateObj - datetime.now(EST) < timedelta(minutes=5):\n                await StudyVCConsoleObj.send(\n                    f\"{member.mention} Your study session is ending in **less than 5 minutes**. (Ends at: {dateObj.strftime(r'%I:%M %p')})\\n\\nMaybe renew your study session?\"\n                )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c54b221edab0f2291eef60e5acf46ce61130baa1b65f9f8e8ea299d5c62e4cd7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (5)",
            "markdown": "PEP 8: E303 too many blank lines (5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 1,
                  "charOffset": 8255,
                  "charLength": 21,
                  "snippet": {
                    "text": "async def setup(bot):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 230,
                  "startColumn": 1,
                  "charOffset": 8249,
                  "charLength": 70,
                  "snippet": {
                    "text": "\n    \nasync def setup(bot):\n    await bot.add_cog(StudyVCUpdate(bot))\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80a5976a71ae86d797301fa4ae9a2d2f261942db8169955497957390e2e87845"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 48,
                  "charOffset": 2556,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1513c4b5a07d4b59408455ef14651df1c5b3c0833bf3f18762f13a120640a1a8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 50,
                  "charOffset": 2558,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d84cff8cfb9f8d395f4d159a542ac158461b270119905be005873c0e6bb031f9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 66,
                  "charOffset": 2574,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "375addad5138fe172bcfc0e400b085163c1bcd45ec0bf03c2b161a18f1d02895"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 68,
                  "charOffset": 2576,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "db558b4238e195ddefcc8b4fb57803bbc95a4ed0d4b8143c98afccdfe1cf1f29"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 84,
                  "charOffset": 2592,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f6c1982ffa440a8663f0b2f26da240ae3f8d0f380a62be5d8ef11193589bb55"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 86,
                  "charOffset": 2594,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c9dc40b219b500cc69d76e2cae71f5db81d36be5d9a72c69066ec13ad03defe4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 117,
                  "charOffset": 2625,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "695f1c5ae0ce0b11a8860637c72980fde4ba7db46228cc1ec1e9939b8da99c70"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 119,
                  "charOffset": 2627,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a66d78343d4337169288ba62caabb7e71a4db0ada22272a426f5fd4d64ddbebb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (127 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (127 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 120,
                  "charOffset": 2628,
                  "charLength": 7,
                  "snippet": {
                    "text": "renewal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "511cb880b39ba6dc50465f70bed5b2f6e51c33b36e05190bac5dbfccba728a20"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (3)",
            "markdown": "PEP 8: E303 too many blank lines (3)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3069,
                  "charLength": 28,
                  "snippet": {
                    "text": "def getConsoleCH(column_id):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 3067,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ac6fb24ab12dc7c6aca716473c1abe849d8be39479743a50b1ec30e7d6ea8b7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (3)",
            "markdown": "PEP 8: E303 too many blank lines (3)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 1,
                  "charOffset": 3339,
                  "charLength": 34,
                  "snippet": {
                    "text": "class StudyVCUpdate(commands.Cog):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 3337,
                  "charLength": 102,
                  "snippet": {
                    "text": "\n\nclass StudyVCUpdate(commands.Cog):\n    def __init__(self, bot: commands.Bot):\n        self.bot = bot"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "95fb8319078d704324c45cbf3c87f6419ceed5165fe2828743517b11d09a1135"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 9,
                  "charOffset": 3680,
                  "charLength": 27,
                  "snippet": {
                    "text": "self.StudyVCChecker.start()"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 3670,
                  "charLength": 39,
                  "snippet": {
                    "text": "\n\n        self.StudyVCChecker.start()\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "425e344e4657277bcb8ef0018e22459fb8d99a4f1e14671be5b6b7ae2d486db5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 5,
                  "charOffset": 3714,
                  "charLength": 21,
                  "snippet": {
                    "text": "def cog_unload(self):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 127,
                  "startColumn": 1,
                  "charOffset": 3708,
                  "charLength": 63,
                  "snippet": {
                    "text": "\n\n    def cog_unload(self):\n        self.StudyVCChecker.stop()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c5f1ecf22833e4153f4bad402a95c450fc3e0e4889b5c1fa2fc58876aff6f20"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (121 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (121 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 121,
                  "charOffset": 5921,
                  "charLength": 1,
                  "snippet": {
                    "text": "\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 179,
                  "startColumn": 1,
                  "charOffset": 5674,
                  "charLength": 411,
                  "snippet": {
                    "text": "                    goal, renewal = await setNewStudyGoal(self, console, member, True)\n                    await console.send(\n                                f\"{member.mention} Successfully started your study session! Your study goal is '{goal}'.\"\n                                f\"n\\n**That's it!** Make sure you come back at {renewal.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73d1ca41de1dd23cf642b4e603e143657c906f3f5bb131031275e7609b4efef9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (140 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (140 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 111,
                  "charOffset": 6033,
                  "charLength": 29,
                  "snippet": {
                    "text": "to renew your study session!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 5761,
                  "charLength": 325,
                  "snippet": {
                    "text": "                    await console.send(\n                                f\"{member.mention} Successfully started your study session! Your study goal is '{goal}'.\"\n                                f\"n\\n**That's it!** Make sure you come back at {renewal.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e24759c7874edc8145c2637e0099480bef88c4aae68a8b77a4ef464ddad6de2d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (188 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (188 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 118,
                  "charOffset": 6317,
                  "charLength": 11,
                  "snippet": {
                    "text": "RenewalTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 185,
                  "startColumn": 1,
                  "charOffset": 6087,
                  "charLength": 324,
                  "snippet": {
                    "text": "                elif dateObj - datetime.now(EST) < timedelta(minutes=5):\n                    await console.send(\n                        f\"{member.mention} Your study session is ending in **less than 5 minutes**. (Ends at: {query.RenewalTime.strftime(r'%I:%M %p')})\\n\\nMaybe renew your study session?\"\n                    )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "29d90e46a8ca81369dc6b48553677e5dcb29678686dfff4f986f8ae4de8f52a6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (184 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (184 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 121,
                  "charOffset": 6594,
                  "charLength": 11,
                  "snippet": {
                    "text": "RenewalTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 190,
                  "startColumn": 1,
                  "charOffset": 6412,
                  "charLength": 269,
                  "snippet": {
                    "text": "                else:\n                    await console.send(\n                        f\"{member.mention} You already have a study session going!\\n\\nMake sure you come back at {query.RenewalTime.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49a2889fdc93733f911c66b9fffd1448871c5f3003f3a1836fa349279c73271f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 5,
                  "charOffset": 6687,
                  "charLength": 64,
                  "snippet": {
                    "text": "@tasks.loop(seconds=10) # TODO: change to 60s due of rate limits"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 194,
                  "startColumn": 1,
                  "charOffset": 6681,
                  "charLength": 198,
                  "snippet": {
                    "text": "\n\n    @tasks.loop(seconds=10) # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e56f2f5b61abff26c7934653cb86bea029507cd6b8ae323a94f6a16a6ceabbfe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E261 at least two spaces before inline comment",
            "markdown": "PEP 8: E261 at least two spaces before inline comment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 28,
                  "charOffset": 6710,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 194,
                  "startColumn": 1,
                  "charOffset": 6681,
                  "charLength": 198,
                  "snippet": {
                    "text": "\n\n    @tasks.loop(seconds=10) # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72fa47e8b81f59ac24227592e98334ced107886252ea6022dc4c2e3b79d0912b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (132 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (132 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 103,
                  "charOffset": 7913,
                  "charLength": 29,
                  "snippet": {
                    "text": "to renew your study session!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 215,
                  "startColumn": 1,
                  "charOffset": 7647,
                  "charLength": 319,
                  "snippet": {
                    "text": "                    await StudyVCConsoleObj.send(\n                        f\"{member.mention} Successfully started your study session! Your study goal is '{goal}'.\"\n                        f\"n\\n**That's it!** Make sure you come back at {renewal.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "47deb83131cc53626967403bad36a9b2e289eaeab655ff18f9badb637162311b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (174 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (174 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 116,
                  "charOffset": 8197,
                  "charLength": 8,
                  "snippet": {
                    "text": "strftime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 220,
                  "startColumn": 1,
                  "charOffset": 7967,
                  "charLength": 308,
                  "snippet": {
                    "text": "            elif dateObj - datetime.now(EST) < timedelta(minutes=5):\n                await StudyVCConsoleObj.send(\n                    f\"{member.mention} Your study session is ending in **less than 5 minutes**. (Ends at: {dateObj.strftime(r'%I:%M %p')})\\n\\nMaybe renew your study session?\"\n                )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "40445937ffb80ebe8e051eed2608ad7c2acff479077edff666fc6eff5ff66fa7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (5)",
            "markdown": "PEP 8: E303 too many blank lines (5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 1,
                  "charOffset": 8284,
                  "charLength": 15,
                  "snippet": {
                    "text": "def setup(bot):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 227,
                  "startColumn": 1,
                  "charOffset": 8278,
                  "charLength": 58,
                  "snippet": {
                    "text": "\n    \ndef setup(bot):\n    bot.add_cog(StudyVCUpdate(bot))\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a258eafe1d8f66af9e4a44c342b2d576e891f44c36f4bca036c36c0b17661b65"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 13,
                  "charOffset": 3041,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 2943,
                  "charLength": 179,
                  "snippet": {
                    "text": "            try:\n                await interaction.response.send_message(embed=embed)\n            except:\n                await interaction.channel.send(embed=embed)\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a45065bdb66934f2abfaa069754ea5c926bc4b9918ea744076ab28d6f442049c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 17,
                  "charOffset": 4452,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 4342,
                  "charLength": 199,
                  "snippet": {
                    "text": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n            else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ea5735938e23d4f31fa787824a4819b1ada7afd78f3075e15556a4fac57eaf79"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 17,
                  "charOffset": 4902,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 1,
                  "charOffset": 4792,
                  "charLength": 182,
                  "snippet": {
                    "text": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2335d4fc729a55251c32b13e89c7185b4e85aefea97459f61c1c5de2c162f008"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 17,
                  "charOffset": 1983,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 1896,
                  "charLength": 213,
                  "snippet": {
                    "text": "                try:\n                    await tutor.send(embed=embed)\n                except:\n                    await botch.send(\n                        f\"Unable to send a reminder DM to you {tutor.mention}!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85b39a3614066cd1bb766bad7e982e23016b950fa812a305ac352845360b724d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 17,
                  "charOffset": 2258,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 2169,
                  "charLength": 173,
                  "snippet": {
                    "text": "                try:\n                    await student.send(embed=embed)\n                except:\n                    print(f\"Unable to Send a Reminder DM to: {student.id}\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "092a10a2c90842452e1c6702352a3f946b9c77a6a5e20927d3150e889ab24ba2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (3)",
            "markdown": "PEP 8: E303 too many blank lines (3)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 1,
                  "charOffset": 5369,
                  "charLength": 35,
                  "snippet": {
                    "text": "async def setup(bot: commands.Bot):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 150,
                  "startColumn": 1,
                  "charOffset": 5367,
                  "charLength": 79,
                  "snippet": {
                    "text": "\n\nasync def setup(bot: commands.Bot):\n    await bot.add_cog(TutorBotLoop(bot))\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "61474eb7df3d93d07edf45225245edd3c340b6b50fb7248403d0cb4563a87378"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (137 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (137 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 121,
                  "charOffset": 1077,
                  "charLength": 17,
                  "snippet": {
                    "text": ".cat_essayTicket:"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 952,
                  "charLength": 330,
                  "snippet": {
                    "text": "\n\"\"\"\nif not (RoleOBJ.id == MAIN_ID.r_chatHelper or RoleOBJ.id == MAIN_ID.r_leadHelper) and not channel.category.id == MAIN_ID.cat_essayTicket:\n                    if RoleOBJ.id == MAIN_ID.r_essayReviser:\n                        if channel.category.id == MAIN_ID.cat_essayTicket or channel.category.id == MAIN_ID.cat_englishTicket:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c1fd6754241b8e4426debb735dd00696a364f8ffb8982fc9dd07fbf8d7db00e6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (126 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (126 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 121,
                  "charOffset": 1276,
                  "charLength": 6,
                  "snippet": {
                    "text": "icket:"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 957,
                  "charLength": 354,
                  "snippet": {
                    "text": "if not (RoleOBJ.id == MAIN_ID.r_chatHelper or RoleOBJ.id == MAIN_ID.r_leadHelper) and not channel.category.id == MAIN_ID.cat_essayTicket:\n                    if RoleOBJ.id == MAIN_ID.r_essayReviser:\n                        if channel.category.id == MAIN_ID.cat_essayTicket or channel.category.id == MAIN_ID.cat_englishTicket:\n\"\"\"\nMasterSubjectOptions = ["
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "58cceec7b91219deb4327e78a88c0c65ae48efc021dc235684f1f548fbeb0b9e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is not None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is not None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 17,
                  "charOffset": 3973,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 1,
                  "charOffset": 3898,
                  "charLength": 162,
                  "snippet": {
                    "text": "    embed.add_field(name=\"Transcript Link\", value=S3_URL)\n\n    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23be35db1400a3bd4b3c5f8e612a6ba5bde1dc8304f25367b4020f0fa08e3689"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is not None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is not None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 24,
                  "charOffset": 4052,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 3957,
                  "charLength": 160,
                  "snippet": {
                    "text": "    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:\n        for UAuthor in responsesauthor:\n            try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "673431f643a16aca3beb531f6a35b59f7e4248672cf3e699f055167f14e8ec12"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 5,
                  "charOffset": 4440,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 4374,
                  "charLength": 87,
                  "snippet": {
                    "text": "    try:\n        os.remove(f\"transcript-{channel.name}.html\")\n    except:\n        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df9bd5c6944930736eff5a80e265428c13e92581850e22d1dcf97f594c514c4d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 17,
                  "charOffset": 4478,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 152,
                  "startColumn": 1,
                  "charOffset": 4448,
                  "charLength": 99,
                  "snippet": {
                    "text": "        pass\n\n    if response == None:\n        msg = S3_URL\n    return msg, transcript_file, S3_URL"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d02f1cab8447c029bca5bf96ac0611d69395725af01f27114acda297ada273b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (137 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (137 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 33,
                  "charOffset": 16034,
                  "charLength": 104,
                  "snippet": {
                    "text": "\"What is your question or topic?\\nDo not send a URL. You must send the question or topic in plain te..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 470,
                  "startColumn": 1,
                  "charOffset": 15917,
                  "charLength": 288,
                  "snippet": {
                    "text": "                embed = discord.Embed(\n                    title=\"2) Send Question\",\n                    description=\"What is your question or topic?\\nDo not send a URL. You must send the question or topic in plain text.\",\n                    color=discord.Color.blue(),\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6d39882c164f2184f1d5c904efd35c70ba97db8b8ac66da507827c4072092ec8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (171 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (171 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 33,
                  "charOffset": 16815,
                  "charLength": 138,
                  "snippet": {
                    "text": "\"**Acceptable Forms of Proof:**\\n1) Images/Attachments.\\n2) URL's such as Gyazo.\\n\\nSend them all in..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 486,
                  "startColumn": 1,
                  "charOffset": 16690,
                  "charLength": 330,
                  "snippet": {
                    "text": "                embed = discord.Embed(\n                    title=\"3) Send Assignment Title\",\n                    description=\"**Acceptable Forms of Proof:**\\n1) Images/Attachments.\\n2) URL's such as Gyazo.\\n\\nSend them all in one message for them to all be sent.\",\n                    color=discord.Color.blue(),\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "20b24d011b1384f585994130c1091aabb832dc7d2d0463424f8441bdc779438b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (141 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (141 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 26,
                  "charOffset": 17080,
                  "charLength": 116,
                  "snippet": {
                    "text": "\"We need images/urls as proof that you aren't cheating, School Simplified does not offer assistance ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 490,
                  "startColumn": 1,
                  "charOffset": 17003,
                  "charLength": 212,
                  "snippet": {
                    "text": "                )\n                embed.set_footer(\n                    text=\"We need images/urls as proof that you aren't cheating, School Simplified does not offer assistance on assessments.\"\n                )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9f3750d140516209afaee16ea3f7d369ea79acfa41ad47b0ac2d11c0295000a7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (134 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (134 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 726,
                  "startColumn": 121,
                  "charOffset": 26554,
                  "charLength": 15,
                  "snippet": {
                    "text": "ew:ticketdrop\")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 724,
                  "startColumn": 1,
                  "charOffset": 26423,
                  "charLength": 256,
                  "snippet": {
                    "text": "        )\n\n    \"\"\"@discord.ui.button(label=\"Create Ticket\", style=discord.ButtonStyle.blurple, emoji=\"📝\", custom_id=\"persistent_view:ticketdrop\")\n    async def confirm(self, button: discord.ui.Button, interaction: discord.Interaction):\n        print(\"hi\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f71c2cc0554ac56b469ad6a4671c73f7822fa6e66fcc29391f7cdb81a03b040a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 815,
                  "startColumn": 13,
                  "charOffset": 29609,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 813,
                  "startColumn": 1,
                  "charOffset": 29506,
                  "charLength": 192,
                  "snippet": {
                    "text": "                    f\"{author.mention}\\n\", embed=embed, view=ButtonViews\n                )\n            except:\n                try:\n                    await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "554a36aea993bcf6f3e43a4da34557c76487f5541f9dbdf3d33908a76c4899a2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 820,
                  "startColumn": 17,
                  "charOffset": 29814,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 818,
                  "startColumn": 1,
                  "charOffset": 29699,
                  "charLength": 239,
                  "snippet": {
                    "text": "                        f\"{author.mention}\\n\", embed=embed, view=ButtonViews\n                    )\n                except:\n                    await channel.send(\n                        f\"{author.mention}\\n\", embed=embed, view=ButtonViews"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d746cbeccc07e704b77a70f0fec5cb5b56bc46e49251b8fdda8c44a911b91cb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (122 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (122 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1020,
                  "startColumn": 93,
                  "charOffset": 37854,
                  "charLength": 29,
                  "snippet": {
                    "text": "\\n**THIS MAY TAKE SOME TIME**"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1018,
                  "startColumn": 1,
                  "charOffset": 37697,
                  "charLength": 261,
                  "snippet": {
                    "text": "            )\n            msgO = await interaction.channel.send(\n                f\"{author.mention}\\nPlease wait, generating a transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )\n            TicketOwner = self.bot.get_user(query.authorID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0afae177464206f4e46f85d47f3f247230ab70fc6e32fc4fd6cd0db19ac775b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (123 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (123 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1075,
                  "startColumn": 119,
                  "charOffset": 40301,
                  "charLength": 3,
                  "snippet": {
                    "text": "url"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1073,
                  "startColumn": 1,
                  "charOffset": 40125,
                  "charLength": 237,
                  "snippet": {
                    "text": "                try:\n                    await msgO.edit(\n                        f\"{author.mention}\\nTranscript Created!\\n>>> `Jump Link:` {msg.jump_url}\\n`Transcript Link:` {url}\"\n                    )\n                except Exception:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c3529bc77b0b733be8b34cf3cffdb300df9dcf6ffe3e3e6d92850d875d3266a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (123 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (123 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1079,
                  "startColumn": 119,
                  "charOffset": 40518,
                  "charLength": 3,
                  "snippet": {
                    "text": "url"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1077,
                  "startColumn": 1,
                  "charOffset": 40329,
                  "charLength": 251,
                  "snippet": {
                    "text": "                except Exception:\n                    await msgO.edit(\n                        f\"{author.mention}\\nTranscript Created!\\n>>> `Jump Link:` {msg.jump_url}\\n`Transcript Link:` {url}\"\n                    )\n            await asyncio.sleep(5)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c42c1a130613421c15c47daf124f4391424b7d1b18c8de581c454ee34dc9386"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (122 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (122 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1231,
                  "startColumn": 121,
                  "charOffset": 46659,
                  "charLength": 2,
                  "snippet": {
                    "text": "h."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1229,
                  "startColumn": 1,
                  "charOffset": 46402,
                  "charLength": 486,
                  "snippet": {
                    "text": "        {Emoji.schoolsimplified} **__How to Get School Help:__**\n            > {Emoji.ssarrow} Click on the button to start the process.\n            > {Emoji.ssarrow} In your direct messages with <@852251896130699325>, select the sub-topic you need help with.\n            > {Emoji.ssarrow}Send the question in your direct messages as per the bot instructions.\n            > {Emoji.ssarrow} Send a picture of your assignment title in your direct messages as per the bot instructions.\"\"\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8b8562124e9276c359641e5ffc35d0a42259bb4ec41fc5c1b2a761d6a93ab430"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (126 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (126 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1233,
                  "startColumn": 30,
                  "charOffset": 46791,
                  "charLength": 93,
                  "snippet": {
                    "text": "Send a picture of your assignment title in your direct messages as per the bot instructions."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1231,
                  "startColumn": 1,
                  "charOffset": 46539,
                  "charLength": 400,
                  "snippet": {
                    "text": "            > {Emoji.ssarrow} In your direct messages with <@852251896130699325>, select the sub-topic you need help with.\n            > {Emoji.ssarrow}Send the question in your direct messages as per the bot instructions.\n            > {Emoji.ssarrow} Send a picture of your assignment title in your direct messages as per the bot instructions.\"\"\",\n            view=TicketButton(self.bot),\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "da017952a293111b2b335d18b40af9249dfb65204549c39e652f87d32418cb63"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (3)",
            "markdown": "PEP 8: E303 too many blank lines (3)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 678,
                  "charLength": 38,
                  "snippet": {
                    "text": "class VerificationStaff(commands.Cog):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 676,
                  "charLength": 92,
                  "snippet": {
                    "text": "\n\nclass VerificationStaff(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3454746df37fbcc403cd8431bae737037a5231bb2bca324ceea89b706606a760"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (142 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (142 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 25,
                  "charOffset": 2251,
                  "charLength": 117,
                  "snippet": {
                    "text": "\"An error occurred while trying to verify your status, please contact a staff member! (Error Code: T..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "charOffset": 2145,
                  "charLength": 286,
                  "snippet": {
                    "text": "                try:\n                    await interaction.response.send_message(\n                        \"An error occurred while trying to verify your status, please contact a staff member! (Error Code: TM-NOMEMBERFOUND)\",\n                        ephemeral=True,\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "62367489dc4ed1b242ecfe3781e1117a439f50845d367f2b6b0239abfda7292f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 21,
                  "charOffset": 2835,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 2745,
                  "charLength": 236,
                  "snippet": {
                    "text": "                            ephemeral=True,\n                        )\n                    except:\n                        await interaction.channel.send(\n                            f\"{interaction.user.mention} An error occurred while \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "041855e9a2ae96009ebdbdd2861dde3f385cbd533136ea0c817d6b04bf6464c2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 21,
                  "charOffset": 6972,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 6856,
                  "charLength": 262,
                  "snippet": {
                    "text": "                            \"You have been verified!\", ephemeral=True\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} You have been verified!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ce249c082eb764d8a28c89d2b33fbd237e4bde47d219c0ae0b06135c777b0c7b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 21,
                  "charOffset": 8737,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 221,
                  "startColumn": 1,
                  "charOffset": 8647,
                  "charLength": 268,
                  "snippet": {
                    "text": "                            ephemeral=True,\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} I didn't seem to find any roles to give you, please try \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9e8199c8fdf750c9d4a2dff90b2a2f7877e27c40100841c64f62bef09d37b1a2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (125 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (125 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 87,
                  "charOffset": 9473,
                  "charLength": 37,
                  "snippet": {
                    "text": "> and say what teams you are part of!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 237,
                  "startColumn": 1,
                  "charOffset": 9322,
                  "charLength": 244,
                  "snippet": {
                    "text": "        embed = discord.Embed(\n            title=\"Verification\",\n            description=f\"To get your staff roles, go to <#{DIGITAL_ID.ch_waitingRoom}> and say what teams you are part of!\",\n            color=discord.Colour.blurple(),\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c94aea002578d37ac9d5d9b67edb792af7507af112aa28dda3b41ba5569a621b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (160 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (160 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 70,
                  "charOffset": 5973,
                  "charLength": 75,
                  "snippet": {
                    "text": "is deprecated. Consider removing this file and using sstimmy.json instead."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 203,
                  "startColumn": 1,
                  "charOffset": 5798,
                  "charLength": 268,
                  "snippet": {
                    "text": "for deprecationFile in deprecatedFiles:\n    if os.path.exists(\"gsheetsadmin/{}\".format(deprecationFile)):\n        print(f\"{bcolors.WARNING}Authentication via {deprecationFile} is deprecated. Consider removing this file and using sstimmy.json instead.{bcolors.ENDC}\")\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83ee4d07fce063fada6688f9f23fd6bd637f1775001b667dc87cf009fa13ffad"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (3)",
            "markdown": "PEP 8: E303 too many blank lines (3)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 1,
                  "charOffset": 6068,
                  "charLength": 72,
                  "snippet": {
                    "text": "@bot.slash_command(description=\"Play a game of TicTacToe with someone!\")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 207,
                  "startColumn": 1,
                  "charOffset": 6066,
                  "charLength": 206,
                  "snippet": {
                    "text": "\n\n@bot.slash_command(description=\"Play a game of TicTacToe with someone!\")\nasync def tictactoe(ctx, user: Option(discord.Member, \"Enter an opponent you want\")):\n    if ctx.channel.id != MAIN_ID.ch_commands:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f664c567ae0a75b4bca878d32f7a8bc85357570cdf719570420fe5a841233d0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E265 block comment should start with '# '",
            "markdown": "PEP 8: E265 block comment should start with '# '"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 9,
                  "charOffset": 8281,
                  "charLength": 20,
                  "snippet": {
                    "text": "#start = time.time()"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 272,
                  "startColumn": 1,
                  "charOffset": 8230,
                  "charLength": 120,
                  "snippet": {
                    "text": ") as bar:\n    for ext in get_extensions():\n        #start = time.time()\n        try:\n            bot.load_extension(ext)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8e9ffa0c9eb17d5e646848b40175f923604664b618ab47607aabb23c7d8d5fe3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E265 block comment should start with '# '",
            "markdown": "PEP 8: E265 block comment should start with '# '"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 9,
                  "charOffset": 8571,
                  "charLength": 18,
                  "snippet": {
                    "text": "#end = time.time()"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 280,
                  "startColumn": 1,
                  "charOffset": 8472,
                  "charLength": 192,
                  "snippet": {
                    "text": "        except discord.ExtensionNotFound:\n            raise discord.ExtensionNotFound(ext)\n        #end = time.time()\n        #print(f\"{ext} loaded in {end - start:.2f} seconds\")\n        bar()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aec5254a3e1ce63a48e9b97faaec1d6deed81fa0d30e4d1978851f7a4b07b2f0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E265 block comment should start with '# '",
            "markdown": "PEP 8: E265 block comment should start with '# '"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 9,
                  "charOffset": 8598,
                  "charLength": 52,
                  "snippet": {
                    "text": "#print(f\"{ext} loaded in {end - start:.2f} seconds\")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 281,
                  "startColumn": 1,
                  "charOffset": 8514,
                  "charLength": 151,
                  "snippet": {
                    "text": "            raise discord.ExtensionNotFound(ext)\n        #end = time.time()\n        #print(f\"{ext} loaded in {end - start:.2f} seconds\")\n        bar()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "11a8854c2cb9ddbc90ff44a41bcd280911446fbfe91026094b5cf3371d20189a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W292 no newline at end of file",
            "markdown": "PEP 8: W292 no newline at end of file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cog_tests.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 29,
                  "charOffset": 935,
                  "charLength": 1,
                  "snippet": {
                    "text": ")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "charOffset": 878,
                  "charLength": 58,
                  "snippet": {
                    "text": "\ndef pytest_sessionfinish():\n    print(\"Session finished\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "63175e517280a615bfd7e13471e268a9849d2f246eb27628da06e2abfcd555c7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'Union[str, bytes]', got 'dict' instead",
            "markdown": "Expected type 'Union\\[str, bytes\\]', got 'dict' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 40,
                  "charOffset": 7650,
                  "charLength": 7,
                  "snippet": {
                    "text": "payload"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 221,
                  "startColumn": 1,
                  "charOffset": 7542,
                  "charLength": 215,
                  "snippet": {
                    "text": "            os.remove(\"cred_file.json\")\n        elif type_auth == 3:\n            payload: dict = json.loads(payload)\n            creds = ServiceAccountCredentials.from_json_keyfile_dict(payload, scopes)\n        try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a77dc4deb7bfedaf6e2cc3f38adf24dbe467f4a857806f2924e4fe9c279a3675"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[WhitelistedPrefix]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[WhitelistedPrefix\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/CommandsOnly.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 22,
                  "charOffset": 677,
                  "charLength": 26,
                  "snippet": {
                    "text": "database.WhitelistedPrefix"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 548,
                  "charLength": 197,
                  "snippet": {
                    "text": "        if message.channel.id == MAIN_ID.ch_modCommands and not message.author.bot:\n            prefix = []\n            for p in database.WhitelistedPrefix:\n                prefix.append(p.prefix)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72ae0a2837a00abd7af94793d28f40b41306caa327be2fb045284925c0fa633b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type '_SpecialForm', got '(_command: Any) -> str' instead",
            "markdown": "Expected type '_SpecialForm', got '(_command: Any) -\\> str' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 13,
                  "charOffset": 20861,
                  "charLength": 7,
                  "snippet": {
                    "text": "key=key"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 513,
                  "startColumn": 1,
                  "charOffset": 20811,
                  "charLength": 68,
                  "snippet": {
                    "text": "            ],\n            sort=True,\n            key=key\n        )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eba5d151a116018cf652a54565c360a7fc4046f3ae48013232a3fe113d6d4435"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[Blacklist]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[Blacklist\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/Blacklist.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 18,
                  "charOffset": 2242,
                  "charLength": 18,
                  "snippet": {
                    "text": "database.Blacklist"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 1,
                  "charOffset": 2145,
                  "charLength": 180,
                  "snippet": {
                    "text": "        await interaction.response.defer(thinking=True)\n        empty_list = []\n        for p in database.Blacklist:\n            try:\n                user = self.bot.get_user(p.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5e4c05d08dcfdab7fa7c15ef4b2c6da8337e16262f062c5f77362d4be8268c7a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[WhitelistedPrefix]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[WhitelistedPrefix\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 22,
                  "charOffset": 4532,
                  "charLength": 8,
                  "snippet": {
                    "text": "PrefixDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "charOffset": 4488,
                  "charLength": 91,
                  "snippet": {
                    "text": "        response = []\n\n        for entry in PrefixDB:\n\n            if entry.status is True:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "77ab2f56a64007ce3ce9c6b775f6d1786a4316832dc709608859c3a3cdfcbbcb"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[StudyVCDB]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[StudyVCDB\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 18,
                  "charOffset": 7072,
                  "charLength": 18,
                  "snippet": {
                    "text": "database.StudyVCDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 205,
                  "startColumn": 1,
                  "charOffset": 6977,
                  "charLength": 195,
                  "snippet": {
                    "text": "        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d0fd5e13aee61c62b2d4ee29a7fd97339835b9d12ffa9e787f6512452b7c1978"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[StudyVCDB]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[StudyVCDB\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 18,
                  "charOffset": 7093,
                  "charLength": 18,
                  "snippet": {
                    "text": "database.StudyVCDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 202,
                  "startColumn": 1,
                  "charOffset": 6990,
                  "charLength": 203,
                  "snippet": {
                    "text": "        StudyVCConsoleObj = await StudyVCGuildObj.fetch_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "319c95e17a888d5e34d3b0763edffcac78d0726d7b9fa4804b1dae3e04acf794"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead",
            "markdown": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 30,
                  "charOffset": 1881,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 1800,
                  "charLength": 220,
                  "snippet": {
                    "text": "                list_ten = []\n                i = 0\n                for entry in query:\n                    if not isinstance(entry.Date, datetime):\n                        entry.Date = datetime.fromisoformat(entry.Date)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cc49556443f9021543c0ea076a2d10537d20f04154e0407129e4e5c27c79747e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead",
            "markdown": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 26,
                  "charOffset": 5846,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 150,
                  "startColumn": 1,
                  "charOffset": 5777,
                  "charLength": 133,
                  "snippet": {
                    "text": "            list_ten = []\n            i = 0\n            for entry in query:\n\n                if not isinstance(entry.Date, datetime):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9bdaf1ca2d0703279207bfeb949babe886bb3daff467fb1f116318deff3420ed"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[TutorBot_Sessions]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[TutorBot_Sessions\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 22,
                  "charOffset": 619,
                  "charLength": 26,
                  "snippet": {
                    "text": "database.TutorBot_Sessions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 527,
                  "charLength": 261,
                  "snippet": {
                    "text": "    async def tutorsession(self):\n        now = datetime.now(self.est)\n        for entry in database.TutorBot_Sessions:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.Date)\n            val = int((TutorSession - now).total_seconds())"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "755647e1ad1a8c4604de15082fd4f1b3000c6c7f042942daca15e5b869a9a72e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[TutorSession_GracePeriod]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[TutorSession_GracePeriod\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 22,
                  "charOffset": 4404,
                  "charLength": 33,
                  "snippet": {
                    "text": "database.TutorSession_GracePeriod"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 4300,
                  "charLength": 283,
                  "snippet": {
                    "text": "    async def tutorsession_graceperiod(self):\n        now = datetime.now(self.est)\n        for entry in database.TutorSession_GracePeriod:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.GP_DATE)\n            val = int((TutorSession - now).total_seconds())"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78a1b9dd7bcd0f0bf4a68d3bf8dfcdbfca7b338f4d744e10f2e71944cd0e5fe9"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[ResponseSpamBlacklist]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[ResponseSpamBlacklist\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 20,
                  "charOffset": 489,
                  "charLength": 30,
                  "snippet": {
                    "text": "database.ResponseSpamBlacklist"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 424,
                  "charLength": 131,
                  "snippet": {
                    "text": "def reload_blacklist():\n    blacklist.clear()\n    for user_id in database.ResponseSpamBlacklist:\n        blacklist.append(user_id)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c3c0e605f0f44dd40059a17dfe6e4ecc7ae43f577290771720e4ac408c89d716"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[ResponseSpamBlacklist]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[ResponseSpamBlacklist\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 24,
                  "charOffset": 14817,
                  "charLength": 30,
                  "snippet": {
                    "text": "database.ResponseSpamBlacklist"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 403,
                  "startColumn": 1,
                  "charOffset": 14755,
                  "charLength": 132,
                  "snippet": {
                    "text": "\n    async def cog_load(self) -> None:\n        for user_id in database.ResponseSpamBlacklist:\n            blacklist.append(user_id)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "57668a1aa5efc584442da2e3538a7330aee535c51ed291e065adb526b182d415"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'bytes' (matched generic type 'AnyStr'), got 'memoryview' instead",
            "markdown": "Expected type 'bytes' (matched generic type 'AnyStr'), got 'memoryview' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 17,
                  "charOffset": 3685,
                  "charLength": 16,
                  "snippet": {
                    "text": "myIO.getbuffer()"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 3588,
                  "charLength": 190,
                  "snippet": {
                    "text": "    myIO.write(var)\n    with open(f\"transcript-{channel.name}.html\", \"wb\") as f:\n        f.write(myIO.getbuffer())\n\n    S3_upload_file(f\"transcript-{channel.name}.html\", \"ch-transcriptlogs\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f82ef209950e7997f12f0ea0886d1d06616db25933dd8c91c8930e3339c9282"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'Union[str, int]', got 'tuple[Any, Any, Any]' instead",
            "markdown": "Expected type 'Union\\[str, int\\]', got 'tuple\\[Any, Any, Any\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 12,
                  "charOffset": 8572,
                  "charLength": 25,
                  "snippet": {
                    "text": "name, CategoryID, OptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 271,
                  "startColumn": 1,
                  "charOffset": 8521,
                  "charLength": 78,
                  "snippet": {
                    "text": "        OptList = decodeOptList[value]\n\n    return name, CategoryID, OptList\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5f249cb11c24e1ea29b254cac440528ea9dc2baf4fa4ab4a4d38f38f7fab75d7"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[TicketInfo]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[TicketInfo\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1124,
                  "startColumn": 22,
                  "charOffset": 42107,
                  "charLength": 12,
                  "snippet": {
                    "text": "TicketInfoTB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1122,
                  "startColumn": 1,
                  "charOffset": 42007,
                  "charLength": 199,
                  "snippet": {
                    "text": "    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        for entry in TicketInfoTB:\n            try:\n                channel: discord.TextChannel = self.bot.get_channel("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "94db1eedecd8ad2bdf77c611407eb6cfa5770f49a99c0baf382ba5a286df5de4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[Blacklist]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[Blacklist\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 14,
                  "charOffset": 9013,
                  "charLength": 18,
                  "snippet": {
                    "text": "database.Blacklist"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 293,
                  "startColumn": 1,
                  "charOffset": 8973,
                  "charLength": 105,
                  "snippet": {
                    "text": "\n    blacklistedUsers = []\n    for p in database.Blacklist:\n        blacklistedUsers.append(p.discordID)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d35427028aec447ec58e9273f2cfc4d01ea7cb82485e6248ec4e065e49fda34b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        }
      ],
      "automationDetails": {
        "id": "project/qodana/2022-03-27",
        "guid": "e9dfb544-d621-4107-82d7-9902c3c63556"
      },
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "properties": {
        "qodana.sanity.results": [
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No module named 'discord'",
              "markdown": "No module named 'discord'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/checks.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 14,
                    "startColumn": 8,
                    "charOffset": 282,
                    "charLength": 7,
                    "snippet": {
                      "text": "discord"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 12,
                    "startColumn": 1,
                    "charOffset": 264,
                    "charLength": 84,
                    "snippet": {
                      "text": "import re\n\nimport discord\nfrom discord.ext import commands\nfrom core import database"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "d2671282787af7182fbcb4f618267137637e38b9833cebf82e83f6573d60c1f1"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'discord'",
              "markdown": "Unresolved reference 'discord'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/checks.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 15,
                    "startColumn": 6,
                    "charOffset": 295,
                    "charLength": 7,
                    "snippet": {
                      "text": "discord"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 13,
                    "startColumn": 1,
                    "charOffset": 274,
                    "charLength": 105,
                    "snippet": {
                      "text": "\nimport discord\nfrom discord.ext import commands\nfrom core import database\nfrom core.common import MKT_ID"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "2caaf486d14115671071059527a05cd2fbc4de47f01c897fe57c344c7845f265"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'commands'",
              "markdown": "Unresolved reference 'commands'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/checks.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 15,
                    "startColumn": 25,
                    "charOffset": 314,
                    "charLength": 8,
                    "snippet": {
                      "text": "commands"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 13,
                    "startColumn": 1,
                    "charOffset": 274,
                    "charLength": 105,
                    "snippet": {
                      "text": "\nimport discord\nfrom discord.ext import commands\nfrom core import database\nfrom core.common import MKT_ID"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "de3af3ffe3243aee675492fa5b6855bc1650f237d6d79fd97095aeb9cca39827"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No module named 'boto3'",
              "markdown": "No module named 'boto3'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/common.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 17,
                    "startColumn": 8,
                    "charOffset": 312,
                    "charLength": 5,
                    "snippet": {
                      "text": "boto3"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 15,
                    "startColumn": 1,
                    "charOffset": 275,
                    "charLength": 86,
                    "snippet": {
                      "text": "from threading import Thread\n\nimport boto3\nimport chat_exporter\nimport configcatclient"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "01fc533301e56392a76871dc3427b6e3e264dd96bd2ee75f8de7b2c46d772046"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No module named 'chat_exporter'",
              "markdown": "No module named 'chat_exporter'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/common.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 18,
                    "startColumn": 8,
                    "charOffset": 325,
                    "charLength": 13,
                    "snippet": {
                      "text": "chat_exporter"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 16,
                    "startColumn": 1,
                    "charOffset": 304,
                    "charLength": 72,
                    "snippet": {
                      "text": "\nimport boto3\nimport chat_exporter\nimport configcatclient\nimport discord"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "fcd1cfe5e46947eaf2e7806c52d1e06beefe0aecefd08106ac46ffc1e7e5e165"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No module named 'configcatclient'",
              "markdown": "No module named 'configcatclient'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/common.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 19,
                    "startColumn": 8,
                    "charOffset": 346,
                    "charLength": 15,
                    "snippet": {
                      "text": "configcatclient"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 17,
                    "startColumn": 1,
                    "charOffset": 305,
                    "charLength": 87,
                    "snippet": {
                      "text": "import boto3\nimport chat_exporter\nimport configcatclient\nimport discord\nimport requests"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "809dd628d7c95223e6637c5a557e9a9533dd36e31625d2cc87a068147b3c5fc2"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No module named 'discord'",
              "markdown": "No module named 'discord'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/common.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 20,
                    "startColumn": 8,
                    "charOffset": 369,
                    "charLength": 7,
                    "snippet": {
                      "text": "discord"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 18,
                    "startColumn": 1,
                    "charOffset": 318,
                    "charLength": 92,
                    "snippet": {
                      "text": "import chat_exporter\nimport configcatclient\nimport discord\nimport requests\nimport sentry_sdk"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "11d7d50c47bc0d048f60ada47f31a178a134b8601ebd0325f11da38c58b5c000"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          }
        ],
        "deviceId": "200820300000000-e0d5-f6bb-7322-854909536002",
        "tags": [
          "qodana.sanity.results",
          "deviceId"
        ]
      }
    }
  ]
}