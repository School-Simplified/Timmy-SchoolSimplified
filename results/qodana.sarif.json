{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "QDPY",
          "fullName": "Qodana for Python",
          "version": "213.7162.129",
          "rules": [],
          "taxa": [
            {
              "id": "EditorConfig",
              "name": "EditorConfig"
            },
            {
              "id": "Jupyter",
              "name": "Jupyter"
            },
            {
              "id": "Python",
              "name": "Python"
            },
            {
              "id": "XML",
              "name": "XML"
            },
            {
              "id": "JSON and JSON5",
              "name": "JSON and JSON5"
            },
            {
              "id": "RegExp",
              "name": "RegExp"
            },
            {
              "id": "Properties files",
              "name": "Properties files"
            },
            {
              "id": "Django",
              "name": "Django"
            },
            {
              "id": "HTML",
              "name": "HTML"
            },
            {
              "id": "General",
              "name": "General"
            },
            {
              "id": "Structural search",
              "name": "Structural search"
            },
            {
              "id": "RELAX NG",
              "name": "RELAX NG"
            },
            {
              "id": "Pyramid",
              "name": "Pyramid"
            },
            {
              "id": "Proofreading",
              "name": "Proofreading"
            },
            {
              "id": "Internationalization",
              "name": "Internationalization"
            },
            {
              "id": "Version control",
              "name": "Version control"
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        },
        "extensions": [
          {
            "name": "org.editorconfig.editorconfigjetbrains",
            "version": "213.7162",
            "rules": [
              {
                "id": "EditorConfigCharClassRedundancy",
                "shortDescription": {
                  "text": "Unnecessary character class"
                },
                "fullDescription": {
                  "text": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example '[a]'→'a'.",
                  "markdown": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example `[a]`→`a`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigDeprecatedDescriptor",
                "shortDescription": {
                  "text": "Deprecated property"
                },
                "fullDescription": {
                  "text": "Reports EditorConfig properties that are no longer supported.",
                  "markdown": "Reports EditorConfig properties that are no longer supported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationUniqueness",
                "shortDescription": {
                  "text": "Extra top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple top-level declarations. There can be only one optional “root=true” top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed.",
                  "markdown": "Reports multiple top-level declarations. There can be only one optional \"root=true\" top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNumerousWildcards",
                "shortDescription": {
                  "text": "Too many wildcards"
                },
                "fullDescription": {
                  "text": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues.",
                  "markdown": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigWildcardRedundancy",
                "shortDescription": {
                  "text": "Redundant wildcard"
                },
                "fullDescription": {
                  "text": "Reports wildcards that become redundant when the “**” wildcard is used in the same section. The “**” wildcard defines a broader set of files than any other wildcard. That is why, any other wildcard used in the same section has no affect and can be removed.",
                  "markdown": "Reports wildcards that become redundant when the \"\\*\\*\" wildcard is used in the same section.\n\n\nThe \"\\*\\*\" wildcard defines a broader set of files than any other wildcard.\nThat is why, any other wildcard used in the same section has no affect and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPartialOverride",
                "shortDescription": {
                  "text": "Overlapping sections"
                },
                "fullDescription": {
                  "text": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: '[{foo,bar}]' and '[{foo,bas}]' both contain “foo”.",
                  "markdown": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: `[{foo,bar}]` and `[{foo,bas}]` both contain \"foo\"."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptySection",
                "shortDescription": {
                  "text": "Empty section"
                },
                "fullDescription": {
                  "text": "Reports sections that do not contain any EditorConfig properties.",
                  "markdown": "Reports sections that do not contain any EditorConfig properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigHeaderUniqueness",
                "shortDescription": {
                  "text": "EditorConfig section is not unique"
                },
                "fullDescription": {
                  "text": "Reports sections that define the same file pattern as other sections.",
                  "markdown": "Reports sections that define the same file pattern as other sections."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowingOption",
                "shortDescription": {
                  "text": "Overriding property"
                },
                "fullDescription": {
                  "text": "Reports properties that override the same properties defined earlier in the file. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes the same files as '[*.java]' but also sets indent_size to value 2. Thus the first declaration 'indent_size=4'will be ignored.",
                  "markdown": "Reports properties that override the same properties defined earlier in the file.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes the same files as `[*.java]` but also sets indent_size to value 2. Thus the first declaration `indent_size=4`will be ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigListAcceptability",
                "shortDescription": {
                  "text": "Unexpected value list"
                },
                "fullDescription": {
                  "text": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified.",
                  "markdown": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowedOption",
                "shortDescription": {
                  "text": "Overridden property"
                },
                "fullDescription": {
                  "text": "Reports properties that are already defined in other sections. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes all '*.java' files too but it also redefines indent_size. As a result the value 2 will be used for files matching '*.java'.",
                  "markdown": "Reports properties that are already defined in other sections.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes all `*.java` files too but it also redefines indent_size. As a result the value 2 will be used for files matching `*.java`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptyHeader",
                "shortDescription": {
                  "text": "Empty header"
                },
                "fullDescription": {
                  "text": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by 'gitignore'.",
                  "markdown": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by `gitignore`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueCorrectness",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports property values that do not meet value restrictions. For example, some properties may be only “true” or “false”, others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them.",
                  "markdown": "Reports property values that do not meet value restrictions. For example, some properties may be only \"true\" or \"false\", others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueUniqueness",
                "shortDescription": {
                  "text": "Non-unique list value"
                },
                "fullDescription": {
                  "text": "Reports duplicates in lists of values.",
                  "markdown": "Reports duplicates in lists of values."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigMissingRequiredDeclaration",
                "shortDescription": {
                  "text": "Required declarations are missing"
                },
                "fullDescription": {
                  "text": "Reports properties that miss the required declarations. Refer to the documentation for more information.",
                  "markdown": "Reports properties that miss the required declarations. Refer to the documentation for more information."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigCharClassLetterRedundancy",
                "shortDescription": {
                  "text": "Duplicate character class letter"
                },
                "fullDescription": {
                  "text": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example '[aa]'.",
                  "markdown": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example `[aa]`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigKeyCorrectness",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not supported by the IDE. Note: some “ij” domain properties may require specific language plugins.",
                  "markdown": "Reports properties that are not supported by the IDE. Note: some \"ij\" domain properties may require specific language plugins."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternEnumerationRedundancy",
                "shortDescription": {
                  "text": "Unnecessary braces"
                },
                "fullDescription": {
                  "text": "Reports pattern lists that are either empty '{}' or contain just one pattern, for example '{foo}'. The braces are needed only if there are two and more, for example: '{foo,bar}'",
                  "markdown": "Reports pattern lists that are either empty `{}` or contain just one pattern, for example `{foo}`. The braces are needed only if there are two and more, for example: `{foo,bar}`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigSpaceInHeader",
                "shortDescription": {
                  "text": "Space in file pattern"
                },
                "fullDescription": {
                  "text": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed.",
                  "markdown": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigOptionRedundancy",
                "shortDescription": {
                  "text": "Redundant property"
                },
                "fullDescription": {
                  "text": "Reports properties that are redundant when another applicable section already contains the same property and value. For example: '[*]\nindent_size=4\n[*.java]\nindent_size=4' are both applicable to '*.java' files and define the same 'indent_size' value.",
                  "markdown": "Reports properties that are redundant when another applicable section already contains the same property and value.\n\n\nFor example:\n\n\n    [*]\n    indent_size=4\n    [*.java]\n    indent_size=4\n\nare both applicable to `*.java` files and define the same `indent_size` value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationCorrectness",
                "shortDescription": {
                  "text": "Unexpected top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports unexpected top-level declarations. Top-level declarations other than “root=true” are not allowed in the EditorConfig file.",
                  "markdown": "Reports unexpected top-level declarations. Top-level declarations other than \"root=true\" are not allowed in the EditorConfig file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigReferenceCorrectness",
                "shortDescription": {
                  "text": "Invalid reference"
                },
                "fullDescription": {
                  "text": "Reports identifiers that are either unknown or have a wrong type.",
                  "markdown": "Reports identifiers that are either unknown or have a wrong type."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnusedDeclaration",
                "shortDescription": {
                  "text": "Unused declaration"
                },
                "fullDescription": {
                  "text": "Reports unused declarations. Such declarations can be removed.",
                  "markdown": "Reports unused declarations. Such declarations can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPairAcceptability",
                "shortDescription": {
                  "text": "Unexpected key-value pair"
                },
                "fullDescription": {
                  "text": "Reports key-value pairs that are not allowed in the current context.",
                  "markdown": "Reports key-value pairs that are not allowed in the current context."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternRedundancy",
                "shortDescription": {
                  "text": "Duplicate or redundant pattern"
                },
                "fullDescription": {
                  "text": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in '[{*.java,*}]' the first '*.java' pattern defines a narrower scope compared to '*'. That is why it is redundant and can be removed.",
                  "markdown": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in `[{*.java,*}]` the first `*.java` pattern defines a narrower scope compared to `*`. That is why it is redundant and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNoMatchingFiles",
                "shortDescription": {
                  "text": "No matching files"
                },
                "fullDescription": {
                  "text": "Reports sections with wildcard patterns that do not match any files under the directory in which the '.editorconfig' file is located.",
                  "markdown": "Reports sections with wildcard patterns that do not match any files under the directory in which the `.editorconfig` file is located."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnexpectedComma",
                "shortDescription": {
                  "text": "Unexpected comma"
                },
                "fullDescription": {
                  "text": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists.",
                  "markdown": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "Pythonid",
            "version": "213.7162",
            "rules": [
              {
                "id": "JupyterPackageInspection",
                "shortDescription": {
                  "text": "The 'jupyter' package is not installed"
                },
                "fullDescription": {
                  "text": "Reports cases when the 'jupyter' package is not installed for the selected Python interpreter. Without a properly installed 'jupyter' package, you cannot execute Jupyter notebooks. Click the corresponding link on the warning banner to install the missing package. You can also install the package in the Project Settings/Preferences or in the Python Packages tool window. See Installing Python package for more details.",
                  "markdown": "Reports cases when the `jupyter` package is not installed for the selected\nPython interpreter. Without a properly installed `jupyter` package, you cannot\nexecute Jupyter notebooks.\n\nClick the corresponding link on the warning banner to install the missing\npackage. You can also install the package in the Project **Settings/Preferences** or in the\n**Python Packages** tool window.\n\nSee [Installing Python package](https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html) for more details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Jupyter",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySetFunctionToLiteralInspection",
                "shortDescription": {
                  "text": "Function call can be replaced with set literal"
                },
                "fullDescription": {
                  "text": "Reports calls to the 'set' function that can be replaced with the 'set' literal. Example: def do_mult(a, b):\n    c = a * b\n    return set([c, a, b])\n When the quick-fix is applied, the code changes to: def do_mult(a, b):\n    c = a * b\n    return {c, a, b}",
                  "markdown": "Reports calls to the `set` function that can be replaced with\nthe `set` literal.\n\n**Example:**\n\n```\ndef do_mult(a, b):\n    c = a * b\n    return set([c, a, b])\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef do_mult(a, b):\n    c = a * b\n    return {c, a, b}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStatementEffectInspection",
                "shortDescription": {
                  "text": "Statement has no effect"
                },
                "fullDescription": {
                  "text": "Reports statements that have no effect. Example: class Car:\n    def __init__(self, speed=0):\n        self.speed = speed\n        self.time # has no effect\n\n2 + 3 # has no effect\n In this example, you can either add a field 'time' to the 'Car' class or introduce variables for the problematic statements.",
                  "markdown": "Reports statements that have no effect.\n\n**Example:**\n\n```\nclass Car:\n    def __init__(self, speed=0):\n        self.speed = speed\n        self.time # has no effect\n\n2 + 3 # has no effect\n```\n\nIn this example, you can either add a field `time` to the `Car` class or\nintroduce variables for the problematic statements."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMandatoryEncodingInspection",
                "shortDescription": {
                  "text": "No encoding specified for file"
                },
                "fullDescription": {
                  "text": "Reports a missing encoding comment in Python 2. Example: class Book(object):\n    def __init__(self):\n        pass\n When the quick-fix is applied, the missing comment is added: # coding=utf-8\nclass Book(object):\n    def __init__(self):\n        pass",
                  "markdown": "Reports a missing encoding comment in Python 2.\n\n**Example:**\n\n```\nclass Book(object):\n    def __init__(self):\n        pass\n```\n\nWhen the quick-fix is applied, the missing comment is added:\n\n```\n# coding=utf-8\nclass Book(object):\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInconsistentIndentationInspection",
                "shortDescription": {
                  "text": "Inconsistent indentation"
                },
                "fullDescription": {
                  "text": "Reports inconsistent indentation in Python source files when, for example, you use a mixture of tabs and spaces in your code.",
                  "markdown": "Reports inconsistent indentation in Python source files when, for example,\nyou use a mixture of tabs and spaces in your code."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAttributeOutsideInitInspection",
                "shortDescription": {
                  "text": "An instance attribute is defined outside `__init__`"
                },
                "fullDescription": {
                  "text": "Reports a problem when instance attribute definition is outside '__init__' method. Example:     class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n When the quick-fix is applied, the code sample changes to:     class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass",
                  "markdown": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypedDictInspection",
                "shortDescription": {
                  "text": "Invalid TypedDict definition and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid definition and usage of TypedDict. Example: from typing import TypedDict\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n    rate: int = 10  # Right-hand side values are not supported\n\n    def method(self): # Invalid statement in TypedDict\n        pass\n\n\nm = Movie(name=\"name\", year=1000, rate=9)\nprint(m[\"director\"])  # There is no the 'director' key in 'Movie'\ndel m[\"name\"]  # The 'name' key cannot be deleted\nm[\"year\"] = \"1001\"  # Expected 'int', got 'str'",
                  "markdown": "Reports invalid definition and usage of\n[TypedDict](https://www.python.org/dev/peps/pep-0589/).\n\n**Example:**\n\n```\nfrom typing import TypedDict\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n    rate: int = 10  # Right-hand side values are not supported\n\n    def method(self): # Invalid statement in TypedDict\n        pass\n\n\nm = Movie(name=\"name\", year=1000, rate=9)\nprint(m[\"director\"])  # There is no the 'director' key in 'Movie'\ndel m[\"name\"]  # The 'name' key cannot be deleted\nm[\"year\"] = \"1001\"  # Expected 'int', got 'str'\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPep8Inspection",
                "shortDescription": {
                  "text": "PEP 8 coding style violation"
                },
                "fullDescription": {
                  "text": "Reports violations of the PEP 8 coding style guide by running the bundled pycodestyle.py tool.",
                  "markdown": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingTypeHintsInspection",
                "shortDescription": {
                  "text": "Missing type hinting for function definition"
                },
                "fullDescription": {
                  "text": "Reports missing type hints for function declaration in one of the two formats: parameter annotations or a type comment. Select the Only when types are known checkbox if you want the inspection check the types collected from runtime or inferred.",
                  "markdown": "Reports missing type hints for function declaration in\none of the two formats: parameter annotations or a type comment.\n\nSelect the **Only when types are known** checkbox if you want the inspection check\nthe types collected from runtime or inferred."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTupleItemAssignmentInspection",
                "shortDescription": {
                  "text": "Tuple item assignment is prohibited"
                },
                "fullDescription": {
                  "text": "Reports assignments to a tuple item. t = ('red', 'blue', 'green', 'white')\nt[3] = 'black'\n A quick-fix offers to replace the tuple with a list.",
                  "markdown": "Reports assignments to a tuple item.\n\n```\nt = ('red', 'blue', 'green', 'white')\nt[3] = 'black'\n```\n\nA quick-fix offers to replace the tuple with a list."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedUrlInspection",
                "shortDescription": {
                  "text": "Django {% url %} tag arguments are unresolved"
                },
                "fullDescription": {
                  "text": "Reports a missing url in the 'url' tag. Example: {% url 'url_name' %}\n The IDE shows a warning if 'url_name' is not defined in the 'urls' file.",
                  "markdown": "Reports a missing url in the `url` tag.\n\n**Example:**\n\n```\n{% url 'url_name' %}\n```\n\nThe IDE shows a warning if `url_name` is not defined in the `urls` file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedStaticReferenceInspection",
                "shortDescription": {
                  "text": "Unresolved static reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved references to static resources. Example: {% load staticfiles %}\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'polls/style.css' %}\" />\n In this example, 'style.css' is highlighted if there is no such a file in the 'static/poll' directory.",
                  "markdown": "Reports unresolved references to static resources.\n\n**Example:**\n\n```\n{% load staticfiles %}\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'polls/style.css' %}\" />\n```\n\nIn this example, `style.css` is highlighted if there is no such a file in the `static/poll`\ndirectory."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInitNewSignatureInspection",
                "shortDescription": {
                  "text": "Incompatible signatures of __new__ and __init__"
                },
                "fullDescription": {
                  "text": "Reports incompatible signatures of the '__new__' and '__init__' methods. Example: class MyClass(object):\n    def __new__(cls, arg1):\n        return super().__new__(cls)\n\n    def __init__(self):\n        pass\n If the '__new__' and '__init__' have different arguments, then the 'MyClass' cannot be instantiated. As a fix, the IDE offers to apply the Change Signature refactoring.",
                  "markdown": "Reports incompatible signatures of the `__new__` and `__init__` methods.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def __new__(cls, arg1):\n        return super().__new__(cls)\n\n    def __init__(self):\n        pass\n```\n\nIf the `__new__` and `__init__` have different arguments, then the `MyClass`\ncannot be instantiated.\n\nAs a fix, the IDE offers to apply the Change Signature refactoring."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDunderSlotsInspection",
                "shortDescription": {
                  "text": "Invalid usages of classes with  '__slots__' definitions"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of a class with '__slots__' definitions. Example: class Foo:\n    __slots__ = ['foo', 'bar']\n\n\nfoo = Foo()\nfoo.baz = 'spam'",
                  "markdown": "Reports invalid usages of a class with `__slots__` definitions.\n\n**Example:**\n\n```\nclass Foo:\n    __slots__ = ['foo', 'bar']\n\n\nfoo = Foo()\nfoo.baz = 'spam'\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EndBlockNamesInspection",
                "shortDescription": {
                  "text": "Django endblock name doesn't match the block name"
                },
                "fullDescription": {
                  "text": "Reports incorrect names of the closing blocks. Example:   {% block my_block %}\n  {% endblock not_correct %}",
                  "markdown": "Reports incorrect names of the closing blocks.\n\n**Example:**\n\n```\n  {% block my_block %}\n  {% endblock not_correct %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingConstructorInspection",
                "shortDescription": {
                  "text": "Missed call to '__init__' of the super class"
                },
                "fullDescription": {
                  "text": "Reports cases when a call to the 'super' constructor in a class is missed. Example: class Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        pass\n The 'Pear' class should have a 'super' call in the '__init__' method. When the quick-fix is applied, the code changes to: class Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        super().__init__()",
                  "markdown": "Reports cases when a call to the `super` constructor in a class is missed.\n\n**Example:**\n\n```\nclass Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        pass\n```\n\nThe `Pear` class should have a `super` call in the `__init__`\nmethod.\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nclass Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        super().__init__()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDefaultArgumentInspection",
                "shortDescription": {
                  "text": "The default argument is mutable"
                },
                "fullDescription": {
                  "text": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for an argument. Default argument values are evaluated only once at function definition time, which means that modifying the default value of the argument will affect all subsequent calls of that function. Example: def func(s, cache={}):\n    cache[s] = None\n When the quick-fix is applied, the code changes to: def func(s, cache=None):\n    if cache is None:\n        cache = {}\n    cache[s] = None",
                  "markdown": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for\nan argument.   \n\nDefault argument values are evaluated only once at function definition time,\nwhich means that modifying the\ndefault value of the argument will affect all subsequent calls of that function.\n\n**Example:**\n\n```\ndef func(s, cache={}):\n    cache[s] = None\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef func(s, cache=None):\n    if cache is None:\n        cache = {}\n    cache[s] = None\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyShadowingBuiltinsInspection",
                "shortDescription": {
                  "text": "Shadowing built-in names"
                },
                "fullDescription": {
                  "text": "Reports shadowing built-in names, such as 'len' or 'list'. Example: def len(a, b, c):\n    d = a + b + c\n    return d\n In this code fragment, the 'len' built-in name is used. The IDE offers to apply the Rename refactoring as a fix.",
                  "markdown": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySimplifyBooleanCheckInspection",
                "shortDescription": {
                  "text": "Redundant boolean variable check"
                },
                "fullDescription": {
                  "text": "Reports equality comparison with a boolean literal. Example: def func(s):\n    if s.isdigit() == True:\n        return int(s)\n With the quick-fix applied, the code fragment will be simplified to: def func(s):\n    if s.isdigit():\n        return int(s)",
                  "markdown": "Reports equality comparison with a boolean literal.\n\n**Example:**\n\n```\ndef func(s):\n    if s.isdigit() == True:\n        return int(s)\n```\n\nWith the quick-fix applied, the code fragment will be simplified to:\n\n```\ndef func(s):\n    if s.isdigit():\n        return int(s)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodOverridingInspection",
                "shortDescription": {
                  "text": "Method signature does not match signature of overridden method"
                },
                "fullDescription": {
                  "text": "Reports inconsistencies in overriding method signatures. Example: class Book:\n    def add_title(self):\n        pass\n\n\nclass Novel(Book):\n    def add_title(self, text):\n        pass\n Parameters of the 'add_title' method in the 'Novel' class do not match the method signature specified in the 'Book' class. As a fix, the IDE offers to apply the Change Signature refactoring.",
                  "markdown": "Reports inconsistencies in overriding method signatures.\n\n**Example:**\n\n```\nclass Book:\n    def add_title(self):\n        pass\n\n\nclass Novel(Book):\n    def add_title(self, text):\n        pass\n```\n\nParameters of the `add_title` method in the `Novel` class do not match the method\nsignature specified in the `Book` class. As a fix, the IDE offers to apply the Change Signature\nrefactoring."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTestParametrizedInspection",
                "shortDescription": {
                  "text": "Incorrect arguments in @pytest.mark.parametrize"
                },
                "fullDescription": {
                  "text": "Reports functions that are decorated with @pytest.mark.parametrize but do not have arguments to accept parameters of the decorator.",
                  "markdown": "Reports functions that are decorated with [@pytest.mark.parametrize](https://docs.pytest.org/en/stable/parametrize.html) but do not have arguments to accept\nparameters of the decorator."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDecoratorInspection",
                "shortDescription": {
                  "text": "Class-specific decorator is used outside the class"
                },
                "fullDescription": {
                  "text": "Reports usages of '@classmethod' or '@staticmethod' decorators in methods outside a class. Example: class State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\n@classmethod\ndef change_state(self):\n    pass\n The 'change_state' method should not use the '@classmethod' decorator or it should be moved to the 'State' class declaration. If you apply the 'Remove decorator' action, the code changes to: class State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\ndef change_state(self):\n    pass",
                  "markdown": "Reports usages of `@classmethod` or `@staticmethod` decorators\nin methods outside a class.\n\n**Example:**\n\n```\nclass State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\n@classmethod\ndef change_state(self):\n    pass\n```\n\nThe `change_state` method should not use the `@classmethod` decorator or it should be\nmoved to the `State` class declaration.\n\nIf you apply the `Remove decorator` action, the code changes to:\n\n```\nclass State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\ndef change_state(self):\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAsyncCallInspection",
                "shortDescription": {
                  "text": "Missing `await` syntax in coroutine calls"
                },
                "fullDescription": {
                  "text": "Reports coroutines that were called without using the 'await' syntax. Example: async def bar():\n    pass\n\n\nasync def foo():\n    bar()\n After the quick-fix is applied, the code changes to: async def bar():\n    pass\n\n\nasync def foo():\n    await bar()",
                  "markdown": "Reports coroutines that were called\nwithout using the `await` syntax.\n\n**Example:**\n\n```\nasync def bar():\n    pass\n\n\nasync def foo():\n    bar()\n```\n\nAfter the quick-fix is applied, the code changes to:\n\n```\nasync def bar():\n    pass\n\n\nasync def foo():\n    await bar()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyComparisonWithNoneInspection",
                "shortDescription": {
                  "text": "Using equality operators to compare with None"
                },
                "fullDescription": {
                  "text": "Reports comparisons with 'None'. That type of comparisons should always be done with 'is' or 'is not', never the equality operators. Example: a = 2\n\n\nif a == None:\n    print(\"Success\")\n Once the quick-fix is applied, the code changes to: a = 2\n\n\nif a is None:\n    print(\"Success\")",
                  "markdown": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CommandLineInspection",
                "shortDescription": {
                  "text": "Incorrect CLI syntax"
                },
                "fullDescription": {
                  "text": "Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies that option names and arguments are correct. Do not disable the inspection if you are going to use command-line interfaces like manage.py in Django.",
                  "markdown": "Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies\nthat option names and arguments are correct.\n\nDo not disable the inspection if you are going to use command-line interfaces like [manage.py in Django](https://www.jetbrains.com/help/pycharm/running-manage-py.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyCallingNonCallableInspection",
                "shortDescription": {
                  "text": "Attempt to call a non-callable object"
                },
                "fullDescription": {
                  "text": "Reports a problem when you are trying to call objects that are not callable, like, for example, properties: class Record:\n    @property\n    def as_json(self):\n\njson = Record().as_json()",
                  "markdown": "Reports a problem when you are trying\nto call objects that are not callable, like, for example, properties:\n\n```\nclass Record:\n    @property\n    def as_json(self):\n\njson = Record().as_json()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnreachableCodeInspection",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports code fragments that cannot be normally reached. Example: if True:\n    print('Yes')\nelse:\n    print('No')\n As a fix, you might want to check and modify the algorithm to ensure it implements the expected logic.",
                  "markdown": "Reports code fragments that cannot be normally reached.\n\n**Example:**\n\n```\nif True:\n    print('Yes')\nelse:\n    print('No')\n```\n\nAs a fix, you might want to check and modify the algorithm to ensure it implements\nthe expected logic."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyChainedComparisonsInspection",
                "shortDescription": {
                  "text": "Too complex chained comparisons"
                },
                "fullDescription": {
                  "text": "Reports chained comparisons that can be simplified. Example: 'def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if x >= xmin and x <= xmax:\n          pass' The IDE offers to simplify 'if x >= xmin and x <= xmax'. When the quick-fix is applied, the code changes to: 'def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if xmin <= x <= xmax:\n          pass'",
                  "markdown": "Reports chained comparisons that can be simplified.\n\n**Example:**\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if x >= xmin and x <= xmax:\n              pass\n\nThe IDE offers to simplify `if x >= xmin and x <= xmax`.\nWhen the quick-fix is applied, the code changes to:\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if xmin <= x <= xmax:\n              pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodParametersInspection",
                "shortDescription": {
                  "text": "Improper first parameter"
                },
                "fullDescription": {
                  "text": "Reports methods that lack the first parameter that is usually named 'self'. Example: class Movie:\n\n   def show():\n       pass\n When the quick-fix is applied, the code changes to: class Movie:\n\n   def show(self):\n       pass\n The inspection also reports naming issues in class methods. Example: class Movie:\n    @classmethod\n    def show(abc):\n        pass\n Since the first parameter of a class method should be 'cls', the IDE provides a quick-fix to rename it.",
                  "markdown": "Reports methods that lack the first parameter that is usually\nnamed `self`.\n\n**Example:**\n\n```\nclass Movie:\n\n   def show():\n       pass\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nclass Movie:\n\n   def show(self):\n       pass\n```\n\nThe inspection also reports naming issues in class methods.\n\n**Example:**\n\n```\nclass Movie:\n    @classmethod\n    def show(abc):\n        pass\n```\n\nSince the first parameter of a class method should be `cls`, the IDE provides a quick-fix\nto rename it."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDocstringTypesInspection",
                "shortDescription": {
                  "text": "Type in docstring does not match inferred type"
                },
                "fullDescription": {
                  "text": "Reports types in docstring that do not match dynamically inferred types.",
                  "markdown": "Reports types in docstring that do not match dynamically inferred types."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoBrokenLineCommentInspection",
                "shortDescription": {
                  "text": "Broken line comment"
                },
                "fullDescription": {
                  "text": "Reports '#}' line comment ends in Django templates that do not have a matching line comment start. Example: comment #}\n The IDE highlights '#}' as it requires the corresponding '{#' token.",
                  "markdown": "Reports `#}` line comment ends in Django templates that do not have a\nmatching line comment start.\n\n**Example:**\n\n```\ncomment #}\n```\n\nThe IDE highlights `#}` as it requires the corresponding `{#` token."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyCompatibilityInspection",
                "shortDescription": {
                  "text": "Code is incompatible with specific Python versions"
                },
                "fullDescription": {
                  "text": "Reports incompatibility with the specified versions of Python. Enable this inspection if you need your code to be compatible with a range of Python versions, for example, if you are building a library. To define the range of the inspected Python versions, select the corresponding checkboxes in the Options section. For more information about the Python versions supported by the IDE, see the web help.",
                  "markdown": "Reports incompatibility with the specified versions of Python.\nEnable this inspection if you need your code to be compatible with a range of Python versions, for example,\nif you are building a library.\n\nTo define the range of the inspected Python versions, select the corresponding checkboxes in the **Options**\nsection.\n\nFor more information about the Python versions supported by the IDE, see the\n[web help](https://www.jetbrains.com/help/pycharm/python.html#support)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyGlobalUndefinedInspection",
                "shortDescription": {
                  "text": "Global variable is not defined at the module level"
                },
                "fullDescription": {
                  "text": "Reports problems when a variable defined through the 'global' statement is not defined in the module scope. Example: def foo():\n    global bar\n    print(bar)\n\nfoo()\n As a fix, you can move the global variable declaration: global bar\n\n\ndef foo():\n    print(bar)",
                  "markdown": "Reports problems when a variable defined through the `global`\nstatement is not defined in the module scope.\n\n**Example:**\n\n```\ndef foo():\n    global bar\n    print(bar)\n\nfoo()\n```\n\nAs a fix, you can move the global variable declaration:\n\n```\nglobal bar\n\n\ndef foo():\n    print(bar)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodFirstArgAssignmentInspection",
                "shortDescription": {
                  "text": "First argument of the method is reassigned"
                },
                "fullDescription": {
                  "text": "Reports cases when the first parameter, such as 'self' or 'cls', is reassigned in a method. Because in most cases, there are no objectives in such reassignment, the IDE indicates an error. Example: class Account:\n    def calc(self, balance):\n        if balance == 0:\n            self = balance\n        return self\n As a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct, you can invoke intention actions for this code and opt to ignore the warning.",
                  "markdown": "Reports cases when the first parameter,\nsuch as `self` or `cls`, is reassigned in a method.\nBecause in most cases, there are no objectives in such reassignment, the\nIDE indicates an error.\n\n**Example:**\n\n```\nclass Account:\n    def calc(self, balance):\n        if balance == 0:\n            self = balance\n        return self\n```\n\nAs a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct,\nyou can invoke intention actions for this code and opt to ignore the warning."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyProtocolInspection",
                "shortDescription": {
                  "text": "Invalid protocol definitions and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid definitions and usages of protocols introduced in PEP-544. Example: from typing import Protocol\n\n\nclass MyProtocol(Protocol):\n    def method(self, p: int) -> str:\n        pass\n\n\nclass MyClass(MyProtocol):\n    def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n        pass\n\n\nclass MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n    pass",
                  "markdown": "Reports invalid definitions and usages of protocols introduced in\n[PEP-544](https://www.python.org/dev/peps/pep-0544/).\n\n**Example:**\n\n```\nfrom typing import Protocol\n\n\nclass MyProtocol(Protocol):\n    def method(self, p: int) -> str:\n        pass\n\n\nclass MyClass(MyProtocol):\n    def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n        pass\n\n\nclass MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n    pass\n\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypeHintsInspection",
                "shortDescription": {
                  "text": "Invalid type hints definitions and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of type hints. Example: from typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n Available quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
                  "markdown": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodMayBeStaticInspection",
                "shortDescription": {
                  "text": "Method is not declared static"
                },
                "fullDescription": {
                  "text": "Reports any methods that do not require a class instance creation and can be made static. Example: class MyClass(object):\n    def my_method(self, x):\n        print(x)\n If a Make function from method quick-fix is applied, the code changes to: def my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n If you select the Make method static quick-fix, the '@staticmethod' decorator is added: class MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)",
                  "markdown": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTupleAssignmentBalanceInspection",
                "shortDescription": {
                  "text": "Tuple assignment balance is incorrect"
                },
                "fullDescription": {
                  "text": "Reports cases when the number of expressions on the right-hand side and targets on the left-hand side are not the same. Example: t = ('red', 'blue', 'green', 'white')\n(c1, c2, c3) = t\n As a quick-fix, you can modify the highlighted code fragment to restore the tuple balance.",
                  "markdown": "Reports cases when the number of expressions on the right-hand side\nand targets on the left-hand side are not the same.\n\n**Example:**\n\n```\nt = ('red', 'blue', 'green', 'white')\n(c1, c2, c3) = t\n```\n\nAs a quick-fix, you can modify the highlighted code fragment to restore the tuple\nbalance."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassHasNoInitInspection",
                "shortDescription": {
                  "text": "Class has no `__init__` method"
                },
                "fullDescription": {
                  "text": "Reports cases in Python 2 when a class has no '__init__' method, neither its parent classes. Example: class Book():\n    pass\n The quick-fix adds the '__init__' method: class Book():\n    def __init__(self):\n        pass",
                  "markdown": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyArgumentEqualDefaultInspection",
                "shortDescription": {
                  "text": "The function argument is equal to the default parameter value"
                },
                "fullDescription": {
                  "text": "Reports a problem when an argument passed to the function is equal to the default parameter value. This inspection is disabled by default to avoid performance degradation. Example: def my_function(a: int = 2):\n    print(a)\n\n\nmy_function(2)",
                  "markdown": "Reports a problem when an argument\npassed to the function is equal to the default parameter value.\n\nThis inspection is disabled by default to avoid performance degradation.\n\n**Example:**\n\n```\ndef my_function(a: int = 2):\n    print(a)\n\n\nmy_function(2)\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CythonUsageBeforeDeclarationInspection",
                "shortDescription": {
                  "text": "Cython variable is used before its declaration"
                },
                "fullDescription": {
                  "text": "Reports Cython variables being referenced before declaration. Example: cdef int c_x\n\nprint(c_x, c_y)  # Variable 'c_y' is used before its declaration\n\ncdef int c_y = 0",
                  "markdown": "Reports Cython variables being referenced before declaration.\n\n**Example:**\n\n```\ncdef int c_x\n\nprint(c_x, c_y)  # Variable 'c_y' is used before its declaration\n\ncdef int c_y = 0\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDictCreationInspection",
                "shortDescription": {
                  "text": "Dictionary creation can be rewritten by dictionary literal"
                },
                "fullDescription": {
                  "text": "Reports situations when you can rewrite dictionary creation by using a dictionary literal. This approach brings performance improvements. Example: dic = {}\ndic['var'] = 1\n When the quick-fix is applied, the code changes to: dic = {'var': 1}",
                  "markdown": "Reports situations when you can rewrite dictionary creation\nby using a dictionary literal.\n\nThis approach brings performance improvements.\n\n**Example:**\n\n```\ndic = {}\ndic['var'] = 1\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndic = {'var': 1}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStringFormatInspection",
                "shortDescription": {
                  "text": "Errors in string formatting operations"
                },
                "fullDescription": {
                  "text": "Reports errors in string formatting operations. Example 1: \"Hello {1}\".format(\"people\")\n Example 2: def bar():\n    return 1\n\n\n\"%s %s\" % bar()\n As a fix, you need to rewrite string formatting fragments to adhere to the formatting syntax.",
                  "markdown": "Reports errors in string formatting operations.\n\n**Example 1:**\n\n```\n\"Hello {1}\".format(\"people\")\n```\n\n**Example 2:**\n\n```\ndef bar():\n    return 1\n\n\n\"%s %s\" % bar()\n```\n\nAs a fix, you need to rewrite string formatting fragments to\nadhere to the [formatting syntax](https://docs.python.org/3/library/string.html#format-string-syntax)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyExceptionInheritInspection",
                "shortDescription": {
                  "text": "Exceptions do not inherit from standard 'Exception' class"
                },
                "fullDescription": {
                  "text": "Reports cases when a custom exception class is raised but does not inherit from the builtin Exception class. Example: class A:\n    pass\n\n\ndef me_exception():\n    raise A()\n The proposed quick-fix changes the code to: class A(Exception):\n    pass\n\n\ndef me_exception():\n    raise A()",
                  "markdown": "Reports cases when a custom exception class is\nraised but does not inherit from the\n[builtin Exception class](https://docs.python.org/3/library/exceptions.html).\n\n**Example:**\n\n```\nclass A:\n    pass\n\n\ndef me_exception():\n    raise A()\n```\n\nThe proposed quick-fix changes the code to:\n\n```\nclass A(Exception):\n    pass\n\n\ndef me_exception():\n    raise A()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAssignmentToLoopOrWithParameterInspection",
                "shortDescription": {
                  "text": "Assignments to 'for' loop or 'with' statement parameter"
                },
                "fullDescription": {
                  "text": "Reports the cases when you rewrite a loop variable with an inner loop:     for i in range(5):\n      for i in range(20, 25):\n          print(\"Inner\", i)\n      print(\"Outer\", i)\n  It also warns you if a variable declared in the 'with' statement is redeclared inside of the statement body:     with open(\"file\") as f:\n      f.read()\n      with open(\"file\") as f:",
                  "markdown": "Reports the cases when you rewrite a loop variable with an inner loop:\n\n```\n    for i in range(5):\n      for i in range(20, 25):\n          print(\"Inner\", i)\n      print(\"Outer\", i)\n  \n```\n\nIt also warns you if a variable declared in the `with` statement is redeclared inside of the statement body:\n\n```\n    with open(\"file\") as f:\n      f.read()\n      with open(\"file\") as f:\n  \n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedFilterInspection",
                "shortDescription": {
                  "text": "Unresolved filter"
                },
                "fullDescription": {
                  "text": "Reports unresolved filters in Django templates. Example:   {{ my_value|cool_filter:\"arg\" }}",
                  "markdown": "Reports unresolved filters in Django templates.\n\n**Example:**\n\n```\n  {{ my_value|cool_filter:\"arg\" }}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoRelationInspection",
                "shortDescription": {
                  "text": "Incorrect comparison expression in Django templates"
                },
                "fullDescription": {
                  "text": "Reports missing whitespaces before and after comparison operators in Django templates. Example: {% if my_var==1 %}\n{% endif %}",
                  "markdown": "Reports missing whitespaces before and after comparison operators in Django templates.\n\n**Example:**\n\n```\n{% if my_var==1 %}\n{% endif %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedTagInspection",
                "shortDescription": {
                  "text": "Unresolved tag"
                },
                "fullDescription": {
                  "text": "Reports unresolved tags in Django templates. Example: <h1>{{ question.question_text }}</h1>\n<start>\n The IDE highlights '<start>'. You can either remove the tag or apply the quick-fix to add '<start>' to custom HTML tags.",
                  "markdown": "Reports unresolved tags in Django templates.\n\n**Example:**\n\n```\n<h1>{{ question.question_text }}</h1>\n<start>\n```\n\nThe IDE highlights `<start>`. You can either remove the tag or apply the quick-fix to\nadd `<start>` to custom HTML tags."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyFromFutureImportInspection",
                "shortDescription": {
                  "text": "Improper position of from __future__ import"
                },
                "fullDescription": {
                  "text": "Reports 'from __future__ import' statements that are used not at the beginning of a file. Example: a = 1\nfrom __future__ import print_function\nprint()\n When the quick-fix is applied, the code changes to: from __future__ import print_function\n\na = 1\nprint()",
                  "markdown": "Reports `from __future__ import`\nstatements that are used not at\nthe beginning of a file.\n\n**Example:**\n\n```\na = 1\nfrom __future__ import print_function\nprint()\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nfrom __future__ import print_function\n\na = 1\nprint()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnresolvedReferencesInspection",
                "shortDescription": {
                  "text": "Unresolved references"
                },
                "fullDescription": {
                  "text": "Reports references in your code that cannot be resolved. In a dynamically typed language, this is possible in a limited number of cases. If a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be: def print_string(s):\n  print(s.abc())\n In this code fragment 's' is always a string and 'abc' should be highlighted as unresolved. However, 's' type is inferred as 'Any' and no warning is reported. The IDE provides quick-fix actions to add missing references on-the-fly.",
                  "markdown": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySuperArgumentsInspection",
                "shortDescription": {
                  "text": "Wrong arguments to call super"
                },
                "fullDescription": {
                  "text": "Reports cases when any call to 'super(A, B)' does not meet the following requirements: 'B' is an instance of 'A' 'B' a subclass of 'A' Example: class Figure:\n    def color(self):\n        pass\n\n\nclass Rectangle(Figure):\n    def color(self):\n        pass\n\n\nclass Square(Figure):\n    def color(self):\n        return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle\n As a fix, you can make the 'Square' an instance of the 'Rectangle' class.",
                  "markdown": "Reports cases when any call to `super(A, B)` does not meet the\nfollowing requirements:\n\n* `B` is an instance of `A`\n* `B` a subclass of `A`\n\n**Example:**\n\n```\nclass Figure:\n    def color(self):\n        pass\n\n\nclass Rectangle(Figure):\n    def color(self):\n        pass\n\n\nclass Square(Figure):\n    def color(self):\n        return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle\n```\n\nAs a fix, you can make the `Square` an instance of the `Rectangle` class."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPackageRequirementsInspection",
                "shortDescription": {
                  "text": "Unsatisfied package requirements"
                },
                "fullDescription": {
                  "text": "Reports packages mentioned in requirements files (for example, 'requirements.txt' or 'Pipfile') but not installed, or imported but not mentioned in requirements files. The IDE shows a quick-fix banner so that you can install the missing packages in one click.",
                  "markdown": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoOrmInspection",
                "shortDescription": {
                  "text": "Django ORM error"
                },
                "fullDescription": {
                  "text": "Reports several methods that may not be called due to some ORM reasons. Example: class Choice:\n    question = ForeignKey(Question, null=False)\n\n\nchoice_set = Question.objects.get(id=1).choice_set.remove()\n The 'remove' function can not be called if the foreign key has 'null=False'.",
                  "markdown": "Reports several methods that may not be called due to some ORM reasons.\n\n**Example:**\n\n```\nclass Choice:\n    question = ForeignKey(Question, null=False)\n\n\nchoice_set = Question.objects.get(id=1).choice_set.remove()\n```\n\nThe `remove` function can not be called if the foreign key has `null=False`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedTemplateReferenceInspection",
                "shortDescription": {
                  "text": "Unresolved template reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved file references in string literals of 'extends'> and 'include'> Django tags. Example: {% extends \"../DjangoApp/templatetags/base.html\"%}\n In this example, the 'base.html' tag is highlighted, because it is not available in the specified location.",
                  "markdown": "Reports unresolved file references in string literals of\n`extends`\\> and `include`\\> Django tags.\n\n**Example:**\n\n```\n{% extends \"../DjangoApp/templatetags/base.html\"%}\n```\n\nIn this example, the `base.html` tag is highlighted, because it is not available in the\nspecified location."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNonAsciiCharInspection",
                "shortDescription": {
                  "text": "File contains non-ASCII character"
                },
                "fullDescription": {
                  "text": "Reports cases in Python 2 when a file contains non-ASCII characters and does not have an encoding declaration at the top. Example: class A(object):\n# №5\n    def __init__(self):\n        pass\n In this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding declaration. Apply the proposed quick-fix to add a missing encoding declaration: # coding=utf-8\nclass A(object)\n# №5\n    def __init__(self):\n        pass",
                  "markdown": "Reports cases in Python 2 when a file contains non-ASCII characters and does not\nhave an encoding declaration at the top.\n\n**Example:**\n\n```\nclass A(object):\n# №5\n    def __init__(self):\n        pass\n```\n\nIn this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding\ndeclaration. Apply the proposed quick-fix to add a missing encoding declaration:\n\n```\n# coding=utf-8\nclass A(object)\n# №5\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTrailingSemicolonInspection",
                "shortDescription": {
                  "text": "Prohibited trailing semicolon in a statement"
                },
                "fullDescription": {
                  "text": "Reports trailing semicolons in statements. Example: def my_func(a):\n    c = a ** 2;\n    return c\n IDE provides a quick-fix that removes a trailing semicolon. When you apply it, the code changes to: def my_func(a):\n    c = a ** 2\n    return c",
                  "markdown": "Reports trailing semicolons in statements.\n\n**Example:**\n\n```\ndef my_func(a):\n    c = a ** 2;\n    return c\n```\n\nIDE provides a quick-fix that removes a trailing semicolon. When you\napply it, the code changes to:\n\n```\ndef my_func(a):\n    c = a ** 2\n    return c\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRedundantParenthesesInspection",
                "shortDescription": {
                  "text": "Redundant parentheses"
                },
                "fullDescription": {
                  "text": "Reports about redundant parentheses in expressions. The IDE provides the quick-fix action to remove the redundant parentheses.",
                  "markdown": "Reports about redundant parentheses in expressions.\n\nThe IDE provides the quick-fix action to remove the redundant parentheses."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAbstractClassInspection",
                "shortDescription": {
                  "text": "Class must implement all abstract methods"
                },
                "fullDescription": {
                  "text": "Reports cases when not all abstract properties or methods are defined in a subclass. Example: from abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_triangle(self):\n        pass\n When the quick-fix is applied, the IDE implements an abstract method for the 'Triangle' class: from abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_figure(self):\n        pass\n\n    def do_triangle(self):\n        pass",
                  "markdown": "Reports cases when not all abstract properties or methods are defined in\na subclass.\n\n**Example:**\n\n```\nfrom abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_triangle(self):\n        pass\n```\n\nWhen the quick-fix is applied, the IDE implements an abstract method for the `Triangle` class:\n\n```\nfrom abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_figure(self):\n        pass\n\n    def do_triangle(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOldStyleClassesInspection",
                "shortDescription": {
                  "text": "Old-style class contains new-style class features"
                },
                "fullDescription": {
                  "text": "Reports occurrences of new-style class features in old-style classes. The inspection highlights '__slots__', '__getattribute__', and 'super()' inside old-style classes.",
                  "markdown": "Reports occurrences of\n[new-style class features](https://www.python.org/doc/newstyle/)\nin old-style classes. The inspection highlights\n`__slots__`, `__getattribute__`, and `super()`\ninside old-style classes."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoIncompatibleInspection",
                "shortDescription": {
                  "text": "Incompatible code in Django templates"
                },
                "fullDescription": {
                  "text": "Reports features that are not available in the current Django version. Example: {% if my_var is True %}\n{% endif %}\n Available since 1.10. The IDE shows warning when discovered in the earlier versions.",
                  "markdown": "Reports features that are not available in the current Django version.\n\n**Example:**\n\n```\n{% if my_var is True %}\n{% endif %}\n```\n\nAvailable since 1.10. The IDE shows warning when discovered in the earlier versions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExtendsTagPositionInspection",
                "shortDescription": {
                  "text": "Misplaced {% extends %} tag"
                },
                "fullDescription": {
                  "text": "Reports the '{% extends %}' tag that is not the first tag in a Django template. Example: {% load my_custom_tags %}\n{% extends \"../DjangoApp/templatetags/my_custom_tags.py\"%}\n In this example, the '{% extends %}' tag is highlighted, because it should be placed before the '{% load %}' tag.",
                  "markdown": "Reports the `{% extends %}` tag that is not the first tag in a\nDjango template.\n\n**Example:**\n\n```\n{% load my_custom_tags %}\n{% extends \"../DjangoApp/templatetags/my_custom_tags.py\"%}\n```\n\nIn this example, the `{% extends %}` tag is highlighted, because it should be placed before\nthe `{% load %}` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyArgumentListInspection",
                "shortDescription": {
                  "text": "Incorrect call arguments"
                },
                "fullDescription": {
                  "text": "Reports discrepancies between declared parameters and actual arguments, as well as incorrect arguments, for example, duplicate named arguments, and incorrect argument order. Example: class Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n The correct code fragment looks at follows: class Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")",
                  "markdown": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInterpreterInspection",
                "shortDescription": {
                  "text": "An invalid interpreter"
                },
                "fullDescription": {
                  "text": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly configured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features. The IDE provides quick access to the interpreter settings.",
                  "markdown": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly\nconfigured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features.\n\nThe IDE provides quick access to the interpreter settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyBroadExceptionInspection",
                "shortDescription": {
                  "text": "Unclear exception clauses"
                },
                "fullDescription": {
                  "text": "Reports exception clauses that do not provide specific information about the problem. Example: Clauses that do not specify an exception class Clauses that are specified as 'Exception'",
                  "markdown": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypeCheckerInspection",
                "shortDescription": {
                  "text": "Incorrect type"
                },
                "fullDescription": {
                  "text": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases. Types of function parameters can be specified in docstrings or in Python 3 function annotations. Example: def foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n With the quick-fix, you can modify the problematic types: def foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()",
                  "markdown": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPropertyAccessInspection",
                "shortDescription": {
                  "text": "Inappropriate access to properties"
                },
                "fullDescription": {
                  "text": "Reports cases when properties are accessed inappropriately: Read-only properties are set Write-only properties are read Non-deletable properties are deleted Example: class MyClass:\n    @property\n    def read_only(self): return None\n\n    def __write_only_setter(self, value): pass\n\n    write_only = property(None, __write_only_setter)\n\n\na = MyClass()\na.read_only = 10 # property cannot be set\ndel a.read_only # property cannot be deleted\nprint(a.write_only) # property cannot be read",
                  "markdown": "Reports cases when properties are accessed inappropriately:\n\n* Read-only properties are set\n* Write-only properties are read\n* Non-deletable properties are deleted\n\n**Example:**\n\n```\nclass MyClass:\n    @property\n    def read_only(self): return None\n\n    def __write_only_setter(self, value): pass\n\n    write_only = property(None, __write_only_setter)\n\n\na = MyClass()\na.read_only = 10 # property cannot be set\ndel a.read_only # property cannot be deleted\nprint(a.write_only) # property cannot be read\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStubPackagesAdvertiser",
                "shortDescription": {
                  "text": "Stub packages advertiser"
                },
                "fullDescription": {
                  "text": "Reports availability of stub packages. Stub package is a package that contains type information for the corresponding runtime package. Using stub packages ensures better coding assistance for the corresponding python package.",
                  "markdown": "Reports availability of stub packages.\n\n\n[Stub package](https://www.python.org/dev/peps/pep-0561/) is a package that contains type information for the corresponding\nruntime package.\n\nUsing stub packages ensures better coding assistance for the corresponding python package."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyByteLiteralInspection",
                "shortDescription": {
                  "text": "A byte literal contains a non-ASCII character"
                },
                "fullDescription": {
                  "text": "Reports characters in byte literals that are outside ASCII range. Example: 's = b'№5''",
                  "markdown": "Reports characters in byte literals that are outside ASCII range.\n\n**Example:**\n`s = b'№5'`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRelativeImportInspection",
                "shortDescription": {
                  "text": "Suspicious relative imports"
                },
                "fullDescription": {
                  "text": "Reports usages of relative imports inside plain directories, for example, directories neither containing '__init__.py' nor explicitly marked as namespace packages.",
                  "markdown": "Reports usages of relative imports inside plain directories, for example, directories neither containing `__init__.py` nor\nexplicitly marked as namespace packages."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAugmentAssignmentInspection",
                "shortDescription": {
                  "text": "Assignment can be replaced with augmented assignment"
                },
                "fullDescription": {
                  "text": "Reports assignments that can be replaced with augmented assignments. Example: a = 23\nb = 3\na = a + b\n After the quick-fix is applied, the code changes to: a = 23\nb = 3\na += b",
                  "markdown": "Reports assignments that can be replaced with augmented assignments.\n\n**Example:**\n\n```\na = 23\nb = 3\na = a + b\n```\n\nAfter the quick-fix is applied, the code changes to:\n\n```\na = 23\nb = 3\na += b\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated function, class, or module"
                },
                "fullDescription": {
                  "text": "Reports usages of Python functions, or methods that are marked as deprecated and raise the 'DeprecationWarning' or 'PendingDeprecationWarning' warning. Also, this inspection highlights usages of 'abc.abstractstaticmethod', 'abc.abstractproperty', and 'abc.abstractclassmethod' decorators. Example: class Foo:\n    @property\n    def bar(self):\n        import warnings\n        warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n        return 5\n\n\nfoo = Foo()\nprint(foo.bar)",
                  "markdown": "Reports usages of Python functions, or methods that are marked as\ndeprecated and raise the `DeprecationWarning` or `PendingDeprecationWarning` warning.\n\nAlso, this inspection highlights usages of `abc.abstractstaticmethod`, `abc.abstractproperty`, and `abc.abstractclassmethod`\ndecorators.\n\n**Example:**\n\n```\nclass Foo:\n    @property\n    def bar(self):\n        import warnings\n        warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n        return 5\n\n\nfoo = Foo()\nprint(foo.bar)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnnecessaryBackslashInspection",
                "shortDescription": {
                  "text": "Unnecessary backslash"
                },
                "fullDescription": {
                  "text": "Reports backslashes in places where line continuation is implicit inside '()', '[]', and '{}'. Example: a = ('first', \\\n     'second', 'third')\n When the quick-fix is applied, the redundant backslash is deleted.",
                  "markdown": "Reports backslashes in places where line continuation is implicit inside `()`,\n`[]`, and `{}`.\n\n**Example:**\n\n```\na = ('first', \\\n     'second', 'third')\n```\n\nWhen the quick-fix is applied, the redundant backslash is deleted."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRedeclarationInspection",
                "shortDescription": {
                  "text": "Redeclared names without usages"
                },
                "fullDescription": {
                  "text": "Reports unconditional redeclarations of names without being used in between. Example: def x(): pass\n\n\nx = 2\n It applies to function and class declarations, and top-level assignments. When the warning is shown, you can try a recommended action, for example, you might be prompted to rename the variable.",
                  "markdown": "Reports unconditional redeclarations of names without being used in between.\n\n**Example:**\n\n```\ndef x(): pass\n\n\nx = 2\n```\n\nIt applies to function and class declarations, and top-level assignments.\n\nWhen the warning is shown, you can try a recommended action, for example, you might be prompted to\nrename the variable."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyShadowingNamesInspection",
                "shortDescription": {
                  "text": "Shadowing names from outer scopes"
                },
                "fullDescription": {
                  "text": "Reports shadowing names defined in outer scopes. Example: def outer(p):\n    def inner(p):\n        pass\n As a quick-fix, the IDE offers to remove a parameter or rename it.",
                  "markdown": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyFinalInspection",
                "shortDescription": {
                  "text": "Invalid usages of final classes, methods, and variables"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of final classes, methods and variables. Example: from typing import final\n\n\n@final\nclass A:\n    def a_method(self):\n        pass\n\n\nclass B(A):\n    def a_method(self):\n        pass",
                  "markdown": "Reports invalid usages of final classes,\nmethods and variables.\n\n**Example:**\n\n```\nfrom typing import final\n\n\n@final\nclass A:\n    def a_method(self):\n        pass\n\n\nclass B(A):\n    def a_method(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyramidSetupInspection",
                "shortDescription": {
                  "text": "Project is not installed for development"
                },
                "fullDescription": {
                  "text": "Reports cases when no 'python setup.py develop' command was executed for the Pyramid project. You need to execute this command to install the newly created project for development.",
                  "markdown": "Reports cases when no `python setup.py develop` command was executed for the Pyramid project.\n\nYou need to execute this command to install the newly created project for development."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Pyramid",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyProtectedMemberInspection",
                "shortDescription": {
                  "text": "Accessing a protected member of a class or a module"
                },
                "fullDescription": {
                  "text": "Reports cases when a protected member is accessed outside the class, a descendant of the class where it is defined, or a module. class Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method",
                  "markdown": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStubPackagesCompatibilityInspection",
                "shortDescription": {
                  "text": "Incompatible stub packages"
                },
                "fullDescription": {
                  "text": "Reports stub packages that do not support the version of the corresponding runtime package. A stub package contains type information for some runtime package.",
                  "markdown": "Reports stub packages that do not support the version of the corresponding runtime package.\n\nA [stub package](https://www.python.org/dev/peps/pep-0561/) contains type information for some runtime package."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoCloseTagInspection",
                "shortDescription": {
                  "text": "Mismatched opening and closing tags"
                },
                "fullDescription": {
                  "text": "Reports cases when opening tags in Django templates are not correctly matched by closing tags. Example: {% if error_message %}<p><strong>{{ error_message }}</p>{% endif %}\n The IDE reports an error on the 'strong' tag not being closed.",
                  "markdown": "Reports cases when opening tags in Django templates are not correctly matched by closing tags.\n\n**Example:**\n\n```\n{% if error_message %}<p><strong>{{ error_message }}</p>{% endif %}\n```\n\nThe IDE reports an error on the `strong` tag not being closed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnboundLocalVariableInspection",
                "shortDescription": {
                  "text": "Unbound local variables"
                },
                "fullDescription": {
                  "text": "Reports local variables referenced before assignment. Example: x = 0\nif x > 10:\n    b = 3\nprint(b)\n The IDE reports a problem for 'print(b)'. A possible fix is: x = 0\nif x > 10:\n    b = 3\n    print(b)",
                  "markdown": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNamedTupleInspection",
                "shortDescription": {
                  "text": "Invalid definition of 'typing.NamedTuple'"
                },
                "fullDescription": {
                  "text": "Reports invalid definition of a typing.NamedTuple. Example: import typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    last: str = \"\"\n    middle: str\n As a fix, place the field with the default value after the fields without default values: import typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    middle: str\n    last: str = \"\"",
                  "markdown": "Reports invalid definition of a\n[typing.NamedTuple](https://docs.python.org/3/library/typing.html#typing.NamedTuple).\n\n**Example:**\n\n```\nimport typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    last: str = \"\"\n    middle: str\n```\n\nAs a fix, place the field with the default value after the fields without default values:\n\n```\nimport typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    middle: str\n    last: str = \"\"\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySingleQuotedDocstringInspection",
                "shortDescription": {
                  "text": "Single quoted docstring"
                },
                "fullDescription": {
                  "text": "Reports docstrings that do not adhere to the triple double-quoted string format. Example: def calc(self, balance=0):\n    'param: balance'\n    self.balance = balance\n When the quick-fix is applied, the code changes to: def calc(self, balance=0):\n    \"\"\"param: balance\"\"\"\n    self.balance = balance",
                  "markdown": "Reports docstrings that do not adhere to the triple double-quoted string format.\n\n**Example:**\n\n```\ndef calc(self, balance=0):\n    'param: balance'\n    self.balance = balance\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef calc(self, balance=0):\n    \"\"\"param: balance\"\"\"\n    self.balance = balance\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnusedLocalInspection",
                "shortDescription": {
                  "text": "Unused local symbols"
                },
                "fullDescription": {
                  "text": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
                  "markdown": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyReturnFromInitInspection",
                "shortDescription": {
                  "text": "__init__ method that returns a value"
                },
                "fullDescription": {
                  "text": "Reports occurrences of 'return' statements with a return value inside '__init__' methods of classes. Example: class Sum:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.sum = a + b\n        return self.sum\n A constructor should not return any value. The '__init__' method should only initialize the values of instance members for news objects. As a quick-fix, the IDE offers to remove the 'return' statement.",
                  "markdown": "Reports occurrences of `return` statements with a return value inside\n`__init__` methods of classes.\n\n**Example:**\n\n```\nclass Sum:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.sum = a + b\n        return self.sum\n```\n\nA constructor should not return any value. The `__init__` method should\nonly initialize the values of instance members for news objects.\n\nAs a quick-fix, the IDE offers to remove the `return` statement."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNestedDecoratorsInspection",
                "shortDescription": {
                  "text": "Problematic nesting of decorators"
                },
                "fullDescription": {
                  "text": "Reports problems with nesting decorators. The inspection highlights the cases when 'classmethod' or 'staticmethod' is applied before another decorator. Example: def innocent(f):\n    return f\n\n\nclass A:\n    @innocent  # Decorator will not receive a callable it may expect\n    @classmethod\n    def f2(cls):\n        pass\n\n    @innocent  # Decorator will not receive a callable it may expect\n    @staticmethod\n    def f1():\n        pass\n As a quick-fix, the IDE offers to remove the decorator.",
                  "markdown": "Reports problems with nesting decorators. The inspection highlights the cases when `classmethod` or `staticmethod`\nis applied before another decorator.\n\n**Example:**\n\n```\ndef innocent(f):\n    return f\n\n\nclass A:\n    @innocent  # Decorator will not receive a callable it may expect\n    @classmethod\n    def f2(cls):\n        pass\n\n    @innocent  # Decorator will not receive a callable it may expect\n    @staticmethod\n    def f1():\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove the decorator."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingOrEmptyDocstringInspection",
                "shortDescription": {
                  "text": "Missing or empty docstring"
                },
                "fullDescription": {
                  "text": "Reports missing and empty docstrings. Example of a missing docstring def demo(a):\n    c = a ** 2\n Example of an empty docstring def demo(a):\n    \"\"\"\n    \"\"\"\n    c = a ** 2\n When the quick-fix is applied, the code fragments change to: def demo(a):\n    \"\"\"\n\n    :param a:\n    \"\"\"\n    c = a ** 2\n You need to provide some details about the parameter in the generated template.",
                  "markdown": "Reports missing and empty docstrings.\n\n**Example of a missing docstring**\n\n```\ndef demo(a):\n    c = a ** 2\n```\n\n**Example of an empty docstring**\n\n```\ndef demo(a):\n    \"\"\"\n    \"\"\"\n    c = a ** 2\n```\n\nWhen the quick-fix is applied, the code fragments change to:\n\n```\ndef demo(a):\n    \"\"\"\n\n    :param a:\n    \"\"\"\n    c = a ** 2\n```\n\nYou need to provide some details about the parameter in the generated template."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedBlockNamesInspection",
                "shortDescription": {
                  "text": "Duplicated block names"
                },
                "fullDescription": {
                  "text": "Reports duplicated block names in Django templates. Example: <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>{% block title %}My amazing site{% endblock %}</title>\n</head>\n\n<body>\n    <div id=\"sidebar\">\n        {% block title %}\n        <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/blog/\">Blog</a></li>\n        </ul>\n        {% endblock %}\n    </div>\n\n    <div id=\"content\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>",
                  "markdown": "Reports duplicated block names in Django templates.\n\n**Example:**\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>{% block title %}My amazing site{% endblock %}</title>\n</head>\n\n<body>\n    <div id=\"sidebar\">\n        {% block title %}\n        <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/blog/\">Blog</a></li>\n        </ul>\n        {% endblock %}\n    </div>\n\n    <div id=\"content\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOverloadsInspection",
                "shortDescription": {
                  "text": "Overloads in regular Python files"
                },
                "fullDescription": {
                  "text": "Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are not compatible with the implementation. Example: from typing import overload\n\n\n@overload\ndef foo(p1, p2): # Overload signature is not compatible with the implementation\n    pass\n\n\n@overload\ndef foo(p1): # Overload signature is not compatible with the implementation\n    pass\n\n\ndef foo(p1, p2, p3):\n    print(p1, p2, p3)",
                  "markdown": "Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are\nnot compatible with the implementation.\n\n**Example:**\n\n```\nfrom typing import overload\n\n\n@overload\ndef foo(p1, p2): # Overload signature is not compatible with the implementation\n    pass\n\n\n@overload\ndef foo(p1): # Overload signature is not compatible with the implementation\n    pass\n\n\ndef foo(p1, p2, p3):\n    print(p1, p2, p3)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPep8NamingInspection",
                "shortDescription": {
                  "text": "PEP 8 naming convention violation"
                },
                "fullDescription": {
                  "text": "Reports violations of the PEP8 naming conventions. Example: class mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n In this code fragment, IDE offers to rename 'mammalia' to 'Mammalia'. When the quick-fix is applied, the code change to: class Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")",
                  "markdown": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedLoadInspection",
                "shortDescription": {
                  "text": "Unresolved library inspection"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in Django load tags. Example:   {% load something_nonexistent %}",
                  "markdown": "Reports unresolved references in Django load tags.\n\n**Example:**\n\n```\n  {% load something_nonexistent %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDictDuplicateKeysInspection",
                "shortDescription": {
                  "text": "Dictionary contains duplicate keys"
                },
                "fullDescription": {
                  "text": "Reports using the same value as the dictionary key twice. Example: dic = {\"a\": [1, 2], \"a\": [3, 4]}",
                  "markdown": "Reports using the same value as the dictionary key twice.\n\n**Example:**\n\n```\ndic = {\"a\": [1, 2], \"a\": [3, 4]}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyExceptClausesOrderInspection",
                "shortDescription": {
                  "text": "Wrong order of 'except' clauses"
                },
                "fullDescription": {
                  "text": "Reports cases when 'except' clauses are not in the proper order, from the more specific to the more generic, or one exception class is caught twice. If you do not fix the order, some exceptions may not be caught by the most specific handler. Example: try:\n    call()\nexcept ValueError:\n    pass\nexcept UnicodeError:\n    pass\n The IDE recommends moving the clause up. When the quick-fix is applied, the code changes to: try:\n    call()\nexcept UnicodeError:\n    pass\nexcept ValueError:\n    pass",
                  "markdown": "Reports cases when `except` clauses are not in the proper order,\nfrom the more specific to the more generic, or one exception class is caught twice.\n\n\nIf you do not fix the order, some exceptions may not be caught by the most specific handler.\n\n**Example:**\n\n```\ntry:\n    call()\nexcept ValueError:\n    pass\nexcept UnicodeError:\n    pass\n```\n\nThe IDE recommends moving the clause up. When the quick-fix is applied, the code changes to:\n\n```\ntry:\n    call()\nexcept UnicodeError:\n    pass\nexcept ValueError:\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDataclassInspection",
                "shortDescription": {
                  "text": "Invalid definition and usage of Data Classes"
                },
                "fullDescription": {
                  "text": "Reports invalid definitions and usages of classes created with 'dataclasses' or 'attr' modules. Example: import dataclasses\n\n\n@dataclasses.dataclass\nclass FullName:\n    first: str\n    middle: str = \"\"\n    last: str",
                  "markdown": "Reports invalid definitions and usages of classes created with\n`dataclasses` or `attr` modules.\n\n**Example:**\n\n```\nimport dataclasses\n\n\n@dataclasses.dataclass\nclass FullName:\n    first: str\n    middle: str = \"\"\n    last: str\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassicStyleClassInspection",
                "shortDescription": {
                  "text": "Classic style class usage"
                },
                "fullDescription": {
                  "text": "Reports classic style classes usage. This inspection applies only to Python 2. Example: class A:\n    pass\n With quick-fixes provided by the IDE, this code fragment changes to: class A(object):\n    def __init__(self):\n        pass",
                  "markdown": "Reports [classic style classes](https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes) usage. This inspection applies only to Python 2.\n\n**Example:**\n\n```\nclass A:\n    pass\n```\n\nWith quick-fixes provided by the IDE, this code fragment changes to:\n\n```\nclass A(object):\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUrlArgumentsInspection",
                "shortDescription": {
                  "text": "Incorrect arguments in the ' {% url %}' tag"
                },
                "fullDescription": {
                  "text": "Reports missing parameters in the template file if the 'url()' function has parameters in its URL path. Example: In the 'url.py' file url(r'^(?P<question_id>[0-9]+)/', views.detail, name='detail')\n In the template file {% url 'polls:detail' %}",
                  "markdown": "Reports missing parameters in the template file if the `url()`\nfunction has parameters in its URL path.\n\n**Example:**\n\nIn the `url.py` file\n\n```\nurl(r'^(?P<question_id>[0-9]+)/', views.detail, name='detail')\n```\n\nIn the template file\n\n```\n{% url 'polls:detail' %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNoneFunctionAssignmentInspection",
                "shortDescription": {
                  "text": "Assigning function calls that don't return anything"
                },
                "fullDescription": {
                  "text": "Reports cases when an assignment is done on a function that does not return anything. This inspection is similar to pylint inspection E1111. Example: def just_print():\n    print(\"Hello!\")\n\n\naction = just_print()\n As a quick-fix, the IDE offers to remove the assignment.",
                  "markdown": "Reports cases when an assignment is done on a function that does not return anything.\nThis inspection is similar to [pylint inspection E1111](https://docs.pylint.org/en/1.6.0/features.html#id6).\n\n\n**Example:**\n\n```\ndef just_print():\n    print(\"Hello!\")\n\n\naction = just_print()\n```\n\nAs a quick-fix, the IDE offers to remove the assignment."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPropertyDefinitionInspection",
                "shortDescription": {
                  "text": "Incorrect property definition"
                },
                "fullDescription": {
                  "text": "Reports problems with the arguments of 'property()' and functions annotated with '@property'. class C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass\n A quick-fix offers to update parameters.",
                  "markdown": "Reports problems with the arguments of `property()` and functions\nannotated with `@property`.\n\n```\nclass C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass\n```\n\nA quick-fix offers to update parameters."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyIncorrectDocstringInspection",
                "shortDescription": {
                  "text": "Incorrect docstring"
                },
                "fullDescription": {
                  "text": "Reports mismatched parameters in a docstring. For example, 'b' is highlighted, because there is no such a parameter in the 'add' function.     def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n The inspection does not warn you of missing parameters if none of them is mentioned in a docstring: def mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass",
                  "markdown": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JupyterKernelInspection",
                "shortDescription": {
                  "text": "Notebook kernel doesn't match the Python interpreter"
                },
                "fullDescription": {
                  "text": "Reports cases when the Python interpreter is not configured as a notebook kernel. This inspection prevents discrepancies between Code Insight and runtime behavior of the Jupyter notebook code cells. If you see the following warning, the kernel of the newly configured server doesn't match your current Python interpreter. For example, it might have a different set of the installed packages. You can register your Python interpreter by clicking the corresponding link on the warning banner. After that, you can see the interpreter in the list of the configured server kernels. See Manage Jupyter notebook servers for more details.",
                  "markdown": "Reports cases when the Python interpreter is not configured as a notebook kernel.\nThis inspection prevents discrepancies between Code Insight and runtime behavior of the\nJupyter notebook code cells.\n\nIf you see the following warning, the kernel of the newly configured server doesn't match your current Python interpreter.\nFor example, it might have a different set of the installed packages.\n\nYou can register your Python interpreter by clicking the corresponding\nlink on the warning banner. After that, you can see the interpreter in the list of the configured server kernels.\n\nSee [Manage Jupyter notebook servers](https://www.jetbrains.com/help/pycharm/configuring-jupyter-notebook.html) for more details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Jupyter",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyListCreationInspection",
                "shortDescription": {
                  "text": "Non-optimal list declaration"
                },
                "fullDescription": {
                  "text": "Reports cases when a list declaration can be rewritten with a list literal. This ensures better performance of your application. Example: l = [1]\nl.append(2)\n When the quick-fix is applied, the code changes to: l = [1, 2]",
                  "markdown": "Reports cases when a list declaration\ncan be rewritten with a list literal.\n\nThis ensures better performance of your application.\n\n**Example:**\n\n```\nl = [1]\nl.append(2)\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nl = [1, 2]\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij",
            "version": "213.7162.129",
            "rules": [
              {
                "id": "XmlHighlighting",
                "shortDescription": {
                  "text": "XML highlighting"
                },
                "fullDescription": {
                  "text": "Reports XML validation problems in the results of a batch code inspection.",
                  "markdown": "Reports XML validation problems in the results of a batch code inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated JSON property"
                },
                "fullDescription": {
                  "text": "Reports a deprecated property in a JSON file. Note that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'.",
                  "markdown": "Reports a deprecated property in a JSON file.  \nNote that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDuplicatedId",
                "shortDescription": {
                  "text": "Duplicate 'id' attribute"
                },
                "fullDescription": {
                  "text": "Reports a duplicate 'id' attribute in XML.",
                  "markdown": "Reports a duplicate `id` attribute in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateCharacterInClass",
                "shortDescription": {
                  "text": "Duplicate character in character class"
                },
                "fullDescription": {
                  "text": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex. Example: '[aabc]' After the quick-fix is applied: '[abc]'",
                  "markdown": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\n**Example:**\n\n\n      [aabc]\n\nAfter the quick-fix is applied:\n\n\n      [abc]\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaRefReference",
                "shortDescription": {
                  "text": "Unresolved '$ref' and '$schema' references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved '$ref' or '$schema' path in a JSON schema.",
                  "markdown": "Reports an unresolved `$ref` or `$schema` path in a JSON schema.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownBooleanAttribute",
                "shortDescription": {
                  "text": "Incorrect boolean attribute"
                },
                "fullDescription": {
                  "text": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlInvalidId",
                "shortDescription": {
                  "text": "Unresolved 'id' reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved 'id' reference in XML.",
                  "markdown": "Reports an unresolved `id` reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnboundNsPrefix",
                "shortDescription": {
                  "text": "Unbound namespace prefix"
                },
                "fullDescription": {
                  "text": "Reports an unbound namespace prefix in XML.",
                  "markdown": "Reports an unbound namespace prefix in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredAttributes",
                "shortDescription": {
                  "text": "Missing required attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedCode",
                "shortDescription": {
                  "text": "Duplicated code fragment"
                },
                "fullDescription": {
                  "text": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in File | Settings | Editor | Duplicates.",
                  "markdown": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in [File \\| Settings \\| Editor \\| Duplicates](settings://duplicates.index)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentLineSeparators",
                "shortDescription": {
                  "text": "Inconsistent line separators"
                },
                "fullDescription": {
                  "text": "Reports files with line separators different from the ones that are specified in the project's settings. For example, the inspection will be triggered if you set the line separator to '\\n' in Settings | Editor | Code Style | Line separator, while the file you are editing uses '\\r\\n' as a line separator. The inspection also warns you about mixed line separators within a file.",
                  "markdown": "Reports files with line separators different from the ones that are specified in the project's settings.\n\nFor example, the inspection will be triggered if you set the line separator to `\\n` in **Settings \\| Editor \\| Code Style \\| Line separator** ,\nwhile the file you are editing uses `\\r\\n` as a line separator.\n\nThe inspection also warns you about mixed line separators within a file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSuppression",
                "shortDescription": {
                  "text": "Redundant suppression"
                },
                "fullDescription": {
                  "text": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context: '@SuppressWarning' annotation, or '// noinspection' line comment, or '/** noinspection */' JavaDoc comment Example: 'public class C {\n // symbol is already private,\n // but annotation is still around\n  @SuppressWarnings({\"WeakerAccess\"})\n private boolean CONST = true;\n void f() {\n    CONST = false;\n  }\n}'",
                  "markdown": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\n* `@SuppressWarning` annotation, or\n* `// noinspection` line comment, or\n* `/** noinspection */` JavaDoc comment\n\nExample:\n\n\n    public class C {\n     // symbol is already private,\n     // but annotation is still around\n      @SuppressWarnings({\"WeakerAccess\"})\n     private boolean CONST = true;\n     void f() {\n        CONST = false;\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ProblematicWhitespace",
                "shortDescription": {
                  "text": "Problematic whitespace"
                },
                "fullDescription": {
                  "text": "Reports the following problems: Tabs used for indentation when the code style is configured to use only spaces. Spaces used for indentation when the code style is configured to use only tabs. Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs.",
                  "markdown": "Reports the following problems:\n\n* Tabs used for indentation when the code style is configured to use only spaces.\n* Spaces used for indentation when the code style is configured to use only tabs.\n* Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file in a link.",
                  "markdown": "Reports an unresolved file in a link."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SSBasedInspection",
                "shortDescription": {
                  "text": "Structural search inspection"
                },
                "fullDescription": {
                  "text": "Allows configuring Structural Search/Structural Replace templates that you can apply to the file you are editing. All matches will be highlighted and marked with the template name that you have configured. If you configure the Structural Replace pattern as well, the corresponding replace option will be available as a quick-fix.",
                  "markdown": "Allows configuring **Structural Search/Structural Replace** templates that you can apply to the file you are editing.\n\nAll matches will be highlighted and marked with the template name that you have configured.\nIf you configure the **Structural Replace** pattern as well, the corresponding replace option will be available as a quick-fix."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Structural search",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LongLine",
                "shortDescription": {
                  "text": "The line is longer than allowed by code style"
                },
                "fullDescription": {
                  "text": "Reports lines that are longer than the right margin parameter specified in the Code Style settings.",
                  "markdown": "Reports lines that are longer than the **right margin** parameter specified in the **Code Style** settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnusedNamespaceDeclaration",
                "shortDescription": {
                  "text": "Unused schema declaration"
                },
                "fullDescription": {
                  "text": "Reports an unused namespace declaration or location hint in XML.",
                  "markdown": "Reports an unused namespace declaration or location hint in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlWrongRootElement",
                "shortDescription": {
                  "text": "Wrong root element"
                },
                "fullDescription": {
                  "text": "Reports a root tag name different from the name specified in the '<doctype>' tag.",
                  "markdown": "Reports a root tag name different from the name specified in the `<doctype>` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEmptyAlternationBranch",
                "shortDescription": {
                  "text": "Empty branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation. Example: '(alpha||bravo)' After the quick-fix is applied: '(alpha|bravo)' New in 2017.2",
                  "markdown": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation.\n\n**Example:**\n\n\n      (alpha||bravo)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo)\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathEvaluateUnknownKey",
                "shortDescription": {
                  "text": "Unknown property key used for JSONPath evaluate expression"
                },
                "fullDescription": {
                  "text": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate.",
                  "markdown": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckValidXmlInScriptTagBody",
                "shortDescription": {
                  "text": "Malformed content of 'script' tag"
                },
                "fullDescription": {
                  "text": "Reports invalid XML contents of a 'script' tag.",
                  "markdown": "Reports invalid XML contents of a `script` tag.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Annotator",
                "shortDescription": {
                  "text": "Annotator"
                },
                "fullDescription": {
                  "text": "Reports problems that are found by language annotators in the result of a batch code inspection run.",
                  "markdown": "Reports problems that are found by language annotators in the result of a batch code inspection run."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlPathReference",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in XML.",
                  "markdown": "Reports an unresolved file reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSingleCharAlternation",
                "shortDescription": {
                  "text": "Single character alternation"
                },
                "fullDescription": {
                  "text": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance. Example: 'a|b|c|d' After the quick-fix is applied: '[abcd]' New in 2017.1",
                  "markdown": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance.\n\n**Example:**\n\n\n      a|b|c|d\n\nAfter the quick-fix is applied:\n\n\n      [abcd]\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnnecessaryNonCapturingGroup",
                "shortDescription": {
                  "text": "Unnecessary non-capturing group"
                },
                "fullDescription": {
                  "text": "Reports unnecessary non-capturing groups, which have no influence on the match result. Example: 'Everybody be cool, (?:this) is a robbery!' After the quick-fix is applied: 'Everybody be cool, this is a robbery!' New in 2021.1",
                  "markdown": "Reports unnecessary non-capturing groups, which have no influence on the match result.\n\n**Example:**\n\n\n      Everybody be cool, (?:this) is a robbery!\n\nAfter the quick-fix is applied:\n\n\n      Everybody be cool, this is a robbery!\n\nNew in 2021.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TodoComment",
                "shortDescription": {
                  "text": "TODO comment"
                },
                "fullDescription": {
                  "text": "Reports TODO comments in your code. You can configure the format for TODO comments in Settings | Editor | TODO. Since syntax highlighting for TODO comments is already provided, this inspection is efficient if you run it in the batch mode.",
                  "markdown": "Reports **TODO** comments in your code.\n\nYou can configure the format for **TODO** comments in [Settings \\| Editor \\| TODO](settings://preferences.toDoOptions). Since\nsyntax highlighting for **TODO** comments is already provided, this inspection is efficient if you run it in the batch mode."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAttribute",
                "shortDescription": {
                  "text": "Unknown attribute"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckTagEmptyBody",
                "shortDescription": {
                  "text": "Empty element content"
                },
                "fullDescription": {
                  "text": "Reports an element with empty contents.",
                  "markdown": "Reports an element with empty contents."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantEscape",
                "shortDescription": {
                  "text": "Redundant character escape"
                },
                "fullDescription": {
                  "text": "Reports character escapes that are replaceable with the unescaped character without a change in meaning. Note that inside the square brackets of a character class, many escapes are unnecessary that would be necessary outside of a character class. Example: '\\-\\;[\\.]' After the quick-fix is applied: '-;[.]' New in 2017.3",
                  "markdown": "Reports character escapes that are replaceable with the unescaped character without a change in meaning. Note that inside the square brackets of a character class, many escapes are unnecessary that would be necessary outside of a character class.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\nNew in 2017.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Json5StandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON5 standard"
                },
                "fullDescription": {
                  "text": "Reports inconsistency with the language specification in a JSON5 file.",
                  "markdown": "Reports inconsistency with [the language specification](http://json5.org) in a JSON5 file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonDuplicatePropertyKeys",
                "shortDescription": {
                  "text": "Duplicate keys in object literals"
                },
                "fullDescription": {
                  "text": "Reports a duplicate key in an object literal.",
                  "markdown": "Reports a duplicate key in an object literal."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a named pattern ('define') in RELAX-NG files that use XML syntax. Suggests creating the referenced 'define' element.",
                  "markdown": "Reports an unresolved reference to a named pattern (`define`) in RELAX-NG files that use XML syntax. Suggests creating the referenced `define` element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownFunction",
                "shortDescription": {
                  "text": "Unknown JSONPath function"
                },
                "fullDescription": {
                  "text": "Reports an unknown name in a JSONPath function call instead of known standard function names: 'concat', 'keys', 'length', 'min', 'max', 'avg', 'stddev', 'sum'.",
                  "markdown": "Reports an unknown name in a JSONPath function call instead of known standard function names: `concat`, `keys`, `length`, `min`, `max`, `avg`, `stddev`, `sum`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlMissingClosingTag",
                "shortDescription": {
                  "text": "Missing closing tag"
                },
                "fullDescription": {
                  "text": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional. Example: '<html>\n    <body>\n      <p>Behold!\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <p>Behold!</p>\n    </body>\n  </html>'",
                  "markdown": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <p>Behold!\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <p>Behold!</p>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantNestedCharacterClass",
                "shortDescription": {
                  "text": "Redundant nested character class"
                },
                "fullDescription": {
                  "text": "Reports unnecessary nested character classes. Example: '[a-c[x-z]]' After the quick-fix is applied: '[a-cx-z]' New in 2020.2",
                  "markdown": "Reports unnecessary nested character classes.\n\n**Example:**\n\n\n      [a-c[x-z]]\n\nAfter the quick-fix is applied:\n\n\n      [a-cx-z]\n\nNew in 2020.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDeprecatedElement",
                "shortDescription": {
                  "text": "Deprecated symbol"
                },
                "fullDescription": {
                  "text": "Reports a deprecated XML element or attribute. Symbols can be marked by XML comment or documentation tag with text 'deprecated'.",
                  "markdown": "Reports a deprecated XML element or attribute.\n\nSymbols can be marked by XML comment or documentation tag with text 'deprecated'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDefaultAttributeValue",
                "shortDescription": {
                  "text": "Redundant attribute with default value"
                },
                "fullDescription": {
                  "text": "Reports a redundant assignment of the default value to an XML attribute.",
                  "markdown": "Reports a redundant assignment of the default value to an XML attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlExtraClosingTag",
                "shortDescription": {
                  "text": "Redundant closing tag"
                },
                "fullDescription": {
                  "text": "Reports a redundant closing tag for an empty element, for example, 'img' or 'br'. Example: '<html>\n    <body>\n      <br></br>\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <br>\n    </body>\n  </html>'",
                  "markdown": "Reports a redundant closing tag for an empty element, for example, `img` or `br`.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <br></br>\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <br>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpOctalEscape",
                "shortDescription": {
                  "text": "Octal escape"
                },
                "fullDescription": {
                  "text": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion. Example: '\\07' After the quick-fix is applied: '\\x07' New in 2017.1",
                  "markdown": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion.\n\n**Example:**\n\n\n      \\07\n\nAfter the quick-fix is applied:\n\n\n      \\x07\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedDefine",
                "shortDescription": {
                  "text": "Unused define"
                },
                "fullDescription": {
                  "text": "Reports an unused named pattern ('define') in a RELAX-NG file (XML or Compact Syntax). 'define' elements that are used through an include in another file are ignored.",
                  "markdown": "Reports an unused named pattern (`define`) in a RELAX-NG file (XML or Compact Syntax). `define` elements that are used through an include in another file are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAnchorTarget",
                "shortDescription": {
                  "text": "Unresolved fragment in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved last part of an URL after the '#' sign.",
                  "markdown": "Reports an unresolved last part of an URL after the `#` sign."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistence between a JSON file and the JSON schema that is assigned to it.",
                  "markdown": "Reports inconsistence between a JSON file and the [JSON schema](https://json-schema.org) that is assigned to it.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnexpectedAnchor",
                "shortDescription": {
                  "text": "Begin or end anchor in unexpected position"
                },
                "fullDescription": {
                  "text": "Reports '^' or '\\A' anchors not at the beginning of the pattern and '$', '\\Z' or '\\z' anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the '^' and '$' anchors, most likely the literal character was meant and the escape forgotten. Example: '(Price $10)' New in 2018.1",
                  "markdown": "Reports `^` or `\\A` anchors not at the beginning of the pattern and `$`, `\\Z` or `\\z` anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the `^` and `$` anchors, most likely the literal character was meant and the escape forgotten.\n\n**Example:**\n\n\n      (Price $10)\n\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SyntaxError",
                "shortDescription": {
                  "text": "Syntax error"
                },
                "fullDescription": {
                  "text": "Reports syntax errors that have been found in the result of a batch code inspection run.",
                  "markdown": "Reports syntax errors that have been found in the result of a batch code inspection run."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpAnonymousGroup",
                "shortDescription": {
                  "text": "Anonymous capturing group or numeric back reference"
                },
                "fullDescription": {
                  "text": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. '(?:xxx)' instead of '(xxx)'. Example: '(\\d\\d\\d\\d)\\1' A better regex pattern could look like this: '(?<quad>\\d\\d\\d\\d)\\k<quad>' New in 2017.2",
                  "markdown": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. `(?:xxx)` instead of `(xxx)`.\n\n**Example:**\n\n\n      (\\d\\d\\d\\d)\\1\n\nA better regex pattern could look like this:\n\n\n      (?<quad>\\d\\d\\d\\d)\\k<quad>\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckDtdRefs",
                "shortDescription": {
                  "text": "Unresolved DTD reference"
                },
                "fullDescription": {
                  "text": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files.",
                  "markdown": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpellCheckingInspection",
                "shortDescription": {
                  "text": "Typo"
                },
                "fullDescription": {
                  "text": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click.",
                  "markdown": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "TYPO",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckXmlFileWithXercesValidator",
                "shortDescription": {
                  "text": "Failed external validation"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.",
                  "markdown": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonAsciiCharacters",
                "shortDescription": {
                  "text": "Non-ASCII characters"
                },
                "fullDescription": {
                  "text": "Reports code elements that uses non-ASCII symbols in an unusual context. Example: Non-ASCII characters used in identifiers, strings, or comments. Identifiers written in different languages, such as 'myCollection' with the letter 'C' written in Cyrillic. Comments or strings containing Unicode symbols, such as long dashes and arrows.",
                  "markdown": "Reports code elements that uses non-ASCII symbols in an unusual context.\n\nExample:\n\n* Non-ASCII characters used in identifiers, strings, or comments.\n* Identifiers written in different languages, such as `my`**C**`ollection` with the letter **C** written in Cyrillic.\n* Comments or strings containing Unicode symbols, such as long dashes and arrows."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTag",
                "shortDescription": {
                  "text": "Unknown tag"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported.",
                  "markdown": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LossyEncoding",
                "shortDescription": {
                  "text": "Lossy encoding"
                },
                "fullDescription": {
                  "text": "Reports characters that cannot be displayed because of the current document encoding. Examples: If you type international characters in a document with the US-ASCII charset, some characters will be lost on save. If you load a UTF-8-encoded file using the ISO-8859-1 one-byte charset, some characters will be displayed incorrectly. You can fix this by changing the file encoding either by specifying the encoding directly in the file, e.g. by editing 'encoding=' attribute in the XML prolog of XML file, or by changing the corresponding options in Settings | Editor | File Encodings.",
                  "markdown": "Reports characters that cannot be displayed because of the current document encoding.\n\nExamples:\n\n* If you type international characters in a document with the **US-ASCII** charset, some characters will be lost on save.\n* If you load a **UTF-8** -encoded file using the **ISO-8859-1** one-byte charset, some characters will be displayed incorrectly.\n\nYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing `encoding=` attribute in the XML prolog of XML file,\nor by changing the corresponding options in **Settings \\| Editor \\| File Encodings**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEscapedMetaCharacter",
                "shortDescription": {
                  "text": "Escaped meta character"
                },
                "fullDescription": {
                  "text": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character '[', ']' and '^', because those would need additional escaping inside a character class. Example: '\\d+\\.\\d+' After the quick-fix is applied: '\\d+[.]\\d+' New in 2017.1",
                  "markdown": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character `[`, `]` and `^`, because those would need additional escaping inside a character class.\n\n**Example:**\n\n\n      \\d+\\.\\d+\n\nAfter the quick-fix is applied:\n\n\n      \\d+[.]\\d+\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRepeatedSpace",
                "shortDescription": {
                  "text": "Consecutive spaces"
                },
                "fullDescription": {
                  "text": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier. Example: '(     )' After the quick-fix is applied: '( {5})' New in 2017.1",
                  "markdown": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateAlternationBranch",
                "shortDescription": {
                  "text": "Duplicate branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression. Example: '(alpha|bravo|charlie|alpha)' After the quick-fix is applied: '(alpha|bravo|charlie)' New in 2017.1",
                  "markdown": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression.\n\n**Example:**\n\n\n      (alpha|bravo|charlie|alpha)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo|charlie)\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IgnoreFileDuplicateEntry",
                "shortDescription": {
                  "text": "Ignore file duplicates"
                },
                "fullDescription": {
                  "text": "Reports duplicate entries (patters) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed. Example:     # Output directories\n    /out/\n    /target/\n    /out/",
                  "markdown": "Reports duplicate entries (patters) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed.\n\nExample:\n\n```\n    # Output directories\n    /out/\n    /target/\n    /out/\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Version control",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonStandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON standard"
                },
                "fullDescription": {
                  "text": "Reports the following discrepancies of a JSON file with the language specification: A line or block comment (configurable). Multiple top-level values (expect for JSON Lines files, configurable for others). A trailing comma in an object or array (configurable). A single quoted string. A property key is a not a double quoted strings. A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).",
                  "markdown": "Reports the following discrepancies of a JSON file with [the language specification](https://tools.ietf.org/html/rfc7159):\n\n* A line or block comment (configurable).\n* Multiple top-level values (expect for JSON Lines files, configurable for others).\n* A trailing comma in an object or array (configurable).\n* A single quoted string.\n* A property key is a not a double quoted strings.\n* A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckEmptyScriptTag",
                "shortDescription": {
                  "text": "Empty tag"
                },
                "fullDescription": {
                  "text": "Reports an empty tag (such as 'script') that does not work in some browsers.",
                  "markdown": "Reports an empty tag (such as `script`) that does not work in some browsers."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownOperator",
                "shortDescription": {
                  "text": "Unknown JSONPath operator"
                },
                "fullDescription": {
                  "text": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: 'in', 'nin', 'subsetof', 'anyof', 'noneof', 'size', 'empty', 'contains'.",
                  "markdown": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: `in`, `nin`, `subsetof`, `anyof`, `noneof`, `size`, `empty`, `contains`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.properties",
            "version": "213.7162",
            "rules": [
              {
                "id": "DuplicatePropertyInspection",
                "shortDescription": {
                  "text": "Duplicate property"
                },
                "fullDescription": {
                  "text": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values. Example: 'property1=value;\nproperty2=value;' The Options list allows selecting the area in which the inspection should search for duplicates.",
                  "markdown": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values.\n\nExample:\n\n\n    property1=value;\n    property2=value;\n\nThe **Options** list allows selecting the area in which the inspection should search for duplicates."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseEllipsisInPropertyInspection",
                "shortDescription": {
                  "text": "Three dot characters instead of the ellipsis"
                },
                "fullDescription": {
                  "text": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files.",
                  "markdown": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AlphaUnsortedPropertiesFile",
                "shortDescription": {
                  "text": "Properties file or resource bundle is alphabetically unsorted"
                },
                "fullDescription": {
                  "text": "Reports alphabetically unsorted resource bundles or .properties files.",
                  "markdown": "Reports alphabetically unsorted resource bundles or .properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFO",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrailingSpacesInProperty",
                "shortDescription": {
                  "text": "Trailing spaces in property"
                },
                "fullDescription": {
                  "text": "Reports all properties whose keys or values end with a whitespace.",
                  "markdown": "Reports all properties whose keys or values end with a whitespace.   "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedProperty",
                "shortDescription": {
                  "text": "Unused property"
                },
                "fullDescription": {
                  "text": "Reports all properties that are not referenced from the outside of the .properties file.",
                  "markdown": "Reports all properties that are not referenced from the outside of the .properties file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WrongPropertyKeyValueDelimiter",
                "shortDescription": {
                  "text": "Property key/value delimiter doesn't match code style settings"
                },
                "fullDescription": {
                  "text": "Reports properties in which key or value delimiters do not match code style settings.",
                  "markdown": "Reports properties in which key or value delimiters do not match code style settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.intelliLang",
            "version": "213.7162",
            "rules": [
              {
                "id": "InjectedReferences",
                "shortDescription": {
                  "text": "Injected references"
                },
                "fullDescription": {
                  "text": "Reports unresolved references injected by Language Injections. Example:     @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist",
                  "markdown": "Reports unresolved references injected by [Language Injections](https://www.jetbrains.com/help/idea/using-language-injections.html).\n\nExample:\n\n```\n    @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.plugins.staticAnalysis",
            "version": "213.7162",
            "rules": [
              {
                "id": "QodanaServiceMessage",
                "shortDescription": {
                  "text": "Qodana service message"
                },
                "fullDescription": {
                  "text": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems.",
                  "markdown": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          }
        ]
      },
      "invocations": [
        {
          "exitCode": 0,
          "toolExecutionNotifications": [
            {
              "message": {
                "text": "Reporting from [\"Unresolved references\"] 'sanity' inspections was suspended due to high problems count."
              },
              "level": "error"
            }
          ],
          "executionSuccessful": true
        }
      ],
      "language": "en-US",
      "versionControlProvenance": [
        {
          "repositoryUri": "https://github.com/School-Simplified/Timmy-SchoolSimplified",
          "revisionId": "aeca822704ba2c4acab31a64aecf9a9118c73236",
          "branch": "revert-209-dpy-2.0",
          "properties": {
            "lastAuthorName": "Eric",
            "vcsType": "Git",
            "lastAuthorEmail": "88685021+pandabear189@users.noreply.github.com",
            "tags": [
              "lastAuthorEmail",
              "lastAuthorName",
              "vcsType"
            ]
          }
        }
      ],
      "results": [
        {
          "ruleId": "PyDefaultArgumentInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Default argument value is mutable",
            "markdown": "Default argument value is mutable"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 80,
                  "charOffset": 5056,
                  "charLength": 2,
                  "snippet": {
                    "text": "[]"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 1,
                  "charOffset": 4951,
                  "charLength": 140,
                  "snippet": {
                    "text": "    )\n    async def info(\n            self, ctx: commands.Context, user: commands.Greedy[discord.User] = []\n    ):\n        for user in user:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2eaf73c3c02df3b40cb874ee05246331d2115acc83a43f2808e56b610efe5437"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'creds' might be referenced before assignment",
            "markdown": "Local variable 'creds' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 16,
                  "charOffset": 7543,
                  "charLength": 5,
                  "snippet": {
                    "text": "creds"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 223,
                  "startColumn": 1,
                  "charOffset": 7510,
                  "charLength": 40,
                  "snippet": {
                    "text": "            pass\n\n        return creds\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "222af4e3a1c5b0e499ef69c287eedf4f01f8e0018087cbe3ff19193e4046c56b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'value' might be referenced before assignment",
            "markdown": "Local variable 'value' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 12,
                  "charOffset": 578,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 533,
                  "charLength": 94,
                  "snippet": {
                    "text": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "daca76ca26781f74478d48d42fbb67be9c77bd98be9deaf1c1e25911a126a363"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 778,
                  "startColumn": 42,
                  "charOffset": 31121,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 776,
                  "startColumn": 1,
                  "charOffset": 31033,
                  "charLength": 143,
                  "snippet": {
                    "text": "                    )\n                finally:\n                    await ctx.send(embed=embed)\n        else:\n            embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "620276688b6dde3829e46c1334908c6fae15be6f938c0e24ecd63217ecb63ce0"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 991,
                  "startColumn": 46,
                  "charOffset": 40458,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 989,
                  "startColumn": 1,
                  "charOffset": 40358,
                  "charLength": 163,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c5646f4be317343e1464edd6af53694cb47f408d6eabcc647bb132aa7d517d0"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1179,
                  "startColumn": 46,
                  "charOffset": 49070,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1177,
                  "startColumn": 1,
                  "charOffset": 48970,
                  "charLength": 125,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n\n            else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f4616f935ed7ee7b8cc4abfb23e8cba55c1c067805f54ef06045bb6237e77a13"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1354,
                  "startColumn": 46,
                  "charOffset": 57788,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1352,
                  "startColumn": 1,
                  "charOffset": 57688,
                  "charLength": 163,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9a83d007a0bb63cf2e819d8aa0fa02f40ce368e3afed9d36434dae4ea42272d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1474,
                  "startColumn": 46,
                  "charOffset": 63492,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1472,
                  "startColumn": 1,
                  "charOffset": 63392,
                  "charLength": 163,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8ea7398b9edb3ea753160dc8b0e9d5589b5f91cc16086748b72a0d0af0ddcfd4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1554,
                  "startColumn": 46,
                  "charOffset": 67203,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1552,
                  "startColumn": 1,
                  "charOffset": 67103,
                  "charLength": 163,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d0fc7ff85e0ff32f5cd34557a70b9843d6d7d967567e430fa63f99b898198c7c"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'value' might be referenced before assignment",
            "markdown": "Local variable 'value' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 12,
                  "charOffset": 490,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 445,
                  "charLength": 94,
                  "snippet": {
                    "text": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d9fb06ba1811986c1f507b15b60da8d9623508fc340f06268235192988bdb60"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'value' might be referenced before assignment",
            "markdown": "Local variable 'value' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 12,
                  "charOffset": 955,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 910,
                  "charLength": 94,
                  "snippet": {
                    "text": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a08ee67fd92ae1f198c9fc705de42b0c4ccc730ad18b90c0cdd0576cc20427e9"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'query' might be referenced before assignment",
            "markdown": "Local variable 'query' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 13,
                  "charOffset": 2284,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "charOffset": 2244,
                  "charLength": 99,
                  "snippet": {
                    "text": "        )\n        if renew:\n            query.delete_instance()\n\n        await member.move_to(None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80ed2ac6d65c5dcb41dcffbfec13000f8d68b7d580e9469bdbcf9ef1acd73d2b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'query' might be referenced before assignment",
            "markdown": "Local variable 'query' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 9,
                  "charOffset": 2718,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 2664,
                  "charLength": 128,
                  "snippet": {
                    "text": "        await addLeaderboardProgress(member)\n\n        query.goal = goal\n        query.RenewalTime = renewal\n        query.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "15b1b1d32e3127c482ba22212bac1bbe7e7648b9e962f5bac1a536fec95c4952"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'msg' might be referenced before assignment",
            "markdown": "Local variable 'msg' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 12,
                  "charOffset": 4519,
                  "charLength": 3,
                  "snippet": {
                    "text": "msg"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "charOffset": 4462,
                  "charLength": 87,
                  "snippet": {
                    "text": "    if response == None:\n        msg = S3_URL\n    return msg, transcript_file, S3_URL\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "47f913d53f5be1e1ab4f0e2affd8060af48d1055038b83165f67bf38944e9c20"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 3856,
                  "snippet": {
                    "text": "\"\"\" SETUP: If you require a specific command to be protected, you can use the built in @is_botAdmin..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 11,
                  "snippet": {
                    "text": "\"\"\"\nSETUP:\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21ecaf7b41b2e1ba3a31ed5095553919c56647312a014e26f296c1d3e2586c09"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 65913,
                  "snippet": {
                    "text": "# TODO: Testing Feedback Modal, Testing TicketLockButton import asyncio import io import json impor..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 72,
                  "snippet": {
                    "text": "# TODO: Testing Feedback Modal, Testing TicketLockButton\n\nimport asyncio"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2e7103cbb0a33e8ee698ae0b2bbbe694fcb59edaef598316e9860cfe51372b93"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/docsapi.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 3843,
                  "snippet": {
                    "text": "from __future__ import print_function import os.path from google.cloud import speech_v1p1beta1 as ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 53,
                  "snippet": {
                    "text": "from __future__ import print_function\n\nimport os.path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d0bb3d50e8364d2bc6a6c5dbe4eaa5158a75820ed56a85f93e20d4e99e22bce"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 17670,
                  "snippet": {
                    "text": "import collections import os import sys from datetime import datetime from distutils.util import str..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 39,
                  "snippet": {
                    "text": "import collections\nimport os\nimport sys"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c25c08348e901d246394a4175715dca78ea6438e8055a690fad913f243d999c5"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6325,
                  "snippet": {
                    "text": "from typing import List from datetime import datetime import pprint import typing from dotenv import..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 67,
                  "snippet": {
                    "text": "from typing import List\nfrom datetime import datetime\nimport pprint"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71034ca6dc6396c231bf27dcf335021f4bee71bf97cf1f62a258497174b4be12"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 17042,
                  "snippet": {
                    "text": "import collections import json import os import subprocess import time import traceback from datetim..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 40,
                  "snippet": {
                    "text": "import collections\nimport json\nimport os"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "61b5f4161b26ad1706648f649e0ae4db120130729d85bb0b01a0fb6c2cd3245c"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 8110,
                  "snippet": {
                    "text": "import math import peewee import discord from core import common, database from core.common import ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 26,
                  "snippet": {
                    "text": "import math\n\nimport peewee"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9f2765ea8aad57eff2b89dab4af4978cbdb005df379d35dce875de168eff40d0"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 4004,
                  "snippet": {
                    "text": "import asyncio import json import os import re from datetime import datetime import discord import ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 36,
                  "snippet": {
                    "text": "import asyncio\nimport json\nimport os"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ed2a216ea1f748db8a9a1ef30cf2513e010438640753636f782a52c139cf0e79"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/CommandsOnly.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 1596,
                  "snippet": {
                    "text": "import discord from core import database from core.common import rulesDict from discord.ext import c..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 74,
                  "snippet": {
                    "text": "import discord\nfrom core import database\nfrom core.common import rulesDict"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fc276a01435f6fcdb197247304242a2dcadb54b72cd0fadeea766f033102cdd7"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 26867,
                  "snippet": {
                    "text": "# Copyright (c) 2015-2021 Rapptz # Copyright (c) 2022-present School Simplified import asyncio imp..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 80,
                  "snippet": {
                    "text": "# Copyright (c) 2015-2021 Rapptz\n# Copyright (c) 2022-present School Simplified\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "03a2aa0819d6868bb10efdb49c9c43738154001d81c25d7c97171c3394348f98"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/Blacklist.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2839,
                  "snippet": {
                    "text": "import discord from core import database from core.checks import slash_is_bot_admin_4, slash_is_bot_..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 107,
                  "snippet": {
                    "text": "import discord\nfrom core import database\nfrom core.checks import slash_is_bot_admin_4, slash_is_bot_admin_3"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "48d9badf1311f68e77f1ef69d224cf4152396515b6b5878b7a97cdd0f38c5856"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 27545,
                  "snippet": {
                    "text": "import asyncio import random import subprocess import sys import time from datetime import timedelta..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 46,
                  "snippet": {
                    "text": "import asyncio\nimport random\nimport subprocess"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "55bb933dec6b8aff12ee80828fe4bd9bf0559a83015348e74d4941a1bd2894d5"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/todocommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 3281,
                  "snippet": {
                    "text": "import discord from core import database from discord.ext import commands from core.common import h..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 73,
                  "snippet": {
                    "text": "import discord\nfrom core import database\nfrom discord.ext import commands"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "63720cefb6bcb5d7ebb3ed6493c092f0eafd942187c67fd55d7d8f0eab8877d1"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 18348,
                  "snippet": {
                    "text": "import subprocess import sys from pathlib import Path from threading import Thread from typing impor..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 53,
                  "snippet": {
                    "text": "import subprocess\nimport sys\nfrom pathlib import Path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4f7010d93fd33d7ce13fc9bc4e4698f6ef5d187aa203bc7344acc4628ce5147b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 4218,
                  "snippet": {
                    "text": "from __future__ import print_function import random import string from typing import Literal impor..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 52,
                  "snippet": {
                    "text": "from __future__ import print_function\n\nimport random"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b8baddbc8571b8b5c40d216b89cd964e23e8f4f8892fa08e603f608a980a0293"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/RedirectService.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2001,
                  "snippet": {
                    "text": "import os import aiohttp import discord from dotenv import load_dotenv from core.checks import is_bo..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 39,
                  "snippet": {
                    "text": "import os\nimport aiohttp\nimport discord"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a0018c5bd1d2cfc613c230c20e73d03f989cfc124fb92028efa2667d62f26bd"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6380,
                  "snippet": {
                    "text": "import discord from discord import ui from discord.ext import commands, tasks from core.common impor..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 77,
                  "snippet": {
                    "text": "import discord\nfrom discord import ui\nfrom discord.ext import commands, tasks"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8192153b91fcbd53a0825020dda76f9c851e2467a6c1e2cf80b334019eb9c106"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 69185,
                  "snippet": {
                    "text": "import datetime from datetime import datetime, timedelta import discord import pytz from core impor..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 57,
                  "snippet": {
                    "text": "import datetime\nfrom datetime import datetime, timedelta\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "96980f2a5e7e1a7bd83e04c0df1ea1c99b64d9cbe7121a27273dd9d0bdfc34b4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 30537,
                  "snippet": {
                    "text": "import asyncio import datetime from datetime import datetime, timedelta import discord from core im..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 71,
                  "snippet": {
                    "text": "import asyncio\nimport datetime\nfrom datetime import datetime, timedelta"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9b4dbba9d3ea00254fc8a48a84146b1af58133d4fdc0473fb58a4f930fd634e0"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 1393,
                  "snippet": {
                    "text": "import pytz import datetime from dateutil import parser import discord from discord.ext import tasks..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 55,
                  "snippet": {
                    "text": "import pytz\nimport datetime\nfrom dateutil import parser"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "201148ea1f4148c407381a64ce3f2169597938306f0951fcc22a491aaeadc0bb"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 14046,
                  "snippet": {
                    "text": "from datetime import datetime, timedelta import discord import pytz from core import database from ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 56,
                  "snippet": {
                    "text": "from datetime import datetime, timedelta\n\nimport discord"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "74edd886bf1c92a46dedc5f5c3f1e6f1e44168bfbef5c57dc7c0a8669c5720c2"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 8319,
                  "snippet": {
                    "text": "import asyncio import datetime from datetime import datetime, timedelta import pytz import discord ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 71,
                  "snippet": {
                    "text": "import asyncio\nimport datetime\nfrom datetime import datetime, timedelta"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "91ebe40388b4cedcb00d04e0b6bcfc50c29415bbeb33a2e92ae66652e0ff3127"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 20753,
                  "snippet": {
                    "text": "import random import string from datetime import datetime, timedelta from typing import Literal imp..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 68,
                  "snippet": {
                    "text": "import random\nimport string\nfrom datetime import datetime, timedelta"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "57f0f95afdf634718e795abbbdef82fb6f6572dd12124125c3e16821bb36596f"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 5446,
                  "snippet": {
                    "text": "from datetime import datetime, timedelta import discord import pytz from core import database from ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 56,
                  "snippet": {
                    "text": "from datetime import datetime, timedelta\n\nimport discord"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "09dd19e1bcfe94cbab4c664cc3db64ed89c8d720c5ca80afc2ff0baad3c9ffaa"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6029,
                  "snippet": {
                    "text": "import discord from core import database from core.common import TECH_ID, SandboxConfig, get_extensi..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 103,
                  "snippet": {
                    "text": "import discord\nfrom core import database\nfrom core.common import TECH_ID, SandboxConfig, get_extensions"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c9df53dd255d182d796c0cf12d991507ccf9a375b424a0e86946234e41ce4198"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 17151,
                  "snippet": {
                    "text": "from typing import Dict, List, Literal, Union from discord.ext import commands from discord.app_com..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 79,
                  "snippet": {
                    "text": "from typing import Dict, List, Literal, Union\n\nfrom discord.ext import commands"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a875e68649e8277e00c28dad949f93d6072dc2932d025b08b3d47efd1381e417"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/messagelogs.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2427,
                  "snippet": {
                    "text": "import datetime from datetime import datetime import discord from discord.ext import commands from ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 46,
                  "snippet": {
                    "text": "import datetime\nfrom datetime import datetime\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "644c057b3af21fc76226a697a9bd11eaa4782c6e1a944cb33f92ead7bfc39051"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 8128,
                  "snippet": {
                    "text": "import asyncio from datetime import datetime import os import discord import pytz from core.checks ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 54,
                  "snippet": {
                    "text": "import asyncio\nfrom datetime import datetime\nimport os"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "be661015ac448a101916003f55f6b145a2b8eede29d33d54d19c33f2ff216ee9"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 47058,
                  "snippet": {
                    "text": "import asyncio import io import os import typing from datetime import datetime, timedelta from pytz ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "import asyncio\nimport io\nimport os"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5b9613cf029fbe9deed0b9bd9bb0115e8a146c6d9c80798b8e3676303bdef8ff"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 10284,
                  "snippet": {
                    "text": "import discord from core.common import ( CH_ID, DIGITAL_ID, HR_ID, MKT_ID, STAFF..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 51,
                  "snippet": {
                    "text": "import discord\nfrom core.common import (\n    CH_ID,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab32de72f67f1d7c1c44c54f914aa0556f7ed47d0962306c538b1508b27b5ba5"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 4655,
                  "snippet": {
                    "text": "\"\"\" Copyright (C) School Simplified - All Rights Reserved * Permission is granted to use this appli..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 152,
                  "snippet": {
                    "text": "\"\"\"\nCopyright (C) School Simplified - All Rights Reserved\n * Permission is granted to use this application as a code reference for educational purposes."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a2ace664cabaf5cb94bed246ffe85157cb89c12e561627072c43ed2b61791503"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cog_tests.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 910,
                  "snippet": {
                    "text": "import os import sys from pathlib import Path import discord.ext.test as dpytest import pytest from..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "import os\nimport sys\nfrom pathlib import Path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2a770a9b12e71b954212f44c8c888d591bc30647ff4d86c212f3fe4370042b8"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPackageRequirementsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied",
            "markdown": "Package requirements 'aiohttp==3.8.1', 'aiosignal==1.2.0', 'anyio==3.5.0', 'appnope==0.1.2', 'astunparse==1.6.3', 'async-timeout==4.0.1', 'attrs==21.2.0', 'backcall==0.2.0', 'black==21.11b1', 'blinker==1.4', 'boto3==1.20.5', 'botocore==1.23.10', 'braceexpand==0.1.7', 'cachetools==4.2.4', 'certifi==2021.10.8', 'cffi==1.15.0', 'chardet==4.0.0', 'charset-normalizer==2.0.7', 'chat-exporter==2.1.1', 'click==8.0.3', 'configcat-client==5.0.0', 'cryptography==35.0.0', 'decorator==5.1.0', 'discord-sentry-reporting==2.0.4', 'discord.py', 'discord-ext-menus', 'dpytest==0.5.3', 'emoji==1.6.1', 'enum-compat==0.0.3', 'Flask==2.0.2', 'frozenlist==1.2.0', 'google-api-core==2.2.2', 'google-api-python-client==2.37.0', 'google-auth==2.3.3', 'google-auth-httplib2==0.1.0', 'google-auth-oauthlib==0.4.6', 'google-cloud-speech==2.12.0', 'google-cloud-texttospeech==2.8.0', 'google-cloud-storage==2.1.0', 'googleapis-common-protos==1.53.0', 'grapheme==0.6.0', 'grpcio==1.42.0', 'grpcio-status==1.42.0', 'gspread==4.0.1', 'gTTS==2.2.3', 'httplib2==0.20.2', 'idna==3.3', 'import-expression==1.1.4', 'iniconfig==1.1.1', 'ipdb==0.13.9', 'ipython==7.31.1', 'itsdangerous==2.0.1', 'jedi==0.18.1', 'Jinja2==3.0.3', 'jishaku', 'jmespath==0.10.0', 'libcst==0.4.1', 'logtail-python==0.1.2', 'MarkupSafe==2.0.1', 'matplotlib-inline==0.1.3', 'msgpack==1.0.2', 'multidict==5.2.0', 'mypy-extensions==0.4.3', 'newrelic==7.2.4.171', 'oauth2client==4.1.3', 'oauthlib==3.1.1', 'packaging==21.3', 'parso==0.8.3', 'pathspec==0.9.0', 'peewee==3.14.8', 'pexpect==4.8.0', 'pickleshare==0.7.5', 'platformdirs==2.4.0', 'pluggy==1.0.0', 'prompt-toolkit==3.0.23', 'proto-plus==1.19.8', 'protobuf==3.19.1', 'psutil==5.8.0', 'ptyprocess==0.7.0', 'py==1.11.0', 'pyasn1==0.4.8', 'pyasn1-modules==0.2.8', 'pycparser==2.21', 'Pygments==2.10.0', 'PyMySQL==1.0.2', 'pyOpenSSL==21.0.0', 'pyparsing==3.0.6', 'pytest==6.2.5', 'pytest-asyncio==0.16.0', 'python-dateutil==2.8.2', 'python-dotenv==0.19.2', 'pytz==2021.3', 'PyYAML==6.0', 'regex==2021.11.10', 'requests==2.26.0', 'requests-oauthlib==1.3.0', 'rsa==4.7.2', 's3transfer==0.5.0', 'semver==2.13.0', 'sentry-sdk==1.4.3', 'setproctitle==1.2.2', 'six==1.16.0', 'sniffio==1.2.0', 'tdqm==0.0.1', 'toml==0.10.2', 'tomli==1.2.2', 'tqdm==4.62.3', 'traitlets==5.1.1', 'typing-inspect==0.7.1', 'typing_extensions==4.0.0', 'uritemplate==4.1.1', 'urllib3==1.26.7', 'wcwidth==0.2.5', 'Werkzeug==2.0.2', 'ws4py==0.5.1', 'yarl==1.7.2', 'google-cloud-secret-manager==2.8.0', 'alive-progress==2.3.1' are not satisfied"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2206,
                  "snippet": {
                    "text": "aiohttp==3.8.1 aiosignal==1.2.0 anyio==3.5.0 appnope==0.1.2 astunparse==1.6.3 async-timeout==4.0.1 a..."
                  },
                  "sourceLanguage": "TEXT"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "aiohttp==3.8.1\naiosignal==1.2.0\nanyio==3.5.0"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c353801ec76a7f4df4a87cb68cfd25fb186753680a20b8537234d3e5be807d84"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter r_id in docstring",
            "markdown": "Missing parameter r_id in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 30,
                  "charOffset": 2794,
                  "charLength": 9,
                  "snippet": {
                    "text": "r_id: str"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 2740,
                  "charLength": 114,
                  "snippet": {
                    "text": "        return ListData\n\n    def fetch_redirect(self, r_id: str) -> RedirectPizza:\n        \"\"\"Fetches a redirect.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c540045d85522766746c949e9a5261efd023dacebdd4914b71ce152c48ca0f7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unexpected parameter url_code in docstring",
            "markdown": "Unexpected parameter url_code in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 13,
                  "charOffset": 2881,
                  "charLength": 8,
                  "snippet": {
                    "text": "url_code"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 105,
                  "startColumn": 1,
                  "charOffset": 2854,
                  "charLength": 139,
                  "snippet": {
                    "text": "\n        Args:\n            url_code (str): The URL code to fetch.\n            domain (str, optional): The domain to use. Defaults to None.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d581e9081f0f36734fea24c3f63c6b04ceb0e38ac4c8793aa9a247bf7864bff"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unexpected parameter domain in docstring",
            "markdown": "Unexpected parameter domain in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 13,
                  "charOffset": 2932,
                  "charLength": 6,
                  "snippet": {
                    "text": "domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 2855,
                  "charLength": 154,
                  "snippet": {
                    "text": "        Args:\n            url_code (str): The URL code to fetch.\n            domain (str, optional): The domain to use. Defaults to None.\n\n        Raises:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d304b43cdf8c4609b3368f98473928da2e76dc5965cf16ffe059c6ec55ebc45b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter r_id in docstring",
            "markdown": "Missing parameter r_id in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 28,
                  "charOffset": 5629,
                  "charLength": 9,
                  "snippet": {
                    "text": "r_id: str"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 189,
                  "startColumn": 1,
                  "charOffset": 5591,
                  "charLength": 108,
                  "snippet": {
                    "text": "        )\n\n    def del_redirect(self, r_id: str) -> typing.Union[dict, int]:\n        \"\"\"Deletes a redirect.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d24c12d4c796efaf055b1b8ee1977d0fe50a47e4128f2f53194ecfc1578bb2b4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unexpected parameter redirect_url in docstring",
            "markdown": "Unexpected parameter redirect_url in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 13,
                  "charOffset": 5726,
                  "charLength": 12,
                  "snippet": {
                    "text": "redirect_url"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 193,
                  "startColumn": 1,
                  "charOffset": 5699,
                  "charLength": 139,
                  "snippet": {
                    "text": "\n        Args:\n            redirect_url (str): The URL to delete.\n            domain (str, optional): The domain to use. Defaults to None.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e3504cd22faf998e142dc0c11672e98df2582af3d223366a4d20d87a65a3a589"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unexpected parameter domain in docstring",
            "markdown": "Unexpected parameter domain in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 13,
                  "charOffset": 5777,
                  "charLength": 6,
                  "snippet": {
                    "text": "domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 194,
                  "startColumn": 1,
                  "charOffset": 5700,
                  "charLength": 154,
                  "snippet": {
                    "text": "        Args:\n            redirect_url (str): The URL to delete.\n            domain (str, optional): The domain to use. Defaults to None.\n\n        Raises:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "97c35f31ffdf109259bf585aff0fbd4f4f1940e4f74c4eb2e499ee27fea30e6c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter self in docstring",
            "markdown": "Missing parameter self in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 16,
                  "charOffset": 4565,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 4548,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "74e36bf6345c76c1a38f025fe3d8ede589ae4c9857f5f37d1fa89911328f3a4b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter sandbox in docstring",
            "markdown": "Missing parameter sandbox in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 34,
                  "charOffset": 4583,
                  "charLength": 21,
                  "snippet": {
                    "text": "sandbox: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 4548,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c02864f3b091392a75caf96607b2a6555dd087f3896d5e2c8545db9c9f56d7c7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter sandbox in docstring",
            "markdown": "Missing parameter sandbox in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 59,
                  "charOffset": 8671,
                  "charLength": 21,
                  "snippet": {
                    "text": "sandbox: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 275,
                  "startColumn": 1,
                  "charOffset": 8599,
                  "charLength": 152,
                  "snippet": {
                    "text": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "86f802b1d16f35d904b042f123a8e48789dca679dd081417a3f8d457a4baee2b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 12,
                  "charOffset": 3391,
                  "charLength": 18,
                  "snippet": {
                    "text": "lobbyStart == None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 3246,
                  "charLength": 232,
                  "snippet": {
                    "text": "        print(self.LobbyStartIDs[member.guild.id])\n        lobbyStart = member.guild.get_channel(self.LobbyStartIDs[member.guild.id])\n        if lobbyStart == None:\n            try:\n                lobbyStart = self.bot.get_channel("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a560279693087a6ac7bff2fad39ca93746275bcfdbe60404f628edbb0082f197"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 8,
                  "charOffset": 3964,
                  "charLength": 16,
                  "snippet": {
                    "text": "response != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 1,
                  "charOffset": 3898,
                  "charLength": 162,
                  "snippet": {
                    "text": "    embed.add_field(name=\"Transcript Link\", value=S3_URL)\n\n    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5cccda372efdc6358e7cc905a4e302b47ed6773dd37a7ca48b0829305e4a6b69"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 8,
                  "charOffset": 4036,
                  "charLength": 23,
                  "snippet": {
                    "text": "responsesauthor != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 3957,
                  "charLength": 160,
                  "snippet": {
                    "text": "    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:\n        for UAuthor in responsesauthor:\n            try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2e8b4859df97eb8d4df94b60f022fd37e4ee10194aa6de3bc212918afe5bd45b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 8,
                  "charOffset": 4469,
                  "charLength": 16,
                  "snippet": {
                    "text": "response == None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 152,
                  "startColumn": 1,
                  "charOffset": 4448,
                  "charLength": 99,
                  "snippet": {
                    "text": "        pass\n\n    if response == None:\n        msg = S3_URL\n    return msg, transcript_file, S3_URL"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2617a89bcfc2c03a002d25013b9debe1841bd6bab857cb2fc19a9b86c423ae9e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "RegExpRedundantEscape",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant character escape '\\]' in RegExp",
            "markdown": "Redundant character escape `\\]` in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 58,
                  "charOffset": 2112,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\]"
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "charOffset": 2032,
                  "charLength": 158,
                  "snippet": {
                    "text": "\n                else:\n                    banReason = re.match(r\"[^[]*\\[([^]]*)\\]\", banReasonAUDIT).groups()[\n                        0\n                    ]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "443056e4c246dc29c2a17dde12084338f742ad76cb33ce4ddeaa41ca1147812d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'on_error' may be 'static'",
            "markdown": "Method `on_error` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 15,
                  "charOffset": 5273,
                  "charLength": 8,
                  "snippet": {
                    "text": "on_error"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 5211,
                  "charLength": 308,
                  "snippet": {
                    "text": "            await self.message.edit(view=None)\n\n    async def on_error(self, error: Exception, item: discord.ui.Item, interaction: discord.Interaction) -> None:\n        if interaction.response.is_done():\n            await interaction.followup.send(f'An unknown error occurred, sorry {error}', ephemeral=True)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "12d58ebe975516ea7144e85aec107fceaffe264d097a0875b7fac269fcd52224"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'is_paginating' may be 'static'",
            "markdown": "Method `is_paginating` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 9,
                  "charOffset": 14982,
                  "charLength": 13,
                  "snippet": {
                    "text": "is_paginating"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 357,
                  "startColumn": 1,
                  "charOffset": 14932,
                  "charLength": 165,
                  "snippet": {
                    "text": "\nclass FrontPageSource(menus.PageSource):\n    def is_paginating(self) -> bool:\n        # This forces the buttons to appear even in the front page\n        return True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f60d5c40fcfbf486a71868c54c121432bfb5caf147425cf1e76b404a486265ea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'get_max_pages' may be 'static'",
            "markdown": "Method `get_max_pages` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 9,
                  "charOffset": 15107,
                  "charLength": 13,
                  "snippet": {
                    "text": "get_max_pages"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 361,
                  "startColumn": 1,
                  "charOffset": 15078,
                  "charLength": 184,
                  "snippet": {
                    "text": "        return True\n\n    def get_max_pages(self) -> Optional[int]:\n        # There's only one actual page in the front page\n        # However we need at least 2 to show all the buttons"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "213e8f3dc497deabec05275ebd4ba8059af898cce9f03527336bcc2c250b6324"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'interaction_check' may be 'static'",
            "markdown": "Method `interaction_check` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 15,
                  "charOffset": 788,
                  "charLength": 17,
                  "snippet": {
                    "text": "interaction_check"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 750,
                  "charLength": 162,
                  "snippet": {
                    "text": "        self.bot = bot\n\n    async def interaction_check(self, interaction: discord.Interaction) -> bool:\n        return interaction.user.id == 752984497259151370\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37ce0765356c00c1ee6c7fba5b95dd69c4c33b0aeb3b7d4851226250ad121df6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'cog_load' may be 'static'",
            "markdown": "Method `cog_load` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 15,
                  "charOffset": 15537,
                  "charLength": 8,
                  "snippet": {
                    "text": "cog_load"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 407,
                  "startColumn": 1,
                  "charOffset": 15443,
                  "charLength": 210,
                  "snippet": {
                    "text": "        return discord.PartialEmoji(name=\"TurtleSmirk\", id=957074334084644874)\n\n    async def cog_load(self) -> None:\n        for user_id in database.ResponseSpamBlacklist:\n            blacklist.append(user_id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0fb81a223f17bfda8779644aa9516890759ec6f625843efac78e6ff95604dbc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'before_invoke' may be 'static'",
            "markdown": "Method `before_invoke` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 15,
                  "charOffset": 1843,
                  "charLength": 13,
                  "snippet": {
                    "text": "before_invoke"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 1771,
                  "charLength": 157,
                  "snippet": {
                    "text": "        return await on_command_error_(self, ctx, error)\n\n    async def before_invoke(self, ctx: commands.Context):\n        return await before_invoke_(ctx)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "843961a68181d62d0f7b170330c09bddfb530f3608ae9bbee25c4cfa5725fc0a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'check' may be 'static'",
            "markdown": "Method `check` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 15,
                  "charOffset": 1943,
                  "charLength": 5,
                  "snippet": {
                    "text": "check"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 1887,
                  "charLength": 135,
                  "snippet": {
                    "text": "        return await before_invoke_(ctx)\n\n    async def check(self, ctx: commands.Context):\n        return await main_mode_check_(ctx)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa172d0bb7d1cf5f53f2ffe1fd3557680b2ace615840ccf286d512f5a566d10b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyArgumentListInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Parameter 'name' unfilled",
            "markdown": "Parameter 'name' unfilled"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 39,
                  "charOffset": 4793,
                  "charLength": 1,
                  "snippet": {
                    "text": ")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 4725,
                  "charLength": 128,
                  "snippet": {
                    "text": "\ndef prompt_config(msg, key):\n    config, config_file = load_config()\n    if key not in config:\n        config[key] = input(msg)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d5ff356ff3367493b7656e00616dd2137e7d8ee29ffdcede4810d7cf5a7ec7d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyArgumentListInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Parameter 'name' unfilled",
            "markdown": "Parameter 'name' unfilled"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 39,
                  "charOffset": 5009,
                  "charLength": 1,
                  "snippet": {
                    "text": ")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 159,
                  "startColumn": 1,
                  "charOffset": 4940,
                  "charLength": 130,
                  "snippet": {
                    "text": "\ndef prompt_config2(msg, key):\n    config, config_file = load_config()\n    config[key] = msg\n    with config_file.open(\"w+\") as f:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ff969ae9602565c44385991e9a1547c36cc37b493dedd2aaeb1e02d46d3b5984"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'ctx' value is not used",
            "markdown": "Parameter 'ctx' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 19,
                  "charOffset": 3577,
                  "charLength": 3,
                  "snippet": {
                    "text": "ctx"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 153,
                  "startColumn": 1,
                  "charOffset": 3557,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n\ndef TimmyBetaHost(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c1faf3649a960e545e30f0f5054bee41f41bc2991b37b1f2776005271a38a3d9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'response' value is not used",
            "markdown": "Local variable 'response' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 9,
                  "charOffset": 8242,
                  "charLength": 8,
                  "snippet": {
                    "text": "response"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 245,
                  "startColumn": 1,
                  "charOffset": 8219,
                  "charLength": 99,
                  "snippet": {
                    "text": "    )\n    try:\n        response = s3_client.upload_file(\n            file_name,\n            bucket,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d611c573e17deee59ede6509eeffc32b69599c9dbc5631eceaf38c876ba20d2b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1437,
                  "startColumn": 53,
                  "charOffset": 54597,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1435,
                  "startColumn": 1,
                  "charOffset": 54516,
                  "charLength": 181,
                  "snippet": {
                    "text": "    )\n    async def confirm(\n            self, interaction: discord.Interaction, button: discord.ui.Button,\n    ):\n        TranscriptLOG = self.bot.get_channel(TECH_ID.ch_ticketLog)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6d3edbef1de4521ffd729aab7853ef909bb6570bd2d91ac0c71f7ec5d6315356"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1446,
                  "startColumn": 62,
                  "charOffset": 54988,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1444,
                  "startColumn": 1,
                  "charOffset": 54845,
                  "charLength": 262,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.message.delete()\n        await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5c639c9a375f5bb6e419ef6e07af22aef1b71296901ab6efc462623c6c865b0d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1467,
                  "startColumn": 60,
                  "charOffset": 55595,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1465,
                  "startColumn": 1,
                  "charOffset": 55510,
                  "charLength": 196,
                  "snippet": {
                    "text": "        emoji=\"🔒\",\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        ch = self.bot.get_channel(interaction.channel_id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "075dba063c133bfdf21179b18e621f0e9cf5c1d117be5a0854402b2a6b6a1a3f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'msg' value is not used",
            "markdown": "Local variable 'msg' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1472,
                  "startColumn": 9,
                  "charOffset": 55783,
                  "charLength": 3,
                  "snippet": {
                    "text": "msg"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1470,
                  "startColumn": 1,
                  "charOffset": 55707,
                  "charLength": 190,
                  "snippet": {
                    "text": "        TempConfirmInstance = TechnicalCommissionConfirm(self.bot)\n\n        msg = await ch.send(\n            \"Are you sure you want to close this ticket?\", view=TempConfirmInstance\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f170c2a64a83d27c29b873a6776244798faf15a9f00a6b4aaecf2d0c96f7a3c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1488,
                  "startColumn": 26,
                  "charOffset": 56243,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1486,
                  "startColumn": 1,
                  "charOffset": 56180,
                  "charLength": 152,
                  "snippet": {
                    "text": "        emoji=Emoji.gsuitelogo,\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "077a81cc06cf10704274e9c1357ab0ad615c32660a2fb9de8406f091237ff903"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1488,
                  "startColumn": 60,
                  "charOffset": 56277,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1486,
                  "startColumn": 1,
                  "charOffset": 56180,
                  "charLength": 152,
                  "snippet": {
                    "text": "        emoji=Emoji.gsuitelogo,\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f3a845ba80eeb436d3cff2964aa1ebb0b52ced798ef710dd03e357502bb96851"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1504,
                  "startColumn": 19,
                  "charOffset": 56653,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1502,
                  "startColumn": 1,
                  "charOffset": 56606,
                  "charLength": 140,
                  "snippet": {
                    "text": "    )\n    async def confirm(\n            self, interaction: discord.Interaction, button: discord.ui.Button,\n    ):\n        self.value = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb60d522ed8deaa7fa8b68044edd67eec9b815f98d4be3abbc49447245d65f12"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1504,
                  "startColumn": 53,
                  "charOffset": 56687,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1502,
                  "startColumn": 1,
                  "charOffset": 56606,
                  "charLength": 140,
                  "snippet": {
                    "text": "    )\n    async def confirm(\n            self, interaction: discord.Interaction, button: discord.ui.Button,\n    ):\n        self.value = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b5ce10a5d8ec6975b91af88110f54062deec1b50011b046a016419aff555e32"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1510,
                  "startColumn": 62,
                  "charOffset": 56910,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1508,
                  "startColumn": 1,
                  "charOffset": 56767,
                  "charLength": 275,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.send_message(\"Cancelling\", ephemeral=True)\n        self.value = False"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d92beb1ab4c841c7e653a21f91395c438b480d60adbbaa2a3a5a46fe6f7e1b77"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1526,
                  "startColumn": 61,
                  "charOffset": 57385,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1524,
                  "startColumn": 1,
                  "charOffset": 57272,
                  "charLength": 206,
                  "snippet": {
                    "text": "        custom_id=\"persistent_view:nitrofake\",\n    )\n    async def claim(self, interaction: discord.Interaction, button: discord.ui.Button):\n        try:\n            await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d912cfec059ae7434c3e066ed207023f9b5b20a5cf44a9e2fb491dafe8fe21c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1552,
                  "startColumn": 60,
                  "charOffset": 58561,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1550,
                  "startColumn": 1,
                  "charOffset": 58476,
                  "charLength": 196,
                  "snippet": {
                    "text": "        emoji=\"🔒\",\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        ch = self.bot.get_channel(interaction.channel_id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6d416ef2d6ad90007bcadf2a06e7c147585a79225432498d8663cc336ea42120"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'msg' value is not used",
            "markdown": "Local variable 'msg' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1557,
                  "startColumn": 9,
                  "charOffset": 58732,
                  "charLength": 3,
                  "snippet": {
                    "text": "msg"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1555,
                  "startColumn": 1,
                  "charOffset": 58673,
                  "charLength": 173,
                  "snippet": {
                    "text": "        TempConfirmInstance = TicketTempConfirm()\n\n        msg = await ch.send(\n            \"Are you sure you want to close this ticket?\", view=TempConfirmInstance\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c60251b745882902f8628096a03967eaf52d89e0e2472b5637d46c32214e002f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1574,
                  "startColumn": 19,
                  "charOffset": 59174,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1572,
                  "startColumn": 1,
                  "charOffset": 59127,
                  "charLength": 140,
                  "snippet": {
                    "text": "    )\n    async def confirm(\n            self, interaction: discord.Interaction, button: discord.ui.Button,\n    ):\n        self.value = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f483e13d10147476db7b5a473538c178c43c401103a641a0d79d0407dcf2b688"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1574,
                  "startColumn": 53,
                  "charOffset": 59208,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1572,
                  "startColumn": 1,
                  "charOffset": 59127,
                  "charLength": 140,
                  "snippet": {
                    "text": "    )\n    async def confirm(\n            self, interaction: discord.Interaction, button: discord.ui.Button,\n    ):\n        self.value = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f10d2ecb03da034eccddc306ec77131f8b909eb794b9f5eee114d97b3d10fc7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1580,
                  "startColumn": 62,
                  "charOffset": 59431,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1578,
                  "startColumn": 1,
                  "charOffset": 59288,
                  "charLength": 275,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.send_message(\"Cancelling\", ephemeral=True)\n        self.value = False"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a587cfdc529e6a126c36b6f650aff3838b158fc1213009779e12d1f06fcc27d9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'response' value is not used",
            "markdown": "Local variable 'response' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1633,
                  "startColumn": 9,
                  "charOffset": 61269,
                  "charLength": 8,
                  "snippet": {
                    "text": "response"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1631,
                  "startColumn": 1,
                  "charOffset": 61250,
                  "charLength": 83,
                  "snippet": {
                    "text": "        }\n\n        response = requests.post(url, headers=headers, data=str(data))\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "785af5ba241b32d24fac82e813cf88385c3caa3c0755e6b0ed5d8495ddbba263"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1648,
                  "startColumn": 53,
                  "charOffset": 61726,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1646,
                  "startColumn": 1,
                  "charOffset": 61637,
                  "charLength": 154,
                  "snippet": {
                    "text": "    )\n    async def feedback_button(\n            self, interaction: discord.Interaction, button: discord.ui.Button,\n    ):\n        modal = FeedbackModel()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ed2b443d15fc9f2979e2ec448171cd644434560417a544bd59ffa268bf9250d5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'result' value is not used",
            "markdown": "Local variable 'result' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1684,
                  "startColumn": 9,
                  "charOffset": 62685,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1682,
                  "startColumn": 1,
                  "charOffset": 62667,
                  "charLength": 106,
                  "snippet": {
                    "text": "    try:\n\n        result = subprocess.run(\n            f\"cd && cd {main_or_beta}\",\n            shell=True,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1439a7e160db092f54620c000bac21fbf403e059b94501403974284afc774dda"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'request_id' value is not used",
            "markdown": "Parameter 'request_id' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/docsapi.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 14,
                  "charOffset": 514,
                  "charLength": 10,
                  "snippet": {
                    "text": "request_id"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 499,
                  "charLength": 91,
                  "snippet": {
                    "text": "\n\ndef callback(request_id, response, exception):\n    if exception:\n        print(exception)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f1e4ab1f1cbf0572a077bc4847180a02a5b256c213b0e4ccdb48faa143c4b68a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'result' value is not used",
            "markdown": "Local variable 'result' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/docsapi.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 5,
                  "charOffset": 3346,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "charOffset": 3335,
                  "charLength": 134,
                  "snippet": {
                    "text": "    ]\n\n    result = (\n        drive_service.documents()\n        .batchUpdate(documentId=document_copy_id, body={\"requests\": requests})"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d3b8d2282ea39cf659f8fdbff2d45a3c17422e61ea5290887f2587730189dea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'exc' value is not used",
            "markdown": "Parameter 'exc' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 742,
                  "startColumn": 15,
                  "charOffset": 16619,
                  "charLength": 3,
                  "snippet": {
                    "text": "exc"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 740,
                  "startColumn": 1,
                  "charOffset": 16582,
                  "charLength": 122,
                  "snippet": {
                    "text": "\n@app.teardown_request\ndef _db_close(exc):\n    \"\"\"\n    This hook ensures that the connection is closed when we've finished"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a3c3c20f0efee9b66e3b2ef936923108849487b8a8d61affc1d3034c8d460d7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'object' value is not used",
            "markdown": "Local variable 'object' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 9,
                  "charOffset": 3427,
                  "charLength": 6,
                  "snippet": {
                    "text": "object"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 3341,
                  "charLength": 172,
                  "snippet": {
                    "text": "        if r.status_code == 422:\n            raise InvalidAuth(r.status_code)\n        object = range(len(r.json()))\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9fcfb700f19601b9845883a6a9a114b5bd555b1667e9fa69d73085320fc30257"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'object' value is not used",
            "markdown": "Local variable 'object' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 9,
                  "charOffset": 5159,
                  "charLength": 6,
                  "snippet": {
                    "text": "object"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 1,
                  "charOffset": 5077,
                  "charLength": 152,
                  "snippet": {
                    "text": "            raise InvalidAuth(r.status_code)\n        print(r.status_code)\n        object = range(len(r.json()[\"data\"]))\n        pprint.pprint(r.json())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0ac9289f08aa09564a2033199a27d2e6a320c5c45f65f5c6c0f44da652a5119"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'page_size' value is not used",
            "markdown": "Parameter 'page_size' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 21,
                  "charOffset": 3826,
                  "charLength": 14,
                  "snippet": {
                    "text": "page_size: int"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 3761,
                  "charLength": 197,
                  "snippet": {
                    "text": "        \"\"\"List all tags in the database\"\"\"\n\n        def get_end(page_size: int):\n            database.db.connect(reuse_if_open=True)\n            tags: int = database.PunishmentTag.select().count()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f7687a3e1b0ae5e6b8a53f2f8b27cd2eb7c377272084189dd4006fbf5a570129"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'embed' value is not used",
            "markdown": "Local variable 'embed' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 9,
                  "charOffset": 4683,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 4626,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n        embed = discord.Embed(title=\"Tag List\")\n        embed = await common.paginate_embed(\n            self.bot, ctx, embed, populate_embed, get_end(10), page=page\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "92ec48942a00786d740970da0c08b13c1b06f4e6f95b6d38ce1cb34b642e08ea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'value' value is not used",
            "markdown": "Local variable 'value' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 13,
                  "charOffset": 5143,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 140,
                  "startColumn": 1,
                  "charOffset": 5092,
                  "charLength": 119,
                  "snippet": {
                    "text": "            user: discord.User = user\n\n            value = None\n            typeval = None\n            banreason = None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "06726648b859be24559560c62a99f0c5f5c81103abcc3543cfca83a76682dc83"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'typeval' value is not used",
            "markdown": "Local variable 'typeval' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 13,
                  "charOffset": 5168,
                  "charLength": 7,
                  "snippet": {
                    "text": "typeval"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 141,
                  "startColumn": 1,
                  "charOffset": 5130,
                  "charLength": 82,
                  "snippet": {
                    "text": "\n            value = None\n            typeval = None\n            banreason = None\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "be33c304ca01849e67b0a1229096e17aefd9ee8e59ce5bbeb3e8209d3f4a0f6e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'user' value is not used",
            "markdown": "Parameter 'user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 42,
                  "charOffset": 1085,
                  "charLength": 4,
                  "snippet": {
                    "text": "user"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1014,
                  "charLength": 194,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener()\n    async def on_member_ban(self, guild, user):\n        \"\"\"\n        Pycord doesn't give us the information we need so we need to dig deeper and query the audit logs"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "55d471749eb4a1a174d8ff14ef73595b7673607080224083974ddb2692032a40"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'item' value is not used",
            "markdown": "Parameter 'item' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 48,
                  "charOffset": 5306,
                  "charLength": 21,
                  "snippet": {
                    "text": "item: discord.ui.Item"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 5211,
                  "charLength": 308,
                  "snippet": {
                    "text": "            await self.message.edit(view=None)\n\n    async def on_error(self, error: Exception, item: discord.ui.Item, interaction: discord.Interaction) -> None:\n        if interaction.response.is_done():\n            await interaction.followup.send(f'An unknown error occurred, sorry {error}', ephemeral=True)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "20c21330719c9656eb1c650388da45e24f0ae382e295c1fdf0c03f3222e66300"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 72,
                  "charOffset": 6388,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 148,
                  "startColumn": 1,
                  "charOffset": 6250,
                  "charLength": 246,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label='≪', style=discord.ButtonStyle.grey)\n    async def go_to_first_page(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        \"\"\"go to the first page\"\"\"\n        await self.show_page(interaction, 0)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2aef98de0a67b5958e4dddb508fac3118fd4e6e2c953ac60b75b1e3d918c291b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 75,
                  "charOffset": 6644,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 153,
                  "startColumn": 1,
                  "charOffset": 6497,
                  "charLength": 285,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label='Back', style=discord.ButtonStyle.blurple)\n    async def go_to_previous_page(self, interaction: discord.Interaction, button: discord.ui.Button):\n        \"\"\"go to the previous page\"\"\"\n        await self.show_checked_page(interaction, self.current_page - 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78f9333e04e76e98b7efe6230d703da031caf8368506da7ce1c622b936a0b6c5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 71,
                  "charOffset": 7128,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 162,
                  "startColumn": 1,
                  "charOffset": 6985,
                  "charLength": 278,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label='Next', style=discord.ButtonStyle.blurple)\n    async def go_to_next_page(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        \"\"\"go to the next page\"\"\"\n        await self.show_checked_page(interaction, self.current_page + 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b39f9a5b34ba12267ae3b811587ef4b0bdb2d084f7bd52c9e94147d7734a4f6b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 71,
                  "charOffset": 7401,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 167,
                  "startColumn": 1,
                  "charOffset": 7264,
                  "charLength": 263,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label='≫', style=discord.ButtonStyle.grey)\n    async def go_to_last_page(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        \"\"\"go to the last page\"\"\"\n        # The call here is safe because it's guarded by skip_if"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ba1568dc819d8694cdcc1b1877f174ad81eb985fc100305696033515be257eb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 69,
                  "charOffset": 7752,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 1,
                  "charOffset": 7603,
                  "charLength": 265,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label='Skip to page...', style=discord.ButtonStyle.grey)\n    async def numbered_page(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        \"\"\"lets you type a page number to go to\"\"\"\n        if self.input_lock.locked():"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "606325eb16b3f813e74093fae5cbe9c339cf4e32ac942abc910639fbd9433cfb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 66,
                  "charOffset": 8996,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 201,
                  "startColumn": 1,
                  "charOffset": 8862,
                  "charLength": 249,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label='Quit', style=discord.ButtonStyle.red)\n    async def stop_pages(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        \"\"\"stops the pagination session.\"\"\"\n        await interaction.response.defer()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9aa97d195b2cd5613a506381c5073730225727c1ae0734ed197dd0733b3edc05"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'menu' value is not used",
            "markdown": "Parameter 'menu' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 27,
                  "charOffset": 15452,
                  "charLength": 14,
                  "snippet": {
                    "text": "menu: HelpMenu"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 371,
                  "startColumn": 1,
                  "charOffset": 15405,
                  "charLength": 195,
                  "snippet": {
                    "text": "        return self\n\n    def format_page(self, menu: HelpMenu, page):\n        embed = discord.Embed(title='Bot Help', colour=discord.Colour.gold()())\n        embed.description = inspect.cleandoc("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6216c6c36a8d2915b79c945d23b23fa847bd15e832b0dbcabb24fbb1224a04cc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'page' value is not used",
            "markdown": "Parameter 'page' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 43,
                  "charOffset": 15468,
                  "charLength": 4,
                  "snippet": {
                    "text": "page"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 371,
                  "startColumn": 1,
                  "charOffset": 15405,
                  "charLength": 195,
                  "snippet": {
                    "text": "        return self\n\n    def format_page(self, menu: HelpMenu, page):\n        embed = discord.Embed(title='Bot Help', colour=discord.Colour.gold()())\n        embed.description = inspect.cleandoc("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eed7da985a735c78f908ed0df2d1b3108591e339592fbd9e2a97b3930e9d5c2c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'CheckDB' value is not used",
            "markdown": "Local variable 'CheckDB' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 9,
                  "charOffset": 2592,
                  "charLength": 7,
                  "snippet": {
                    "text": "CheckDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2530,
                  "charLength": 205,
                  "snippet": {
                    "text": "    @filters.command()\n    async def list(self, ctx):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d07a489c2f5ddcaaea25dd8a8cb44179ed9cb5f988b37664fb07f49f482ebfe6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'result' value is not used",
            "markdown": "Local variable 'result' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 13,
                  "charOffset": 17115,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 519,
                  "startColumn": 1,
                  "charOffset": 17089,
                  "charLength": 122,
                  "snippet": {
                    "text": "        try:\n\n            result = subprocess.run(\n                f\"cd && cd {main_or_beta}\",\n                shell=True,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "55a7d1bb778e7395efc6300152f9009e17be1c988c43275dddc1c677d2d0b158"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'i' value is not used",
            "markdown": "Local variable 'i' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 42,
                  "charOffset": 480,
                  "charLength": 1,
                  "snippet": {
                    "text": "i"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 406,
                  "charLength": 95,
                  "snippet": {
                    "text": "\n    rnd = random.SystemRandom()\n    return \"\".join(rnd.choice(chars) for i in range(length))\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6a01613b4b3ec62ea193a92dc79df0999487c0e495c2f0428e8724c2369ed654"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 62,
                  "charOffset": 2959,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 2872,
                  "charLength": 217,
                  "snippet": {
                    "text": "        emoji=\"📝\",\n    )\n    async def verify(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        modal = BotRequestModal(self.bot)\n        return await interaction.response.send_modal(modal)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "65f937a4a5132d678bfc27268a8a670fb4e079759b96036b10f345b2944a04c9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 9,
                  "charOffset": 5844,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 169,
                  "startColumn": 1,
                  "charOffset": 5804,
                  "charLength": 156,
                  "snippet": {
                    "text": "\n        guild = TECH_ID.g_tech\n        channel: discord.TextChannel = self.bot.get_channel(TECH_ID.ch_botreq)\n\n        thread = ...  # type: discord.Thread"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "06f5214efa1cff970556085638a83bb5d58662853af201fbe4fd34ff740014de"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'thread' value is not used",
            "markdown": "Local variable 'thread' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 9,
                  "charOffset": 5924,
                  "charLength": 6,
                  "snippet": {
                    "text": "thread"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 1,
                  "charOffset": 5836,
                  "charLength": 183,
                  "snippet": {
                    "text": "        channel: discord.TextChannel = self.bot.get_channel(TECH_ID.ch_botreq)\n\n        thread = ...  # type: discord.Thread\n        for thread in guild.threads:\n            query = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee3e2b2c703d4de02b57e734d1b28980035d9d9d628cb5c5820145e2ada7efd5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 17,
                  "charOffset": 7007,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 225,
                  "startColumn": 1,
                  "charOffset": 6946,
                  "charLength": 173,
                  "snippet": {
                    "text": "                    .get()\n                )\n                channel: discord.VoiceChannel = self.bot.get_channel(\n                    int(query.ChannelID)\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "930c4c943bc58f983a2cf70b556cfb1f5da0a6ce1c8ef0c1434a79eb0dd562f1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 17,
                  "charOffset": 9743,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 285,
                  "startColumn": 1,
                  "charOffset": 9682,
                  "charLength": 164,
                  "snippet": {
                    "text": "                    .get()\n                )\n                channel: discord.VoiceChannel = self.bot.get_channel(\n                    q.ChannelID\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df612b62c3e14c93cf47b66971d76df8812c36a6715bda0f2240dd68749a204f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'team' value is not used",
            "markdown": "Local variable 'team' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 553,
                  "startColumn": 9,
                  "charOffset": 21074,
                  "charLength": 4,
                  "snippet": {
                    "text": "team"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 551,
                  "startColumn": 1,
                  "charOffset": 20988,
                  "charLength": 233,
                  "snippet": {
                    "text": "    async def end(self, ctx):\n        database.db.connect(reuse_if_open=True)\n        team = discord.utils.get(ctx.guild.roles, name=self.AT)\n        member = ctx.guild.get_member(ctx.author.id)\n        timestamp2 = datetime.now(EST)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9902ed72020b1baa97116d6418814a1bc88a05c07eaa68df49d0b60f44b8371"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'timestamp2' value is not used",
            "markdown": "Local variable 'timestamp2' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 9,
                  "charOffset": 21191,
                  "charLength": 10,
                  "snippet": {
                    "text": "timestamp2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 553,
                  "startColumn": 1,
                  "charOffset": 21066,
                  "charLength": 191,
                  "snippet": {
                    "text": "        team = discord.utils.get(ctx.guild.roles, name=self.AT)\n        member = ctx.guild.get_member(ctx.author.id)\n        timestamp2 = datetime.now(EST)\n\n        voice_state = member.voice"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66854de3fa1fb3f5f78a1294893be3fac934764c671e679ceb56fdb7d25a293f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'BOT' value is not used",
            "markdown": "Local variable 'BOT' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 884,
                  "startColumn": 9,
                  "charOffset": 35279,
                  "charLength": 3,
                  "snippet": {
                    "text": "BOT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 882,
                  "startColumn": 1,
                  "charOffset": 35217,
                  "charLength": 223,
                  "snippet": {
                    "text": "        member = ctx.guild.get_member(ctx.author.id)\n\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "835e49f2e7237bb40b46dfca88b3614d1366f3abf38004f3bf47da75649da18b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'TMOD' value is not used",
            "markdown": "Local variable 'TMOD' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 886,
                  "startColumn": 9,
                  "charOffset": 35383,
                  "charLength": 4,
                  "snippet": {
                    "text": "TMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 884,
                  "startColumn": 1,
                  "charOffset": 35271,
                  "charLength": 299,
                  "snippet": {
                    "text": "        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ec45014d15e15a182032194184e9d57b11dc50fa7b8d938ffa35020dc9cf90d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'MOD' value is not used",
            "markdown": "Local variable 'MOD' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 887,
                  "startColumn": 9,
                  "charOffset": 35449,
                  "charLength": 3,
                  "snippet": {
                    "text": "MOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 885,
                  "startColumn": 1,
                  "charOffset": 35324,
                  "charLength": 308,
                  "snippet": {
                    "text": "        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d9c5567d651740ea353e4e676e4ab56fca91034b190b8e2f9c191dc2e4a374d8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'SMOD' value is not used",
            "markdown": "Local variable 'SMOD' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 888,
                  "startColumn": 9,
                  "charOffset": 35513,
                  "charLength": 4,
                  "snippet": {
                    "text": "SMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 886,
                  "startColumn": 1,
                  "charOffset": 35375,
                  "charLength": 319,
                  "snippet": {
                    "text": "        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "16534ced24b7bd2f01d958a598c2b24327d305cd99a803a5370c26bd9bf0265f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'CO' value is not used",
            "markdown": "Local variable 'CO' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 9,
                  "charOffset": 35579,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 887,
                  "startColumn": 1,
                  "charOffset": 35441,
                  "charLength": 315,
                  "snippet": {
                    "text": "        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4b596b406f6cf0841f052bf727ffcd52323184029306083269a845c20143398d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'VP' value is not used",
            "markdown": "Local variable 'VP' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 890,
                  "startColumn": 9,
                  "charOffset": 35641,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 888,
                  "startColumn": 1,
                  "charOffset": 35505,
                  "charLength": 252,
                  "snippet": {
                    "text": "        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0785ccb49310e25485f93708f7dac99d08ed2be6cb86189c4c8bb58c7d1358f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'ST' value is not used",
            "markdown": "Local variable 'ST' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 891,
                  "startColumn": 9,
                  "charOffset": 35703,
                  "charLength": 2,
                  "snippet": {
                    "text": "ST"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 889,
                  "startColumn": 1,
                  "charOffset": 35571,
                  "charLength": 259,
                  "snippet": {
                    "text": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "663c2432a864fcdbeb38b6748d7f056e223747b50178dbc4b32e955c98fd226e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'query' value is not used",
            "markdown": "Local variable 'query' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1130,
                  "startColumn": 21,
                  "charOffset": 46676,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1128,
                  "startColumn": 1,
                  "charOffset": 46623,
                  "charLength": 150,
                  "snippet": {
                    "text": "                    LOCK.save()\n\n                    query = (\n                        database.VCChannelInfo.select()\n                        .where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fbb3e88d4e33a2395aff827d0a3ca7da82f8f07b051fd3b5a436cbdb2d4ba1a9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'embed' value is not used",
            "markdown": "Local variable 'embed' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1476,
                  "startColumn": 17,
                  "charOffset": 63533,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1474,
                  "startColumn": 1,
                  "charOffset": 63447,
                  "charLength": 275,
                  "snippet": {
                    "text": "                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed(\n                    title=f\"{Emoji.warn} Unknown Channel\",\n                    description=\"You are not the owner of this voice channel nor is this a valid channel. \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e982c5fd74232d74b0ec7c7e6cce037ab6dfdc9eab268b294c18bb731d15a3d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local function 'check' is not used",
            "markdown": "Local function 'check' is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 21,
                  "charOffset": 17297,
                  "charLength": 5,
                  "snippet": {
                    "text": "check"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 411,
                  "startColumn": 1,
                  "charOffset": 17258,
                  "charLength": 123,
                  "snippet": {
                    "text": "            else:\n\n                def check(m):\n                    return (\n                        m.content is not None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dfd34bd453345a03b7ff13e59bd66611221798f244ecb0b08917440df5838c90"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'lastReset' value is not used",
            "markdown": "Local variable 'lastReset' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 13,
                  "charOffset": 1026,
                  "charLength": 9,
                  "snippet": {
                    "text": "lastReset"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 899,
                  "charLength": 275,
                  "snippet": {
                    "text": "\n        if weekdayNow == 1 and (now - self.lastReset >= datetime.timedelta(days=7)) and timeNow >= self.midnight:\n            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(StudyVCLeaderboard.id == entry)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "540ee43691fd15b781dc4b1b00f8af4886e0b7a0bffdd8541eb7c4e83d24dd0c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'numberStr' value is not used",
            "markdown": "Local variable 'numberStr' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 5,
                  "charOffset": 2135,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 2122,
                  "charLength": 64,
                  "snippet": {
                    "text": "    \"\"\"\n\n    numberStr = ...  # type: str\n\n    if number < 1000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "047e22451fffd5093bbf39e7eed79f11a0a28a53cda9c08788ebf7485b6e6df1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'now' value is not used",
            "markdown": "Local variable 'now' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 9,
                  "charOffset": 2485,
                  "charLength": 3,
                  "snippet": {
                    "text": "now"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 2458,
                  "charLength": 195,
                  "snippet": {
                    "text": "\n    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0567ab6580c0b12c9aac84e25f26cdb724d697c0329485b7e279310f48cb2d8e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'goal' value is not used",
            "markdown": "Local variable 'goal' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 17,
                  "charOffset": 5069,
                  "charLength": 4,
                  "snippet": {
                    "text": "goal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 166,
                  "startColumn": 1,
                  "charOffset": 4921,
                  "charLength": 269,
                  "snippet": {
                    "text": "            query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2980d55255c4adf4aacaa1e2fc705baab2d8edab1066ddd908d25c8466bea577"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'renewal' value is not used",
            "markdown": "Local variable 'renewal' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 23,
                  "charOffset": 5075,
                  "charLength": 7,
                  "snippet": {
                    "text": "renewal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 166,
                  "startColumn": 1,
                  "charOffset": 4921,
                  "charLength": 269,
                  "snippet": {
                    "text": "            query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a2e7fd9b9c097b5b3089fa94f9ea532a2a7794bb91b3b7a670fd2b5b08f097e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'val' value is not used",
            "markdown": "Local variable 'val' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 17,
                  "charOffset": 5414,
                  "charLength": 3,
                  "snippet": {
                    "text": "val"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 1,
                  "charOffset": 5309,
                  "charLength": 211,
                  "snippet": {
                    "text": "\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n\n                if datetime.now(EST) >= dateObj:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3c0b9a6e4e23ed819f2af0c0a6380acdbb476de0dbb8112e14b94ea288f239c8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'i' value is not used",
            "markdown": "Local variable 'i' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 17,
                  "charOffset": 1874,
                  "charLength": 1,
                  "snippet": {
                    "text": "i"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 1810,
                  "charLength": 166,
                  "snippet": {
                    "text": "            else:\n                list_ten = []\n                i = 0\n                for entry in query:\n                    if not isinstance(entry.Date, datetime):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1e6abb50ecd1dce3c4873d278830fc99520019afc3885a42ac4c035ebc2da743"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'i' value is not used",
            "markdown": "Local variable 'i' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 13,
                  "charOffset": 5827,
                  "charLength": 1,
                  "snippet": {
                    "text": "i"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 5775,
                  "charLength": 90,
                  "snippet": {
                    "text": "        else:\n            list_ten = []\n            i = 0\n            for entry in query:\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d286f57a34dc8dc5d7b86bb10b8d7d580a4f16754a64be1d94bc56ea5bc198f7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 30,
                  "charOffset": 20483,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 553,
                  "startColumn": 1,
                  "charOffset": 20443,
                  "charLength": 100,
                  "snippet": {
                    "text": "        )\n\n    async def callback(self, interaction: discord.Interaction):\n        self.view.stop()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34814c05e0c4e04f0a105ae628726622b6b36a94c4d8a95d8b3545e4d1ed2814"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'nw' value is not used",
            "markdown": "Local variable 'nw' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 17,
                  "charOffset": 4166,
                  "charLength": 2,
                  "snippet": {
                    "text": "nw"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 4112,
                  "charLength": 127,
                  "snippet": {
                    "text": "                nextweek = old + new\n\n                nw = nextweek.strftime(\"%m/%d/%Y\")\n\n                query.Date = nextweek"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "86b7c27c029b98cdb0a8b752d68b8785a9674c621851b127771ab940c4c912af"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'val' value is not used",
            "markdown": "Local variable 'val' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 13,
                  "charOffset": 1404,
                  "charLength": 3,
                  "snippet": {
                    "text": "val"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1378,
                  "charLength": 108,
                  "snippet": {
                    "text": "\n        try:\n            val = InteractionResponse[\"custom_id\"]\n        except KeyError:\n            return"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "011ceafe698db24801aeede2f12e21b66d4e79a6c1db1cc61ce5f07bb7f1176e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 13,
                  "charOffset": 1789,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 1758,
                  "charLength": 169,
                  "snippet": {
                    "text": "                )\n\n            channel = self.bot.get_channel(interaction.channel_id)\n            guild = interaction.message.guild\n            author = interaction.user"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49dc3876f776220d5fe9438091b8f783136f1b8c011e90c7cc64d0455d92a43f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 41,
                  "charOffset": 4207,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 4074,
                  "charLength": 250,
                  "snippet": {
                    "text": "                    try:\n                        self.flow.fetch_token(code=answer1.content)\n                    except Exception as e:\n                        return await dm_channel.send(\"Invalid code, try again later...\")\n                    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ad83e3cabddfddd78211e41cbce2dc60021fbefe7c8ec99e492b00a1249d0297"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'directTranscript' value is not used",
            "markdown": "Parameter 'directTranscript' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 5,
                  "charOffset": 2595,
                  "charLength": 30,
                  "snippet": {
                    "text": "directTranscript: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 2505,
                  "charLength": 183,
                  "snippet": {
                    "text": "    user: discord.User = None,\n    responsesauthor: typing.List[discord.User] = None,\n    directTranscript: bool = False,\n):\n    transcript = await chat_exporter.export(channel, None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8727dc65c312f32974d4d2935282be906d87bd19d4531a39bcfaaa320f56c8ba"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'self' value is not used",
            "markdown": "Parameter 'self' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 16,
                  "charOffset": 4565,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 4548,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fd9dd46279f23d64e8a8daa09e562d1e57c77eeba78337389ea60a5bfab5a388"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'sandbox' value is not used",
            "markdown": "Parameter 'sandbox' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 59,
                  "charOffset": 8671,
                  "charLength": 21,
                  "snippet": {
                    "text": "sandbox: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 275,
                  "startColumn": 1,
                  "charOffset": 8599,
                  "charLength": 152,
                  "snippet": {
                    "text": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0282f71e05e812547385467af16e0a0167a1ffde5c2ddaa227b15575d4ebcb3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 13,
                  "charOffset": 10567,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 338,
                  "startColumn": 1,
                  "charOffset": 10527,
                  "charLength": 178,
                  "snippet": {
                    "text": "            )\n        else:\n            channel = self.bot.get_channel(interaction.channel_id)\n            guild = interaction.message.guild\n            author = interaction.user"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66e7c63f1d6b339d5cde69de9b90550fe4685cf8595357013365764e8b0dd063"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 33,
                  "charOffset": 11683,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 366,
                  "startColumn": 1,
                  "charOffset": 11603,
                  "charLength": 246,
                  "snippet": {
                    "text": "                    view=MSV,\n                )\n            except Exception as e:\n                await interaction.channel.send(\n                    f\"{interaction.user.mention} I can't send you messages, please check you're privacy settings!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5bb6785dea298e35d3b543d65ce97319a06210c25a0990b404151612abbcbac1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 37,
                  "charOffset": 13071,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 400,
                  "startColumn": 1,
                  "charOffset": 12942,
                  "charLength": 215,
                  "snippet": {
                    "text": "                try:\n                    await DMChannel.send(embed=embed, view=MiscOptList)\n                except Exception as e:\n                    await interaction.followup.send(embed=embed, view=MiscOptList)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e12b4a85f8dfdab160a2dea22f5397e35d30ff9a6dff80c1d7039ec5e533c053"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'guild' value is not used",
            "markdown": "Local variable 'guild' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 779,
                  "startColumn": 13,
                  "charOffset": 28342,
                  "charLength": 5,
                  "snippet": {
                    "text": "guild"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 777,
                  "startColumn": 1,
                  "charOffset": 28249,
                  "charLength": 165,
                  "snippet": {
                    "text": "        elif val == \"ch_lock\":\n            channel = interaction.message.channel\n            guild = interaction.message.guild\n            author = interaction.user\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8328d8f0863026f85911f4f4bed5c2d96761891c9a00f799ff736fa72b1854f4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'query' value is not used",
            "markdown": "Local variable 'query' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 782,
                  "startColumn": 13,
                  "charOffset": 28427,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 780,
                  "startColumn": 1,
                  "charOffset": 28376,
                  "charLength": 185,
                  "snippet": {
                    "text": "            author = interaction.user\n\n            query = (\n                database.TicketInfo.select()\n                .where(database.TicketInfo.ChannelID == interaction.channel_id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "79cc4e32751c32d73f283a64303c5e4cf83242c8f85c924d9af8242a7ba4a9c5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 890,
                  "startColumn": 13,
                  "charOffset": 32371,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 888,
                  "startColumn": 1,
                  "charOffset": 32291,
                  "charLength": 199,
                  "snippet": {
                    "text": "\n        elif InteractionResponse[\"custom_id\"] == \"ch_lock_CANCEL\":\n            channel = interaction.message.channel\n            author = interaction.user\n            await interaction.channel.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1e088a8f5dfb7b42200f740f2e3dc43410f780c936add9898fb3d9cf0733933e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 898,
                  "startColumn": 13,
                  "charOffset": 32709,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 896,
                  "startColumn": 1,
                  "charOffset": 32634,
                  "charLength": 168,
                  "snippet": {
                    "text": "\n        elif InteractionResponse[\"custom_id\"] == \"ch_lock_C\":\n            channel = self.bot.get_channel(interaction.channel_id)\n            author = interaction.user\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "93154fd76b3af6cd1d2c12e5cc286e9ccc231e8bdad9df331be817d07a584b51"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'msg' value is not used",
            "markdown": "Local variable 'msg' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 953,
                  "startColumn": 13,
                  "charOffset": 34900,
                  "charLength": 3,
                  "snippet": {
                    "text": "msg"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 951,
                  "startColumn": 1,
                  "charOffset": 34832,
                  "charLength": 225,
                  "snippet": {
                    "text": "                )\n            author = interaction.user\n            msg = await interaction.channel.send(\n                f\"Please wait, creating your transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d18b43fdc5fdb64180430c2bdb4e4ef3fa3013af0cc5746e5290beb016181357"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'query' value is not used",
            "markdown": "Local variable 'query' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1092,
                  "startColumn": 13,
                  "charOffset": 40965,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1090,
                  "startColumn": 1,
                  "charOffset": 40916,
                  "charLength": 137,
                  "snippet": {
                    "text": "        )\n        if query.exists():\n            query = query.get()\n            embed = discord.Embed(\n                title=\"Confirm?\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cc9b97843a5d9ee934acdc6e5d9786f7ffd52d68a3a5dbb6412bd50444c4f6f1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1129,
                  "startColumn": 33,
                  "charOffset": 42293,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1127,
                  "startColumn": 1,
                  "charOffset": 42207,
                  "charLength": 181,
                  "snippet": {
                    "text": "                    entry.ChannelID\n                )\n            except Exception as e:\n                continue\n            fetchMessage = await channel.history(limit=1).flatten()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e272bcca5a4f0322ebb40b4254927e8c5c9b55e1ed2053abf57e959f2bfcc19e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'LogCH' value is not used",
            "markdown": "Local variable 'LogCH' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1134,
                  "startColumn": 13,
                  "charOffset": 42528,
                  "charLength": 5,
                  "snippet": {
                    "text": "LogCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1132,
                  "startColumn": 1,
                  "charOffset": 42389,
                  "charLength": 257,
                  "snippet": {
                    "text": "            TicketOwner = self.bot.get_user(entry.authorID)\n            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e249ff420b8632b5fd046e6007bee1fad7fd8c0f652a22915c554edbbcf26abd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'authorList' value is not used",
            "markdown": "Local variable 'authorList' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1135,
                  "startColumn": 13,
                  "charOffset": 42596,
                  "charLength": 10,
                  "snippet": {
                    "text": "authorList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1133,
                  "startColumn": 1,
                  "charOffset": 42449,
                  "charLength": 222,
                  "snippet": {
                    "text": "            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:\n                continue"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fb8f8f03bbbe383270afb96e44edc8a2e3506acdffb8066e133cca3d00e8205d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'self' value is not used",
            "markdown": "Parameter 'self' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 25,
                  "charOffset": 379,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 353,
                  "charLength": 119,
                  "snippet": {
                    "text": "\n\nasync def roleNameCheck(self, name: str, guild: discord.Guild, user: discord.Member):\n    check = getEqualRank(name)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "239ec687121a450eab6b22fee4883a9317c0efe032bef58d03021bb257f9b7e1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 28,
                  "charOffset": 991,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 939,
                  "charLength": 141,
                  "snippet": {
                    "text": "        emoji=\"✅\",\n    )\n    async def verify(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "30b139d7e972a43cf0ceb558395b40055571ef5d0dbe1e32b705937452c65028"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 62,
                  "charOffset": 1025,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 939,
                  "charLength": 141,
                  "snippet": {
                    "text": "        emoji=\"✅\",\n    )\n    async def verify(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f1c075f12a26461d1b62ba4d8490ec7357617f93877397949b93f666feb30560"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'InteractionResponse' value is not used",
            "markdown": "Local variable 'InteractionResponse' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 9,
                  "charOffset": 1676,
                  "charLength": 19,
                  "snippet": {
                    "text": "InteractionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 1550,
                  "charLength": 205,
                  "snippet": {
                    "text": "    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c695ee93b5380a49a10383863026f508ec8de4110da09c253cfec2e94ecf79fc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 37,
                  "charOffset": 4291,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 4232,
                  "charLength": 136,
                  "snippet": {
                    "text": "                    )\n\n                except Exception as e:\n                    print(\"member not found\")\n                    continue"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d639a5ddf47e64899a6b8cbf69ceea09249656e8397bc56408a44d6c811c2b1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingBuiltinsInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'id'",
            "markdown": "Shadows built-in name 'id'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 15,
                  "charOffset": 774,
                  "charLength": 2,
                  "snippet": {
                    "text": "id"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 721,
                  "charLength": 162,
                  "snippet": {
                    "text": "class RedirectPizza:\n    def __init__(\n        self, id: int, domain: str, source: str, destination: str, created_at: datetime\n    ) -> None:\n        self.id = id"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "af428a13c78c2a4711c583e2235b3db828e2d3d9ddf0112386fa2839d95af5a5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingBuiltinsInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'object'",
            "markdown": "Shadows built-in name 'object'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 13,
                  "charOffset": 2174,
                  "charLength": 6,
                  "snippet": {
                    "text": "object"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 2112,
                  "charLength": 184,
                  "snippet": {
                    "text": "        data = data[\"data\"]\n        ListData = []\n        for object in range(len(data) - 1):\n            # object = object\n            FullURL = data[object][\"sources\"][object][\"url\"]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0c778bc6c96adae9c557e382f5850aa4698952709e2a33559159773c76f15d01"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingBuiltinsInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'object'",
            "markdown": "Shadows built-in name 'object'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 9,
                  "charOffset": 3427,
                  "charLength": 6,
                  "snippet": {
                    "text": "object"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 3341,
                  "charLength": 172,
                  "snippet": {
                    "text": "        if r.status_code == 422:\n            raise InvalidAuth(r.status_code)\n        object = range(len(r.json()))\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d2b89f9165dc3c3187c8b3760fb2a6a3e3e2e8d874a1740207221ea4ce3e39bb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingBuiltinsInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'object'",
            "markdown": "Shadows built-in name 'object'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 9,
                  "charOffset": 5159,
                  "charLength": 6,
                  "snippet": {
                    "text": "object"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 1,
                  "charOffset": 5077,
                  "charLength": 152,
                  "snippet": {
                    "text": "            raise InvalidAuth(r.status_code)\n        print(r.status_code)\n        object = range(len(r.json()[\"data\"]))\n        pprint.pprint(r.json())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "973697038fe7df1406837befc7fdba34b37cfbdd1445c5dd0b347c786c5cdbe7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingBuiltinsInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'object'",
            "markdown": "Shadows built-in name 'object'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 655,
                  "startColumn": 13,
                  "charOffset": 26633,
                  "charLength": 6,
                  "snippet": {
                    "text": "object"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 653,
                  "startColumn": 1,
                  "charOffset": 26563,
                  "charLength": 172,
                  "snippet": {
                    "text": "            interaction:\n            discord.Interaction,\n            object: Optional[str] = None\n    ):\n        await self._command_callback(interaction, _command=object)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8fac14574eb20517ed16a054dfe2e8889f44c128bc245d5bdcefd2bb4e0f1c5f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingBuiltinsInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'id'",
            "markdown": "Shadows built-in name 'id'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 60,
                  "charOffset": 1158,
                  "charLength": 2,
                  "snippet": {
                    "text": "id"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "charOffset": 1031,
                  "charLength": 209,
                  "snippet": {
                    "text": "    @command(name=\"view\")\n    @guilds(MAIN_ID.g_main, TUT_ID.g_tut)\n    async def view(self, interaction: discord.Interaction, id=None):\n        if id is None:\n            query: database.TutorBot_Sessions = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ba568966a197a21d1511604db9fa7ce4b5f3a6dfb61694cdfc46c0818005fb84"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingBuiltinsInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'id'",
            "markdown": "Shadows built-in name 'id'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 60,
                  "charOffset": 14758,
                  "charLength": 2,
                  "snippet": {
                    "text": "id"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 397,
                  "startColumn": 1,
                  "charOffset": 14651,
                  "charLength": 258,
                  "snippet": {
                    "text": "    )\n    @guilds(MAIN_ID.g_main, TUT_ID.g_tut)\n    async def skip(self, interaction: discord.Interaction, id: str):\n        query: database.TutorBot_Sessions = database.TutorBot_Sessions.select().where(\n            database.TutorBot_Sessions.SessionID == id"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ae574df258f339a2ce1dd0bf6fb5fbf8f8624ee5e016c7c7abed090ef2f646e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingBuiltinsInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'id'",
            "markdown": "Shadows built-in name 'id'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 62,
                  "charOffset": 16193,
                  "charLength": 2,
                  "snippet": {
                    "text": "id"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 436,
                  "startColumn": 1,
                  "charOffset": 16084,
                  "charLength": 232,
                  "snippet": {
                    "text": "    )\n    @guilds(MAIN_ID.g_main, TUT_ID.g_tut)\n    async def remove(self, interaction: discord.Interaction, id: str):\n        query = database.TutorBot_Sessions.select().where(\n            database.TutorBot_Sessions.SessionID == id"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9f7e7a3ccfd5f15cacfc3730673ae48c78e218b3ba7a565b7f742dfaa90e303b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'reaction' from outer scope",
            "markdown": "Shadows name 'reaction' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 24,
                  "charOffset": 2815,
                  "charLength": 8,
                  "snippet": {
                    "text": "reaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2765,
                  "charLength": 135,
                  "snippet": {
                    "text": "    emotes = [\"◀️\", \"▶️\"]\n\n    def check_reaction(reaction, user):\n        return user == ctx.author and str(reaction.emoji) in emotes\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d45c6d974770160e37c85a7f4f1126a78a0abc06e62fde19ff6ec1b843b27dda"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'user' from outer scope",
            "markdown": "Shadows name 'user' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 34,
                  "charOffset": 2825,
                  "charLength": 4,
                  "snippet": {
                    "text": "user"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2765,
                  "charLength": 135,
                  "snippet": {
                    "text": "    emotes = [\"◀️\", \"▶️\"]\n\n    def check_reaction(reaction, user):\n        return user == ctx.author and str(reaction.emoji) in emotes\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "952a46549f3b1030e923735c5940287f4444a1325b49c64533efbbae5c69e4f4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'string' from outer scope",
            "markdown": "Shadows name 'string' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1743,
                  "startColumn": 23,
                  "charOffset": 64175,
                  "charLength": 6,
                  "snippet": {
                    "text": "string"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1741,
                  "startColumn": 1,
                  "charOffset": 64151,
                  "charLength": 150,
                  "snippet": {
                    "text": "\n\ndef stringTimeConvert(string: str):\n    \"\"\"\n    Filters out the different time units from a string (e.g. from '2d 4h 6m 7s') and returns a ``dict``."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "afe7e35ba6947f215074a2923ffc56c975cfd5d1666a2e4e298d9f81205d1b9e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'string' from outer scope",
            "markdown": "Shadows name 'string' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1784,
                  "startColumn": 23,
                  "charOffset": 65386,
                  "charLength": 6,
                  "snippet": {
                    "text": "string"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1782,
                  "startColumn": 1,
                  "charOffset": 65362,
                  "charLength": 140,
                  "snippet": {
                    "text": "\n\ndef searchCustomEmoji(string: str):\n    \"\"\"\n    Searches for a custom emoji in a specific ``str`` and returns it or None if nothing found."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "209a232183f4c630aebcd23d27c240e0c18ff5d60152361cdc3035d7c0d75adf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'embed' from outer scope",
            "markdown": "Shadows name 'embed' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 34,
                  "charOffset": 4033,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 3959,
                  "charLength": 197,
                  "snippet": {
                    "text": "            return math.ceil(tags / 10)\n\n        async def populate_embed(embed: discord.Embed, page: int):\n            \"\"\"Used to populate the embed in listtag command\"\"\"\n            tag_list = \"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "32518a0c4bc8c1f6796c098654448f615d9a8f75f099ab332656657fccdc84ca"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'page' from outer scope",
            "markdown": "Shadows name 'page' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 56,
                  "charOffset": 4055,
                  "charLength": 4,
                  "snippet": {
                    "text": "page"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 3959,
                  "charLength": 197,
                  "snippet": {
                    "text": "            return math.ceil(tags / 10)\n\n        async def populate_embed(embed: discord.Embed, page: int):\n            \"\"\"Used to populate the embed in listtag command\"\"\"\n            tag_list = \"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "714842edc1e51910b6c564a40a6f24157508bf6beff4584df3c8a542658903dd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'reaction' from outer scope",
            "markdown": "Shadows name 'reaction' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 20,
                  "charOffset": 4766,
                  "charLength": 8,
                  "snippet": {
                    "text": "reaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 143,
                  "startColumn": 1,
                  "charOffset": 4700,
                  "charLength": 203,
                  "snippet": {
                    "text": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                    str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f8a34682ad923d703208f0f1ef3859d49eb08c4df03f3031ec0c3f130543127"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'user' from outer scope",
            "markdown": "Shadows name 'user' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 30,
                  "charOffset": 4776,
                  "charLength": 4,
                  "snippet": {
                    "text": "user"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 143,
                  "startColumn": 1,
                  "charOffset": 4700,
                  "charLength": 203,
                  "snippet": {
                    "text": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                    str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "33958db7d9ff8ea81bbe2bdfbda53eba0058e82707b6fac4ca017464ba177360"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'reaction' from outer scope",
            "markdown": "Shadows name 'reaction' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 20,
                  "charOffset": 16956,
                  "charLength": 8,
                  "snippet": {
                    "text": "reaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 456,
                  "startColumn": 1,
                  "charOffset": 16890,
                  "charLength": 203,
                  "snippet": {
                    "text": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                    str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8b27edd941d4762383302c3caaa5644020a75af577ade5a7df1c56e0bc4dc29e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'user' from outer scope",
            "markdown": "Shadows name 'user' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 30,
                  "charOffset": 16966,
                  "charLength": 4,
                  "snippet": {
                    "text": "user"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 456,
                  "startColumn": 1,
                  "charOffset": 16890,
                  "charLength": 203,
                  "snippet": {
                    "text": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                    str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8a5fa5b51112eedb26dbf798226778cae8ceb30992b4af5417c8f1619fbfed56"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'e' from outer scope",
            "markdown": "Shadows name 'e' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 740,
                  "startColumn": 30,
                  "charOffset": 27119,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 738,
                  "startColumn": 1,
                  "charOffset": 27017,
                  "charLength": 152,
                  "snippet": {
                    "text": "            vc.play(\n                discord.FFmpegPCMAudio(\"text.mp3\"),\n                after=lambda e: print(f\"Finished playing: {e}\"),\n            )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f9e1f5902e029f4c4da832eccc1cf2dc20b4c09406a3671f6b5e628b2effdb3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyListCreationInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "This list creation could be rewritten as a list literal",
            "markdown": "This list creation could be rewritten as a list literal"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cog_tests.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 5,
                  "charOffset": 157,
                  "charLength": 15,
                  "snippet": {
                    "text": "extensions = []"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 1,
                  "charOffset": 130,
                  "charLength": 135,
                  "snippet": {
                    "text": "\ndef get_extensions():\n    extensions = []\n    extensions.append(\"jishaku\")\n    if sys.platform == \"win32\" or sys.platform == \"cygwin\":"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6148fc3f9c70739e2ca8d0c36a7fcf0daf957c67f3ec6ae1eaf88100b7d8310e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 5,
                  "charOffset": 386,
                  "charLength": 13,
                  "snippet": {
                    "text": "predicate_LV1"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 380,
                  "charLength": 52,
                  "snippet": {
                    "text": "\n\ndef predicate_LV1(ctx) -> bool:\n    adminIDs = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "62f841ce9888cc03f5739196678f58e7dc92b3b6cbc0c76ffba235e078a991e1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 5,
                  "charOffset": 418,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 381,
                  "charLength": 103,
                  "snippet": {
                    "text": "\ndef predicate_LV1(ctx) -> bool:\n    adminIDs = []\n\n    query = database.Administrators.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d1b700f8d4655fa08e6119576ebc9a620e6571afdcad2dc5dd171af8cf5df2f9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 5,
                  "charOffset": 693,
                  "charLength": 13,
                  "snippet": {
                    "text": "predicate_LV2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 687,
                  "charLength": 52,
                  "snippet": {
                    "text": "\n\ndef predicate_LV2(ctx) -> bool:\n    adminIDs = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f4b34ebae3dac985003decce326a26763f92394e77478f72eef383580b0aa5ae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 5,
                  "charOffset": 725,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 688,
                  "charLength": 103,
                  "snippet": {
                    "text": "\ndef predicate_LV2(ctx) -> bool:\n    adminIDs = []\n\n    query = database.Administrators.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7fc918fb156859136b4faca8222a8300abff0a7910df4ef8f997214e943e8cc1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 5,
                  "charOffset": 1001,
                  "charLength": 13,
                  "snippet": {
                    "text": "predicate_LV3"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 995,
                  "charLength": 44,
                  "snippet": {
                    "text": "\n\ndef predicate_LV3(ctx):\n    adminIDs = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5b553236608c0a31c2fde61baabf9c7ea3af47b22a6a0c7696a12e4444527a49"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 5,
                  "charOffset": 1025,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 996,
                  "charLength": 95,
                  "snippet": {
                    "text": "\ndef predicate_LV3(ctx):\n    adminIDs = []\n\n    query = database.Administrators.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c8a0cba5c088816dfb213f4fbfc18c51297432d0fd917be9f91f9e7aefe6981b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 5,
                  "charOffset": 1301,
                  "charLength": 13,
                  "snippet": {
                    "text": "predicate_LV4"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 1295,
                  "charLength": 44,
                  "snippet": {
                    "text": "\n\ndef predicate_LV4(ctx):\n    adminIDs = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f406747314179bde9f72a1f4603b761b73b5eb076a01f1a2460ed3b9fc1a5565"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 5,
                  "charOffset": 1325,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 1296,
                  "charLength": 95,
                  "snippet": {
                    "text": "\ndef predicate_LV4(ctx):\n    adminIDs = []\n\n    query = database.Administrators.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "52ee8116e3f87c31d9671c73826a33fefab5534fe8c8c294694788e982b9bb81"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 5,
                  "charOffset": 3219,
                  "charLength": 16,
                  "snippet": {
                    "text": "mktCommissionAdd"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 138,
                  "startColumn": 1,
                  "charOffset": 3213,
                  "charLength": 76,
                  "snippet": {
                    "text": "\n\ndef mktCommissionAdd(ctx):\n    rolesID = [\n        MKT_ID.r_designManager,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80075d7f28ef0ca67d031583e8cad0533e0d7e84be8379bbd3a3fdce47dcc5fe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 5,
                  "charOffset": 3246,
                  "charLength": 7,
                  "snippet": {
                    "text": "rolesID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "charOffset": 3214,
                  "charLength": 104,
                  "snippet": {
                    "text": "\ndef mktCommissionAdd(ctx):\n    rolesID = [\n        MKT_ID.r_designManager,\n        MKT_ID.r_designTeam,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "688ff36282c9d306d35725e715a772261bc82bbe23d1a29660830caf83b50840"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 5,
                  "charOffset": 3563,
                  "charLength": 13,
                  "snippet": {
                    "text": "TimmyBetaHost"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 153,
                  "startColumn": 1,
                  "charOffset": 3557,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n\ndef TimmyBetaHost(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "77f01496ae5282c3c1c054cbdcd7dfa940fa9bd3f126c1f6b965104318861ca7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 5,
                  "charOffset": 3587,
                  "charLength": 7,
                  "snippet": {
                    "text": "runPath"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "charOffset": 3558,
                  "charLength": 113,
                  "snippet": {
                    "text": "\ndef TimmyBetaHost(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b8a6d1ad6416a2f56d77134ffa1d903c68d3f50d9c3157e677b3c461147f06ee"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 5,
                  "charOffset": 3628,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 155,
                  "startColumn": 1,
                  "charOffset": 3559,
                  "charLength": 139,
                  "snippet": {
                    "text": "def TimmyBetaHost(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n\n    if runDir is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d5e58d7e47e8f7495a2f97a65c8d215587871d018dfa713f401e54569a87d4d1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 9,
                  "charOffset": 3707,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 158,
                  "startColumn": 1,
                  "charOffset": 3671,
                  "charLength": 92,
                  "snippet": {
                    "text": "\n    if runDir is not None:\n        runDir = runDir.group(0)\n    else:\n        runDir = None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "62179ad6717e124fff210251ef68066d892b970611320f8dd14f6527d360215e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 9,
                  "charOffset": 3750,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "charOffset": 3699,
                  "charLength": 105,
                  "snippet": {
                    "text": "        runDir = runDir.group(0)\n    else:\n        runDir = None\n\n    return runDir == \"/home/timmy-beta\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a7cfb91a59b6ed99f245565afc0503d574725de37a493abf40c44c4cfd5c312"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 11,
                  "charOffset": 1935,
                  "charLength": 9,
                  "snippet": {
                    "text": "rawExport"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 1923,
                  "charLength": 121,
                  "snippet": {
                    "text": "\n\nasync def rawExport(channel, response, user: discord.User):\n    transcript = await chat_exporter.export(channel, None)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f3340e9ba11493627df06db5d01da7be6219f11fc5c989c12d9cd454e440616f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 5,
                  "charOffset": 7555,
                  "charLength": 14,
                  "snippet": {
                    "text": "S3_upload_file"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 226,
                  "startColumn": 1,
                  "charOffset": 7549,
                  "charLength": 96,
                  "snippet": {
                    "text": "\n\ndef S3_upload_file(file_name, bucket, object_name=None):\n    \"\"\"Upload a file to an S3 bucket\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3c8f3e8773ff7ca663f5387b02ada4a9d66b2356f77ed5c57e849093e4c0676"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 7,
                  "charOffset": 8811,
                  "charLength": 7,
                  "snippet": {
                    "text": "MAIN_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 259,
                  "startColumn": 1,
                  "charOffset": 8803,
                  "charLength": 55,
                  "snippet": {
                    "text": "\n\nclass MAIN_ID:\n    \"\"\"\n    IDs of the SS Main server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d21211c4daf2211cc2c71b700926eaa238e9d66693bdac6e1c6147233e9700d7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 7,
                  "charOffset": 14601,
                  "charLength": 8,
                  "snippet": {
                    "text": "STAFF_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 422,
                  "startColumn": 1,
                  "charOffset": 14593,
                  "charLength": 67,
                  "snippet": {
                    "text": "\n\nclass STAFF_ID:\n    \"\"\"\n    IDs of the SS Staff Community server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "abe64abef020dbc16200dd96a208c1516018530de5b497b36f86a03081561fe1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 7,
                  "charOffset": 18373,
                  "charLength": 10,
                  "snippet": {
                    "text": "DIGITAL_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 527,
                  "startColumn": 1,
                  "charOffset": 18365,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\nclass DIGITAL_ID:\n    \"\"\"\n    IDs of the SS Staff Community server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc097647e4a0d0ce7ad92ac1a3ff34ed738267f91b93afb278df66d6a76bdf22"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 589,
                  "startColumn": 7,
                  "charOffset": 20143,
                  "charLength": 7,
                  "snippet": {
                    "text": "TECH_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 587,
                  "startColumn": 1,
                  "charOffset": 20135,
                  "charLength": 92,
                  "snippet": {
                    "text": "\n\nclass TECH_ID:\n    \"\"\"\n    IDs of the 'The Department of Information & Technology' server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c706b6d53731ce5d9d61353baa82318654c02a4abf8841de5999307f2a897b4a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 721,
                  "startColumn": 7,
                  "charOffset": 24259,
                  "charLength": 5,
                  "snippet": {
                    "text": "CH_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 719,
                  "startColumn": 1,
                  "charOffset": 24251,
                  "charLength": 57,
                  "snippet": {
                    "text": "\n\nclass CH_ID:\n    \"\"\"\n    IDs of the Chat Helper server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c8695f1adb58c45445fbbb5822281d73eccc3ca3231ef874fc8afd9c675e8ef0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 741,
                  "startColumn": 7,
                  "charOffset": 24891,
                  "charLength": 6,
                  "snippet": {
                    "text": "MKT_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 739,
                  "startColumn": 1,
                  "charOffset": 24883,
                  "charLength": 70,
                  "snippet": {
                    "text": "\n\nclass MKT_ID:\n    \"\"\"\n    IDs of the SS Marketing Department server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6d2f5f0be34451718ad91e15ad647749501ebb7925df06741b1a4bd8d4031ddb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 819,
                  "startColumn": 7,
                  "charOffset": 27402,
                  "charLength": 6,
                  "snippet": {
                    "text": "TUT_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 817,
                  "startColumn": 1,
                  "charOffset": 27394,
                  "charLength": 67,
                  "snippet": {
                    "text": "\n\nclass TUT_ID:\n    \"\"\"\n    IDs of the SS Tutoring Division server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2975727c3e92a58d5da70db12a059625f0e95fe1f29be5507459f772f8bb4edd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 873,
                  "startColumn": 7,
                  "charOffset": 29179,
                  "charLength": 5,
                  "snippet": {
                    "text": "HR_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 871,
                  "startColumn": 1,
                  "charOffset": 29171,
                  "charLength": 62,
                  "snippet": {
                    "text": "\n\nclass HR_ID:\n    \"\"\"\n    IDs of the SS HR Department server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6ccd5d91af171a00aaf52bbbe0c72d730921a729482285fa48f70689bdf1798a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 900,
                  "startColumn": 7,
                  "charOffset": 30320,
                  "charLength": 9,
                  "snippet": {
                    "text": "LEADER_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 898,
                  "startColumn": 1,
                  "charOffset": 30312,
                  "charLength": 67,
                  "snippet": {
                    "text": "\n\nclass LEADER_ID:\n    \"\"\"\n    IDs of the Leadership Lounge server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c3b9a8d06eca608a125e4a01c8b7a7844fc801d87f3f07bdd69c34e36772325e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 944,
                  "startColumn": 7,
                  "charOffset": 33093,
                  "charLength": 6,
                  "snippet": {
                    "text": "SET_ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 942,
                  "startColumn": 1,
                  "charOffset": 33085,
                  "charLength": 53,
                  "snippet": {
                    "text": "\n\nclass SET_ID:\n    \"\"\"\n    IDs of the SSD SET SERVER"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "95127e2c09051a5fc481defa7b624abc636cec9606bcb9f2c66225079f87eacc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 970,
                  "startColumn": 7,
                  "charOffset": 33897,
                  "charLength": 10,
                  "snippet": {
                    "text": "CheckDB_CC"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 968,
                  "startColumn": 1,
                  "charOffset": 33889,
                  "charLength": 66,
                  "snippet": {
                    "text": "\n\nclass CheckDB_CC:\n    \"\"\"\n    Checks and Safeguards for the Bot."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "07aa26837ed3afebc517f6b9a71e05fc7d6e6ed291ea9b84e80d4e233133493b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1028,
                  "startColumn": 5,
                  "charOffset": 35926,
                  "charLength": 11,
                  "snippet": {
                    "text": "jsonPayload"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1026,
                  "startColumn": 1,
                  "charOffset": 35836,
                  "charLength": 187,
                  "snippet": {
                    "text": "    user = os.getenv(\"CONFIG_CC_USER\")\n    password = os.getenv(\"CONFIG_CC_PASSWORD\")\n    jsonPayload = [{\"op\": \"replace\", \"path\": \"/value\", \"value\": str(value)}]\n\n    r = requests.patch("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d58a41d6b0ba5439af530e0dd69671c6accfd26f40d8b2140b46023cf74abe74"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1085,
                  "startColumn": 7,
                  "charOffset": 37969,
                  "charLength": 9,
                  "snippet": {
                    "text": "hexColors"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1083,
                  "startColumn": 1,
                  "charOffset": 37961,
                  "charLength": 54,
                  "snippet": {
                    "text": "\n\nclass hexColors:\n    \"\"\"\n    Hex colors for the bot."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c464f3bbba0495f7768c5c1e0775325c554bfb7330e17b1582abd82228968a1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1183,
                  "startColumn": 7,
                  "charOffset": 45028,
                  "charLength": 7,
                  "snippet": {
                    "text": "bcolors"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1181,
                  "startColumn": 1,
                  "charOffset": 45020,
                  "charLength": 64,
                  "snippet": {
                    "text": "\n\nclass bcolors:\n    HEADER = \"\\033[95m\"\n    OKBLUE = \"\\033[94m\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e5399856318fbb142442c5fe6d0c99f53c4f0e977472785c3a5b6dee553e58cf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1414,
                  "startColumn": 5,
                  "charOffset": 53963,
                  "charLength": 12,
                  "snippet": {
                    "text": "getGuildList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1412,
                  "startColumn": 1,
                  "charOffset": 53957,
                  "charLength": 126,
                  "snippet": {
                    "text": "\n\ndef getGuildList(bot: commands.Bot, exemptServer: List[int] = None) -> list:\n    guildList = []\n    for guild in bot.guilds:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b36ecc5a3f14ddbc11841592b3ecd84a87b368691b5f47bfa33e10d2a0742931"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1414,
                  "startColumn": 37,
                  "charOffset": 53995,
                  "charLength": 30,
                  "snippet": {
                    "text": "exemptServer: List[int] = None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1412,
                  "startColumn": 1,
                  "charOffset": 53957,
                  "charLength": 126,
                  "snippet": {
                    "text": "\n\ndef getGuildList(bot: commands.Bot, exemptServer: List[int] = None) -> list:\n    guildList = []\n    for guild in bot.guilds:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "284e56d27236dff2752622a594a02a1063cc83310056d6de6070696fc886a709"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1415,
                  "startColumn": 5,
                  "charOffset": 54040,
                  "charLength": 9,
                  "snippet": {
                    "text": "guildList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1413,
                  "startColumn": 1,
                  "charOffset": 53958,
                  "charLength": 162,
                  "snippet": {
                    "text": "\ndef getGuildList(bot: commands.Bot, exemptServer: List[int] = None) -> list:\n    guildList = []\n    for guild in bot.guilds:\n        if guild.id in exemptServer:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a32d72789cde8f49fe99efcee21365f2e8fd161af99e551e22c56edb6e5f9f0d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1439,
                  "startColumn": 9,
                  "charOffset": 54639,
                  "charLength": 13,
                  "snippet": {
                    "text": "TranscriptLOG"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1437,
                  "startColumn": 1,
                  "charOffset": 54545,
                  "charLength": 211,
                  "snippet": {
                    "text": "            self, interaction: discord.Interaction, button: discord.ui.Button,\n    ):\n        TranscriptLOG = self.bot.get_channel(TECH_ID.ch_ticketLog)\n        ch = self.bot.get_channel(interaction.channel_id)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "149733a395a58984043f9706048946191e97d9a8451a8fa20ccee907141561dd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1470,
                  "startColumn": 9,
                  "charOffset": 55715,
                  "charLength": 19,
                  "snippet": {
                    "text": "TempConfirmInstance"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1468,
                  "startColumn": 1,
                  "charOffset": 55623,
                  "charLength": 180,
                  "snippet": {
                    "text": "        self.value = True\n        ch = self.bot.get_channel(interaction.channel_id)\n        TempConfirmInstance = TechnicalCommissionConfirm(self.bot)\n\n        msg = await ch.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "294b68f6b98f224ca8ac3c664d505be49ae6e9ba541b7709789cf7da73745d4e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1555,
                  "startColumn": 9,
                  "charOffset": 58681,
                  "charLength": 19,
                  "snippet": {
                    "text": "TempConfirmInstance"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1553,
                  "startColumn": 1,
                  "charOffset": 58589,
                  "charLength": 163,
                  "snippet": {
                    "text": "        self.value = True\n        ch = self.bot.get_channel(interaction.channel_id)\n        TempConfirmInstance = TicketTempConfirm()\n\n        msg = await ch.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "19712805f4aa83c901f21da1f9d55954618723f323e2783f7b2a78a98447212b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1656,
                  "startColumn": 9,
                  "charOffset": 61940,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1654,
                  "startColumn": 1,
                  "charOffset": 61854,
                  "charLength": 255,
                  "snippet": {
                    "text": "async def id_generator(size=3, chars=string.ascii_uppercase):\n    while True:\n        ID = \"\".join(random.choice(chars) for _ in range(size))\n        query = database.TutorBot_Sessions.select().where(\n            database.TutorBot_Sessions.SessionID == ID"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0c804a3b93a883581775011b483def9b85737ffe8db5b041f101aa5e2bbf6f16"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1693,
                  "startColumn": 9,
                  "charOffset": 62937,
                  "charLength": 9,
                  "snippet": {
                    "text": "runThread"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1691,
                  "startColumn": 1,
                  "charOffset": 62864,
                  "charLength": 146,
                  "snippet": {
                    "text": "        theproc = subprocess.Popen([sys.executable, \"main.py\"])\n\n        runThread = Thread(target=theproc.communicate)\n        runThread.start()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "44735aae3cb27578393860dac4a1a349cb3025a5a55060dfebbde361b50b8a26"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1721,
                  "startColumn": 5,
                  "charOffset": 63720,
                  "charLength": 10,
                  "snippet": {
                    "text": "getHostDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1719,
                  "startColumn": 1,
                  "charOffset": 63714,
                  "charLength": 70,
                  "snippet": {
                    "text": "\n\ndef getHostDir():\n    \"\"\"\n    Get the directory of the current host."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5f890124591e4826f75ce9a64f3561204d0461d0437bf53e5952b4f1a3d84a12"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1732,
                  "startColumn": 5,
                  "charOffset": 63920,
                  "charLength": 7,
                  "snippet": {
                    "text": "runPath"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1730,
                  "startColumn": 1,
                  "charOffset": 63907,
                  "charLength": 115,
                  "snippet": {
                    "text": "    \"\"\"\n\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n    print(runPath)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bfd9e12aa5fa0fede98bc954ffec8cc6ec3cf87f0884e670675b99e58a93e0b1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1733,
                  "startColumn": 5,
                  "charOffset": 63961,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1731,
                  "startColumn": 1,
                  "charOffset": 63915,
                  "charLength": 134,
                  "snippet": {
                    "text": "\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n    print(runPath)\n    if runDir is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cd3e37a292f87bba6c15541185086368df11d2ff40001fada4a56da5a4cc0ad3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1736,
                  "startColumn": 9,
                  "charOffset": 64058,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1734,
                  "startColumn": 1,
                  "charOffset": 64004,
                  "charLength": 110,
                  "snippet": {
                    "text": "    print(runPath)\n    if runDir is not None:\n        runDir = runDir.group(0)\n    else:\n        runDir = None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6bba0cb7ed51fce4bfcb5eca56dd0d8feafe1f71cb4dbf9de08b0cd90df58353"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1738,
                  "startColumn": 9,
                  "charOffset": 64101,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1736,
                  "startColumn": 1,
                  "charOffset": 64050,
                  "charLength": 100,
                  "snippet": {
                    "text": "        runDir = runDir.group(0)\n    else:\n        runDir = None\n    print(runDir)\n    return runDir"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bd6a38401eb7d91cbea3221e606a94adc4a4badae0b03637d9fb6f49deb52caa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1743,
                  "startColumn": 5,
                  "charOffset": 64157,
                  "charLength": 17,
                  "snippet": {
                    "text": "stringTimeConvert"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1741,
                  "startColumn": 1,
                  "charOffset": 64151,
                  "charLength": 150,
                  "snippet": {
                    "text": "\n\ndef stringTimeConvert(string: str):\n    \"\"\"\n    Filters out the different time units from a string (e.g. from '2d 4h 6m 7s') and returns a ``dict``."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "57b0b64e17c86d88ee79eaf620e3c07f509d2e7ed145c2603dd7512bb9da6abd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1754,
                  "startColumn": 5,
                  "charOffset": 64637,
                  "charLength": 8,
                  "snippet": {
                    "text": "timeDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1752,
                  "startColumn": 1,
                  "charOffset": 64624,
                  "charLength": 70,
                  "snippet": {
                    "text": "    \"\"\"\n\n    timeDict: dict = {}\n\n    days = re.search(\"\\d+d\", string)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89bb1e27c2a8fe2c08f971c60945a6a94d955953e2416a539879cc42d2d1e47d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1784,
                  "startColumn": 5,
                  "charOffset": 65368,
                  "charLength": 17,
                  "snippet": {
                    "text": "searchCustomEmoji"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1782,
                  "startColumn": 1,
                  "charOffset": 65362,
                  "charLength": 140,
                  "snippet": {
                    "text": "\n\ndef searchCustomEmoji(string: str):\n    \"\"\"\n    Searches for a custom emoji in a specific ``str`` and returns it or None if nothing found."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f66f483259a2e53409c9a1011cdd897bbaf2181b2db25f9f130b467b69b4644"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1795,
                  "startColumn": 5,
                  "charOffset": 65721,
                  "charLength": 11,
                  "snippet": {
                    "text": "customEmoji"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1793,
                  "startColumn": 1,
                  "charOffset": 65708,
                  "charLength": 100,
                  "snippet": {
                    "text": "    \"\"\"\n\n    customEmoji = re.search(\"<[^:]*:[^:]*:(\\d)+>\", string)\n\n    if customEmoji is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68c48212507662cfd75347b0f9f12880eb2f6d6cb6f9bd9a7faad6f4192bcc6c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1798,
                  "startColumn": 9,
                  "charOffset": 65817,
                  "charLength": 11,
                  "snippet": {
                    "text": "customEmoji"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1796,
                  "startColumn": 1,
                  "charOffset": 65776,
                  "charLength": 112,
                  "snippet": {
                    "text": "\n    if customEmoji is not None:\n        customEmoji = customEmoji.group(0)\n    else:\n        customEmoji = None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37bd846b16c698794b23cdc7ce39d5a70ae3931ce947c25ccc099efe39b5460d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1800,
                  "startColumn": 9,
                  "charOffset": 65870,
                  "charLength": 11,
                  "snippet": {
                    "text": "customEmoji"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1798,
                  "startColumn": 1,
                  "charOffset": 65809,
                  "charLength": 103,
                  "snippet": {
                    "text": "        customEmoji = customEmoji.group(0)\n    else:\n        customEmoji = None\n\n    return customEmoji"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4ffdc6e9388d594ce6145f39bfd090a41a4b526a6f09cf9a3bf2a28062cd1ea4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 7,
                  "charOffset": 4714,
                  "charLength": 24,
                  "snippet": {
                    "text": "TutorSession_GracePeriod"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 164,
                  "startColumn": 1,
                  "charOffset": 4706,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\nclass TutorSession_GracePeriod(BaseModel):\n    \"\"\"\n    # IgnoreThis"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2fb3a9046e54192a27503df43c42ba2a88b387eab27be1b2f7d842e5d0bb604d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 7,
                  "charOffset": 10330,
                  "charLength": 17,
                  "snippet": {
                    "text": "TutorBot_Sessions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 439,
                  "startColumn": 1,
                  "charOffset": 10322,
                  "charLength": 68,
                  "snippet": {
                    "text": "\n\nclass TutorBot_Sessions(BaseModel):\n    \"\"\"\n    #TutorBot Sessions"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3bd3509464d05511c1999d849e09b522d8835f057158ab08329cb914e0faa343"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 9,
                  "charOffset": 2148,
                  "charLength": 8,
                  "snippet": {
                    "text": "ListData"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 2088,
                  "charLength": 147,
                  "snippet": {
                    "text": "        data = r.json()\n        data = data[\"data\"]\n        ListData = []\n        for object in range(len(data) - 1):\n            # object = object"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d3bb1d9e31afe85a19a2a4f9598c7fbf4e63dc3e997526eb271cfa5f6f59b644"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 13,
                  "charOffset": 2248,
                  "charLength": 7,
                  "snippet": {
                    "text": "FullURL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "charOffset": 2162,
                  "charLength": 220,
                  "snippet": {
                    "text": "        for object in range(len(data) - 1):\n            # object = object\n            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d25c66365b002e76fae13869dee2e7e2221a34c73322b4d52d982c3923d6488f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 13,
                  "charOffset": 2309,
                  "charLength": 12,
                  "snippet": {
                    "text": "ParsedDomain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 2206,
                  "charLength": 213,
                  "snippet": {
                    "text": "            # object = object\n            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "368a9b63d6898db6a3b96684d879643b8b19502fc8a173965742794515803585"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 13,
                  "charOffset": 2354,
                  "charLength": 6,
                  "snippet": {
                    "text": "Domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2236,
                  "charLength": 184,
                  "snippet": {
                    "text": "            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a154760569e62c33bbe3e9be9b8301745a09bb0cdc71376549b81b894086e4f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 13,
                  "charOffset": 2395,
                  "charLength": 4,
                  "snippet": {
                    "text": "Path"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 1,
                  "charOffset": 2297,
                  "charLength": 152,
                  "snippet": {
                    "text": "            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path\n\n            ListData.append("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d822bee505b56e032920e99c5257e8185a68c42e967c05cf85eadae604dfc9f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 9,
                  "charOffset": 3466,
                  "charLength": 7,
                  "snippet": {
                    "text": "FullURL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 1,
                  "charOffset": 3419,
                  "charLength": 172,
                  "snippet": {
                    "text": "        object = range(len(r.json()))\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f3acaa1d2441e79091a3cbcda9d4f2afa9a9097cf75d52652740f35821a3291"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 9,
                  "charOffset": 3522,
                  "charLength": 12,
                  "snippet": {
                    "text": "ParsedDomain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 3457,
                  "charLength": 167,
                  "snippet": {
                    "text": "\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "356ac68809059ca167d6bf6d2544386513404746f3cb05aae0a6d364745f1c21"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 9,
                  "charOffset": 3563,
                  "charLength": 6,
                  "snippet": {
                    "text": "Domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "charOffset": 3458,
                  "charLength": 167,
                  "snippet": {
                    "text": "        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66acdd6d67980b92f1395e69a925c6a52adb53d45e7b55ac09a7cf6093dedf80"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 9,
                  "charOffset": 3600,
                  "charLength": 4,
                  "snippet": {
                    "text": "Path"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 3514,
                  "charLength": 141,
                  "snippet": {
                    "text": "        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n\n        return RedirectPizza("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "466accff80ea7ccda5e5c1f606467b474ca8070abe91299b9f11bbc180ca021f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 9,
                  "charOffset": 5238,
                  "charLength": 7,
                  "snippet": {
                    "text": "FullURL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "charOffset": 5197,
                  "charLength": 166,
                  "snippet": {
                    "text": "        pprint.pprint(r.json())\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "63b9d2aefc90c7a134ab5cc26f9b6ff915e2578010eeb353b82df835d07e9e5d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 9,
                  "charOffset": 5294,
                  "charLength": 12,
                  "snippet": {
                    "text": "ParsedDomain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 5229,
                  "charLength": 167,
                  "snippet": {
                    "text": "\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3dc0970c9b190909c0ffe92137c84f20559d4f8fe1f072646be7bd33e9a0db5c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 9,
                  "charOffset": 5335,
                  "charLength": 6,
                  "snippet": {
                    "text": "Domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 5230,
                  "charLength": 167,
                  "snippet": {
                    "text": "        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c176a28695d03276fe0319ccc1d6de12d8b7f47054dbff47cf129c2cedfaaab3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 9,
                  "charOffset": 5372,
                  "charLength": 4,
                  "snippet": {
                    "text": "Path"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 179,
                  "startColumn": 1,
                  "charOffset": 5286,
                  "charLength": 141,
                  "snippet": {
                    "text": "        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n\n        return RedirectPizza("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b6dced980e59175727af4b8e3f4504e0acd09fe0822ac7c2fd23e4373812c28"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 9,
                  "charOffset": 2242,
                  "charLength": 2,
                  "snippet": {
                    "text": "IP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 2200,
                  "charLength": 169,
                  "snippet": {
                    "text": "\n    if not os.getenv(\"USEREAL\"):\n        IP = os.getenv(\"IP\")\n        databaseField = (\n            f\"{bcolors.OKGREEN}Selected Database: External ({IP}){bcolors.ENDC}\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71568d4a46a4b1138b60d9bb113e47890c0f5333629710c00275c7b3504e099f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 9,
                  "charOffset": 2271,
                  "charLength": 13,
                  "snippet": {
                    "text": "databaseField"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 2201,
                  "charLength": 178,
                  "snippet": {
                    "text": "    if not os.getenv(\"USEREAL\"):\n        IP = os.getenv(\"IP\")\n        databaseField = (\n            f\"{bcolors.OKGREEN}Selected Database: External ({IP}){bcolors.ENDC}\"\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d8a88e12c2a5b61f7b009d9c788f78e4e0affcf9312446447d8421fa95309a8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 9,
                  "charOffset": 2398,
                  "charLength": 13,
                  "snippet": {
                    "text": "databaseField"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 2370,
                  "charLength": 206,
                  "snippet": {
                    "text": "        )\n    else:\n        databaseField = (\n            f\"{bcolors.FAIL}Selected Database: localhost{bcolors.ENDC}\\n{bcolors.WARNING}WARNING: Not \"\n            f\"recommended to use SQLite.{bcolors.ENDC} \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0ce33a7c031e5848abfcc95339df432ec476fc4637c57071f3413ea9503f27a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 13,
                  "charOffset": 10172,
                  "charLength": 10,
                  "snippet": {
                    "text": "GITHUB_API"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 277,
                  "startColumn": 1,
                  "charOffset": 10106,
                  "charLength": 185,
                  "snippet": {
                    "text": "            data = \"\\n\".join([l.strip() for l in f])\n\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "be49204b5db90d8edb605a0031470041679b86267ba36f6ba228118af3cd50ef"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 13,
                  "charOffset": 10222,
                  "charLength": 9,
                  "snippet": {
                    "text": "API_TOKEN"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 278,
                  "startColumn": 1,
                  "charOffset": 10159,
                  "charLength": 196,
                  "snippet": {
                    "text": "\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\"\n            headers = {\"Authorization\": \"token %s\" % API_TOKEN}"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0faff65c54cacc48e1a75c6381bf7fe0b739173edb5176afa4233c8d0b594bd7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 13,
                  "charOffset": 10764,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 291,
                  "startColumn": 1,
                  "charOffset": 10701,
                  "charLength": 156,
                  "snippet": {
                    "text": "            )\n            j = json.loads(res.text)\n            ID = j[\"id\"]\n            gisturl = f\"https://gist.github.com/{ID}\"\n            print(gisturl)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dbcd2fad7c10b937467ae64a766ab26292c1f077a6b30815ae3c4a93e7337512"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 5,
                  "charOffset": 13824,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 373,
                  "startColumn": 1,
                  "charOffset": 13773,
                  "charLength": 163,
                  "snippet": {
                    "text": "        blacklisted_users.append(p.discordID)\n\n    adminIDs = []\n    query = database.Administrators.select().where(\n        database.Administrators.TierLevel == 4"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "943ead2b75b9a19c6aadefe3e86c4d6184d81f454ccc606700b748d644d7cca5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 5,
                  "charOffset": 15147,
                  "charLength": 12,
                  "snippet": {
                    "text": "initializeDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 422,
                  "startColumn": 1,
                  "charOffset": 15102,
                  "charLength": 156,
                  "snippet": {
                    "text": "        return CheckDB_CC.elseSituation\n\ndef initializeDB(bot):\n    \"\"\"\n    Initializes the database, and creates the needed table data if they don't exist."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c897ddadc578ee76690a3a9a17e920e5cd434a5973406bd5035c077dbe2cd8d7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 5,
                  "charOffset": 15315,
                  "charLength": 3,
                  "snippet": {
                    "text": "UpQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 427,
                  "startColumn": 1,
                  "charOffset": 15259,
                  "charLength": 285,
                  "snippet": {
                    "text": "    \"\"\"\n    database.db.connect(reuse_if_open=True)\n    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e6d1bc237a522762b912ddf3787c4e1b03705e66919fc97aef89f25b9d873d61"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 5,
                  "charOffset": 15381,
                  "charLength": 3,
                  "snippet": {
                    "text": "CIQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 428,
                  "startColumn": 1,
                  "charOffset": 15267,
                  "charLength": 356,
                  "snippet": {
                    "text": "    database.db.connect(reuse_if_open=True)\n    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d4a9a7d61efe56d1ab743f4a35bc4925cfe556d697d50a04fc3206f66201dd77"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 431,
                  "startColumn": 5,
                  "charOffset": 15467,
                  "charLength": 3,
                  "snippet": {
                    "text": "BTE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 429,
                  "startColumn": 1,
                  "charOffset": 15311,
                  "charLength": 313,
                  "snippet": {
                    "text": "    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d4bd9019636b7d0571931b602c28578fcb20a1e489cb44744c5dcdf7a8028157"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 5,
                  "charOffset": 15549,
                  "charLength": 2,
                  "snippet": {
                    "text": "SM"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 430,
                  "startColumn": 1,
                  "charOffset": 15377,
                  "charLength": 272,
                  "snippet": {
                    "text": "    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)\n\n    if not UpQ.exists():"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "09f18ef92a1fd43bcb206b50d9d5b976d02dc1672c0811b94668418cf78f7acd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 17,
                  "charOffset": 5633,
                  "charLength": 8,
                  "snippet": {
                    "text": "banEntry"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "charOffset": 5535,
                  "charLength": 182,
                  "snippet": {
                    "text": "            member = ctx.guild.get_member(user.id)\n            if member is None:\n                banEntry = await ctx.guild.fetch_ban(user)\n\n                if banEntry is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bffcd91eb46acb52317f9bbb16e9d4e05578b558fb9dee108f268678c653bfc5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 17,
                  "charOffset": 1750,
                  "charLength": 14,
                  "snippet": {
                    "text": "banReasonAUDIT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 1616,
                  "charLength": 226,
                  "snippet": {
                    "text": "            # We need to check who banned the person.\n            if moderator.id == 548410451818708993:  # Wick's ID\n                banReasonAUDIT = logs.reason\n\n                if \"No reason specified by\" in banReasonAUDIT:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a2bf6519acfdc3ec686ea50f6ea58628b9bb8829ddec90962dc830bbc4bfe1f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 29,
                  "charOffset": 1871,
                  "charLength": 15,
                  "snippet": {
                    "text": "fullUsernameMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 1779,
                  "charLength": 203,
                  "snippet": {
                    "text": "\n                if \"No reason specified by\" in banReasonAUDIT:\n                    random, fullUsernameMOD = banReasonAUDIT.split(\n                        \"No reason specified by \"\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "289d6918afdb7ebe2bd49172e9532983379d5bb70270a6078ec1a7ee2fcaaeb9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 21,
                  "charOffset": 2003,
                  "charLength": 9,
                  "snippet": {
                    "text": "banReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 1911,
                  "charLength": 143,
                  "snippet": {
                    "text": "                        \"No reason specified by \"\n                    )\n                    banReason = \"None Specified\"\n\n                else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b602777aaffc3c522d0c34fd9f2068881ec17ea67666df33dffaa2b95e207f0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 21,
                  "charOffset": 2075,
                  "charLength": 9,
                  "snippet": {
                    "text": "banReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "charOffset": 2032,
                  "charLength": 158,
                  "snippet": {
                    "text": "\n                else:\n                    banReason = re.match(r\"[^[]*\\[([^]]*)\\]\", banReasonAUDIT).groups()[\n                        0\n                    ]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "427c44cb7196e3d5bcd6bef9c2453a46680155a1ba836af8ea2105491a99b15f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 33,
                  "charOffset": 2249,
                  "charLength": 15,
                  "snippet": {
                    "text": "fullUsernameMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "charOffset": 2191,
                  "charLength": 190,
                  "snippet": {
                    "text": "\n                    try:\n                        random, fullUsernameMOD = banReasonAUDIT.split(\"- \")\n                    except ValueError:\n                        fullUsernameMOD = \"Wick\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "84deaffbb939c6a3935787b8d4bbdc231356814a9335121aa87292095e4149f7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 25,
                  "charOffset": 2357,
                  "charLength": 15,
                  "snippet": {
                    "text": "fullUsernameMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 1,
                  "charOffset": 2217,
                  "charLength": 183,
                  "snippet": {
                    "text": "                        random, fullUsernameMOD = banReasonAUDIT.split(\"- \")\n                    except ValueError:\n                        fullUsernameMOD = \"Wick\"\n\n            else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21b42171de91566afb2dcca9ca4d612e797e975b81f6515e90be5b1daadd2983"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 17,
                  "charOffset": 2417,
                  "charLength": 9,
                  "snippet": {
                    "text": "banReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "charOffset": 2382,
                  "charLength": 191,
                  "snippet": {
                    "text": "\n            else:\n                banReason = logs.reason\n                # Get full username with tag\n                fullUsernameMOD = f\"{moderator.display_name}#{moderator.discriminator}\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1d40fcc0d14f2357c769b609175846a9559512adb9be891814c093ad90764026"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 17,
                  "charOffset": 2502,
                  "charLength": 15,
                  "snippet": {
                    "text": "fullUsernameMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 2401,
                  "charLength": 248,
                  "snippet": {
                    "text": "                banReason = logs.reason\n                # Get full username with tag\n                fullUsernameMOD = f\"{moderator.display_name}#{moderator.discriminator}\"\n\n            # Okay now we got our reason, we need to get a few more things"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5e7e1aaa5da2b05f1f76ed907e48052cb7f85f5471a19c03991d62e1c6751ad0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 13,
                  "charOffset": 2783,
                  "charLength": 18,
                  "snippet": {
                    "text": "fullUsernameTARGET"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2729,
                  "charLength": 187,
                  "snippet": {
                    "text": "\n            # Get full username with tag\n            fullUsernameTARGET = f\"{target.display_name}#{target.discriminator}\"\n\n            # Get everything into a list so we can bulk insert."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0c423f9bc66d15bc2bd57a0132fc9c834948cde30fa4f05559ad7969c7db85d3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 13,
                  "charOffset": 3252,
                  "charLength": 10,
                  "snippet": {
                    "text": "ModChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "charOffset": 3167,
                  "charLength": 169,
                  "snippet": {
                    "text": "            sheet.insert_row(row, 2)  # Insert data, and boom. We done!\n\n            ModChannel = self.bot.get_channel(self.ModLogID)\n\n            embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f5f14aa41dce65871a3706aebe6109491a9a9e4b906eb6a45c38101b89fc0eef"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 9,
                  "charOffset": 6635,
                  "charLength": 17,
                  "snippet": {
                    "text": "timmyDonation_png"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 193,
                  "startColumn": 1,
                  "charOffset": 6519,
                  "charLength": 232,
                  "snippet": {
                    "text": "    @commands.cooldown(1, 10, commands.BucketType.guild)\n    async def donate(self, ctx: commands.Context):\n        timmyDonation_png = discord.File(\n            Others.timmyDonation_path, filename=Others.timmyDonation_png\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5fa4cfe5de9b6708e5c7ba1497fd9e77a479b4efa3e7148546da371226eb1b26"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 9,
                  "charOffset": 6761,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedDonate"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 197,
                  "startColumn": 1,
                  "charOffset": 6742,
                  "charLength": 116,
                  "snippet": {
                    "text": "        )\n\n        embedDonate = discord.Embed(\n            color=hexColors.ss_blurple,\n            title=f\"Donate\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a5ebe2353c8094609b7f6bc49305dbfdd31cce309439bebded5a909f78dd3800"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 9,
                  "charOffset": 7917,
                  "charLength": 9,
                  "snippet": {
                    "text": "DebateBan"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 221,
                  "startColumn": 1,
                  "charOffset": 7793,
                  "charLength": 230,
                  "snippet": {
                    "text": "    @commands.has_any_role(\"Moderator\")\n    async def debateban(self, ctx, member: discord.Member, *, reason=None):\n        DebateBan = discord.utils.get(ctx.guild.roles, name=\"NoDebate\")\n\n        if member.id == self.bot.user.id:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7cd35ae375dd6741282798fbbf51bec7e6a5d92855023a39ac258eabc970061f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 17,
                  "charOffset": 8804,
                  "charLength": 12,
                  "snippet": {
                    "text": "UpdateReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 245,
                  "startColumn": 1,
                  "charOffset": 8760,
                  "charLength": 235,
                  "snippet": {
                    "text": "                    return\n\n                UpdateReason = f\"DebateBan requested by {ctx.author.display_name} | Reason: {reason}\"\n                await member.add_roles(DebateBan, reason=UpdateReason)\n            except Exception as e:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8012aa232616f808dbd50c7dfecb657a99539b598c68cad4c10f6ecc240414d5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 17,
                  "charOffset": 9587,
                  "charLength": 12,
                  "snippet": {
                    "text": "UpdateReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 264,
                  "startColumn": 1,
                  "charOffset": 9523,
                  "charLength": 261,
                  "snippet": {
                    "text": "                    reason = \"No Reason Given\"\n\n                UpdateReason = f\"Debate UnBan requested by {ctx.author.display_name} | Reason: {reason}\"\n                await member.remove_roles(DebateBan, reason=UpdateReason)\n            except Exception as e:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "95f8eab1b0cbdb4d0bc325a62ca79f706ba9fe3d45a287bd1323d96fcfc337e3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 9,
                  "charOffset": 10618,
                  "charLength": 7,
                  "snippet": {
                    "text": "NoCount"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 287,
                  "startColumn": 1,
                  "charOffset": 10495,
                  "charLength": 229,
                  "snippet": {
                    "text": "    @commands.has_any_role(\"Moderator\")\n    async def countban(self, ctx, member: discord.Member, *, reason=None):\n        NoCount = discord.utils.get(ctx.guild.roles, name=\"NoCounting\")\n\n        if member.id == self.bot.user.id:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "131b1e6c645c15af5e4dac76afe8bc6927f3a1a175ad1f9c319728a68852cff0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 17,
                  "charOffset": 11508,
                  "charLength": 12,
                  "snippet": {
                    "text": "UpdateReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 311,
                  "startColumn": 1,
                  "charOffset": 11464,
                  "charLength": 232,
                  "snippet": {
                    "text": "                    return\n\n                UpdateReason = f\"CountBan requested by {ctx.author.display_name} | Reason: {reason}\"\n                await member.add_roles(NoCount, reason=UpdateReason)\n            except Exception as e:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "415f41ee5d39709463d2d54cb2102917dfd094188f3ae830f92c1c8895ef1f55"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 17,
                  "charOffset": 12286,
                  "charLength": 12,
                  "snippet": {
                    "text": "UpdateReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 330,
                  "startColumn": 1,
                  "charOffset": 12222,
                  "charLength": 258,
                  "snippet": {
                    "text": "                    reason = \"No Reason Given\"\n\n                UpdateReason = f\"Count UnBan requested by {ctx.author.display_name} | Reason: {reason}\"\n                await member.remove_roles(NoCount, reason=UpdateReason)\n            except Exception as e:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b4370c65cd329d63f7ae71a7f5f935923b2a391dd6a21def1419a34fce69081b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 475,
                  "startColumn": 17,
                  "charOffset": 17538,
                  "charLength": 2,
                  "snippet": {
                    "text": "NE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 473,
                  "startColumn": 1,
                  "charOffset": 17427,
                  "charLength": 222,
                  "snippet": {
                    "text": "                await message.delete()\n                database.db.connect(reuse_if_open=True)\n                NE = database.AdminLogging.create(\n                    discordID=ctx.author.id, action=\"KILL\"\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6da6d41b719c08931939ab9317f79eb83266f835c5b482575f14216daefedb7b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 514,
                  "startColumn": 9,
                  "charOffset": 18704,
                  "charLength": 7,
                  "snippet": {
                    "text": "userObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 512,
                  "startColumn": 1,
                  "charOffset": 18670,
                  "charLength": 73,
                  "snippet": {
                    "text": "\n        userinput = None\n        userObj = None\n\n        await ctx.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bf42c4067cf37f6439e476570bd7e564d440804befb2622c10c5baf553586ab7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 13,
                  "charOffset": 18930,
                  "charLength": 8,
                  "snippet": {
                    "text": "inputMSG"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 519,
                  "startColumn": 1,
                  "charOffset": 18874,
                  "charLength": 193,
                  "snippet": {
                    "text": "\n        while userinput != str(randomnum):\n            inputMSG = await self.bot.wait_for(\"message\", check=check)\n            userinput = inputMSG.content\n            userObj = inputMSG.author"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e698f28778380bcfa73c1a1b2db6bd81f7d3da85e242731c19d9ef9e1028f921"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 13,
                  "charOffset": 19042,
                  "charLength": 7,
                  "snippet": {
                    "text": "userObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 521,
                  "startColumn": 1,
                  "charOffset": 18918,
                  "charLength": 174,
                  "snippet": {
                    "text": "            inputMSG = await self.bot.wait_for(\"message\", check=check)\n            userinput = inputMSG.content\n            userObj = inputMSG.author\n\n        await ctx.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3c8e2e66e7331166b00a022847984340a74151ab132479dcb58cb910fe7cb361"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 579,
                  "startColumn": 9,
                  "charOffset": 20872,
                  "charLength": 8,
                  "snippet": {
                    "text": "UserList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 577,
                  "startColumn": 1,
                  "charOffset": 20853,
                  "charLength": 55,
                  "snippet": {
                    "text": "        )\n\n        UserList = []\n        RoleList = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "797b843b7e414512f742eaffb3ec9926a0170057066e5fc9c6d54f618cce23c2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 580,
                  "startColumn": 9,
                  "charOffset": 20894,
                  "charLength": 8,
                  "snippet": {
                    "text": "RoleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 578,
                  "startColumn": 1,
                  "charOffset": 20863,
                  "charLength": 72,
                  "snippet": {
                    "text": "\n        UserList = []\n        RoleList = []\n\n        for user in users:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "16da87b72cfac1a80ad5caf137f9d76fc31f4562dcc5ee099380e513414de29f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 587,
                  "startColumn": 9,
                  "charOffset": 21056,
                  "charLength": 8,
                  "snippet": {
                    "text": "UserList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 585,
                  "startColumn": 1,
                  "charOffset": 21005,
                  "charLength": 121,
                  "snippet": {
                    "text": "            RoleList.append(role.mention)\n\n        UserList = \", \".join(UserList)\n        RoleList = \", \".join(RoleList)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dd2b857009ee4106c38557264a6d07727e80179d74df4936a7af25c7a9a492f0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 9,
                  "charOffset": 21095,
                  "charLength": 8,
                  "snippet": {
                    "text": "RoleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 586,
                  "startColumn": 1,
                  "charOffset": 21047,
                  "charLength": 104,
                  "snippet": {
                    "text": "\n        UserList = \", \".join(UserList)\n        RoleList = \", \".join(RoleList)\n\n        embed.add_field("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "32bb880be0378c1e6fab48972ce4688ddbf1c41e59d86eda88a54215ea70febb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 613,
                  "startColumn": 9,
                  "charOffset": 21925,
                  "charLength": 12,
                  "snippet": {
                    "text": "ViewResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 611,
                  "startColumn": 1,
                  "charOffset": 21864,
                  "charLength": 202,
                  "snippet": {
                    "text": "        await view.wait()\n        await msg.delete()\n        ViewResponse = str(view.children[0].values)\n        RoleID = self.decodeDict[ViewResponse]\n        await ctx.send(f\"<@&{RoleID}>\\n{message}\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dea32222c50d18436db5c026f64285ea49d513d9c85e2af0f2907e02e014f5ba"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 614,
                  "startColumn": 9,
                  "charOffset": 21977,
                  "charLength": 6,
                  "snippet": {
                    "text": "RoleID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 612,
                  "startColumn": 1,
                  "charOffset": 21890,
                  "charLength": 177,
                  "snippet": {
                    "text": "        await msg.delete()\n        ViewResponse = str(view.children[0].values)\n        RoleID = self.decodeDict[ViewResponse]\n        await ctx.send(f\"<@&{RoleID}>\\n{message}\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab58577be9498a3bec522bc1e42cbf9767a9d270f1f4199f1344fe1bd178725c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 686,
                  "startColumn": 9,
                  "charOffset": 25294,
                  "charLength": 2,
                  "snippet": {
                    "text": "NE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 684,
                  "startColumn": 1,
                  "charOffset": 25227,
                  "charLength": 178,
                  "snippet": {
                    "text": "    @is_botAdmin\n    async def say(self, ctx, *, message):\n        NE = database.AdminLogging.create(\n            discordID=ctx.author.id, action=\"SAY\", content=message\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "158d144a262699281c9277efdd1fb6defb9b587dde761009728abbb94b266593"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 714,
                  "startColumn": 9,
                  "charOffset": 26142,
                  "charLength": 2,
                  "snippet": {
                    "text": "NE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 712,
                  "startColumn": 1,
                  "charOffset": 26114,
                  "charLength": 138,
                  "snippet": {
                    "text": "            return\n\n        NE = database.AdminLogging.create(\n            discordID=ctx.author.id, action=\"SAYVC\", content=text\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "75f0737d5cdf5c0fc549b0d04e34ae88c292651ff4ac5f269e1058b41380ad7d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 720,
                  "startColumn": 9,
                  "charOffset": 26342,
                  "charLength": 9,
                  "snippet": {
                    "text": "TTSClient"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 718,
                  "startColumn": 1,
                  "charOffset": 26271,
                  "charLength": 184,
                  "snippet": {
                    "text": "\n        # Lets prepare our text, and then save the audio file\n        TTSClient = texttospeech.TextToSpeechClient(\n            credentials=access_secret(\"ttscreds\", True, 2)\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b9b4530c12ed3ec25ddfae57de99655cccf734dc5fb96683641dd9c92911558a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/todocommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 9,
                  "charOffset": 2674,
                  "charLength": 8,
                  "snippet": {
                    "text": "todoList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 2617,
                  "charLength": 184,
                  "snippet": {
                    "text": "        database.db.connect(reuse_if_open=True)\n\n        todoList = []\n        query = database.ToDo.select().where(database.ToDo.discordID == ctx.author.id)\n        for todo in query:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0face48fe56df24d315e7799ce73700ef20bdbd70d5233b001dbe5027926b841"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/todocommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 9,
                  "charOffset": 2871,
                  "charLength": 9,
                  "snippet": {
                    "text": "todoFinal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 1,
                  "charOffset": 2802,
                  "charLength": 129,
                  "snippet": {
                    "text": "            todoList.append(f\"{str(todo.id)}) {todo.item}\")\n\n        todoFinal = \"\\n\".join(todoList)\n\n        database.db.close()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c8c374647112fefd6fced7d0e49e9c6ebd3fc6d43a5a88abb6cdbca236f56c77"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 15,
                  "charOffset": 1171,
                  "charLength": 7,
                  "snippet": {
                    "text": "Fmodify"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "charOffset": 1115,
                  "charLength": 190,
                  "snippet": {
                    "text": "    @commands.command()\n    @is_botAdmin4\n    async def Fmodify(self, ctx, num: int, val: bool):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "91f258bda684a8036aa3c086794e95c2f4d00bb45f1f326e90d99ef7a0ffff9d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 9,
                  "charOffset": 1220,
                  "charLength": 7,
                  "snippet": {
                    "text": "CheckDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1139,
                  "charLength": 224,
                  "snippet": {
                    "text": "    @is_botAdmin4\n    async def Fmodify(self, ctx, num: int, val: bool):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "666159740de9a9ead2f78af8cf688b146182ece41bdc4b663666f2ecce8e1e2c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 9,
                  "charOffset": 1406,
                  "charLength": 14,
                  "snippet": {
                    "text": "databaseValues"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 1387,
                  "charLength": 117,
                  "snippet": {
                    "text": "        )\n\n        databaseValues = {\n            1: \"CheckDB.MasterMaintenance\",\n            2: \"CheckDB.guildNone\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7de6a8bd7ce39c35732616972ad2a7f1452ba8398b1b6b1aed34774bb12a2d4d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 9,
                  "charOffset": 2592,
                  "charLength": 7,
                  "snippet": {
                    "text": "CheckDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2530,
                  "charLength": 205,
                  "snippet": {
                    "text": "    @filters.command()\n    async def list(self, ctx):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d75a750a818f27ba45841a583d835e70cafe6291680765a740697e6892ea180a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 9,
                  "charOffset": 3853,
                  "charLength": 17,
                  "snippet": {
                    "text": "WhitelistedPrefix"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 1,
                  "charOffset": 3784,
                  "charLength": 227,
                  "snippet": {
                    "text": "    @is_botAdmin3\n    async def delete(self, ctx, num: int):\n        WhitelistedPrefix: database.WhitelistedPrefix = (\n            database.WhitelistedPrefix.select()\n                .where(database.WhitelistedPrefix.id == num)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b91d12063781da5cfc73128b4d937adc849491ba20cd34d434195758850f418d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 9,
                  "charOffset": 4254,
                  "charLength": 17,
                  "snippet": {
                    "text": "WhitelistedPrefix"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 4190,
                  "charLength": 167,
                  "snippet": {
                    "text": "    @is_botAdmin3\n    async def add(self, ctx, prefix):\n        WhitelistedPrefix = database.WhitelistedPrefix.create(\n            prefix=prefix, status=True\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b767b3227bc4744272cc02262e40654af9ca3a156a2e0488c33890a1d21ae4ef"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 9,
                  "charOffset": 4498,
                  "charLength": 8,
                  "snippet": {
                    "text": "PrefixDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 4458,
                  "charLength": 100,
                  "snippet": {
                    "text": "    async def list(self, ctx):\n\n        PrefixDB = database.WhitelistedPrefix\n        response = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dd78c22781e3f194980197b63c8bd1f5ab3a15526cb3ca1bb3645d40d10f5db9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 17,
                  "charOffset": 4644,
                  "charLength": 12,
                  "snippet": {
                    "text": "statusFilter"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 1,
                  "charOffset": 4590,
                  "charLength": 137,
                  "snippet": {
                    "text": "\n            if entry.status is True:\n                statusFilter = \"ACTIVE\"\n            else:\n                statusFilter = \"DISABLED\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6b21aca44afe3e0083da5a3e3b2d32bcb9a6efe12efee18064340a1ad1d1706a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 17,
                  "charOffset": 4702,
                  "charLength": 12,
                  "snippet": {
                    "text": "statusFilter"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 1,
                  "charOffset": 4628,
                  "charLength": 188,
                  "snippet": {
                    "text": "                statusFilter = \"ACTIVE\"\n            else:\n                statusFilter = \"DISABLED\"\n\n            response.append(f\"Prefix `{entry.prefix}`:\\n{Emoji.barrow} {statusFilter}\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ac19ed780a17874be8791b6f3687351d55d84fc57f022bcc0f5fc00c14cff1b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 9,
                  "charOffset": 8096,
                  "charLength": 7,
                  "snippet": {
                    "text": "hostDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 251,
                  "startColumn": 1,
                  "charOffset": 8067,
                  "charLength": 124,
                  "snippet": {
                    "text": "        output = \"\"\n\n        hostDir = getHostDir()\n        if hostDir == \"/home/timmya\":\n            branch = \"origin/main\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1c0a76151c9188fd364334c237b4071c56f969a36fac2a201f165e8a9cb6886f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 9,
                  "charOffset": 10143,
                  "charLength": 7,
                  "snippet": {
                    "text": "hostDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 313,
                  "startColumn": 1,
                  "charOffset": 10114,
                  "charLength": 124,
                  "snippet": {
                    "text": "        output = \"\"\n\n        hostDir = getHostDir()\n        if hostDir == \"/home/timmya\":\n            branch = \"origin/main\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f1cdf255b6b99872d2407772e1cd55cc5b41f28d3e89ea1c9805f0ea7918113f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 9,
                  "charOffset": 12911,
                  "charLength": 9,
                  "snippet": {
                    "text": "adminList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 392,
                  "startColumn": 1,
                  "charOffset": 12855,
                  "charLength": 128,
                  "snippet": {
                    "text": "    @is_botAdmin\n    async def list(self, ctx):\n        adminList = []\n\n        query1 = database.Administrators.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d999470efa7ba5f626c300667002e093815d85d833ee8b13426ecd025e502fe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 9,
                  "charOffset": 13199,
                  "charLength": 11,
                  "snippet": {
                    "text": "adminLEVEL1"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 401,
                  "startColumn": 1,
                  "charOffset": 13128,
                  "charLength": 129,
                  "snippet": {
                    "text": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL1 = \"\\n\".join(adminList)\n\n        adminList = []"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ec9801764a99f42a302c74ebfe5a21c3a00e84a50ecf8ca9cce7bb1a7c731bd0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 9,
                  "charOffset": 13243,
                  "charLength": 9,
                  "snippet": {
                    "text": "adminList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 403,
                  "startColumn": 1,
                  "charOffset": 13191,
                  "charLength": 174,
                  "snippet": {
                    "text": "        adminLEVEL1 = \"\\n\".join(adminList)\n\n        adminList = []\n        query2 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 2"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3bf01d85efe934f1d77c569c4019f466a33998fe7473cdc1bac3aa4318683b1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 9,
                  "charOffset": 13530,
                  "charLength": 11,
                  "snippet": {
                    "text": "adminLEVEL2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 411,
                  "startColumn": 1,
                  "charOffset": 13459,
                  "charLength": 129,
                  "snippet": {
                    "text": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL2 = \"\\n\".join(adminList)\n\n        adminList = []"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bbc84f24925bf2d4a3ebc5602d7a654c3c7971e1d58adb6d37837c6836de89c2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 9,
                  "charOffset": 13574,
                  "charLength": 9,
                  "snippet": {
                    "text": "adminList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 413,
                  "startColumn": 1,
                  "charOffset": 13522,
                  "charLength": 174,
                  "snippet": {
                    "text": "        adminLEVEL2 = \"\\n\".join(adminList)\n\n        adminList = []\n        query3 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 3"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0fa1cf040368d73b3c03c8c4ef38b76748e6b865349b52683662a52eb6b761dc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 9,
                  "charOffset": 13861,
                  "charLength": 11,
                  "snippet": {
                    "text": "adminLEVEL3"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 421,
                  "startColumn": 1,
                  "charOffset": 13790,
                  "charLength": 129,
                  "snippet": {
                    "text": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL3 = \"\\n\".join(adminList)\n\n        adminList = []"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6c228e7d0ffb1341d86d6d1b5a3b1cf9168ebe18af701935a00df020005b6005"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 9,
                  "charOffset": 13905,
                  "charLength": 9,
                  "snippet": {
                    "text": "adminList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 423,
                  "startColumn": 1,
                  "charOffset": 13853,
                  "charLength": 174,
                  "snippet": {
                    "text": "        adminLEVEL3 = \"\\n\".join(adminList)\n\n        adminList = []\n        query4 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 4"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2e74c0dbbc8aba58576f2c9986470697e06e31db7d905bba4a1a50bcd93ee128"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 433,
                  "startColumn": 9,
                  "charOffset": 14192,
                  "charLength": 11,
                  "snippet": {
                    "text": "adminLEVEL4"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 431,
                  "startColumn": 1,
                  "charOffset": 14121,
                  "charLength": 137,
                  "snippet": {
                    "text": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL4 = \"\\n\".join(adminList)\n\n        embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb2832a3406fb5954d4c24746e4459638f17eda0384fb197185afbffcf9fe03c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 33,
                  "charOffset": 15095,
                  "charLength": 16,
                  "snippet": {
                    "text": "ID: discord.User"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 454,
                  "startColumn": 1,
                  "charOffset": 15028,
                  "charLength": 134,
                  "snippet": {
                    "text": "    @w.command()\n    @is_botAdmin4\n    async def remove(self, ctx, ID: discord.User):\n        database.db.connect(reuse_if_open=True)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dc87020a75848c24186d968dfa9d916f8e5024654331f2095f8d28a0f436e83a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 30,
                  "charOffset": 15992,
                  "charLength": 16,
                  "snippet": {
                    "text": "ID: discord.User"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 484,
                  "startColumn": 1,
                  "charOffset": 15928,
                  "charLength": 143,
                  "snippet": {
                    "text": "    @w.command()\n    @is_botAdmin4\n    async def add(self, ctx, ID: discord.User, level: int):\n        database.db.connect(reuse_if_open=True)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "15b7d8776f22c59901274eb0b3a176a49b6c525b393b2a561ac81afe08ee4c3d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 13,
                  "charOffset": 17399,
                  "charLength": 9,
                  "snippet": {
                    "text": "runThread"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 528,
                  "startColumn": 1,
                  "charOffset": 17318,
                  "charLength": 158,
                  "snippet": {
                    "text": "            theproc = subprocess.Popen([sys.executable, \"main.py\"])\n\n            runThread = Thread(target=theproc.communicate)\n            runThread.start()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "205547bc5e82d0eb7bcd3b4e34bd0870df411f75ae88e1fdc7e1bea87ca18ee4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 9,
                  "charOffset": 1810,
                  "charLength": 7,
                  "snippet": {
                    "text": "HR_Role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 1724,
                  "charLength": 273,
                  "snippet": {
                    "text": "        organizationunit: Literal[\"Personal Account\", \"Team Account\"],\n    ):\n        HR_Role = discord.utils.get(interaction.user.guild.roles, id=HR_ID.r_hrStaff)\n        if HR_Role not in interaction.user.roles:\n            return await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "794a4850a2639c4687037f4f10f5d019f77a70cc9a0f637b1296d3f0f2fe3286"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 9,
                  "charOffset": 3499,
                  "charLength": 7,
                  "snippet": {
                    "text": "HR_Role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 1,
                  "charOffset": 3378,
                  "charLength": 303,
                  "snippet": {
                    "text": "    @app_commands.guilds(HR_ID.g_hr)\n    async def delete_gsuite(self, interaction: discord.Interaction, email):\n        HR_Role = discord.utils.get(interaction.guild.roles, id=HR_ID.r_hrStaff)\n        if HR_Role not in interaction.user.roles:\n            return await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b37dad7e42cddfd5c437a121521ffed21def8e59cee348074231c7b20501f419"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/RedirectService.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 29,
                  "charOffset": 1235,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 1121,
                  "charLength": 207,
                  "snippet": {
                    "text": "    @commands.command(alliases=[\"redirectremove\", \"removeredirect\"])\n    @is_botAdmin\n    async def rr(self, ctx, ID):\n        self.raOBJ.del_redirect(ID)\n        await ctx.send(f\"Redirect removed for {ID}\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eccea43274b2255921aaaabec097027cdc9f6cdf00ce53c6466cbe1ac5b02ec3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 15,
                  "charOffset": 3603,
                  "charLength": 9,
                  "snippet": {
                    "text": "techEmbed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 3548,
                  "charLength": 188,
                  "snippet": {
                    "text": "    @commands.command()\n    @is_botAdmin\n    async def techEmbed(self, ctx):\n        embed = discord.Embed(\n            title=\"Bot Developer Commissions\", color=discord.Color.brand_green()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "096b8879f5490e2446e1d23b4af67619077fb6aaf0ecb4cbf3cd0a07dc4b9404"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 15,
                  "charOffset": 4443,
                  "charLength": 11,
                  "snippet": {
                    "text": "closeThread"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 130,
                  "startColumn": 1,
                  "charOffset": 4404,
                  "charLength": 204,
                  "snippet": {
                    "text": "\n    @commands.command()\n    async def closeThread(self, ctx: commands.Context):\n        channel: discord.TextChannel = self.bot.get_channel(TECH_ID.ch_botreq)\n        thread: discord.Thread = ctx.channel"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "77ece085f02a59dec142ab6635273bcd0bcd6975b8f5891ef3cb3431dcb990d0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 15,
                  "charOffset": 4948,
                  "charLength": 10,
                  "snippet": {
                    "text": "openThread"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 1,
                  "charOffset": 4909,
                  "charLength": 203,
                  "snippet": {
                    "text": "\n    @commands.command()\n    async def openThread(self, ctx: commands.Context):\n        channel: discord.TextChannel = self.bot.get_channel(TECH_ID.ch_botreq)\n        thread: discord.Thread = ctx.channel"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f153ca9a63426d4bbba8158c9375d291e547fa47ebd8a9cc7443a9b2cb79d1b5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 15,
                  "charOffset": 5657,
                  "charLength": 19,
                  "snippet": {
                    "text": "autoUnarchiveThread"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 5612,
                  "charLength": 179,
                  "snippet": {
                    "text": "\n    @tasks.loop(seconds=60.0)\n    async def autoUnarchiveThread(self):\n        \"\"\"\n        Creates a task loop to make sure threads don't automatically archive due to inactivity."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c77bdc4574069831c3161903539b7b9e4c9300c253a73b461859bbff0affc1e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 5,
                  "charOffset": 659,
                  "charLength": 14,
                  "snippet": {
                    "text": "showFutureTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 653,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "64ec57a9d2411d07027a1030591f443871330cf8cc694c5cf98d09fc2f2cfadd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 5,
                  "charOffset": 940,
                  "charLength": 16,
                  "snippet": {
                    "text": "showTotalMinutes"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 934,
                  "charLength": 71,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "93634ec357994948eca0d79ccedc8d505cde3abe007e39f6d4fcffadd519fd83"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 22,
                  "charOffset": 957,
                  "charLength": 17,
                  "snippet": {
                    "text": "dateObj: datetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 934,
                  "charLength": 71,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f66a5914733f840decf4564b228bf52e5bd9054239f3c118c430ea5169d00d14"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 5,
                  "charOffset": 1010,
                  "charLength": 9,
                  "snippet": {
                    "text": "deltaTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 977,
                  "charLength": 110,
                  "snippet": {
                    "text": "    now = datetime.now(EST)\n\n    deltaTime = now - dateObj\n\n    minutes = str(deltaTime.total_seconds() // 60)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1252dd7a055af56d94affc9d1891a5967a3a80513650f71d3c9480838b4f26a4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 21,
                  "charOffset": 7658,
                  "charLength": 12,
                  "snippet": {
                    "text": "SelectedGame"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 241,
                  "startColumn": 1,
                  "charOffset": 7562,
                  "charLength": 223,
                  "snippet": {
                    "text": "                timeout = await view.wait()\n                if not timeout:\n                    SelectedGame = var.view_response\n                else:\n                    return await ctx.send(\"Timed out, try again later.\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "30fba0ef0a30032b16b30e5d08bd9b6f904bb7f625e22a47929907cb12458a5f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 17,
                  "charOffset": 7802,
                  "charLength": 6,
                  "snippet": {
                    "text": "GameID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 244,
                  "startColumn": 1,
                  "charOffset": 7691,
                  "charLength": 267,
                  "snippet": {
                    "text": "                else:\n                    return await ctx.send(\"Timed out, try again later.\")\n                GameID = GameDict[SelectedGame]\n                code = str(await self._create_invite(ctx.author.voice, GameID))\n                await ctx.send(\"Loading...\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "56c106626161443edea0329a91ca2d5bdbb9a64632a8e49b97bb1b29e21521e3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 21,
                  "charOffset": 10348,
                  "charLength": 12,
                  "snippet": {
                    "text": "SelectedGame"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 300,
                  "startColumn": 1,
                  "charOffset": 10252,
                  "charLength": 223,
                  "snippet": {
                    "text": "                timeout = await view.wait()\n                if not timeout:\n                    SelectedGame = var.view_response\n                else:\n                    return await ctx.send(\"Timed out, try again later.\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a982e1430d25b59b51900fa9777c65c761d2e431da42c0b6c48c748417d59359"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 17,
                  "charOffset": 10528,
                  "charLength": 6,
                  "snippet": {
                    "text": "GameID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 304,
                  "startColumn": 1,
                  "charOffset": 10403,
                  "charLength": 333,
                  "snippet": {
                    "text": "                    return await ctx.send(\"Timed out, try again later.\")\n                print(SelectedGame)\n                GameID = GameDict[SelectedGame]\n                code = str(await self._create_invite(ctx.author.voice, GameID))\n                await ctx.send(f\"**Click the link to get started!**\\nhttps://discord.gg/{code}\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7001407be9671cd0dee2e1cbca3145c3d4552b8d83c0c71c888b3c41a301be8a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 17,
                  "charOffset": 12122,
                  "charLength": 8,
                  "snippet": {
                    "text": "GameLink"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 340,
                  "startColumn": 1,
                  "charOffset": 12047,
                  "charLength": 230,
                  "snippet": {
                    "text": "                    int(query.ChannelID)\n                )\n                GameLink = str(await channel.create_activity_invite(880218394199220334))\n                await ctx.send(f\"**Click the link to get started!**\\n{GameLink}\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e036f7d3ec3cf103efba81c3d8141e17e2934e2125a1b14b7c6f7ae0a7ffb60d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 17,
                  "charOffset": 14078,
                  "charLength": 8,
                  "snippet": {
                    "text": "GameLink"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 383,
                  "startColumn": 1,
                  "charOffset": 14043,
                  "charLength": 190,
                  "snippet": {
                    "text": "                )\n\n                GameLink = str(await channel.create_activity_invite(880218394199220334))\n                await ctx.send(f\"**Click the link to get started!**\\n{GameLink}\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c404b939c0309158b6a596f8b2bad970a6c8e9725ea973013cab3464edbf776"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 9,
                  "charOffset": 14838,
                  "charLength": 2,
                  "snippet": {
                    "text": "SB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 400,
                  "startColumn": 1,
                  "charOffset": 14735,
                  "charLength": 227,
                  "snippet": {
                    "text": "    async def rename(self, ctx, *, name=None):\n        database.db.connect(reuse_if_open=True)\n        SB = discord.utils.get(ctx.guild.roles, name=self.SB)\n        legend = discord.utils.get(ctx.guild.roles, name=self.Legend)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ae09d9db10457e60860b74f9be3c2c0c38c6fe2015e080f3767c54d49b2f5079"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 9,
                  "charOffset": 14971,
                  "charLength": 2,
                  "snippet": {
                    "text": "MT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 403,
                  "startColumn": 1,
                  "charOffset": 14892,
                  "charLength": 259,
                  "snippet": {
                    "text": "        legend = discord.utils.get(ctx.guild.roles, name=self.Legend)\n\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ad41b808da5a6f5710e59bb9bf7e927194fb5b874f83862ed865d87a21c04093"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 9,
                  "charOffset": 15034,
                  "charLength": 3,
                  "snippet": {
                    "text": "MAT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 404,
                  "startColumn": 1,
                  "charOffset": 14962,
                  "charLength": 251,
                  "snippet": {
                    "text": "\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bf1653299ef99c0bd6e3c132d962f191d8ff69c4c643c915b8534a84c266b30a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 407,
                  "startColumn": 9,
                  "charOffset": 15098,
                  "charLength": 2,
                  "snippet": {
                    "text": "TT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 405,
                  "startColumn": 1,
                  "charOffset": 14963,
                  "charLength": 312,
                  "snippet": {
                    "text": "        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ff7dc14b2c805a59dba5792a65a0b84dc525438ea036cc0d770b666caff6029"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 9,
                  "charOffset": 15160,
                  "charLength": 2,
                  "snippet": {
                    "text": "AT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 406,
                  "startColumn": 1,
                  "charOffset": 15026,
                  "charLength": 311,
                  "snippet": {
                    "text": "        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90cacb00daf01b1f661f7311d43342894f95a94b3118651da4633dcbdb564af7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 9,
                  "charOffset": 15222,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 407,
                  "startColumn": 1,
                  "charOffset": 15090,
                  "charLength": 248,
                  "snippet": {
                    "text": "        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2fb9cf37f24ee3b9e1dc93a42f0b385268385a5b2b8e89d6d5fcc8a3ff6828b7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 9,
                  "charOffset": 15284,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 408,
                  "startColumn": 1,
                  "charOffset": 15152,
                  "charLength": 252,
                  "snippet": {
                    "text": "        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68b9997e789af55f3ef00a01c142f305bfa39d6a81bab58cd74a90c375dea4a9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 9,
                  "charOffset": 15347,
                  "charLength": 4,
                  "snippet": {
                    "text": "L120"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 410,
                  "startColumn": 1,
                  "charOffset": 15276,
                  "charLength": 260,
                  "snippet": {
                    "text": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b25b53928eb8545bbc946cce2e41a83c254b0f912c3d5c8d49035b3c4f13d990"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 9,
                  "charOffset": 15413,
                  "charLength": 4,
                  "snippet": {
                    "text": "L110"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 411,
                  "startColumn": 1,
                  "charOffset": 15338,
                  "charLength": 262,
                  "snippet": {
                    "text": "\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee3d0e991817a684593e7c6ede8d8c79093651e9b12d4eb8a0423b4cbcf06d5a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 414,
                  "startColumn": 9,
                  "charOffset": 15479,
                  "charLength": 4,
                  "snippet": {
                    "text": "L100"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 412,
                  "startColumn": 1,
                  "charOffset": 15339,
                  "charLength": 325,
                  "snippet": {
                    "text": "        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a04a3ca71adca98c872be0ee46200c8bf6533d27608d555453f03bea2f35edcc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 9,
                  "charOffset": 15545,
                  "charLength": 3,
                  "snippet": {
                    "text": "L90"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 413,
                  "startColumn": 1,
                  "charOffset": 15405,
                  "charLength": 323,
                  "snippet": {
                    "text": "        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e23445fac03925df1264036508125f42912379639ab3f338977b4c7a649d1228"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 9,
                  "charOffset": 15609,
                  "charLength": 3,
                  "snippet": {
                    "text": "L80"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 414,
                  "startColumn": 1,
                  "charOffset": 15471,
                  "charLength": 321,
                  "snippet": {
                    "text": "        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80aafb01ece11ea454705556413b037ff3eeba04c365c3f03d5054c925d6a827"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 9,
                  "charOffset": 15673,
                  "charLength": 3,
                  "snippet": {
                    "text": "L70"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 415,
                  "startColumn": 1,
                  "charOffset": 15537,
                  "charLength": 319,
                  "snippet": {
                    "text": "        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b9ee3d71ff401b17281ea7754a1299617d830cfe562ec3c7c5ec60e58a07d617"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 9,
                  "charOffset": 15737,
                  "charLength": 3,
                  "snippet": {
                    "text": "L60"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 416,
                  "startColumn": 1,
                  "charOffset": 15601,
                  "charLength": 319,
                  "snippet": {
                    "text": "        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "219a93fb89ad6a4743e6f18b04925623dfafd146646e6b1eb3e321567128fd82"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 419,
                  "startColumn": 9,
                  "charOffset": 15801,
                  "charLength": 3,
                  "snippet": {
                    "text": "L50"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 417,
                  "startColumn": 1,
                  "charOffset": 15665,
                  "charLength": 256,
                  "snippet": {
                    "text": "        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "42239774c616a77c9d026b742c947c35c52ddcb959f78aa4c5870fdc19fb75da"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 9,
                  "charOffset": 15865,
                  "charLength": 3,
                  "snippet": {
                    "text": "L40"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 418,
                  "startColumn": 1,
                  "charOffset": 15729,
                  "charLength": 213,
                  "snippet": {
                    "text": "        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n\n        roleList = ["
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f5fc480e2c6ea4c9c03b76cac188c75726de15267a10b7321c3dec17e5b88944"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 9,
                  "charOffset": 15930,
                  "charLength": 8,
                  "snippet": {
                    "text": "roleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 420,
                  "startColumn": 1,
                  "charOffset": 15857,
                  "charLength": 117,
                  "snippet": {
                    "text": "        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n\n        roleList = [\n            SB,\n            AT,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d1c561d00a40db19b50ef7135a083f91bbbc2a2d91f82f04aa0b4a2f439155f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 574,
                  "startColumn": 17,
                  "charOffset": 21923,
                  "charLength": 10,
                  "snippet": {
                    "text": "VCDatetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 572,
                  "startColumn": 1,
                  "charOffset": 21834,
                  "charLength": 201,
                  "snippet": {
                    "text": "                )\n                print(f\"T: {query.TutorBotSessionID}\")\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(\n                    query.datetimeObj\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a5415c283a3b8e9df175cf6aecb7c8a2f967fc1884b3562e97f0fa5aae726f84"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 579,
                  "startColumn": 17,
                  "charOffset": 22109,
                  "charLength": 6,
                  "snippet": {
                    "text": "daySTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 577,
                  "startColumn": 1,
                  "charOffset": 22036,
                  "charLength": 186,
                  "snippet": {
                    "text": "\n                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2c766fdd63ea4e0d8bd7c956b7f4c5830f435f3fcf1a41f094fce0cd97c0cc0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 580,
                  "startColumn": 17,
                  "charOffset": 22162,
                  "charLength": 6,
                  "snippet": {
                    "text": "nowSTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 578,
                  "startColumn": 1,
                  "charOffset": 22037,
                  "charLength": 186,
                  "snippet": {
                    "text": "                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "860ffe4cb4d44f6d613a2f72d5b2dbd6736b306f16a6956bae8fdd4481ff0d68"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 599,
                  "startColumn": 17,
                  "charOffset": 22984,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 597,
                  "startColumn": 1,
                  "charOffset": 22920,
                  "charLength": 223,
                  "snippet": {
                    "text": "\n                print(query.TutorBotSessionID)\n                tutorSession = database.TutorBot_Sessions.select().where(\n                    database.TutorBot_Sessions.SessionID == query.TutorBotSessionID\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c81e4e429d8f77ac4d97ea92835800bceae0bf8c19d56b63b4e0445145f31368"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 606,
                  "startColumn": 21,
                  "charOffset": 23248,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 604,
                  "startColumn": 1,
                  "charOffset": 23185,
                  "charLength": 169,
                  "snippet": {
                    "text": "\n                if tutorSession.exists():\n                    tutorSession = tutorSession.get()\n\n                    student = self.bot.get_user(tutorSession.StudentID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb631a0b4cf96108067012a4d9bfb5215c8f9ab29cfb07b705ef3e69a7579d39"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 611,
                  "startColumn": 21,
                  "charOffset": 23444,
                  "charLength": 6,
                  "snippet": {
                    "text": "HOURCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 609,
                  "startColumn": 1,
                  "charOffset": 23355,
                  "charLength": 181,
                  "snippet": {
                    "text": "                    tutor = self.bot.get_user(tutorSession.TutorID)\n\n                    HOURCH = self.bot.get_channel(self.TutorLogID)\n\n                    hourlog = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "087a43a4233be52affceeef2210aadc26f4a673460b9c5512f3c3dbe875b151a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 678,
                  "startColumn": 17,
                  "charOffset": 26398,
                  "charLength": 10,
                  "snippet": {
                    "text": "VCDatetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 676,
                  "startColumn": 1,
                  "charOffset": 26337,
                  "charLength": 188,
                  "snippet": {
                    "text": "                )\n                tag.save()\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(q.datetimeObj)\n\n                day, now = showTotalMinutes(VCDatetime)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "24917d9b40e13b4ba174d453d50d1c8712b419d57ca02fc5ba3cf760297e1deb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 681,
                  "startColumn": 17,
                  "charOffset": 26542,
                  "charLength": 6,
                  "snippet": {
                    "text": "daySTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 679,
                  "startColumn": 1,
                  "charOffset": 26469,
                  "charLength": 186,
                  "snippet": {
                    "text": "\n                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "76b3dbf24295d69fd9e97f76ea04b9ebded4a4f363ebc6fab72195419144e491"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 682,
                  "startColumn": 17,
                  "charOffset": 26595,
                  "charLength": 6,
                  "snippet": {
                    "text": "nowSTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 680,
                  "startColumn": 1,
                  "charOffset": 26470,
                  "charLength": 186,
                  "snippet": {
                    "text": "                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e20bc2efa1bb4f1b1a2301c7338887b58164327822944e75fe8f23ac69e4e809"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 699,
                  "startColumn": 17,
                  "charOffset": 27339,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 697,
                  "startColumn": 1,
                  "charOffset": 27279,
                  "charLength": 215,
                  "snippet": {
                    "text": "\n                print(q.TutorBotSessionID)\n                tutorSession = database.TutorBot_Sessions.select().where(\n                    database.TutorBot_Sessions.SessionID == q.TutorBotSessionID\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b9b658b93811cb587644458fa1c7f8eb396263afc0a68944c4a56be3f04be34"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 21,
                  "charOffset": 27557,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 701,
                  "startColumn": 1,
                  "charOffset": 27477,
                  "charLength": 186,
                  "snippet": {
                    "text": "                )\n                if tutorSession.exists():\n                    tutorSession = tutorSession.get()\n\n                    student = self.bot.get_user(tutorSession.StudentID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a69a45f10723382171954037a67c9ab618918b884aba7e969c741a4447d136dd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 708,
                  "startColumn": 21,
                  "charOffset": 27753,
                  "charLength": 6,
                  "snippet": {
                    "text": "HOURCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 706,
                  "startColumn": 1,
                  "charOffset": 27664,
                  "charLength": 178,
                  "snippet": {
                    "text": "                    tutor = self.bot.get_user(tutorSession.TutorID)\n\n                    HOURCH = self.bot.get_user(self.TutorLogID)\n\n                    hourlog = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a174afff4c21b507876f3c094759e68a5aac7ee6f68cbce877e11540d4814f89"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 828,
                  "startColumn": 17,
                  "charOffset": 32981,
                  "charLength": 10,
                  "snippet": {
                    "text": "VCDatetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 826,
                  "startColumn": 1,
                  "charOffset": 32920,
                  "charLength": 188,
                  "snippet": {
                    "text": "                    .get()\n                )\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(q.datetimeObj)\n\n                day, now = showTotalMinutes(VCDatetime)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3529bf620a65b2363ba64ae76d33508366f78d0bfb0de7262d5d8fe85d5fd0a5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 884,
                  "startColumn": 9,
                  "charOffset": 35279,
                  "charLength": 3,
                  "snippet": {
                    "text": "BOT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 882,
                  "startColumn": 1,
                  "charOffset": 35217,
                  "charLength": 223,
                  "snippet": {
                    "text": "        member = ctx.guild.get_member(ctx.author.id)\n\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "20775e38be938e994a0c22a22df88498dd775cd3fb61f40927c07ee98e5fae47"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 885,
                  "startColumn": 9,
                  "charOffset": 35332,
                  "charLength": 5,
                  "snippet": {
                    "text": "OWNER"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 883,
                  "startColumn": 1,
                  "charOffset": 35270,
                  "charLength": 234,
                  "snippet": {
                    "text": "\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e72275dabe84a8f6e587b1988610a8ca3269b4ade46e9c96ce48237b8835d53"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 886,
                  "startColumn": 9,
                  "charOffset": 35383,
                  "charLength": 4,
                  "snippet": {
                    "text": "TMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 884,
                  "startColumn": 1,
                  "charOffset": 35271,
                  "charLength": 299,
                  "snippet": {
                    "text": "        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fb40efb382a347e6d6f3716d54b4c672253b3cb8e515e325f52531499049a1c9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 887,
                  "startColumn": 9,
                  "charOffset": 35449,
                  "charLength": 3,
                  "snippet": {
                    "text": "MOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 885,
                  "startColumn": 1,
                  "charOffset": 35324,
                  "charLength": 308,
                  "snippet": {
                    "text": "        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a2f75b2105223ed0728a419be68df012fffcaaa42f5d6072d5d2833777c7b449"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 888,
                  "startColumn": 9,
                  "charOffset": 35513,
                  "charLength": 4,
                  "snippet": {
                    "text": "SMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 886,
                  "startColumn": 1,
                  "charOffset": 35375,
                  "charLength": 319,
                  "snippet": {
                    "text": "        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "00ca806bdec8679c5c6e7866bdd8c965658c4bfad0556623cd31eb96e2c2cf47"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 9,
                  "charOffset": 35579,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 887,
                  "startColumn": 1,
                  "charOffset": 35441,
                  "charLength": 315,
                  "snippet": {
                    "text": "        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6f3e470dc00df683c4b3c13bef9b17bd0b51d76cbe14a883ce090dcc9b307bd0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 890,
                  "startColumn": 9,
                  "charOffset": 35641,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 888,
                  "startColumn": 1,
                  "charOffset": 35505,
                  "charLength": 252,
                  "snippet": {
                    "text": "        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d936d8c8d59baf4e59fe169d0bf96f1f5776880d4cff79a4bd493fd1f1592b9e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 891,
                  "startColumn": 9,
                  "charOffset": 35703,
                  "charLength": 2,
                  "snippet": {
                    "text": "ST"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 889,
                  "startColumn": 1,
                  "charOffset": 35571,
                  "charLength": 259,
                  "snippet": {
                    "text": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8223ab7a9b615c210b1b7eebf54b353d662294c0c9dd03a0185912081597cd79"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 893,
                  "startColumn": 9,
                  "charOffset": 35766,
                  "charLength": 2,
                  "snippet": {
                    "text": "SE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 891,
                  "startColumn": 1,
                  "charOffset": 35695,
                  "charLength": 269,
                  "snippet": {
                    "text": "        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "388a8f2095935d14ed517813f0375b9825c348c0bccfa8c19ad601451585a91b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 9,
                  "charOffset": 35839,
                  "charLength": 2,
                  "snippet": {
                    "text": "BM"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 892,
                  "startColumn": 1,
                  "charOffset": 35757,
                  "charLength": 242,
                  "snippet": {
                    "text": "\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")\n        roles = [BM, SE, E, OWNER]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66dcf5480d424e9fc0b932ed109aea76ff1464918f63dea31dcf61c4309e6bf8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 895,
                  "startColumn": 9,
                  "charOffset": 35908,
                  "charLength": 1,
                  "snippet": {
                    "text": "E"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 893,
                  "startColumn": 1,
                  "charOffset": 35758,
                  "charLength": 242,
                  "snippet": {
                    "text": "        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")\n        roles = [BM, SE, E, OWNER]\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ed3493c66df20738817cbf88fe60d90b54391b1eb978f95c1c428a232c4761c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 927,
                  "startColumn": 21,
                  "charOffset": 37300,
                  "charLength": 4,
                  "snippet": {
                    "text": "LOCK"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 925,
                  "startColumn": 1,
                  "charOffset": 37244,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n                if query.exists():\n                    LOCK: database.VCChannelInfo = (\n                        database.VCChannelInfo.select()\n                        .where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "33ae45d03fc03e24ac06a594e4da9001724f36559949e150628aca54673df36b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1006,
                  "startColumn": 9,
                  "charOffset": 40983,
                  "charLength": 2,
                  "snippet": {
                    "text": "TR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1004,
                  "startColumn": 1,
                  "charOffset": 40905,
                  "charLength": 214,
                  "snippet": {
                    "text": "    @commands.command()\n    async def settutor(self, ctx, tutorcode):\n        TR = discord.utils.get(ctx.guild.roles, name=self.TutorRole)\n\n        if TR not in ctx.author.roles or ctx.guild.id == STAFF_ID.g_staff:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c1627e94f27f863860fccd88f7c44cdebb9c92e5232c8590c85e29674fff2ab"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1023,
                  "startColumn": 13,
                  "charOffset": 41661,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1021,
                  "startColumn": 1,
                  "charOffset": 41597,
                  "charLength": 201,
                  "snippet": {
                    "text": "                return await ctx.send(embed=embed)\n\n            tutorSession = database.TutorBot_Sessions.select().where(\n                database.TutorBot_Sessions.SessionID == tutorcode\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "93ac0bd0d6174879c0cf7768d2083ce87240d3c0ebf2cb07ae91da7d2c1d9f83"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1027,
                  "startColumn": 17,
                  "charOffset": 41853,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1025,
                  "startColumn": 1,
                  "charOffset": 41785,
                  "charLength": 174,
                  "snippet": {
                    "text": "            )\n            if tutorSession.exists():\n                tutorSession = tutorSession.get()\n                if member.voice.channel.category_id in self.categoryID:\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d2b372d35ca0d210268c980d1b1a51e9cdae441856750d18e1124b7955e762d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1115,
                  "startColumn": 21,
                  "charOffset": 46038,
                  "charLength": 4,
                  "snippet": {
                    "text": "LOCK"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1113,
                  "startColumn": 1,
                  "charOffset": 45982,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n                if query.exists():\n                    LOCK: database.VCChannelInfo = (\n                        database.VCChannelInfo.select()\n                        .where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d918a43389f22f706575f70baf0191bfb7bb56d71257e091e23c720d5b3b8f1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1195,
                  "startColumn": 33,
                  "charOffset": 49629,
                  "charLength": 10,
                  "snippet": {
                    "text": "typeAction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1193,
                  "startColumn": 1,
                  "charOffset": 49518,
                  "charLength": 253,
                  "snippet": {
                    "text": "    @commands.command()\n    @commands.cooldown(1, 5, commands.BucketType.user)\n    async def permit(self, ctx, typeAction, user: discord.Member = None):\n        database.db.connect(reuse_if_open=True)\n        member = ctx.guild.get_member(ctx.author.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9595ab37d4e1ee07c9588b1e3efdd17f1ae40518149ce99020fe13a2b46d865"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1295,
                  "startColumn": 29,
                  "charOffset": 54511,
                  "charLength": 9,
                  "snippet": {
                    "text": "formatVer"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1293,
                  "startColumn": 1,
                  "charOffset": 54412,
                  "charLength": 184,
                  "snippet": {
                    "text": "                                    randomlist.append(x.display_name)\n\n                            formatVer = \"\\n\".join(randomlist)\n\n                            embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2044488bacbd7e831a3466aded5b6e0055a29d34fce420fc668b6a69a23f947c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1370,
                  "startColumn": 9,
                  "charOffset": 58401,
                  "charLength": 2,
                  "snippet": {
                    "text": "MT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1368,
                  "startColumn": 1,
                  "charOffset": 58339,
                  "charLength": 242,
                  "snippet": {
                    "text": "        member = ctx.guild.get_member(ctx.author.id)\n\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9905e1ef8119360e49b1db5d14c34021a05c6364c0f74be4b14aa47c7c0bf1b7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1371,
                  "startColumn": 9,
                  "charOffset": 58464,
                  "charLength": 3,
                  "snippet": {
                    "text": "MAT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1369,
                  "startColumn": 1,
                  "charOffset": 58392,
                  "charLength": 251,
                  "snippet": {
                    "text": "\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a22135956120b1a3136073d9ac663b10018236ac93e6996a296b6e726292ea01"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1372,
                  "startColumn": 9,
                  "charOffset": 58528,
                  "charLength": 2,
                  "snippet": {
                    "text": "TT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1370,
                  "startColumn": 1,
                  "charOffset": 58393,
                  "charLength": 312,
                  "snippet": {
                    "text": "        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dea02903a0cb805389533f71ce2dd34262d47d06c95bca949e97178a09fa4a99"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1373,
                  "startColumn": 9,
                  "charOffset": 58590,
                  "charLength": 2,
                  "snippet": {
                    "text": "AT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1371,
                  "startColumn": 1,
                  "charOffset": 58456,
                  "charLength": 311,
                  "snippet": {
                    "text": "        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d10c79e3196b336a04740f2c4db4537a2e45911e498bb647739d075532f6f987"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1374,
                  "startColumn": 9,
                  "charOffset": 58652,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1372,
                  "startColumn": 1,
                  "charOffset": 58520,
                  "charLength": 248,
                  "snippet": {
                    "text": "        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d67960182b8fc0dfac87436da0f7050e8c761a2deec89e4f0ab94340c447ea5b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1375,
                  "startColumn": 9,
                  "charOffset": 58714,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1373,
                  "startColumn": 1,
                  "charOffset": 58582,
                  "charLength": 231,
                  "snippet": {
                    "text": "        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        roleList = [MT, MAT, TT, AT, VP, CO]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66700a532ca0d21e241859b2d4ad4515146005047aa059dfa2bf11944accd434"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1377,
                  "startColumn": 9,
                  "charOffset": 58777,
                  "charLength": 8,
                  "snippet": {
                    "text": "roleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1375,
                  "startColumn": 1,
                  "charOffset": 58706,
                  "charLength": 143,
                  "snippet": {
                    "text": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        roleList = [MT, MAT, TT, AT, VP, CO]\n\n        voice_state = member.voice"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a4870c3a2ad1ccf12f57bcad69f0ced909a6acd7bcf92ced35f272739a34cf1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1409,
                  "startColumn": 25,
                  "charOffset": 60153,
                  "charLength": 10,
                  "snippet": {
                    "text": "voiceLIMIT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1407,
                  "startColumn": 1,
                  "charOffset": 60069,
                  "charLength": 228,
                  "snippet": {
                    "text": "                if query.exists():\n                    try:\n                        voiceLIMIT = int(new_voice_limit)\n                    except:\n                        return await ctx.send(f\"{Emoji.deny} Not a valid number!\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "049c37cf94de72d77783221fcb0e253dfad07314408ad00b7c6c74984a37e114"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1566,
                  "startColumn": 15,
                  "charOffset": 67676,
                  "charLength": 7,
                  "snippet": {
                    "text": "startVC"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1564,
                  "startColumn": 1,
                  "charOffset": 67620,
                  "charLength": 144,
                  "snippet": {
                    "text": "\n    @commands.command(aliases=[\"start\"])\n    async def startVC(self, ctx):\n        embed = discord.Embed(\n            title=\"Private Channels\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a38dae1c79d9efec360747ff9ff26d66199778885a5a6e74f535564f96734b5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 5,
                  "charOffset": 571,
                  "charLength": 14,
                  "snippet": {
                    "text": "showFutureTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 565,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c12a75dee80fd934e6b1bb6a977016d2d53152b7a987b36a73d1dca83a0c208e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 5,
                  "charOffset": 829,
                  "charLength": 16,
                  "snippet": {
                    "text": "showTotalMinutes"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 823,
                  "charLength": 71,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6e8928b4a05ae71f66f301b7b203ebc66f682224c9ce5ed67ce3b9edd60c65c6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 22,
                  "charOffset": 846,
                  "charLength": 17,
                  "snippet": {
                    "text": "dateObj: datetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 823,
                  "charLength": 71,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a7468d0c1b1f87a935718b5384b2d19c0f5879d925f20d7e1c287c27fa98365"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 5,
                  "charOffset": 899,
                  "charLength": 9,
                  "snippet": {
                    "text": "deltaTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 866,
                  "charLength": 106,
                  "snippet": {
                    "text": "    now = datetime.now(EST)\n\n    deltaTime = now - dateObj\n\n    totalmin = deltaTime.total_seconds() // 60"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "42d1837afc461570025044c8700c7af4b27751752e8ec30199e1e2fa672a6c97"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 5,
                  "charOffset": 1005,
                  "charLength": 12,
                  "snippet": {
                    "text": "getConsoleCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 999,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f5123e5f4781d23c7ce815e765fa132561ad945f3f48bf07fce8e8849c37b9e4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 5,
                  "charOffset": 1158,
                  "charLength": 10,
                  "snippet": {
                    "text": "ColumnDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1064,
                  "charLength": 164,
                  "snippet": {
                    "text": "        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n    )\n    ColumnDict = {\n        0: q.ch_tv_console,\n        1: q.ch_tv_startvc,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "128fcfd27d21a508a7f9deb748b099c87b4bd595e33e36a14d3b7416bb77d24f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 9,
                  "charOffset": 3305,
                  "charLength": 10,
                  "snippet": {
                    "text": "lobbyStart"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "charOffset": 3198,
                  "charLength": 229,
                  "snippet": {
                    "text": "        database.db.connect(reuse_if_open=True)\n        print(self.LobbyStartIDs[member.guild.id])\n        lobbyStart = member.guild.get_channel(self.LobbyStartIDs[member.guild.id])\n        if lobbyStart == None:\n            try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ccc52d3c1b3f967ada2f938b99666f0a4ddb3f3cf4ea3be18087733971e8c528"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 17,
                  "charOffset": 3444,
                  "charLength": 10,
                  "snippet": {
                    "text": "lobbyStart"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 3380,
                  "charLength": 172,
                  "snippet": {
                    "text": "        if lobbyStart == None:\n            try:\n                lobbyStart = self.bot.get_channel(\n                    self.LobbyStartIDs[member.guild.id]\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "572f95cbe2160032f982ebc6f3faf4aef8758e4136c5ed4a2345bef3a65130ca"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 13,
                  "charOffset": 3952,
                  "charLength": 11,
                  "snippet": {
                    "text": "acadChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 145,
                  "startColumn": 1,
                  "charOffset": 3928,
                  "charLength": 214,
                  "snippet": {
                    "text": "        ):\n\n            acadChannel = self.bot.get_channel(self.channel_id[member.guild.id])\n            query = database.VCChannelInfo.select().where(\n                (database.VCChannelInfo.authorID == member.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1901027ef3fff00896917f80cfab703345caf27c32a8091746efe6a4bcadebab"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 13,
                  "charOffset": 4321,
                  "charLength": 11,
                  "snippet": {
                    "text": "ignoreQuery"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 4217,
                  "charLength": 284,
                  "snippet": {
                    "text": "                & (database.VCChannelInfo.GuildID == before.channel.guild.id)\n            )\n            ignoreQuery = database.IgnoreThis.select().where(\n                (database.IgnoreThis.authorID == member.id)\n                & (database.IgnoreThis.channelID == before.channel.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "52623e4af2f35f9e5e91637ab5651be3ea7433fb2f664fb82d0d4b011b8b8105"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 21,
                  "charOffset": 5667,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 181,
                  "startColumn": 1,
                  "charOffset": 5608,
                  "charLength": 180,
                  "snippet": {
                    "text": "                )\n                try:\n                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e1b8f0abddad5d359d369be90c68760023b19e4d2a7c0d199f08da87eebde7ae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 21,
                  "charOffset": 5769,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 5647,
                  "charLength": 204,
                  "snippet": {
                    "text": "                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None\n\n                if query.ChannelID == str(before.channel.id):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "12f2d72899a655f14e2be1d90f0ecd26412a354e780d5ba9fb43be2072cb788c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 29,
                  "charOffset": 8650,
                  "charLength": 10,
                  "snippet": {
                    "text": "VCDatetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 242,
                  "startColumn": 1,
                  "charOffset": 8553,
                  "charLength": 233,
                  "snippet": {
                    "text": "                                .get()\n                            )\n                            VCDatetime = pytz.timezone(\"America/New_York\").localize(\n                                query.datetimeObj\n                            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a48eeb69e253a39328547480e1e13002a0425e19a948421231c485bbd5c2fd4d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 29,
                  "charOffset": 8884,
                  "charLength": 6,
                  "snippet": {
                    "text": "daySTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 247,
                  "startColumn": 1,
                  "charOffset": 8787,
                  "charLength": 192,
                  "snippet": {
                    "text": "\n                            day, now = showTotalMinutes(VCDatetime)\n                            daySTR = int(VCDatetime.timestamp())\n                            nowSTR = int(now.timestamp())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "81370e173aee683a40bb09abc0f3666f552d845be8916a7418bea35b6da7262b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 29,
                  "charOffset": 8949,
                  "charLength": 6,
                  "snippet": {
                    "text": "nowSTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 248,
                  "startColumn": 1,
                  "charOffset": 8788,
                  "charLength": 243,
                  "snippet": {
                    "text": "                            day, now = showTotalMinutes(VCDatetime)\n                            daySTR = int(VCDatetime.timestamp())\n                            nowSTR = int(now.timestamp())\n\n                            query.delete_instance()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "25d94eabe217b4ff0cfeab7a5742d971316498d9b7c3d7b884a29af391863931"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 33,
                  "charOffset": 10179,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 271,
                  "startColumn": 1,
                  "charOffset": 10041,
                  "charLength": 310,
                  "snippet": {
                    "text": "                                    content=member.mention, embed=embed\n                                )\n                                tutorSession = (\n                                    database.TutorBot_Sessions.select().where(\n                                        database.TutorBot_Sessions.SessionID"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "69b49e1e88fb6b4db226fc34952f889b43561b7d632675cbaf2f6c64ce5f2662"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 37,
                  "charOffset": 10586,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 279,
                  "startColumn": 1,
                  "charOffset": 10491,
                  "charLength": 194,
                  "snippet": {
                    "text": "                                if tutorSession.exists():\n\n                                    tutorSession = tutorSession.get()\n\n                                    student = self.bot.get_user("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "301602e03a614b4c515dfe540fe27dd07a376bfa78a6640760101c0e08ca2d43"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 37,
                  "charOffset": 10985,
                  "charLength": 6,
                  "snippet": {
                    "text": "HOURCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 287,
                  "startColumn": 1,
                  "charOffset": 10850,
                  "charLength": 259,
                  "snippet": {
                    "text": "                                        tutorSession.TutorID\n                                    )\n                                    HOURCH = self.bot.get_channel(\n                                        self.TutorLogID\n                                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f1378df85e89342329e2f86c4861c9fd66ccc33e8a4e4261867007589f0ad6c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 13,
                  "charOffset": 14017,
                  "charLength": 11,
                  "snippet": {
                    "text": "acadChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 341,
                  "startColumn": 1,
                  "charOffset": 13963,
                  "charLength": 155,
                  "snippet": {
                    "text": "            and not member.bot\n        ):\n            acadChannel = self.bot.get_channel(\n                self.LobbyStartIDs[member.guild.id]\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "50428278042513909e0819611b56837f2c054eaa35f584612537055ba97558c4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 13,
                  "charOffset": 14186,
                  "charLength": 2,
                  "snippet": {
                    "text": "SB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 345,
                  "startColumn": 1,
                  "charOffset": 14105,
                  "charLength": 215,
                  "snippet": {
                    "text": "            )\n            print(acadChannel, after.channel.guild.id)\n            SB = discord.utils.get(member.guild.roles, name=self.SB)\n\n            legend = discord.utils.get(member.guild.roles, name=self.Legend)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d4282dda8db6cd8b56f2ba2c921d1e0e437f2c98014e0b73e945a4640294b741"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 13,
                  "charOffset": 14334,
                  "charLength": 2,
                  "snippet": {
                    "text": "MT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 349,
                  "startColumn": 1,
                  "charOffset": 14244,
                  "charLength": 287,
                  "snippet": {
                    "text": "            legend = discord.utils.get(member.guild.roles, name=self.Legend)\n\n            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72483e5db4b3c24c50eb4489f49e2cde0478709c7d4712bca1b9d33240096d98"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 13,
                  "charOffset": 14404,
                  "charLength": 3,
                  "snippet": {
                    "text": "MAT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 350,
                  "startColumn": 1,
                  "charOffset": 14321,
                  "charLength": 279,
                  "snippet": {
                    "text": "\n            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2001b9be0a35e271903d9b518315728bc60c149ac978d31ac8a65a46113cc65c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 13,
                  "charOffset": 14475,
                  "charLength": 2,
                  "snippet": {
                    "text": "TT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 351,
                  "startColumn": 1,
                  "charOffset": 14322,
                  "charLength": 347,
                  "snippet": {
                    "text": "            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2d77d9870c332709005110160a7fed172371ef7ec1e22de4436ba20ff1395d1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 13,
                  "charOffset": 14544,
                  "charLength": 2,
                  "snippet": {
                    "text": "AT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 352,
                  "startColumn": 1,
                  "charOffset": 14392,
                  "charLength": 346,
                  "snippet": {
                    "text": "            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc0175546f9e7dacadbe7280d3ca2ca9609714fa3daef130df016662e2d853fe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 13,
                  "charOffset": 14613,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 353,
                  "startColumn": 1,
                  "charOffset": 14463,
                  "charLength": 276,
                  "snippet": {
                    "text": "            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d33021c7b250a672d8f1c29c2c07e3ed1417b279d87a7bf047fcd571e4972ec1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 13,
                  "charOffset": 14682,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 354,
                  "startColumn": 1,
                  "charOffset": 14532,
                  "charLength": 268,
                  "snippet": {
                    "text": "            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)\n\n            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d1bed80cd0e7d67da745ab99b0db394b190f74abba58b6ba3f5fa58a277fb5ca"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 13,
                  "charOffset": 14752,
                  "charLength": 8,
                  "snippet": {
                    "text": "roleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 356,
                  "startColumn": 1,
                  "charOffset": 14670,
                  "charLength": 214,
                  "snippet": {
                    "text": "            CO = discord.utils.get(member.guild.roles, name=self.CO)\n\n            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]\n\n            TutorRole = discord.utils.get(member.guild.roles, name=self.TutorRole)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f42571887ec8f0a0055cefbeb03e2fb7cecdfb9713e1a733d95f0af7e3b4746"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 13,
                  "charOffset": 14814,
                  "charLength": 9,
                  "snippet": {
                    "text": "TutorRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 358,
                  "startColumn": 1,
                  "charOffset": 14740,
                  "charLength": 187,
                  "snippet": {
                    "text": "            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]\n\n            TutorRole = discord.utils.get(member.guild.roles, name=self.TutorRole)\n\n            category = discord.utils.get("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "02f2c3aaaa22b430e74c4a18c709a83114e7aefe1e474d367386172dded4ce09"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 17,
                  "charOffset": 15899,
                  "charLength": 13,
                  "snippet": {
                    "text": "moveToChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 379,
                  "startColumn": 1,
                  "charOffset": 15838,
                  "charLength": 158,
                  "snippet": {
                    "text": "            )\n            if query.exists():\n                moveToChannel = (\n                    database.VCChannelInfo.select()\n                    .where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9b5211c38d09a89acc8b9f184e3c1a7eb2c6b844d75c307d2d0bcec5a481fe0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 21,
                  "charOffset": 16712,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 395,
                  "startColumn": 1,
                  "charOffset": 16653,
                  "charLength": 170,
                  "snippet": {
                    "text": "                )\n                try:\n                    tutorChannel = self.bot.get_channel(\n                        int(moveToChannel.ChannelID)\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ba1b9512ff04f94bf678dc4aa312b9a6271479e34c1ea1938d9f39906322cc45"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 15,
                  "charOffset": 651,
                  "charLength": 12,
                  "snippet": {
                    "text": "TTSWeekCheck"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 608,
                  "charLength": 146,
                  "snippet": {
                    "text": "\n    @tasks.loop(seconds=10)\n    async def TTSWeekCheck(self):\n        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d8031e9c7e64a5798982a38b974ef29837c1ad746855ceaf98010a59ff36df0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 9,
                  "charOffset": 725,
                  "charLength": 10,
                  "snippet": {
                    "text": "weekdayNow"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 637,
                  "charLength": 147,
                  "snippet": {
                    "text": "    async def TTSWeekCheck(self):\n        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()\n        timeNow = now.time()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c1c18a575dc706aa306ae09d3498527b942bf75156cca02c69be80f945f28c33"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 9,
                  "charOffset": 763,
                  "charLength": 7,
                  "snippet": {
                    "text": "timeNow"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 671,
                  "charLength": 168,
                  "snippet": {
                    "text": "        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()\n        timeNow = now.time()\n\n        queryLeaderboard = StudyVCLeaderboard.select()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "65bdcbffb812948b30ca1a152a815c6a4b2717ec240feb26445f1d1e8f7d090d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 9,
                  "charOffset": 793,
                  "charLength": 16,
                  "snippet": {
                    "text": "queryLeaderboard"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 755,
                  "charLength": 144,
                  "snippet": {
                    "text": "        timeNow = now.time()\n\n        queryLeaderboard = StudyVCLeaderboard.select()\n        entries = [entry.id for entry in queryLeaderboard]\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3415d2e664f9bce5037ae80f8187f6226f9843fbdd030d099e2326c98edc3b6e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 13,
                  "charOffset": 1026,
                  "charLength": 9,
                  "snippet": {
                    "text": "lastReset"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 899,
                  "charLength": 275,
                  "snippet": {
                    "text": "\n        if weekdayNow == 1 and (now - self.lastReset >= datetime.timedelta(days=7)) and timeNow >= self.midnight:\n            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(StudyVCLeaderboard.id == entry)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "63dc79142887b527f0ac12ed5e2420fb0737147edcd91d298060ea79ef7499fc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 17,
                  "charOffset": 1092,
                  "charLength": 16,
                  "snippet": {
                    "text": "queryLeaderboard"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 1014,
                  "charLength": 263,
                  "snippet": {
                    "text": "            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(StudyVCLeaderboard.id == entry)\n                queryLeaderboard = queryLeaderboard.get()\n                queryLeaderboard.TTSWeek = 0"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "708ba9e5119b53592cd53100a2271e0192c8f4a04a4181a03f36797ea58855fe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 17,
                  "charOffset": 1191,
                  "charLength": 16,
                  "snippet": {
                    "text": "queryLeaderboard"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 1042,
                  "charLength": 275,
                  "snippet": {
                    "text": "            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(StudyVCLeaderboard.id == entry)\n                queryLeaderboard = queryLeaderboard.get()\n                queryLeaderboard.TTSWeek = 0\n                queryLeaderboard.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6186cc5d75d3320fd6995049157ce0506a0d1c6daf022f214336711b4488fd3a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 5,
                  "charOffset": 1036,
                  "charLength": 14,
                  "snippet": {
                    "text": "showFutureTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "charOffset": 1030,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "19c8e048fa4d936032dd1f70454749806e8f5f2aae0ec005a0e830fc3c897141"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 5,
                  "charOffset": 1294,
                  "charLength": 16,
                  "snippet": {
                    "text": "showTotalMinutes"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 1288,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d01521ebc62f50e200e4a9e1e2d481294c3c68a0165ce8de71d7b7d1bbc3af1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 22,
                  "charOffset": 1311,
                  "charLength": 17,
                  "snippet": {
                    "text": "dateObj: datetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 1288,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aec8f44e18600e58c295c57dc4f6ae5c8cc1fd5bcac9d1d252af3d0949e8b9a8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 5,
                  "charOffset": 1363,
                  "charLength": 7,
                  "snippet": {
                    "text": "dateObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 1,
                  "charOffset": 1290,
                  "charLength": 165,
                  "snippet": {
                    "text": "def showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)\n\n    deltaTime = now - dateObj"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb00d6f13dec0dd050610b4afee04aee3f0e05b475b6dc4c379df68787bb8918"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 5,
                  "charOffset": 1430,
                  "charLength": 9,
                  "snippet": {
                    "text": "deltaTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 1359,
                  "charLength": 144,
                  "snippet": {
                    "text": "    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)\n\n    deltaTime = now - dateObj\n\n    totalmin = deltaTime.total_seconds() // 60"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b610a6b8b319caaca73c3fb803c4e7af832a2ab89b4fe54dca4ff9847930533e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 5,
                  "charOffset": 1536,
                  "charLength": 16,
                  "snippet": {
                    "text": "_getXPForNextLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 1530,
                  "charLength": 96,
                  "snippet": {
                    "text": "\n\ndef _getXPForNextLvl(lvl: int):\n    \"\"\"\n    Get the XP the user needs to reach the next level."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a3577e0b7830e26288530c2067a3234a942542e1cc2efa77b7227c70cbb6e60"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 5,
                  "charOffset": 1714,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 1,
                  "charOffset": 1701,
                  "charLength": 79,
                  "snippet": {
                    "text": "    \"\"\"\n\n    xpNeeded = (5 * lvl * lvl) + (50 * lvl) + 100\n\n    return xpNeeded"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aead463569a4dc17e1e367fb5963fcfd5bb2e9ce5849e27d4c953b7a730be2a4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 5,
                  "charOffset": 1787,
                  "charLength": 12,
                  "snippet": {
                    "text": "_shortNumber"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 1781,
                  "charLength": 107,
                  "snippet": {
                    "text": "\n\ndef _shortNumber(number: int) -> str:\n    \"\"\"\n    Shorts a number and adds the number abbreviation to it."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2fe7b96cfaabb5234d9b71ecd1c1d8160e583fa78d0094ff9563a86cad9d737e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 5,
                  "charOffset": 2135,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 2122,
                  "charLength": 64,
                  "snippet": {
                    "text": "    \"\"\"\n\n    numberStr = ...  # type: str\n\n    if number < 1000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a8234547d672d7a2596faadda825332dd40df851219438723efc6f58cd4ffa9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 9,
                  "charOffset": 2195,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 1,
                  "charOffset": 2164,
                  "charLength": 82,
                  "snippet": {
                    "text": "\n    if number < 1000:\n        numberStr = f\"{number}\"\n\n    elif number < 1000000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d02e48d0394d2b0878d45bba279f2b6da9fdd8a382520fd97f472cb845cfaf82"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 9,
                  "charOffset": 2312,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 2247,
                  "charLength": 120,
                  "snippet": {
                    "text": "        number /= 1000\n        number = round(number, 2)\n        numberStr = f\"{number}K\"\n\n    elif number < 1000000000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3311b8e7c45cfd599d28dae1c8bf5a028b4054d3bdea3e6e456c67001e9133a4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 9,
                  "charOffset": 2436,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 2368,
                  "charLength": 126,
                  "snippet": {
                    "text": "        number /= 1000000\n        number = round(number, 2)\n        numberStr = f\"{number}M\"\n\n    elif number < 1000000000000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "30fb7540be7ab0cd89d546f5970fb929e9e3a4feeaf733fb8ae3080c7763b10d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 9,
                  "charOffset": 2566,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 2495,
                  "charLength": 132,
                  "snippet": {
                    "text": "        number /= 1000000000\n        number = round(number, 2)\n        numberStr = f\"{number}B\"\n\n    elif number < 1000000000000000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8525101880925baaf74d1682151f1984ca7d8444fbfda7e7db2ead9a06a2cc89"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 9,
                  "charOffset": 2702,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 1,
                  "charOffset": 2628,
                  "charLength": 109,
                  "snippet": {
                    "text": "        number /= 1000000000000\n        number = round(number, 2)\n        numberStr = f\"{number}T\"\n\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ed6ebd62d228101700b8a0b7b5956b4420e59df3e446f4dd4ccc3f2085080bb6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 11,
                  "charOffset": 2829,
                  "charLength": 22,
                  "snippet": {
                    "text": "addLeaderboardProgress"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "charOffset": 2817,
                  "charLength": 198,
                  "snippet": {
                    "text": "\n\nasync def addLeaderboardProgress(member: discord.Member):\n    \"\"\"\n    Updates the data in the database table `StudyVCLeaderboard` of a specific member and adds level roles to the member if needed."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6a79adfb6c961d11f608f24fa74726bbb9229a7eb3a0dc6c5d943e91f9b25c1c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 5,
                  "charOffset": 3167,
                  "charLength": 11,
                  "snippet": {
                    "text": "xpPerMinute"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 1,
                  "charOffset": 3087,
                  "charLength": 194,
                  "snippet": {
                    "text": "    :return: Whenever the user has been found in the database: bool\n    \"\"\"\n    xpPerMinute = 30\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9ca4318d1df2a4a9a7a73f1e404e2448373052882ba5e0c1e2178678333ae0b3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 5,
                  "charOffset": 3189,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 1,
                  "charOffset": 3163,
                  "charLength": 193,
                  "snippet": {
                    "text": "    xpPerMinute = 30\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7fc98c295698c2a320c96104036d5fd8b77d6886d053b067449ba06a5e4eed8c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 9,
                  "charOffset": 3321,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 1,
                  "charOffset": 3185,
                  "charLength": 308,
                  "snippet": {
                    "text": "    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4b5237a586e8df5079867b8a734231ccd4b1b0de4df3ac7b5a9eaa22421ea8f5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 9,
                  "charOffset": 3431,
                  "charLength": 16,
                  "snippet": {
                    "text": "leaderboardQuery"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "charOffset": 3313,
                  "charLength": 245,
                  "snippet": {
                    "text": "        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where(\n            database.StudyVCLeaderboard.discordID == member.id)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9c88c4a49bc9122d7f62da8edfcb9d2f7fb1bc3ce0f0be2c93cb474b564eaccb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 9,
                  "charOffset": 3567,
                  "charLength": 8,
                  "snippet": {
                    "text": "isNewLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 1,
                  "charOffset": 3494,
                  "charLength": 181,
                  "snippet": {
                    "text": "            database.StudyVCLeaderboard.discordID == member.id)\n\n        isNewLvl = False\n        if leaderboardQuery.exists():\n            leaderboardQuery = leaderboardQuery.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c54aedef253a36d9c3b34dd4064d3d4be64f7972bd918c920b4df4233f98812e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 13,
                  "charOffset": 3634,
                  "charLength": 16,
                  "snippet": {
                    "text": "leaderboardQuery"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 1,
                  "charOffset": 3559,
                  "charLength": 258,
                  "snippet": {
                    "text": "        isNewLvl = False\n        if leaderboardQuery.exists():\n            leaderboardQuery = leaderboardQuery.get()\n            leaderboardQuery.TTS = totalmin + leaderboardQuery.TTS\n            leaderboardQuery.TTSWeek = totalmin + leaderboardQuery.TTSWeek"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6e9c4ed11352f9151fa4c38ae3b7e3b8b68946f3b3b33420223f7076b962d3ac"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 13,
                  "charOffset": 3911,
                  "charLength": 10,
                  "snippet": {
                    "text": "currentLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 3818,
                  "charLength": 226,
                  "snippet": {
                    "text": "            leaderboardQuery.totalSessions = leaderboardQuery.totalSessions + 1\n\n            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d2e57ac2c60e61ec72b4d7f389de87b7fc402d0cb4b28c0c1c9c38c7f831573"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 13,
                  "charOffset": 3959,
                  "charLength": 9,
                  "snippet": {
                    "text": "currentXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 150,
                  "startColumn": 1,
                  "charOffset": 3898,
                  "charLength": 147,
                  "snippet": {
                    "text": "\n            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "631e6dc5075c9678ac92768281bf9ae8403ffbb688c309a99422c64cc3e1a9ec"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 13,
                  "charOffset": 4003,
                  "charLength": 14,
                  "snippet": {
                    "text": "currentTotalXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 3899,
                  "charLength": 198,
                  "snippet": {
                    "text": "            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP\n\n            xpNeeded = _getXPForNextLvl(currentLvl)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f1d8fde226d81b288fe3f09a232c08ddeb472cb1e59b3835e4bd02d1ffef5126"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 13,
                  "charOffset": 4058,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 153,
                  "startColumn": 1,
                  "charOffset": 3991,
                  "charLength": 153,
                  "snippet": {
                    "text": "            currentTotalXP = leaderboardQuery.totalXP\n\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b915571eb7d56483affe3e5963b1af2682b490b068e2e370c561d2734f02acab"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 13,
                  "charOffset": 4110,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpEarned"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "charOffset": 4045,
                  "charLength": 140,
                  "snippet": {
                    "text": "\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "050df283244b4088f806848efb8d125449f6ec7329c3226e089025a3c8a4c1ff"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 13,
                  "charOffset": 4157,
                  "charLength": 5,
                  "snippet": {
                    "text": "newXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 156,
                  "startColumn": 1,
                  "charOffset": 4098,
                  "charLength": 170,
                  "snippet": {
                    "text": "            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "64f6acbe020ebb3565f88cd9b0d4fc17ddba9810f10cf387b21e4cdf9c7607d9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 13,
                  "charOffset": 4198,
                  "charLength": 10,
                  "snippet": {
                    "text": "newTotalXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 4144,
                  "charLength": 125,
                  "snippet": {
                    "text": "\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a9b1b271d08b202575bd1e3e2c4d26227057fe645ee85bd75735208395b6b40c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 13,
                  "charOffset": 4249,
                  "charLength": 6,
                  "snippet": {
                    "text": "newLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 158,
                  "startColumn": 1,
                  "charOffset": 4145,
                  "charLength": 158,
                  "snippet": {
                    "text": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5a0de2558323055bd2ed72ecc07714a97b66a3bf9aa255755e0edd4e228d10c8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 17,
                  "charOffset": 4321,
                  "charLength": 8,
                  "snippet": {
                    "text": "isNewLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 162,
                  "startColumn": 1,
                  "charOffset": 4270,
                  "charLength": 149,
                  "snippet": {
                    "text": "            if newXP >= xpNeeded:\n\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b6edb9b18eeaa2c3fdb8027a3eb0a58766e896b39fa9fc13e5f2812af2c1e092"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 17,
                  "charOffset": 4353,
                  "charLength": 11,
                  "snippet": {
                    "text": "newXPNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 4304,
                  "charLength": 156,
                  "snippet": {
                    "text": "\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:\n                    newXP -= newXPNeeded"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "558279b8074333fafe00a7d63fc31871709a7d01d78d91ac1bba7299746611b6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 21,
                  "charOffset": 4513,
                  "charLength": 11,
                  "snippet": {
                    "text": "newXPNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 167,
                  "startColumn": 1,
                  "charOffset": 4420,
                  "charLength": 172,
                  "snippet": {
                    "text": "                    newXP -= newXPNeeded\n                    newLvl += 1\n                    newXPNeeded = _getXPForNextLvl(newLvl)\n\n            leaderboardQuery.xp = newXP"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "abe55de3ff096a4323486406c092c0fbe29d9662ce64e8e1674273452e4cea9e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 13,
                  "charOffset": 4751,
                  "charLength": 10,
                  "snippet": {
                    "text": "currentLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "charOffset": 4724,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n        else:\n            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2dce56a3edcfeec92c19fd0854ea1d37155d0ecd7287dbac254d9493686e0e5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 13,
                  "charOffset": 4778,
                  "charLength": 9,
                  "snippet": {
                    "text": "currentXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 4725,
                  "charLength": 98,
                  "snippet": {
                    "text": "        else:\n            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "94c9a7958bdead161654e4cd9bd8ed17c8573a3623b67afdabda39483f2b4b7a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 13,
                  "charOffset": 4804,
                  "charLength": 14,
                  "snippet": {
                    "text": "currentTotalXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 4739,
                  "charLength": 136,
                  "snippet": {
                    "text": "            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0\n\n            xpNeeded = _getXPForNextLvl(currentLvl)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d785baabaac2f675f50a497f83249fa13ab324618523c5e8776fafaa8d3357c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "charOffset": 4836,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 4792,
                  "charLength": 130,
                  "snippet": {
                    "text": "            currentTotalXP = 0\n\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d0ee91cd5f14fa5118f49010dafda054ae592f4eddaa90a7fc4b345816f1a4e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 13,
                  "charOffset": 4888,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpEarned"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 181,
                  "startColumn": 1,
                  "charOffset": 4823,
                  "charLength": 140,
                  "snippet": {
                    "text": "\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "16131054a257536fcbce0416227299e3b0ee0ec4548b530e232a46171cf22a15"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 13,
                  "charOffset": 4935,
                  "charLength": 5,
                  "snippet": {
                    "text": "newXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 4876,
                  "charLength": 170,
                  "snippet": {
                    "text": "            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1950a0f5287655aeeb7d2ac6b913d35e54854556bcc5d7bd08fc60cd81110e7a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 13,
                  "charOffset": 4976,
                  "charLength": 10,
                  "snippet": {
                    "text": "newTotalXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 184,
                  "startColumn": 1,
                  "charOffset": 4922,
                  "charLength": 125,
                  "snippet": {
                    "text": "\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "018c2bc2dbd55688ec06d8ececa8d81fc7c0cc46b86ce0ab7e6672973f44c397"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 13,
                  "charOffset": 5027,
                  "charLength": 6,
                  "snippet": {
                    "text": "newLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 185,
                  "startColumn": 1,
                  "charOffset": 4923,
                  "charLength": 158,
                  "snippet": {
                    "text": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0bf9540bc818dfb501872ae9ae8e20278271d4da02a48e38302c4f77ebbec25"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 17,
                  "charOffset": 5099,
                  "charLength": 8,
                  "snippet": {
                    "text": "isNewLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 189,
                  "startColumn": 1,
                  "charOffset": 5048,
                  "charLength": 149,
                  "snippet": {
                    "text": "            if newXP >= xpNeeded:\n\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a5a3879aed10c7caa67e29d1d167540dbb91731433149b5d5b6ec1a7ac61b84a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 17,
                  "charOffset": 5131,
                  "charLength": 11,
                  "snippet": {
                    "text": "newXPNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 190,
                  "startColumn": 1,
                  "charOffset": 5082,
                  "charLength": 156,
                  "snippet": {
                    "text": "\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:\n                    newXP -= newXPNeeded"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4c8bef71486a53be639919410e1f1bb0f7184b584cb9e86a8163b0970d9e1329"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 21,
                  "charOffset": 5291,
                  "charLength": 11,
                  "snippet": {
                    "text": "newXPNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 194,
                  "startColumn": 1,
                  "charOffset": 5198,
                  "charLength": 184,
                  "snippet": {
                    "text": "                    newXP -= newXPNeeded\n                    newLvl += 1\n                    newXPNeeded = _getXPForNextLvl(newLvl)\n\n            q = database.StudyVCLeaderboard.create("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "278b462e20617ac4699186bb915458391bc6cf238c46393879df60fed9b058f6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 9,
                  "charOffset": 5652,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 207,
                  "startColumn": 1,
                  "charOffset": 5622,
                  "charLength": 82,
                  "snippet": {
                    "text": "            q.save()\n\n        roleStr = \"\"\n        if newLvl < 5:\n            pass"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a8bc9b442303797f7073527d747114a1da504bf8093123302a185142c59e0fb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 17,
                  "charOffset": 5844,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 215,
                  "startColumn": 1,
                  "charOffset": 5796,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n            if currentLvl < 5:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9cf7c0d7b423d5cebdad195da10c8d25af25893122028a820850115dc93cc97"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 17,
                  "charOffset": 6050,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 222,
                  "startColumn": 1,
                  "charOffset": 6001,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 10:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4f23afc65a037297eb5ae690461773830a089631fcf51e2950ed193d25db54b6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 17,
                  "charOffset": 6256,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 229,
                  "startColumn": 1,
                  "charOffset": 6207,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 20:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "14189a1ac7cd8e2c56d2f5f24ae61dfab5153fac2b386d6ab0f3543bc9a5646a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 17,
                  "charOffset": 6462,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 236,
                  "startColumn": 1,
                  "charOffset": 6413,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 30:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "779d8ab6cd82d37cdae944aeca6d5adf30129ca14881bba5b927c018025f646f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 17,
                  "charOffset": 6668,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 243,
                  "startColumn": 1,
                  "charOffset": 6619,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 40:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ba17170e45e2a4afad0b83cea882ec0caf52e18d06eec360568377b6d9163b1e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 17,
                  "charOffset": 6874,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 250,
                  "startColumn": 1,
                  "charOffset": 6825,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 50:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "919ff3d327f2a59106c61b5ca17a4c122127a5eb8c53d01cd80f79ea463c9c35"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 17,
                  "charOffset": 7080,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 257,
                  "startColumn": 1,
                  "charOffset": 7031,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 60:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "697c70320e3c34848518d337571c4114d4ff5c8a5a4d9288aa74cee624599140"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 17,
                  "charOffset": 7286,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 264,
                  "startColumn": 1,
                  "charOffset": 7237,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 70:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bed8d12f5dba48aba487b5660588f50eb498e43213843386b5799285436542f4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 17,
                  "charOffset": 7492,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 271,
                  "startColumn": 1,
                  "charOffset": 7443,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 80:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "52e5f5fce22e136bb2fb40d719fdf0d8e3d4df4cc4200c14157f09123788f091"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 17,
                  "charOffset": 7699,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 278,
                  "startColumn": 1,
                  "charOffset": 7650,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 90:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b9362ec04c3323bef7f92cdd68ecbf4513a1599d2b333054caf6d480a94d2b24"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 17,
                  "charOffset": 7909,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 285,
                  "startColumn": 1,
                  "charOffset": 7859,
                  "charLength": 115,
                  "snippet": {
                    "text": "\n            if currentLvl < 100:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "86a637a4cc29177e28af02d72c17392096fe3453db1b7885ddadd14363c4dc5e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 13,
                  "charOffset": 8009,
                  "charLength": 5,
                  "snippet": {
                    "text": "dmMSG"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 290,
                  "startColumn": 1,
                  "charOffset": 7975,
                  "charLength": 161,
                  "snippet": {
                    "text": "        if isNewLvl:\n\n            dmMSG = f\"{member.mention}, you've reached level **{newLvl}** in Study VC!\" \\\n                    f\"{roleStr}\"\n            try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "caf8cd387861eaf964859a732c9e34e49eeaaaadfe00df20cff00b637311c43b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 5,
                  "charOffset": 8256,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 300,
                  "startColumn": 1,
                  "charOffset": 8230,
                  "charLength": 141,
                  "snippet": {
                    "text": "        return False\n\n    StudySessionQ = StudySessionQ.get()\n    StudySessionQ.StartTime = datetime.now(EST)\n    StudySessionQ.Paused = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bff62cd82074582c583b0598220f6d65d2d4ea000510878d2de03ca7b5bdf02c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 11,
                  "charOffset": 8426,
                  "charLength": 10,
                  "snippet": {
                    "text": "endSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 308,
                  "startColumn": 1,
                  "charOffset": 8414,
                  "charLength": 180,
                  "snippet": {
                    "text": "\n\nasync def endSession(member: discord.Member):\n    \"\"\"\n    Ends the session by kicking the user out of the voice channel and removing the user from the database table `StudyVCDB`."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d9506e9a31a7951120cd9579d0ffb0b58879bc5c89c62c2e40a634ed7b1f022e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 5,
                  "charOffset": 8752,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 317,
                  "startColumn": 1,
                  "charOffset": 8739,
                  "charLength": 180,
                  "snippet": {
                    "text": "    \"\"\"\n\n    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8be5fd76027a6ade2578273b9cb782fbd53f2eca2cfe8c2e9018be1e826acee5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 9,
                  "charOffset": 8884,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 319,
                  "startColumn": 1,
                  "charOffset": 8748,
                  "charLength": 240,
                  "snippet": {
                    "text": "    StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        StudySessionQ.delete_instance()\n        StudySessionQ.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "09fe669241de5b6185149597135d82a4366ad7fb85b88f41fcb7c0c10a8d68ec"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 9,
                  "charOffset": 11509,
                  "charLength": 12,
                  "snippet": {
                    "text": "isInDatabase"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 389,
                  "startColumn": 1,
                  "charOffset": 11418,
                  "charLength": 178,
                  "snippet": {
                    "text": "        Removes an item from the study to-do list of the author/owner.\n        \"\"\"\n        isInDatabase = await addLeaderboardProgress(interaction.user)\n\n        if isInDatabase:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c5232bb341448cece13fca727bc3777d6fa5e5044596132717b23c8259641f1a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 9,
                  "charOffset": 12872,
                  "charLength": 6,
                  "snippet": {
                    "text": "lbList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 423,
                  "startColumn": 1,
                  "charOffset": 12807,
                  "charLength": 201,
                  "snippet": {
                    "text": "        guild = self.bot.get_guild(self.StudyVCGuildID)\n\n        lbList = []\n        i = 1\n        for entry in database.StudyVCLeaderboard.select().order_by(database.StudyVCLeaderboard.totalXP.desc(),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0ccc879489514fbb13dfd6ae66f1ce4847c0ee86f205f725aa95bdfb572caa44"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 445,
                  "startColumn": 17,
                  "charOffset": 13493,
                  "charLength": 10,
                  "snippet": {
                    "text": "totalXPStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 443,
                  "startColumn": 1,
                  "charOffset": 13437,
                  "charLength": 193,
                  "snippet": {
                    "text": "                    place = f\"`{i}th`\"\n\n                totalXPStr = _shortNumber(entry.totalXP)\n                lbList.append(f\"{place} **{member}**: `{totalXPStr} XP`\")\n                i += 1"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dcf3269ed684be439f3826fc9abac288a33bd130329ba55871dcc6039ffb0f41"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 449,
                  "startColumn": 9,
                  "charOffset": 13661,
                  "charLength": 13,
                  "snippet": {
                    "text": "FormattedList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 447,
                  "startColumn": 1,
                  "charOffset": 13608,
                  "charLength": 156,
                  "snippet": {
                    "text": "                i += 1\n        print(lbList)\n        FormattedList = \"\\n\".join(lbList)\n        embed = discord.Embed(\n            title=\"Study Leaderboard\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a1e380a9792d14e13a3cf0027ca6e2f8fb9e9d95fd8dc343a4ea2ab99e44088"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "charOffset": 844,
                  "charLength": 15,
                  "snippet": {
                    "text": "setNewStudyGoal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 832,
                  "charLength": 109,
                  "snippet": {
                    "text": "\n\nasync def setNewStudyGoal(self, console, member: discord.Member, renew: bool):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "51308434d6c98e5cf751c47ac97dea5e5e14cba1fd1953496f1ae6e0f2775fa1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 5,
                  "charOffset": 1060,
                  "charLength": 3,
                  "snippet": {
                    "text": "MSV"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 956,
                  "charLength": 252,
                  "snippet": {
                    "text": "        query = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id).get()\n\n    MSV = discord.ui.View(timeout=60)\n    var = SelectMenuHandler(\n        SSTypes, \"temp_view:studybot_st1\", \"Select a duration for your study session\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "01359202fb74a93281cbbd21f5ff0ea820c5689a32c548e09d34db81c61d3757"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 5,
                  "charOffset": 1242,
                  "charLength": 7,
                  "snippet": {
                    "text": "msgView"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 1215,
                  "charLength": 185,
                  "snippet": {
                    "text": "    MSV.add_item(var)\n\n    msgView = await console.send(\n        f\"{member.mention} You have joined a study channel. Please choose the duration of your study session!\",\n        view=MSV"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b7262a21b59bd85b81e85c066d0e82f5b90ac1c57590afda01e1c02a0e3d31b0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 9,
                  "charOffset": 1520,
                  "charLength": 12,
                  "snippet": {
                    "text": "MSV_disabled"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1501,
                  "charLength": 158,
                  "snippet": {
                    "text": "\n    else:\n        MSV_disabled = discord.ui.View()\n        var = SelectMenuHandler(\n            SSTypes, \"temp_view:studybot_st1\", \"Timed out\", disabled=True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d6ac1dfe283ecd861f0ce4a93ad3fcfe947796311b608f31dd3029b72582c26f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 5,
                  "charOffset": 3073,
                  "charLength": 12,
                  "snippet": {
                    "text": "getConsoleCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 3067,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eada4c6c3cc5878616dd5a0a27bdb4602ecfcc776c113aa410e4d4f606a88f27"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 5,
                  "charOffset": 3226,
                  "charLength": 10,
                  "snippet": {
                    "text": "ColumnDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 3132,
                  "charLength": 164,
                  "snippet": {
                    "text": "        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n    )\n    ColumnDict = {\n        0: q.ch_tv_console,\n        1: q.ch_tv_startvc,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b7b34ee7b96eb7f8c7c25559abc8ce63747d0fd1f172a46cce95b069c276c00"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 15,
                  "charOffset": 3838,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudyVCModule"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "charOffset": 3771,
                  "charLength": 127,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener(\"on_voice_state_update\")\n    async def StudyVCModule(\n        self,\n        member: discord.Member,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9c268e2dd4c81655e26b3b0d5561302a71318421f64881c02558853bf8872ed9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 13,
                  "charOffset": 4437,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 4413,
                  "charLength": 208,
                  "snippet": {
                    "text": "        ):\n\n            StudySessionQ = database.StudyVCDB.select().where(database.StudyVCDB.discordID == member.id)\n            if StudySessionQ.exists():\n                await addLeaderboardProgress(member)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0aeeb591c6c5fab21d365bd98e742ec9336f9cb48cb318e624e3c3a23fc11440"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 17,
                  "charOffset": 5326,
                  "charLength": 7,
                  "snippet": {
                    "text": "dateObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 1,
                  "charOffset": 5280,
                  "charLength": 191,
                  "snippet": {
                    "text": "                query.save()\n\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b9b542b351cb87eb04dce3016a94c1c57075a2efb8f8a00f0b6d374ae7a0ed92"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 15,
                  "charOffset": 6761,
                  "charLength": 14,
                  "snippet": {
                    "text": "StudyVCChecker"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 198,
                  "startColumn": 1,
                  "charOffset": 6677,
                  "charLength": 234,
                  "snippet": {
                    "text": "\n    @tasks.loop(seconds=10) # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\"\n        print(\"loop StudyVCChecker\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "105694faa3a2ca2f5a04f1d1baa46771a04c064b1ac1f986af1384dfffaa59e0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 9,
                  "charOffset": 6921,
                  "charLength": 15,
                  "snippet": {
                    "text": "StudyVCGuildObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 202,
                  "startColumn": 1,
                  "charOffset": 6875,
                  "charLength": 179,
                  "snippet": {
                    "text": "        print(\"loop StudyVCChecker\")\n\n        StudyVCGuildObj = self.bot.get_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7a6b0f88f0b6b0d061ec08dd474775146c35542305977c2cbb7b1da4745f1b69"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 9,
                  "charOffset": 6985,
                  "charLength": 17,
                  "snippet": {
                    "text": "StudyVCConsoleObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 203,
                  "startColumn": 1,
                  "charOffset": 6912,
                  "charLength": 179,
                  "snippet": {
                    "text": "\n        StudyVCGuildObj = self.bot.get_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a60aff32768d9bf85ec7d3acb9a2f54a350d94b6b48861e2285a8a1f1371cd6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 13,
                  "charOffset": 7104,
                  "charLength": 7,
                  "snippet": {
                    "text": "dateObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 206,
                  "startColumn": 1,
                  "charOffset": 7054,
                  "charLength": 179,
                  "snippet": {
                    "text": "\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n\n            member = StudyVCGuildObj.get_member(q.discordID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "55c283e2fb4daa88a8d1016723016a328173c76d02a9061847cfda3cd26bc629"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 9,
                  "charOffset": 379,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 293,
                  "charLength": 255,
                  "snippet": {
                    "text": "async def id_generator(size=3, chars=string.ascii_uppercase):\n    while True:\n        ID = \"\".join(random.choice(chars) for _ in range(size))\n        query = database.TutorBot_Sessions.select().where(\n            database.TutorBot_Sessions.SessionID == ID"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb8f39cd7f3808d42cf9cd0bd99ee38209c1a4c47c9a71d044d61e1436ab546e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 562,
                  "startColumn": 9,
                  "charOffset": 20641,
                  "charLength": 13,
                  "snippet": {
                    "text": "DropdownClass"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 560,
                  "startColumn": 1,
                  "charOffset": 20582,
                  "charLength": 123,
                  "snippet": {
                    "text": "    def __init__(self):\n        super().__init__()\n        DropdownClass = Dropdown()\n\n        self.add_item(DropdownClass)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ae65b76c750518dbc07cfbc2b124bb27f6068d0dade6d17cb33eb4925a257e5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 13,
                  "charOffset": 659,
                  "charLength": 12,
                  "snippet": {
                    "text": "TutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 561,
                  "charLength": 228,
                  "snippet": {
                    "text": "        now = datetime.now(self.est)\n        for entry in database.TutorBot_Sessions:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.Date)\n            val = int((TutorSession - now).total_seconds())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b62561c9cb3b5ac0a929392251e8f1a77b171cf8a203d4d800126914519c3884"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 17,
                  "charOffset": 3283,
                  "charLength": 7,
                  "snippet": {
                    "text": "GP_DATE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 3237,
                  "charLength": 127,
                  "snippet": {
                    "text": "                geten.save()\n\n                GP_DATE = old + new\n\n                gp_en: database.TutorSession_GracePeriod = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3c353c0facc2682a69d1bfc53ff971b361a43f77d2452e21264fe4aedc5cc115"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 13,
                  "charOffset": 4451,
                  "charLength": 12,
                  "snippet": {
                    "text": "TutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 122,
                  "startColumn": 1,
                  "charOffset": 4346,
                  "charLength": 238,
                  "snippet": {
                    "text": "        now = datetime.now(self.est)\n        for entry in database.TutorSession_GracePeriod:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.GP_DATE)\n            val = int((TutorSession - now).total_seconds())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d5a39c2cdd8a637757809c44e9fb5392f5fbc750bdc2e5c236b7cb4e2bbdba11"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 15,
                  "charOffset": 195,
                  "charLength": 16,
                  "snippet": {
                    "text": "create_TicketSys"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 1,
                  "charOffset": 139,
                  "charLength": 223,
                  "snippet": {
                    "text": "class SimulatorProfile:\n    @staticmethod\n    async def create_TicketSys(ctx: commands.Context):\n        # category = discord.utils.get(ctx.guild.categories, id=TECH_ID.cat_sandbox)\n        query: database.SandboxConfig = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7b4c7db662964013ca3170eb2681f538aebc247ff75f7d828be07b549bc8f6fa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 9,
                  "charOffset": 563,
                  "charLength": 9,
                  "snippet": {
                    "text": "ListofCat"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 494,
                  "charLength": 192,
                  "snippet": {
                    "text": "\n        await ctx.guild.create_text_channel(\"🧧┃chat-help\")\n        ListofCat = [\n            [\"Math Tickets\", query.cat_mathticket],\n            [\"Science Tickets\", query.cat_scienceticket],"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7daee06a5440fe8b43ebc147fcf5dfc1a7cac1116bf8f50ada162dc3e552464c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 9,
                  "charOffset": 1517,
                  "charLength": 9,
                  "snippet": {
                    "text": "ListofCat"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1411,
                  "charLength": 229,
                  "snippet": {
                    "text": "            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n        )\n        ListofCat = [\n            [\"Math Tickets\", query.cat_mathticket],\n            [\"Science Tickets\", query.cat_scienceticket],"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0aa0257c7d5d473723246223a11315ea5c68cd8aa0477b8ead2260421b3ceb60"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 15,
                  "charOffset": 2280,
                  "charLength": 16,
                  "snippet": {
                    "text": "create_PrivVCSys"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 2247,
                  "charLength": 200,
                  "snippet": {
                    "text": "\n    @staticmethod\n    async def create_PrivVCSys(ctx: commands.Context):\n        category = discord.utils.get(ctx.guild.categories, id=SandboxConfig.cat_sandbox)\n        q: database.SandboxConfig = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc39b00a299861b29c2ad6cbb69e1b7d8ee017ce17397b70f9e112526ad155f1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 15,
                  "charOffset": 2886,
                  "charLength": 17,
                  "snippet": {
                    "text": "cleanup_PrivVCSys"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2853,
                  "charLength": 200,
                  "snippet": {
                    "text": "\n    @staticmethod\n    async def cleanup_PrivVCSys(ctx: commands.Context):\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f4f345a14a3d666675fa666ff2c72ff8830d08d68ac673719b85f9de27d73d52"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 9,
                  "charOffset": 3823,
                  "charLength": 2,
                  "snippet": {
                    "text": "SP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3736,
                  "charLength": 236,
                  "snippet": {
                    "text": "    @sim.command()\n    async def create(self, ctx: commands.Context, profile):\n        SP = SimulatorProfile()\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1874cd091e56d7388a7543a586f2c24314fc3650040fdf6cc8963be892a4105"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 9,
                  "charOffset": 4864,
                  "charLength": 2,
                  "snippet": {
                    "text": "SP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "charOffset": 4787,
                  "charLength": 226,
                  "snippet": {
                    "text": "    @sim.command()\n    async def clear(self, ctx: commands.Context):\n        SP = SimulatorProfile()\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "38b9530a980625470608ee7b915bc5221f46cbd5069933cd290080ec1ec21cd5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 15,
                  "charOffset": 1218,
                  "charLength": 12,
                  "snippet": {
                    "text": "GSuiteVerify"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 1158,
                  "charLength": 200,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def GSuiteVerify(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n        if interaction.message is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0db664ed9d3a6f977b746e007a78d2934da1019901ff8d31e58cd2edf3cd1a3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 9,
                  "charOffset": 1280,
                  "charLength": 19,
                  "snippet": {
                    "text": "InteractionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1159,
                  "charLength": 218,
                  "snippet": {
                    "text": "    @commands.Cog.listener(\"on_interaction\")\n    async def GSuiteVerify(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n        if interaction.message is None:\n            return"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c96d0baada745254d3dd55f28008f844776e1737d120c2f32a4b3f8415da2a7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 15,
                  "charOffset": 7666,
                  "charLength": 17,
                  "snippet": {
                    "text": "pasteGSuiteButton"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 175,
                  "startColumn": 1,
                  "charOffset": 7611,
                  "charLength": 166,
                  "snippet": {
                    "text": "    @commands.command()\n    @is_botAdmin\n    async def pasteGSuiteButton(self, ctx):\n        embed = discord.Embed(\n            title=\"Alternate Verification Method\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3e67bb850947ed992a12e03e7c9c0896f95f4ed4c398e17fcbd715da4bcf89c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 9,
                  "charOffset": 7979,
                  "charLength": 12,
                  "snippet": {
                    "text": "GSuiteButton"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 7920,
                  "charLength": 144,
                  "snippet": {
                    "text": "            color=discord.Color.green(),\n        )\n        GSuiteButton = GSuiteVerify()\n        await ctx.send(embed=embed, view=GSuiteButton)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66d3e5794585cedd98f0eab98a4498e9de048faf3043bba40b16e2e085f543dc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 11,
                  "charOffset": 2405,
                  "charLength": 12,
                  "snippet": {
                    "text": "TicketExport"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 2393,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\nasync def TicketExport(\n    self,\n    channel: discord.TextChannel,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2721e883d8f3074959f4cee0a6b71ffd3965a60d87ed7b4dcdd5a1ec4fd20f1c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 5,
                  "charOffset": 2595,
                  "charLength": 30,
                  "snippet": {
                    "text": "directTranscript: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 2505,
                  "charLength": 183,
                  "snippet": {
                    "text": "    user: discord.User = None,\n    responsesauthor: typing.List[discord.User] = None,\n    directTranscript: bool = False,\n):\n    transcript = await chat_exporter.export(channel, None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9b1c76a953f5f45ced0658fa4ffae830454e23da560fa56b0e86262f1a3d5c06"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 5,
                  "charOffset": 2825,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 2800,
                  "charLength": 100,
                  "snippet": {
                    "text": "        .get()\n    )\n    TicketOwner = self.bot.get_user(query.authorID)\n\n    if transcript is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3f1e16e9389c9c8f442f0cd17e63171d9487fe7509b6e2d5bc8425efc6337067"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 5,
                  "charOffset": 3571,
                  "charLength": 4,
                  "snippet": {
                    "text": "myIO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "charOffset": 3560,
                  "charLength": 108,
                  "snippet": {
                    "text": "    )\n\n    myIO = BytesIO()\n    myIO.write(var)\n    with open(f\"transcript-{channel.name}.html\", \"wb\") as f:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "09375c7f63da02f6b809c09057718c63c0f41db026aa3b5afe75c1ff10efce80"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 5,
                  "charOffset": 3783,
                  "charLength": 6,
                  "snippet": {
                    "text": "S3_URL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "charOffset": 3703,
                  "charLength": 253,
                  "snippet": {
                    "text": "\n    S3_upload_file(f\"transcript-{channel.name}.html\", \"ch-transcriptlogs\")\n    S3_URL = f\"[Direct Transcript Link](https://acad-transcripts.schoolsimplified.org/transcript-{channel.name}.html)\"\n    embed.add_field(name=\"Transcript Link\", value=S3_URL)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9422cf2b468df30eb57cd0af95f6d6caf8cfc6038f886bd59b1e7067e8b132df"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 5,
                  "charOffset": 4554,
                  "charLength": 10,
                  "snippet": {
                    "text": "decodeDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 4548,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21174bd1753fc9fb2db20e45e174901578807f88386083afdb9e9bcce741dbb8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 5,
                  "charOffset": 4838,
                  "charLength": 12,
                  "snippet": {
                    "text": "EssayOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 167,
                  "startColumn": 1,
                  "charOffset": 4825,
                  "charLength": 127,
                  "snippet": {
                    "text": "    \"\"\"\n\n    EssayOptions = [\n        discord.SelectOption(label=\"Essay Reviser\"),\n        discord.SelectOption(label=\"Other\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "13eab29e70fce1eddc6ce550b45bdb61ba651a7a27a38f79dee7eff29aed5fac"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 5,
                  "charOffset": 4964,
                  "charLength": 14,
                  "snippet": {
                    "text": "EnglishOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 172,
                  "startColumn": 1,
                  "charOffset": 4953,
                  "charLength": 143,
                  "snippet": {
                    "text": "    ]\n\n    EnglishOptions = [\n        discord.SelectOption(label=\"English Language\"),\n        discord.SelectOption(label=\"English Literature\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "32d518240a3d086e71576be6edbcc5981dfa92a267ddc1dd7a964c33f78d1e09"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 5,
                  "charOffset": 5153,
                  "charLength": 11,
                  "snippet": {
                    "text": "MathOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 5142,
                  "charLength": 121,
                  "snippet": {
                    "text": "    ]\n\n    MathOptions = [\n        discord.SelectOption(label=\"Algebra\"),\n        discord.SelectOption(label=\"Geometry\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "09f97de8e8c56af399473842b6feb70493690c23584f21150dad34712848c5e2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 5,
                  "charOffset": 5481,
                  "charLength": 14,
                  "snippet": {
                    "text": "ScienceOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 1,
                  "charOffset": 5470,
                  "charLength": 125,
                  "snippet": {
                    "text": "    ]\n\n    ScienceOptions = [\n        discord.SelectOption(label=\"Biology\"),\n        discord.SelectOption(label=\"Chemistry\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "35ecb7fc53cb75e2876b76e9081ea9f67aa91815b6def970683879cd34c2f3e2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 5,
                  "charOffset": 5744,
                  "charLength": 20,
                  "snippet": {
                    "text": "SocialStudiesOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 195,
                  "startColumn": 1,
                  "charOffset": 5733,
                  "charLength": 138,
                  "snippet": {
                    "text": "    ]\n\n    SocialStudiesOptions = [\n        discord.SelectOption(label=\"World History\"),\n        discord.SelectOption(label=\"US History\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "77a6998a4aedd9f885820dc471466f1a73529cd087b247dff1ecc3f974415ae8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 5,
                  "charOffset": 6114,
                  "charLength": 15,
                  "snippet": {
                    "text": "LanguageOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 205,
                  "startColumn": 1,
                  "charOffset": 6103,
                  "charLength": 123,
                  "snippet": {
                    "text": "    ]\n\n    LanguageOptions = [\n        discord.SelectOption(label=\"French\"),\n        discord.SelectOption(label=\"Chinese\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c67e9fb003a7f010188710bcb523c4962ebd468db82701541bcb8f22ec82be61"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 5,
                  "charOffset": 6376,
                  "charLength": 12,
                  "snippet": {
                    "text": "OtherOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 213,
                  "startColumn": 1,
                  "charOffset": 6365,
                  "charLength": 132,
                  "snippet": {
                    "text": "    ]\n\n    OtherOptions = [\n        discord.SelectOption(label=\"Computer Science\"),\n        discord.SelectOption(label=\"Fine Arts\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f5facde602947d40fce93ced364588b0a6a63d7115f3a2e4d52e33d44887e3a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 5,
                  "charOffset": 6604,
                  "charLength": 10,
                  "snippet": {
                    "text": "decodeName"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 220,
                  "startColumn": 1,
                  "charOffset": 6593,
                  "charLength": 119,
                  "snippet": {
                    "text": "    ]\n\n    decodeName = {\n        \"['Math Helpers']\": \"Math Helpers\",\n        \"['Science Helpers']\": \"Science Helpers\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "87b91b7d76e1b4ffb1cc966423e9cbaa7994b3c30fe8ce0be1e4c415f971ec4e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 5,
                  "charOffset": 6982,
                  "charLength": 13,
                  "snippet": {
                    "text": "decodeOptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 230,
                  "startColumn": 1,
                  "charOffset": 6971,
                  "charLength": 116,
                  "snippet": {
                    "text": "    }\n\n    decodeOptList = {\n        \"['Math Helpers']\": MathOptions,\n        \"['Science Helpers']\": ScienceOptions,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4653205490aa1feaf94c77277c5148695bfd504d14b71dcf2553a1639c227ded"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 9,
                  "charOffset": 7497,
                  "charLength": 8,
                  "snippet": {
                    "text": "decodeID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 244,
                  "startColumn": 1,
                  "charOffset": 7391,
                  "charLength": 224,
                  "snippet": {
                    "text": "            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n        )\n        decodeID = {\n            \"['Math Helpers']\": q.cat_mathticket,\n            \"['Science Helpers']\": q.cat_scienceticket,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e2d0ceebc7a581900baeef17758f45ac1ada48573a71cc6bae860ea59549c1b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 9,
                  "charOffset": 7928,
                  "charLength": 8,
                  "snippet": {
                    "text": "decodeID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 254,
                  "startColumn": 1,
                  "charOffset": 7900,
                  "charLength": 158,
                  "snippet": {
                    "text": "        }\n    else:\n        decodeID = {\n            \"['Math Helpers']\": MAIN_ID.cat_mathTicket,\n            \"['Science Helpers']\": MAIN_ID.cat_scienceTicket,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3309ac2a38a914486c827f7809ab093ce99fd1f2b0a127a01f47fc6cb3fad6c2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 5,
                  "charOffset": 8417,
                  "charLength": 10,
                  "snippet": {
                    "text": "CategoryID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 265,
                  "startColumn": 1,
                  "charOffset": 8383,
                  "charLength": 127,
                  "snippet": {
                    "text": "\n    name = decodeName[value]\n    CategoryID = decodeID[value]\n    if type(decodeOptList[value]) == int:\n        OptList = name"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d19c69b0f96c8e188d5d96c3937a1e29cf0f4e5fda7b8a3f52bdee976e903f7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 9,
                  "charOffset": 8496,
                  "charLength": 7,
                  "snippet": {
                    "text": "OptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 267,
                  "startColumn": 1,
                  "charOffset": 8413,
                  "charLength": 146,
                  "snippet": {
                    "text": "    CategoryID = decodeID[value]\n    if type(decodeOptList[value]) == int:\n        OptList = name\n    else:\n        OptList = decodeOptList[value]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "673fd970293dac1816dc9fd382fb918d025f71c57b9f6b2b7e21e1515a73b159"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 9,
                  "charOffset": 8529,
                  "charLength": 7,
                  "snippet": {
                    "text": "OptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "charOffset": 8488,
                  "charLength": 109,
                  "snippet": {
                    "text": "        OptList = name\n    else:\n        OptList = decodeOptList[value]\n\n    return name, CategoryID, OptList"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a85f14280defab2eadf607dfe8104c1209ba70990103c63319cb26a17d5f212a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 5,
                  "charOffset": 8604,
                  "charLength": 7,
                  "snippet": {
                    "text": "getRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 274,
                  "startColumn": 1,
                  "charOffset": 8598,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "476e4dead5b13742d4a7c5dd47dea16e3d5ed23d3177e729e3140e8f919cf3ab"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 27,
                  "charOffset": 8639,
                  "charLength": 16,
                  "snippet": {
                    "text": "mainSubject: str"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 275,
                  "startColumn": 1,
                  "charOffset": 8599,
                  "charLength": 152,
                  "snippet": {
                    "text": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f03549957c7f3fa41c1d6891c62f20f239a8a3dddb50e49f43c4f0cdf8eac96"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 5,
                  "charOffset": 8975,
                  "charLength": 11,
                  "snippet": {
                    "text": "mainSubject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 288,
                  "startColumn": 1,
                  "charOffset": 8962,
                  "charLength": 77,
                  "snippet": {
                    "text": "    \"\"\"\n\n    mainSubject = mainSubject.title()\n    subject = subject.title()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "18221d5f3a9d7f5d1f1f721df4afd71757896685114180da478eeb72c870af15"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 9,
                  "charOffset": 10125,
                  "charLength": 7,
                  "snippet": {
                    "text": "Sandbox"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 326,
                  "startColumn": 1,
                  "charOffset": 10052,
                  "charLength": 174,
                  "snippet": {
                    "text": "\n    async def callback(self, interaction: discord.Interaction):\n        Sandbox = False\n        if interaction.message.guild.id == TECH_ID.g_tech:\n            Sandbox = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "05ca347f2174943eee7109e37a75e4d874770b66baff0e7481da7e8142541422"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 13,
                  "charOffset": 10212,
                  "charLength": 7,
                  "snippet": {
                    "text": "Sandbox"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 328,
                  "startColumn": 1,
                  "charOffset": 10117,
                  "charLength": 180,
                  "snippet": {
                    "text": "        Sandbox = False\n        if interaction.message.guild.id == TECH_ID.g_tech:\n            Sandbox = True\n\n        bucket = self.view.cd_mapping.get_bucket(interaction.message)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6a5854ca20ab9db6e8084fd2ad9fee854d9a72124c45e80142c18a2fdee6389f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 13,
                  "charOffset": 10718,
                  "charLength": 9,
                  "snippet": {
                    "text": "DMChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 341,
                  "startColumn": 1,
                  "charOffset": 10622,
                  "charLength": 206,
                  "snippet": {
                    "text": "            guild = interaction.message.guild\n            author = interaction.user\n            DMChannel = await author.create_dm()\n            try:\n                await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "39ec07b5c864afb6c1ff008356b2002ec1ce08cb6ef9eb906107691da19a6de0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 13,
                  "charOffset": 11237,
                  "charLength": 3,
                  "snippet": {
                    "text": "MSV"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 356,
                  "startColumn": 1,
                  "charOffset": 11206,
                  "charLength": 178,
                  "snippet": {
                    "text": "                )\n\n            MSV = discord.ui.View()\n            var = SelectMenuHandler(\n                MasterSubjectOptions, \"persistent_view:ticketdrop\", \"Click a subject!\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d005e3348896e664265792eace603bbcb6c2c560497e1eaa97c864ff969b90bd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 17,
                  "charOffset": 11989,
                  "charLength": 17,
                  "snippet": {
                    "text": "MasterSubjectView"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 373,
                  "startColumn": 1,
                  "charOffset": 11906,
                  "charLength": 213,
                  "snippet": {
                    "text": "            timeout = await MSV.wait()\n            if not timeout:\n                MasterSubjectView = var.view_response\n            else:\n                return await DMChannel.send(\"Timed out, try again later.\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "855fbf49212d1b8f61bec18a6b1c3581112b35ed908e7170b3b8a61f0667a606"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 13,
                  "charOffset": 12133,
                  "charLength": 12,
                  "snippet": {
                    "text": "ViewResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 377,
                  "startColumn": 1,
                  "charOffset": 12045,
                  "charLength": 237,
                  "snippet": {
                    "text": "                return await DMChannel.send(\"Timed out, try again later.\")\n\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3a7a9ee81153a285d886e0910a9ec2b44c5faa61cd3059a6085edd624e46ab3b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 13,
                  "charOffset": 12183,
                  "charLength": 11,
                  "snippet": {
                    "text": "TypeSubject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 378,
                  "startColumn": 1,
                  "charOffset": 12120,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ab7823136064b1308cd682e1372a84a1597dd78cba23e5d0d96f95820a66785"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 26,
                  "charOffset": 12196,
                  "charLength": 10,
                  "snippet": {
                    "text": "CategoryID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 378,
                  "startColumn": 1,
                  "charOffset": 12120,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ef1986e7fc945747d0c82828f10770ceefef92f0c3741382ee372772a821ab1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 38,
                  "charOffset": 12208,
                  "charLength": 7,
                  "snippet": {
                    "text": "OptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 378,
                  "startColumn": 1,
                  "charOffset": 12120,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4bf55d1ae3f3795bfd5c9157d891ce3d7bd432d7bd81af8d32885db8f6d41067"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 17,
                  "charOffset": 12429,
                  "charLength": 11,
                  "snippet": {
                    "text": "MiscOptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 384,
                  "startColumn": 1,
                  "charOffset": 12369,
                  "charLength": 168,
                  "snippet": {
                    "text": "\n            if not TypeSubject == OptList:\n                MiscOptList = discord.ui.View()\n                MiscOptList.add_item(\n                    SelectMenuHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c13f6ea545169578efa265b2d2b8463890941e9f7e828eb8f4245aafd4341d0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 13,
                  "charOffset": 17843,
                  "charLength": 10,
                  "snippet": {
                    "text": "CounterNum"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 508,
                  "startColumn": 1,
                  "charOffset": 17753,
                  "charLength": 221,
                  "snippet": {
                    "text": "                        return await DMChannel.send(\"No attachments found.\")\n\n            CounterNum = (\n                database.BaseTickerInfo.select()\n                .where(database.BaseTickerInfo.guildID == guild.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aa656774fc4f69d30b958e9e49717af1a3c6095978e2b141db5a52c99396a949"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 13,
                  "charOffset": 18024,
                  "charLength": 4,
                  "snippet": {
                    "text": "TNUM"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 513,
                  "startColumn": 1,
                  "charOffset": 17975,
                  "charLength": 160,
                  "snippet": {
                    "text": "                .get()\n            )\n            TNUM = CounterNum.counter\n            CounterNum.counter = CounterNum.counter + 1\n            CounterNum.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0b479e37d57c8a01919c7925d161dcf67faa43ebe218b4bb65f99f737334f7c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 13,
                  "charOffset": 18149,
                  "charLength": 3,
                  "snippet": {
                    "text": "LDC"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 517,
                  "startColumn": 1,
                  "charOffset": 18106,
                  "charLength": 156,
                  "snippet": {
                    "text": "            CounterNum.save()\n\n            LDC = await DMChannel.send(\n                f\"Please wait, creating your ticket {Emoji.loadingGIF}\"\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "99d16f1618b9d1e378099fdd0c5662c8891bfbc7e623fb1f6f9fe9b767198016"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 17,
                  "charOffset": 18330,
                  "charLength": 11,
                  "snippet": {
                    "text": "mainSubject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 522,
                  "startColumn": 1,
                  "charOffset": 18263,
                  "charLength": 142,
                  "snippet": {
                    "text": "\n            if TypeSubject == \"Language Helpers\":\n                mainSubject = \"languages\"\n            else:\n                mainSubject = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "57a012384076bbfddd6a3f2935e01009ef9bf6b2b83eeef7e823fa9e4b715201"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 526,
                  "startColumn": 17,
                  "charOffset": 18390,
                  "charLength": 11,
                  "snippet": {
                    "text": "mainSubject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 524,
                  "startColumn": 1,
                  "charOffset": 18314,
                  "charLength": 173,
                  "snippet": {
                    "text": "                mainSubject = \"languages\"\n            else:\n                mainSubject = (\n                    c.name.replace(\"═\", \"\")\n                    .replace(\"⁃\", \"\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "82e023a8fecbd21a2e66a51543a11654106bdacc3a32f8cecb4f85253fd48335"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 21,
                  "charOffset": 19792,
                  "charLength": 7,
                  "snippet": {
                    "text": "RoleOBJ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 563,
                  "startColumn": 1,
                  "charOffset": 19719,
                  "charLength": 190,
                  "snippet": {
                    "text": "                ]\n                for role in roles:\n                    RoleOBJ = discord.utils.get(\n                        interaction.message.guild.roles, name=role\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f01eeaba3108b2151ff59b3f1c57ad0d8c8d2240069a4a3536235b49a3f43491"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 21,
                  "charOffset": 20258,
                  "charLength": 7,
                  "snippet": {
                    "text": "RoleOBJ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 574,
                  "startColumn": 1,
                  "charOffset": 20169,
                  "charLength": 195,
                  "snippet": {
                    "text": "                        reason=\"Ticket Perms\",\n                    )\n                    RoleOBJ = discord.utils.get(guild.roles, name=role)\n                    if (\n                        not ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c565028ded0f395dfe4edeeb6c17948659caaf7fbae18378b859dcf9c375f130"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 608,
                  "startColumn": 25,
                  "charOffset": 21765,
                  "charLength": 7,
                  "snippet": {
                    "text": "RoleOBJ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 606,
                  "startColumn": 1,
                  "charOffset": 21656,
                  "charLength": 234,
                  "snippet": {
                    "text": "                    roles = [\"Essay Reviser\"]\n                    for role in roles:\n                        RoleOBJ = discord.utils.get(\n                            interaction.message.guild.roles, name=role\n                        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "53581c1b5def12c72e75a55b3c667ef023519808203d031deacede0a45d4d6f6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 25,
                  "charOffset": 22300,
                  "charLength": 7,
                  "snippet": {
                    "text": "RoleOBJ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 618,
                  "startColumn": 1,
                  "charOffset": 22178,
                  "charLength": 247,
                  "snippet": {
                    "text": "                    roles = [\"Chat Helper\", \"Lead Helper\"]\n                    for role in roles:\n                        RoleOBJ = discord.utils.get(\n                            interaction.message.guild.roles, name=role\n                        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "70b49f0b167c6ecdecfc185eb9a13131fcb05d690791735e61106a756ad8f155"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 642,
                  "startColumn": 13,
                  "charOffset": 23138,
                  "charLength": 13,
                  "snippet": {
                    "text": "controlTicket"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 640,
                  "startColumn": 1,
                  "charOffset": 23111,
                  "charLength": 170,
                  "snippet": {
                    "text": "            )\n\n            controlTicket = discord.Embed(\n                title=\"Control Panel\",\n                description=\"To end this ticket, click the lock button!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "100f436710e7e9e8b7209651366729007544500f47fb07593c266b2b3dac3dc8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 647,
                  "startColumn": 13,
                  "charOffset": 23353,
                  "charLength": 17,
                  "snippet": {
                    "text": "LockControlButton"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 645,
                  "startColumn": 1,
                  "charOffset": 23282,
                  "charLength": 179,
                  "snippet": {
                    "text": "                color=discord.Colour.gold(),\n            )\n            LockControlButton = discord.ui.View()\n            LockControlButton.add_item(\n                ButtonHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8e1e3c0579954b373ca6eeb85380f75227ac356c81e24c511876872cab1517e4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 659,
                  "startColumn": 13,
                  "charOffset": 23733,
                  "charLength": 3,
                  "snippet": {
                    "text": "LCM"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 657,
                  "startColumn": 1,
                  "charOffset": 23706,
                  "charLength": 152,
                  "snippet": {
                    "text": "            )\n\n            LCM = await channel.send(\n                interaction.user.mention, embed=controlTicket, view=LockControlButton\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cc9e609d72a24e10c4c689f5dd55557871da4123381fc436a3ae3603794d916d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 700,
                  "startColumn": 17,
                  "charOffset": 25538,
                  "charLength": 11,
                  "snippet": {
                    "text": "mentionRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 698,
                  "startColumn": 1,
                  "charOffset": 25499,
                  "charLength": 177,
                  "snippet": {
                    "text": "                    )\n\n                mentionRole = getRole(interaction.guild, mainSubject, selection_str)\n\n                await channel.send(mentionRole.mention, embed=embed)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a32a6209307d2eff983956f7af1a194d31d28dc4d15dec47ab02c1e51ddd1d8e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 15,
                  "charOffset": 27735,
                  "charLength": 14,
                  "snippet": {
                    "text": "TicketDropdown"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 758,
                  "startColumn": 1,
                  "charOffset": 27675,
                  "charLength": 163,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def TicketDropdown(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6afe02ed5c934ee6cb54290637cdae5f6417750fef0045b785eb3fdd77835e58"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 761,
                  "startColumn": 9,
                  "charOffset": 27799,
                  "charLength": 19,
                  "snippet": {
                    "text": "InteractionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 759,
                  "startColumn": 1,
                  "charOffset": 27676,
                  "charLength": 202,
                  "snippet": {
                    "text": "    @commands.Cog.listener(\"on_interaction\")\n    async def TicketDropdown(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eec2b55ecddf49419dd19b2a84aed7ff2e6e051bee2ba486c63d6a4ad014bfd1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 13,
                  "charOffset": 28798,
                  "charLength": 11,
                  "snippet": {
                    "text": "ButtonViews"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 790,
                  "startColumn": 1,
                  "charOffset": 28728,
                  "charLength": 166,
                  "snippet": {
                    "text": "                color=discord.Colour.red(),\n            )\n            ButtonViews = discord.ui.View()\n            ButtonViews.add_item(\n                ButtonHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "87a1d8b5982e6717e2e04bbe7804fd391c9c8d87c886728b1688fa4507581b76"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 836,
                  "startColumn": 17,
                  "charOffset": 30382,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 834,
                  "startColumn": 1,
                  "charOffset": 30348,
                  "charLength": 153,
                  "snippet": {
                    "text": "\n            try:\n                TicketOwner = guild.get_member(query.authorID)\n            except discord.NotFound:\n                await channel.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d1b67eccda272f11840190941f1331e1606b6f1e48c607254cc88edfb765161"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 852,
                  "startColumn": 13,
                  "charOffset": 31095,
                  "charLength": 12,
                  "snippet": {
                    "text": "ButtonViews2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 850,
                  "startColumn": 1,
                  "charOffset": 31003,
                  "charLength": 160,
                  "snippet": {
                    "text": "            )\n            embed.set_footer(text=\"This ticket has been closed!\")\n            ButtonViews2 = discord.ui.View()\n\n            ButtonViews2.add_item("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1317761e9cfc77f1a3fc64338623b86448b926b7866dc63fabf4c9ba93f6c331"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 924,
                  "startColumn": 17,
                  "charOffset": 33700,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 922,
                  "startColumn": 1,
                  "charOffset": 33653,
                  "charLength": 166,
                  "snippet": {
                    "text": "            )\n            try:\n                TicketOwner = guild.get_member(query.authorID)\n            except discord.NotFound:\n                await channel.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e24c8f782c695c05e8b99fb1d72af9236a0b5c23b29cd649bd9e25f6b9575d05"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 945,
                  "startColumn": 17,
                  "charOffset": 34565,
                  "charLength": 18,
                  "snippet": {
                    "text": "ResponseLogChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 943,
                  "startColumn": 1,
                  "charOffset": 34452,
                  "charLength": 240,
                  "snippet": {
                    "text": "            channel = interaction.channel\n            if interaction.guild.id == MAIN_ID.g_main:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    MAIN_ID.ch_transcriptLogs\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aea72f67ebff3e8993a1407f8b09c4361a4be52121c4f2b73a1d5dbfdc7950d0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 949,
                  "startColumn": 17,
                  "charOffset": 34727,
                  "charLength": 18,
                  "snippet": {
                    "text": "ResponseLogChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 947,
                  "startColumn": 1,
                  "charOffset": 34675,
                  "charLength": 174,
                  "snippet": {
                    "text": "                )\n            else:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    TECH_ID.ch_ticketLog\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "af55ed2ed4d4c1bf9dca653d73488511da0d86f8f924608e7a54e7c6a3125c65"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 957,
                  "startColumn": 24,
                  "charOffset": 35082,
                  "charLength": 6,
                  "snippet": {
                    "text": "S3_URL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 955,
                  "startColumn": 1,
                  "charOffset": 35044,
                  "charLength": 150,
                  "snippet": {
                    "text": "            )\n\n            msg, file, S3_URL = await TicketExport(\n                self, channel, ResponseLogChannel, author, None, True\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "352f6136b295bced6bec3a6368080404181ac4dda9064ca52063a4238afa24a8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1007,
                  "startColumn": 17,
                  "charOffset": 37242,
                  "charLength": 18,
                  "snippet": {
                    "text": "ResponseLogChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1005,
                  "startColumn": 1,
                  "charOffset": 37133,
                  "charLength": 236,
                  "snippet": {
                    "text": "            author = interaction.user\n            if interaction.guild.id == MAIN_ID.g_main:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    MAIN_ID.ch_transcriptLogs\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1454861c72d9b91d6db290e2c7436458824e4328c7ace0226c77c91dc8564087"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1011,
                  "startColumn": 17,
                  "charOffset": 37404,
                  "charLength": 18,
                  "snippet": {
                    "text": "ResponseLogChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1009,
                  "startColumn": 1,
                  "charOffset": 37352,
                  "charLength": 174,
                  "snippet": {
                    "text": "                )\n            else:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    TECH_ID.ch_ticketLog\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4b51cf351a8271743abdb68bfae2ef625b83c1dd6accf94ebfbf391b9ce185d6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1019,
                  "startColumn": 13,
                  "charOffset": 37723,
                  "charLength": 4,
                  "snippet": {
                    "text": "msgO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1017,
                  "startColumn": 1,
                  "charOffset": 37674,
                  "charLength": 224,
                  "snippet": {
                    "text": "                .get()\n            )\n            msgO = await interaction.channel.send(\n                f\"{author.mention}\\nPlease wait, generating a transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "08813934c9724d16d6c3c74b6eff85e3b34af090436979cb5b54b313fc489a7c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1022,
                  "startColumn": 13,
                  "charOffset": 37911,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1020,
                  "startColumn": 1,
                  "charOffset": 37762,
                  "charLength": 264,
                  "snippet": {
                    "text": "                f\"{author.mention}\\nPlease wait, generating a transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )\n            TicketOwner = self.bot.get_user(query.authorID)\n\n            messages = await channel.history(limit=None).flatten()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9aeee88c41fd016466c238e2a43dcb036f86f0d251562364058d0cbebf6aa0d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1025,
                  "startColumn": 13,
                  "charOffset": 38039,
                  "charLength": 10,
                  "snippet": {
                    "text": "authorList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1023,
                  "startColumn": 1,
                  "charOffset": 37959,
                  "charLength": 129,
                  "snippet": {
                    "text": "\n            messages = await channel.history(limit=None).flatten()\n            authorList = []\n\n            for msg in messages:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6f41d4b372e5add6581c1e2ab7c97ab8e79d7dae60569889a400450472370503"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1098,
                  "startColumn": 13,
                  "charOffset": 41184,
                  "charLength": 11,
                  "snippet": {
                    "text": "ButtonViews"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1096,
                  "startColumn": 1,
                  "charOffset": 41114,
                  "charLength": 166,
                  "snippet": {
                    "text": "                color=discord.Colour.red(),\n            )\n            ButtonViews = discord.ui.View()\n            ButtonViews.add_item(\n                ButtonHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "88bdd1d1de7f9a032eb6f833a39cc8259dc8bf922c262d35627370141e6988c4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1122,
                  "startColumn": 15,
                  "charOffset": 42021,
                  "charLength": 14,
                  "snippet": {
                    "text": "TicketInactive"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1120,
                  "startColumn": 1,
                  "charOffset": 41977,
                  "charLength": 143,
                  "snippet": {
                    "text": "\n    @tasks.loop(minutes=1.0)\n    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        for entry in TicketInfoTB:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "307188b884bc3e30bc5a6163f325bfa265e52fcc8c98e0f1da339b6089ba6084"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1123,
                  "startColumn": 9,
                  "charOffset": 42051,
                  "charLength": 12,
                  "snippet": {
                    "text": "TicketInfoTB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1121,
                  "startColumn": 1,
                  "charOffset": 41978,
                  "charLength": 159,
                  "snippet": {
                    "text": "    @tasks.loop(minutes=1.0)\n    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        for entry in TicketInfoTB:\n            try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3a1a745db69542e1a82324dcd1c58bea8ff38bb25e821e0d2b597ab5d2c03475"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1131,
                  "startColumn": 13,
                  "charOffset": 42333,
                  "charLength": 12,
                  "snippet": {
                    "text": "fetchMessage"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1129,
                  "startColumn": 1,
                  "charOffset": 42261,
                  "charLength": 254,
                  "snippet": {
                    "text": "            except Exception as e:\n                continue\n            fetchMessage = await channel.history(limit=1).flatten()\n            TicketOwner = self.bot.get_user(entry.authorID)\n            messages = await channel.history(limit=None).flatten()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d902727e93336f8790205ae91d5bf61b0205785df8cd4af4c9bb498f6c9717a0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1132,
                  "startColumn": 13,
                  "charOffset": 42401,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1130,
                  "startColumn": 1,
                  "charOffset": 42296,
                  "charLength": 287,
                  "snippet": {
                    "text": "                continue\n            fetchMessage = await channel.history(limit=1).flatten()\n            TicketOwner = self.bot.get_user(entry.authorID)\n            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1594c6f38fce8fa0cacb81294d32e93ca7e201c3ae9d84b5433452fb11b02da0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1134,
                  "startColumn": 13,
                  "charOffset": 42528,
                  "charLength": 5,
                  "snippet": {
                    "text": "LogCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1132,
                  "startColumn": 1,
                  "charOffset": 42389,
                  "charLength": 257,
                  "snippet": {
                    "text": "            TicketOwner = self.bot.get_user(entry.authorID)\n            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0964b2e2f2e2b1e5d8a478ee0654a54f15f8ef1f8d46e840f3e7818a42c91b98"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1135,
                  "startColumn": 13,
                  "charOffset": 42596,
                  "charLength": 10,
                  "snippet": {
                    "text": "authorList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1133,
                  "startColumn": 1,
                  "charOffset": 42449,
                  "charLength": 222,
                  "snippet": {
                    "text": "            messages = await channel.history(limit=None).flatten()\n            LogCH = self.bot.get_channel(MAIN_ID.ch_transcriptLogs)\n            authorList = []\n            if len(messages) == 0:\n                continue"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "256483d4e29d884e45ff1ee37c8113ee2ac450a9cba9caa68df96b5d8ccfe7a3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1143,
                  "startColumn": 17,
                  "charOffset": 42871,
                  "charLength": 12,
                  "snippet": {
                    "text": "ButtonViews2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1141,
                  "startColumn": 1,
                  "charOffset": 42777,
                  "charLength": 166,
                  "snippet": {
                    "text": "                - timedelta(minutes=self.TICKET_INACTIVE_TIME)\n            ):\n                ButtonViews2 = discord.ui.View()\n\n                ButtonViews2.add_item("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5f0a8f42de0d0d65ed82aa2d98d4dc4dc13743c45e9b772da0ccc92bd6ebdbf3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1214,
                  "startColumn": 15,
                  "charOffset": 45870,
                  "charLength": 13,
                  "snippet": {
                    "text": "sendCHTKTView"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1212,
                  "startColumn": 1,
                  "charOffset": 45815,
                  "charLength": 162,
                  "snippet": {
                    "text": "    @commands.command()\n    @is_botAdmin\n    async def sendCHTKTView(self, ctx):\n        MasterSubjectView = discord.ui.View()\n        MasterSubjectView.add_item("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab579e51079f8b5e388688173bdd4cf53e3f2bf2ec96b1a343771d8b6e841b52"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1215,
                  "startColumn": 9,
                  "charOffset": 45904,
                  "charLength": 17,
                  "snippet": {
                    "text": "MasterSubjectView"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1213,
                  "startColumn": 1,
                  "charOffset": 45839,
                  "charLength": 169,
                  "snippet": {
                    "text": "    @is_botAdmin\n    async def sendCHTKTView(self, ctx):\n        MasterSubjectView = discord.ui.View()\n        MasterSubjectView.add_item(\n            SelectMenuHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "342f11850b30f27a4ef5cfcffc490003d041daf13c3224751355ca40d6938bce"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "charOffset": 239,
                  "charLength": 12,
                  "snippet": {
                    "text": "getEqualRank"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "charOffset": 233,
                  "charLength": 74,
                  "snippet": {
                    "text": "\n\ndef getEqualRank(query):\n    if query not in config:\n        return None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "20430101a6e25da72c819a3bf8e41d232fbba479f81685a1a555653ec241ae31"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 11,
                  "charOffset": 365,
                  "charLength": 13,
                  "snippet": {
                    "text": "roleNameCheck"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 353,
                  "charLength": 119,
                  "snippet": {
                    "text": "\n\nasync def roleNameCheck(self, name: str, guild: discord.Guild, user: discord.Member):\n    check = getEqualRank(name)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "12eae5bddf3593637315973a273dd332bdec25bb5ae55bf15efbcb098ce06b10"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 15,
                  "charOffset": 1609,
                  "charLength": 17,
                  "snippet": {
                    "text": "StaffVerification"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "charOffset": 1549,
                  "charLength": 166,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "856ccf70d2d2569ff4d112ee033450f57901501d0e88cc1f9236ef9a6400913b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 9,
                  "charOffset": 1676,
                  "charLength": 19,
                  "snippet": {
                    "text": "InteractionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 1550,
                  "charLength": 205,
                  "snippet": {
                    "text": "    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21c5cd7e7a59428dcd808af507c075dda6f21b292e41152111e10f9aa38a0191"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 13,
                  "charOffset": 1971,
                  "charLength": 11,
                  "snippet": {
                    "text": "staffServer"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "charOffset": 1919,
                  "charLength": 151,
                  "snippet": {
                    "text": "            print(interaction.user.id)\n\n            staffServer: discord.Guild = self.bot.get_guild(\n                interaction.guild_id\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1dbfb209cdf583f9352396a94740ada362cea1d9cf1f2385a2ef82f0058d7d8c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 13,
                  "charOffset": 2114,
                  "charLength": 17,
                  "snippet": {
                    "text": "StaffServerMember"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 1,
                  "charOffset": 2057,
                  "charLength": 166,
                  "snippet": {
                    "text": "            )\n            print(staffServer)\n            StaffServerMember: discord.Member = staffServer.get_member(\n                interaction.user.id\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0558841137f9da6b267eaac804751abbcb7db950b45538d46c498c4c6584a10a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 17,
                  "charOffset": 2347,
                  "charLength": 17,
                  "snippet": {
                    "text": "StaffServerMember"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "charOffset": 2262,
                  "charLength": 202,
                  "snippet": {
                    "text": "            if StaffServerMember is None:\n                print(\"h\")\n                StaffServerMember: discord.Member = staffServer.get_member(\n                    interaction.user.id\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c059a0cb9aff1076ed3c4cbe1e23f841668865268f7ea5d5841ef97d9aad873b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 13,
                  "charOffset": 3773,
                  "charLength": 19,
                  "snippet": {
                    "text": "VerificationChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 3733,
                  "charLength": 183,
                  "snippet": {
                    "text": "                    return\n\n            VerificationChannel = interaction.channel\n            logchannel = self.bot.get_channel(\n                self.staffServer[interaction.guild_id]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "32ff02b65f2ea189ee505fdbd9c4cd5e9fd584481bba8337c42c1369d6ba0ae3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 13,
                  "charOffset": 3944,
                  "charLength": 13,
                  "snippet": {
                    "text": "VerifiedRoles"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "charOffset": 3917,
                  "charLength": 78,
                  "snippet": {
                    "text": "            )\n\n            VerifiedRoles = []\n            VerifiedGuilds = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "22d731606aa1a29b45b5c6e3fdf38776613ae9a209982ea6f1283864e8ccceaa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 13,
                  "charOffset": 3975,
                  "charLength": 14,
                  "snippet": {
                    "text": "VerifiedGuilds"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 119,
                  "startColumn": 1,
                  "charOffset": 3931,
                  "charLength": 102,
                  "snippet": {
                    "text": "\n            VerifiedRoles = []\n            VerifiedGuilds = []\n\n            for ID in self.ServerIDs:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "be383a5276531820e814e34185563c6554db190fb72a8c8aec1ce987d8af5bf6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 21,
                  "charOffset": 4138,
                  "charLength": 12,
                  "snippet": {
                    "text": "ServerMember"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 4034,
                  "charLength": 219,
                  "snippet": {
                    "text": "                server: discord.Guild = self.bot.get_guild(ID)\n                try:\n                    ServerMember: discord.Member = server.get_member(\n                        interaction.user.id\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "db85cfc4684ee8614ec2dc4e28b6eaf174d3a63299bcb44b52a9a6193bc64ef3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 21,
                  "charOffset": 4412,
                  "charLength": 9,
                  "snippet": {
                    "text": "roleNames"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 1,
                  "charOffset": 4369,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n                else:\n                    roleNames = [role for role in ServerMember.roles]\n\n                    for role in roleNames:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b05927e504784e5999f7643a1c63185767701a85ba1fb611aba46b9f28c203f8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 29,
                  "charOffset": 4686,
                  "charLength": 8,
                  "snippet": {
                    "text": "checkSTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 140,
                  "startColumn": 1,
                  "charOffset": 4611,
                  "charLength": 243,
                  "snippet": {
                    "text": "\n                        if check is not None:\n                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "596cccde1a2bef9edca1346cd7129a2f1abb0910c9080ca6a33c6deccdd3748c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 29,
                  "charOffset": 4742,
                  "charLength": 12,
                  "snippet": {
                    "text": "markdownRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 141,
                  "startColumn": 1,
                  "charOffset": 4612,
                  "charLength": 243,
                  "snippet": {
                    "text": "                        if check is not None:\n                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b9f3df79605f08f1d662998eada445962acb4a5e99836d30fa2dac3c7b508213"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 29,
                  "charOffset": 4820,
                  "charLength": 13,
                  "snippet": {
                    "text": "markdownGuild"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 1,
                  "charOffset": 4658,
                  "charLength": 263,
                  "snippet": {
                    "text": "                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\"\n\n                            if markdownRole not in VerifiedRoles:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa7bb89a89f27433f40a7adbb7f748840cd8c742a4287aee4ab98e7ca0d4d3a1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 37,
                  "charOffset": 5323,
                  "charLength": 8,
                  "snippet": {
                    "text": "jsonROLE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 5154,
                  "charLength": 305,
                  "snippet": {
                    "text": "                            for elem in check:\n                                if elem in [role.name for role in staffServer.roles]:\n                                    jsonROLE = discord.utils.get(\n                                        staffServer.roles, name=elem\n                                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bba31177a461424231a29bdbc8e2269e5ded14b02106f929d0080a50d77bf8b7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 17,
                  "charOffset": 6772,
                  "charLength": 12,
                  "snippet": {
                    "text": "VerifiedRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 6704,
                  "charLength": 186,
                  "snippet": {
                    "text": "                await logchannel.send(embed=embed)\n\n                VerifiedRole: discord.Role = discord.utils.get(\n                    staffServer.roles, name=\"Member\"\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4f9c5fe55b90a2432eae760682ba07762e0bb6baaf9457751907c0b8070a520"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 15,
                  "charOffset": 9599,
                  "charLength": 23,
                  "snippet": {
                    "text": "pasteVerificationButton"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 243,
                  "startColumn": 1,
                  "charOffset": 9560,
                  "charLength": 166,
                  "snippet": {
                    "text": "\n    @commands.command()\n    async def pasteVerificationButton(self, ctx):\n        button = VerifyButton()\n        await ctx.send(\"Click here to verify\", view=button)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8689742979a324a4749717efbf7b42c51bc09abd0c6435a56b3127e68b17eef9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 15,
                  "charOffset": 9766,
                  "charLength": 22,
                  "snippet": {
                    "text": "pasteVerificationEmbed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 248,
                  "startColumn": 1,
                  "charOffset": 9727,
                  "charLength": 156,
                  "snippet": {
                    "text": "\n    @commands.command()\n    async def pasteVerificationEmbed(self, ctx: commands.Context):\n        embed = discord.Embed(\n            title=\"Verification\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "12af5d8a9d0eb77380b86d132e7fab5be14eb33cba3faa768422e575dbb224f5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyAttributeOutsideInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Instance attribute index defined outside __init__",
            "markdown": "Instance attribute index defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 9,
                  "charOffset": 15380,
                  "charLength": 10,
                  "snippet": {
                    "text": "self.index"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 368,
                  "startColumn": 1,
                  "charOffset": 15281,
                  "charLength": 144,
                  "snippet": {
                    "text": "    async def get_page(self, page_number: int) -> Any:\n        # The front page is a dummy\n        self.index = page_number\n        return self\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7ecb295db3f4617879dde7cb22b8626c93978190889a008e6f9fbee78bf7d0c8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 9,
                  "charOffset": 7502,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 220,
                  "startColumn": 1,
                  "charOffset": 7441,
                  "charLength": 86,
                  "snippet": {
                    "text": "        try:\n            os.remove(\"cred_file.json\")\n        except:\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8bb0092fba7ff25907c027f52201381b910d9fd7623d997e574c565e3b95ec1b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/Blacklist.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 13,
                  "charOffset": 2455,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 2329,
                  "charLength": 178,
                  "snippet": {
                    "text": "                user = self.bot.get_user(p.id)\n                empty_list.append(f\"`{user.name}` -> `{user.id}`\")\n            except:\n                empty_list.append(f\"`{p}`\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1faf4b63af25a0e52f2cc2fc2bca4908ec9990cd4640e41886c2f1088ccf040c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 9,
                  "charOffset": 3886,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 3805,
                  "charLength": 234,
                  "snippet": {
                    "text": "        try:\n            service.users().delete(userKey=email).execute()\n        except:\n            return await interaction.response.send_message(\n                f\"{interaction.user.mention} The account **{email}** does not exist.\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66125fbc1e82e4a9f70ffb7ac737a0f4a5ef887e08e6631323857fcd54e00da0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 5,
                  "charOffset": 525,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "charOffset": 456,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "79b02159a8a3cf3c13c3e0f121124fc231a4bc2b066ee4bbd8b44570dd40b163"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 763,
                  "startColumn": 17,
                  "charOffset": 30291,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 761,
                  "startColumn": 1,
                  "charOffset": 30222,
                  "charLength": 199,
                  "snippet": {
                    "text": "                        .get()\n                    )\n                except:\n                    embed = discord.Embed(\n                        title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "703606e76ff470c3b10ddb4f41f4390a65c2ea2bb3d5d258f7ea4b4d202bc367"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 976,
                  "startColumn": 21,
                  "charOffset": 39563,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 974,
                  "startColumn": 1,
                  "charOffset": 39482,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2b8e69f0399a0dd608684eba56d8a5c4c252676b896a8bbdf81312a435a99930"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1164,
                  "startColumn": 21,
                  "charOffset": 48182,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1162,
                  "startColumn": 1,
                  "charOffset": 48101,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee0af617cbc873701b64d61ab7eb4eb05c76c1b4caeb264efa6957dc19a61ff5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1339,
                  "startColumn": 21,
                  "charOffset": 56914,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1337,
                  "startColumn": 1,
                  "charOffset": 56833,
                  "charLength": 219,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3183a555ff48b95d8e131a2277c2fe40900d6b343b75d2443f9adcfc858cb1ad"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1410,
                  "startColumn": 21,
                  "charOffset": 60207,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1408,
                  "startColumn": 1,
                  "charOffset": 60104,
                  "charLength": 219,
                  "snippet": {
                    "text": "                    try:\n                        voiceLIMIT = int(new_voice_limit)\n                    except:\n                        return await ctx.send(f\"{Emoji.deny} Not a valid number!\")\n                    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "93b91316c083f9692cfdea04133ecfd6431fc66f6c3db08bfc50bc425ff33780"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1460,
                  "startColumn": 21,
                  "charOffset": 62655,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1458,
                  "startColumn": 1,
                  "charOffset": 62574,
                  "charLength": 219,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c735fe4d5ae29e874096a3511e2a5d730489e16870601e2ab1103ba5dbe6cd03"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1539,
                  "startColumn": 21,
                  "charOffset": 66309,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1537,
                  "startColumn": 1,
                  "charOffset": 66228,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8bc271b4047d2f88dd9e15538be90126b5060a40df89c6aa380e832bc346f0ab"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "charOffset": 437,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "charOffset": 368,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "159971b27ac743f358ee38e65887311cd688f6b476e0bc9febe7f1512452660a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 17,
                  "charOffset": 5741,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 5626,
                  "charLength": 163,
                  "snippet": {
                    "text": "                try:\n                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "187234edd894c166f807f329d6c9a705e0dd30bb1cff109eb24caf3e795512a1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 25,
                  "charOffset": 6622,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 199,
                  "startColumn": 1,
                  "charOffset": 6483,
                  "charLength": 273,
                  "snippet": {
                    "text": "                                tutorChannel, reason=\"Hogging the VC Start Channel.\"\n                            )\n                        except:\n                            await member.move_to(\n                                None, reason=\"Hogging the VC Start Channel.\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d070aedfee0cf909233b4c8814bf9faccedb8cbf2785d46ba8b7b670b57b15ea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 17,
                  "charOffset": 17019,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 402,
                  "startColumn": 1,
                  "charOffset": 16904,
                  "charLength": 246,
                  "snippet": {
                    "text": "                        reason=\"Maximum Channel Ownership Allowance [TRUE]\",\n                    )\n                except:\n                    await member.move_to(\n                        None, reason=\"Maximum Channel Ownership Allowance [FAIL]\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a24e5169f46adddbf1194388b010f39e07355a9cbb8bfe1d36609f3b92aa6e61"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 5,
                  "charOffset": 902,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 833,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9062775927cea34e59cde812ba6ad486b9cb204de171284983183a55e9d6c176"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 13,
                  "charOffset": 8190,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 294,
                  "startColumn": 1,
                  "charOffset": 8120,
                  "charLength": 99,
                  "snippet": {
                    "text": "            try:\n                await member.send(dmMSG)\n            except:\n                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73fc56140e7a9dea1b5bca6128a3c5d5b83d55f71c6f10959480004c81ae0396"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 13,
                  "charOffset": 3069,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 2971,
                  "charLength": 179,
                  "snippet": {
                    "text": "            try:\n                await interaction.response.send_message(embed=embed)\n            except:\n                await interaction.channel.send(embed=embed)\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3afed8339c8a3a3bffc3b3d80a2a0ade6c1fb475038fe33e8bcb1130d77b8f1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 17,
                  "charOffset": 4464,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 4354,
                  "charLength": 199,
                  "snippet": {
                    "text": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n            else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "26fcbaa153cec165aacc3886700c12dd420ec7c334324add51bea27db4dc6da1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 17,
                  "charOffset": 4914,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 1,
                  "charOffset": 4804,
                  "charLength": 182,
                  "snippet": {
                    "text": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3937b904ffbac8e27ee837ec7f8ecfab26b68757f8f14059655326f9a290f10d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 17,
                  "charOffset": 1983,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 1896,
                  "charLength": 213,
                  "snippet": {
                    "text": "                try:\n                    await tutor.send(embed=embed)\n                except:\n                    await botch.send(\n                        f\"Unable to send a reminder DM to you {tutor.mention}!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0f4c204441033f3f3fe467393b7ba44111febd72a0bc91cebd41bf337c01f764"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 17,
                  "charOffset": 2258,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 2169,
                  "charLength": 173,
                  "snippet": {
                    "text": "                try:\n                    await student.send(embed=embed)\n                except:\n                    print(f\"Unable to Send a Reminder DM to: {student.id}\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4f47dd558be55bf82be53b550bc49bb2329b50bdaa0a8af62e30c0110766f508"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 28,
                  "charOffset": 4194,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 4074,
                  "charLength": 250,
                  "snippet": {
                    "text": "                    try:\n                        self.flow.fetch_token(code=answer1.content)\n                    except Exception as e:\n                        return await dm_channel.send(\"Invalid code, try again later...\")\n                    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0fe159d67e6f1fe089b639d9b7e2e9fb9a1eaa8556a459756fb71b5af4a33607"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 20,
                  "charOffset": 4185,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 140,
                  "startColumn": 1,
                  "charOffset": 4101,
                  "charLength": 159,
                  "snippet": {
                    "text": "            try:\n                await UAuthor.send(embed=embed)\n            except Exception:\n                continue\n        if user not in responsesauthor:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8cd3c9888b22a3614dcec56181101ab979bab1710486712d9088a6001e4d9b81"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 20,
                  "charOffset": 4342,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 145,
                  "startColumn": 1,
                  "charOffset": 4261,
                  "charLength": 121,
                  "snippet": {
                    "text": "            try:\n                await user.send(embed=embed)\n            except Exception:\n                pass\n    try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b13f90a0317aa0295cb4b52e3335864b6995efe2a805c7b2d2821d289eb71e3f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 5,
                  "charOffset": 4440,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 4374,
                  "charLength": 87,
                  "snippet": {
                    "text": "    try:\n        os.remove(f\"transcript-{channel.name}.html\")\n    except:\n        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2efcefb693ef7faa942f2753157c17a5a678b475520b2bf41943cd42e752dcde"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 20,
                  "charOffset": 10921,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 346,
                  "startColumn": 1,
                  "charOffset": 10829,
                  "charLength": 187,
                  "snippet": {
                    "text": "                    \"Check your DM's!\", ephemeral=True\n                )\n            except Exception:\n                await interaction.followup.send(\"Check your DM's!\", ephemeral=True)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "751233084677ff0fdbcec7d919ac2a9ad195b77ff8eb42082bd6d3684a7ca0c3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 20,
                  "charOffset": 11670,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 366,
                  "startColumn": 1,
                  "charOffset": 11603,
                  "charLength": 246,
                  "snippet": {
                    "text": "                    view=MSV,\n                )\n            except Exception as e:\n                await interaction.channel.send(\n                    f\"{interaction.user.mention} I can't send you messages, please check you're privacy settings!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "591e03111c4d71164e9920d701a42a88ddf8d6bbba5ad42b9459128c520e3f76"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 24,
                  "charOffset": 13058,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 400,
                  "startColumn": 1,
                  "charOffset": 12942,
                  "charLength": 215,
                  "snippet": {
                    "text": "                try:\n                    await DMChannel.send(embed=embed, view=MiscOptList)\n                except Exception as e:\n                    await interaction.followup.send(embed=embed, view=MiscOptList)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f98ddccddd6c5519ef0df11b4145bad7be2b3d16527160de11e38364a2a7d32b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 815,
                  "startColumn": 13,
                  "charOffset": 29609,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 813,
                  "startColumn": 1,
                  "charOffset": 29506,
                  "charLength": 192,
                  "snippet": {
                    "text": "                    f\"{author.mention}\\n\", embed=embed, view=ButtonViews\n                )\n            except:\n                try:\n                    await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "056131b5d9844b403ca12761baff15954e38ba7b1f6970d32246438a5c85c009"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 820,
                  "startColumn": 17,
                  "charOffset": 29814,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 818,
                  "startColumn": 1,
                  "charOffset": 29699,
                  "charLength": 239,
                  "snippet": {
                    "text": "                        f\"{author.mention}\\n\", embed=embed, view=ButtonViews\n                    )\n                except:\n                    await channel.send(\n                        f\"{author.mention}\\n\", embed=embed, view=ButtonViews"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "76f2e5ebb194a83eb0bbbe38428ea89dcd2c5930e7e6158c58bb1ebdc96a52de"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 905,
                  "startColumn": 20,
                  "charOffset": 33000,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 903,
                  "startColumn": 1,
                  "charOffset": 32877,
                  "charLength": 267,
                  "snippet": {
                    "text": "                    f\"{author.mention} Alright, canceling request.\", delete_after=5.0\n                )\n            except Exception:\n                await interaction.channel.send(\n                    f\"{author.mention} Alright, canceling request.\", delete_after=5.0"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d48ed3d6a2bdbc3cf3e5ccef142ab34948f455041c60b324728de13f60bdbdc1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1072,
                  "startColumn": 20,
                  "charOffset": 40114,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1070,
                  "startColumn": 1,
                  "charOffset": 39957,
                  "charLength": 225,
                  "snippet": {
                    "text": "                    f\"{author.mention}\\nTranscript Created!\\n>>> `Jump Link:` {msg.jump_url}\\n`Transcript Link:` {url}\"\n                )\n            except Exception:\n                try:\n                    await msgO.edit("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fb142ceae386c84187c42b56099f1683ca23f78888d851ef2975d722b3f0fdd6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1077,
                  "startColumn": 24,
                  "charOffset": 40352,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1075,
                  "startColumn": 1,
                  "charOffset": 40183,
                  "charLength": 340,
                  "snippet": {
                    "text": "                        f\"{author.mention}\\nTranscript Created!\\n>>> `Jump Link:` {msg.jump_url}\\n`Transcript Link:` {url}\"\n                    )\n                except Exception:\n                    await msgO.edit(\n                        f\"{author.mention}\\nTranscript Created!\\n>>> `Jump Link:` {msg.jump_url}\\n`Transcript Link:` {url}\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a0272b824d4fd81641b321292a6fc74ff502acb154db8fcea19350ea86556c8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1129,
                  "startColumn": 20,
                  "charOffset": 42280,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1127,
                  "startColumn": 1,
                  "charOffset": 42207,
                  "charLength": 181,
                  "snippet": {
                    "text": "                    entry.ChannelID\n                )\n            except Exception as e:\n                continue\n            fetchMessage = await channel.history(limit=1).flatten()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c96d396f0d3215260c3d5264b7a15be6d9d89d517be6d77adb69559636076ef"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 21,
                  "charOffset": 3301,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "charOffset": 3211,
                  "charLength": 267,
                  "snippet": {
                    "text": "                            ephemeral=True,\n                        )\n                    except:\n                        await interaction.channel.send(\n                            f\"{interaction.user.mention} <:sadturtl:879197443600834600> An error occurred while \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a5adca5646e82c79687f90e5ae00033e796329967f5cf6cb308d0ccbf424155"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 24,
                  "charOffset": 4278,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 4232,
                  "charLength": 136,
                  "snippet": {
                    "text": "                    )\n\n                except Exception as e:\n                    print(\"member not found\")\n                    continue"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72039359d68f606b25cc37a145587c2d64893219aa91eb21e6acb9fefe53466f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 21,
                  "charOffset": 7469,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 196,
                  "startColumn": 1,
                  "charOffset": 7353,
                  "charLength": 262,
                  "snippet": {
                    "text": "                            \"You have been verified!\", ephemeral=True\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} You have been verified!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "314f5eb75206a0eb9ce96bb37e362fa3b1dc2c2f6a0d2e93cf9e325fd5f9d116"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 21,
                  "charOffset": 9234,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 235,
                  "startColumn": 1,
                  "charOffset": 9144,
                  "charLength": 268,
                  "snippet": {
                    "text": "                            ephemeral=True,\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} I didn't seem to find any roles to give you, please try \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "22ec26c937d4ce1d8a8387debd6fe80babf8c822684ebe91fb03e7ee89ee4c50"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyProtectedMemberInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Access to a protected member _meta of a class",
            "markdown": "Access to a protected member _meta of a class"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 27,
                  "charOffset": 2466,
                  "charLength": 21,
                  "snippet": {
                    "text": "model_dict[key]._meta"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2383,
                  "charLength": 233,
                  "snippet": {
                    "text": "        else:\n            db.connect(reuse_if_open=True)\n            for column in model_dict[key]._meta.sorted_fields:\n                if not db.column_exists(key, column.name):\n                    db.create_column(key, column.name)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6197070ee6850c7385951d1322326ea03f294f311cb74208b291d7d2461f0549"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyProtectedMemberInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Access to a protected member _prepare_once of a class",
            "markdown": "Access to a protected member _prepare_once of a class"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "charOffset": 6001,
                  "charLength": 25,
                  "snippet": {
                    "text": "self.source._prepare_once"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 141,
                  "startColumn": 1,
                  "charOffset": 5967,
                  "charLength": 162,
                  "snippet": {
                    "text": "            return\n\n        await self.source._prepare_once()\n        page = await self.source.get_page(0)\n        kwargs = await self._get_kwargs_from_page(page)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ef6ecbe5d07b62634ded88ddf48c0903e64ad0bd3896397a5c11217e89a4b71a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyProtectedMemberInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Access to a protected member _prepare_once of a class",
            "markdown": "Access to a protected member _prepare_once of a class"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 15,
                  "charOffset": 14702,
                  "charLength": 25,
                  "snippet": {
                    "text": "self.source._prepare_once"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 349,
                  "startColumn": 1,
                  "charOffset": 14657,
                  "charLength": 173,
                  "snippet": {
                    "text": "        self.current_page = 0\n\n        await self.source._prepare_once()\n        page = await self.source.get_page(0)\n        kwargs = await self._get_kwargs_from_page(page)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "416590c8c71db2230b4d0652350c24ada72cf14accf6097fbfc4b306ab720a1b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (123 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (123 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 121,
                  "charOffset": 132,
                  "charLength": 3,
                  "snippet": {
                    "text": "re!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 4,
                  "charLength": 187,
                  "snippet": {
                    "text": "SETUP:\n\nIf you require a specific command to be protected, you can use the built in @is_botAdmin check or create your own one here!\n\nIf you wish to use the @is_botAdmin check, DM Space.\"."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ded0517cb34154aa20064082b79b82ad424b0fcd5b1326bd15c50e6f6a68563b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (175 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (175 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 121,
                  "charOffset": 5547,
                  "charLength": 55,
                  "snippet": {
                    "text": "for you to authenticate with an API. Defaults to False."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 5324,
                  "charLength": 350,
                  "snippet": {
                    "text": "        secret_id (str): The secret ID to access. (Options: doc_t, doc_c, tts_c, tsa_c, svc_c, adm_t)\n\n        google_auth_load_mode (bool, optional): If marked as True, the function will return a specific credential class for you to authenticate with an API. Defaults to False.\n\n        type_auth (int, optional): Type of credential class to return."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "245b64c2fc8e6389e1176b11ece0bfa0438fc59263c500014a432eeb5266d7d3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (169 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (169 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 121,
                  "charOffset": 5795,
                  "charLength": 49,
                  "snippet": {
                    "text": "ount.ServiceAccountCredentials) Defaults to None."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 5603,
                  "charLength": 367,
                  "snippet": {
                    "text": "\n        type_auth (int, optional): Type of credential class to return.\n        (0: oauth2.credentials.Credentials, 1: oauthlib.flow.Flow, 2: oauth2.service_account.Credentials, 3: service_account.ServiceAccountCredentials) Defaults to None.\n\n        scopes (list[str], optional): Scopes to access, this is required when using google_auth_load_mode. Defaults to None."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b65bf30e77631b2f980aa3660fcde9be586522963bd39ed30a10db5ee72a83df"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (124 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (124 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 121,
                  "charOffset": 5966,
                  "charLength": 4,
                  "snippet": {
                    "text": "one."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 5675,
                  "charLength": 422,
                  "snippet": {
                    "text": "        (0: oauth2.credentials.Credentials, 1: oauthlib.flow.Flow, 2: oauth2.service_account.Credentials, 3: service_account.ServiceAccountCredentials) Defaults to None.\n\n        scopes (list[str], optional): Scopes to access, this is required when using google_auth_load_mode. Defaults to None.\n\n        redirect_uri (str, optional): Redirect URL to configure, required when using authentication mode 1. Defaults to None."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0acea8b4424b101c25461dddfe5cc3f6c397cf4e50c8a38d5f5a9c9c5fa4d164"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (125 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (125 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 121,
                  "charOffset": 6092,
                  "charLength": 5,
                  "snippet": {
                    "text": "None."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 184,
                  "startColumn": 1,
                  "charOffset": 5846,
                  "charLength": 265,
                  "snippet": {
                    "text": "        scopes (list[str], optional): Scopes to access, this is required when using google_auth_load_mode. Defaults to None.\n\n        redirect_uri (str, optional): Redirect URL to configure, required when using authentication mode 1. Defaults to None.\n\n    Returns:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "035f27bd29a21f9e8ae271fa22babc62aa334ce345bb76b2c34fd3795165b27e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 9,
                  "charOffset": 7502,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 220,
                  "startColumn": 1,
                  "charOffset": 7441,
                  "charLength": 86,
                  "snippet": {
                    "text": "        try:\n            os.remove(\"cred_file.json\")\n        except:\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3818cc08f393280a3bdaeba79b6e4b76be67539a07a81a00f4c6f4e6f0e31efa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (179 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (179 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 9,
                  "charOffset": 8584,
                  "charLength": 171,
                  "snippet": {
                    "text": "# s3_object.copy_from(CopySource={'Bucket':'ch-transcriptlogs', 'x-amz-meta-content-type':'binary/oc..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 253,
                  "startColumn": 1,
                  "charOffset": 8428,
                  "charLength": 357,
                  "snippet": {
                    "text": "        # s3_object = s3_client.Object('ch-transcriptlogs', file_name)\n        # s3_object.metadata.update({'x-amz-meta-content-type':'text/html'})\n        # s3_object.copy_from(CopySource={'Bucket':'ch-transcriptlogs', 'x-amz-meta-content-type':'binary/octet-stream'}, Metadata=s3_object.metadata, MetadataDirective='REPLACE')\n\n    except ClientError as e:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0ff8d1a6d613821137b3cef6a3dfaf398afde6e29aa1739f9bbf9e1b22f54558"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (122 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (122 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 928,
                  "startColumn": 121,
                  "charOffset": 32184,
                  "charLength": 1,
                  "snippet": {
                    "text": ")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 926,
                  "startColumn": 1,
                  "charOffset": 31842,
                  "charLength": 365,
                  "snippet": {
                    "text": "    ch_acadAnnouncements = int(ConfigcatClient.HR_ID_CC.get_value(\"ch_acadannouncements\", 816733725244522557))\n    ch_techAnnouncements = int(ConfigcatClient.HR_ID_CC.get_value(\"ch_techannouncements\", 816733303629414421))\n    ch_leadershipAnnouncements = int(ConfigcatClient.HR_ID_CC.get_value(\"ch_leadershipannouncements\", 819009569979629569))\n\n    # *** Roles ***"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a9162d2ef2face840d5239c9092e3e6a088b7c1956569964a5017e7654e81cb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (136 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (136 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1120,
                  "startColumn": 21,
                  "charOffset": 39078,
                  "charLength": 116,
                  "snippet": {
                    "text": "\"https://media.discordapp.net/attachments/875233489727922177/876603875329732618/timmy_book.png?width..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1118,
                  "startColumn": 1,
                  "charOffset": 38897,
                  "charLength": 479,
                  "snippet": {
                    "text": "    timmyLaptop_png = \"https://i.gyazo.com/5cffb6cd45e5e1ee9b1d015bccbdf9e6.png\"\n    timmyHappy_png = \"https://i.gyazo.com/a0b221679db0f980504e64535885a5fd.png\"\n    timmyBook_png = \"https://media.discordapp.net/attachments/875233489727922177/876603875329732618/timmy_book.png?width=411&height=533\"\n    timmyTeacher_png = \"https://media.discordapp.net/attachments/875233489727922177/877378910214586368/tutoring.png?width=411&height=532\"\n    timmyDonation_png = \"timmydonation.png\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f97e757c703b07b9b6d3ea21ae2a6d7c35bed4f195457e24fbf69b0531ab4b3f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (137 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (137 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1121,
                  "startColumn": 24,
                  "charOffset": 39218,
                  "charLength": 114,
                  "snippet": {
                    "text": "\"https://media.discordapp.net/attachments/875233489727922177/877378910214586368/tutoring.png?width=4..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1119,
                  "startColumn": 1,
                  "charOffset": 38978,
                  "charLength": 473,
                  "snippet": {
                    "text": "    timmyHappy_png = \"https://i.gyazo.com/a0b221679db0f980504e64535885a5fd.png\"\n    timmyBook_png = \"https://media.discordapp.net/attachments/875233489727922177/876603875329732618/timmy_book.png?width=411&height=533\"\n    timmyTeacher_png = \"https://media.discordapp.net/attachments/875233489727922177/877378910214586368/tutoring.png?width=411&height=532\"\n    timmyDonation_png = \"timmydonation.png\"\n    timmyDonation_path = \"./utils/bots/CoreBot/LogFiles/timmydonation.png\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e6cac6a2ddd3793a7fa2000043b3fccbbc49aa5753aa409ef2d230ed010f3a8c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (154 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (154 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1166,
                  "startColumn": 121,
                  "charOffset": 40882,
                  "charLength": 1,
                  "snippet": {
                    "text": "}"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1164,
                  "startColumn": 1,
                  "charOffset": 40747,
                  "charLength": 653,
                  "snippet": {
                    "text": "\nrulesDict = {\n    1: f\"All Terms of Service and Community Guidelines apply. && {Emoji.barrow} https://discord.com/terms\\n{Emoji.barrow} https://discord.com/guidelines\",\n    2: f\"Keep chats and conversations mainly in English. && {Emoji.barrow} Full-blown conversations in a different language that disrupt the environment are not allowed.\\n{Emoji.barrow} Disrupting an existing conversation in English in voice chat is not allowed.\",\n    3: f\"Keep chats and conversations relevant. && {Emoji.barrow} Keep discussions about politics or anything else in <#773366189648642069>.\\n{Emoji.barrow} Ask homework questions in the homework channels or tickets.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a4001fd17aefd8ce9a1593decbb52361135812fc5f57ab9441dc4932c3fe9c46"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (264 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (264 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1167,
                  "startColumn": 75,
                  "charOffset": 40991,
                  "charLength": 97,
                  "snippet": {
                    "text": "Full-blown conversations in a different language that disrupt the environment are not allowed.\\n"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1165,
                  "startColumn": 1,
                  "charOffset": 40748,
                  "charLength": 1131,
                  "snippet": {
                    "text": "rulesDict = {\n    1: f\"All Terms of Service and Community Guidelines apply. && {Emoji.barrow} https://discord.com/terms\\n{Emoji.barrow} https://discord.com/guidelines\",\n    2: f\"Keep chats and conversations mainly in English. && {Emoji.barrow} Full-blown conversations in a different language that disrupt the environment are not allowed.\\n{Emoji.barrow} Disrupting an existing conversation in English in voice chat is not allowed.\",\n    3: f\"Keep chats and conversations relevant. && {Emoji.barrow} Keep discussions about politics or anything else in <#773366189648642069>.\\n{Emoji.barrow} Ask homework questions in the homework channels or tickets.\",\n    4: f\"No content that does not belong in a school server. && {Emoji.barrow} No inappropriate user profiles, avatars, banners, statuses, about me, usernames, or nicknames.\\n{Emoji.barrow} No sharing of content that glorifies or promotes suicide or self-harm.\\n{Emoji.barrow} No trolling, raiding, epileptic, disturbing, suggestive, or offensive behavior.\\n{Emoji.barrow} No sexist, racist, homophobic, transphobic, xenophobic, islamophobic, pedophilic, creepy behavior, etc.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ce7c5f45def064ab4c49ec91f525f060dbaa77fa3ba3fbf4657239100cd7160a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (218 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (218 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1168,
                  "startColumn": 66,
                  "charOffset": 41247,
                  "charLength": 77,
                  "snippet": {
                    "text": "Keep discussions about politics or anything else in <#773366189648642069>.\\n"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1166,
                  "startColumn": 1,
                  "charOffset": 40762,
                  "charLength": 1417,
                  "snippet": {
                    "text": "    1: f\"All Terms of Service and Community Guidelines apply. && {Emoji.barrow} https://discord.com/terms\\n{Emoji.barrow} https://discord.com/guidelines\",\n    2: f\"Keep chats and conversations mainly in English. && {Emoji.barrow} Full-blown conversations in a different language that disrupt the environment are not allowed.\\n{Emoji.barrow} Disrupting an existing conversation in English in voice chat is not allowed.\",\n    3: f\"Keep chats and conversations relevant. && {Emoji.barrow} Keep discussions about politics or anything else in <#773366189648642069>.\\n{Emoji.barrow} Ask homework questions in the homework channels or tickets.\",\n    4: f\"No content that does not belong in a school server. && {Emoji.barrow} No inappropriate user profiles, avatars, banners, statuses, about me, usernames, or nicknames.\\n{Emoji.barrow} No sharing of content that glorifies or promotes suicide or self-harm.\\n{Emoji.barrow} No trolling, raiding, epileptic, disturbing, suggestive, or offensive behavior.\\n{Emoji.barrow} No sexist, racist, homophobic, transphobic, xenophobic, islamophobic, pedophilic, creepy behavior, etc.\",\n    5: f\"No advertising or self-promotion (unless given explicit permission). && {Emoji.barrow} Self-advertising a website, group, or anything else through DMs, VC or in the server is not allowed.\\n{Emoji.barrow} Explicitly asking users to look at advertisements in status/About Me is not allowed.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d11bfc76fba5b931af9816399d33d462319fee67c4cf4e9c9f6460911794b707"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (478 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (478 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1169,
                  "startColumn": 79,
                  "charOffset": 41479,
                  "charLength": 97,
                  "snippet": {
                    "text": "No inappropriate user profiles, avatars, banners, statuses, about me, usernames, or nicknames.\\n"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1167,
                  "startColumn": 1,
                  "charOffset": 40917,
                  "charLength": 1710,
                  "snippet": {
                    "text": "    2: f\"Keep chats and conversations mainly in English. && {Emoji.barrow} Full-blown conversations in a different language that disrupt the environment are not allowed.\\n{Emoji.barrow} Disrupting an existing conversation in English in voice chat is not allowed.\",\n    3: f\"Keep chats and conversations relevant. && {Emoji.barrow} Keep discussions about politics or anything else in <#773366189648642069>.\\n{Emoji.barrow} Ask homework questions in the homework channels or tickets.\",\n    4: f\"No content that does not belong in a school server. && {Emoji.barrow} No inappropriate user profiles, avatars, banners, statuses, about me, usernames, or nicknames.\\n{Emoji.barrow} No sharing of content that glorifies or promotes suicide or self-harm.\\n{Emoji.barrow} No trolling, raiding, epileptic, disturbing, suggestive, or offensive behavior.\\n{Emoji.barrow} No sexist, racist, homophobic, transphobic, xenophobic, islamophobic, pedophilic, creepy behavior, etc.\",\n    5: f\"No advertising or self-promotion (unless given explicit permission). && {Emoji.barrow} Self-advertising a website, group, or anything else through DMs, VC or in the server is not allowed.\\n{Emoji.barrow} Explicitly asking users to look at advertisements in status/About Me is not allowed.\",\n    6: f\"No toxic behavior or harassment. && {Emoji.barrow} No discriminatory jokes or language towards an individual or group due to race, ethnicity, nationality, sex, gender, sexual orientation, religious affiliation, or disabilities.\\n{Emoji.barrow} Disrespect of members is not allowed, especially if it is continuous, repetitive, or severe.\\n{Emoji.barrow} Encouraging toxicity, harassment, bullying, and anything of the sort is prohibited.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ed6dff681e332c5aebb5d3b75515e5494f6a96a9ef0ebbeda880321e22468fa4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (299 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (299 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1170,
                  "startColumn": 96,
                  "charOffset": 41975,
                  "charLength": 103,
                  "snippet": {
                    "text": "Self-advertising a website, group, or anything else through DMs, VC or in the server is not allowed...."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1168,
                  "startColumn": 1,
                  "charOffset": 41182,
                  "charLength": 1801,
                  "snippet": {
                    "text": "    3: f\"Keep chats and conversations relevant. && {Emoji.barrow} Keep discussions about politics or anything else in <#773366189648642069>.\\n{Emoji.barrow} Ask homework questions in the homework channels or tickets.\",\n    4: f\"No content that does not belong in a school server. && {Emoji.barrow} No inappropriate user profiles, avatars, banners, statuses, about me, usernames, or nicknames.\\n{Emoji.barrow} No sharing of content that glorifies or promotes suicide or self-harm.\\n{Emoji.barrow} No trolling, raiding, epileptic, disturbing, suggestive, or offensive behavior.\\n{Emoji.barrow} No sexist, racist, homophobic, transphobic, xenophobic, islamophobic, pedophilic, creepy behavior, etc.\",\n    5: f\"No advertising or self-promotion (unless given explicit permission). && {Emoji.barrow} Self-advertising a website, group, or anything else through DMs, VC or in the server is not allowed.\\n{Emoji.barrow} Explicitly asking users to look at advertisements in status/About Me is not allowed.\",\n    6: f\"No toxic behavior or harassment. && {Emoji.barrow} No discriminatory jokes or language towards an individual or group due to race, ethnicity, nationality, sex, gender, sexual orientation, religious affiliation, or disabilities.\\n{Emoji.barrow} Disrespect of members is not allowed, especially if it is continuous, repetitive, or severe.\\n{Emoji.barrow} Encouraging toxicity, harassment, bullying, and anything of the sort is prohibited.\",\n    7: f\"No illegal or explicit material. && {Emoji.barrow} Discussing or sharing illegal content is prohibited. This includes, but is not limited to: copyrighted content, pirated content, illegal activities, crimes, IPGrabbers, phishing links.\\n{Emoji.barrow} Any form of NSFW, NSFL, or explicit content (pornographic, overtly sexual, overly gory) is pro"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3f4585998918aeb954a254aeeb7ff9823b2bede849bc1c2a34c4fd383c617d9f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (447 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (447 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1171,
                  "startColumn": 60,
                  "charOffset": 42239,
                  "charLength": 179,
                  "snippet": {
                    "text": "No discriminatory jokes or language towards an individual or group due to race, ethnicity, nationali..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1169,
                  "startColumn": 1,
                  "charOffset": 41401,
                  "charLength": 1801,
                  "snippet": {
                    "text": "    4: f\"No content that does not belong in a school server. && {Emoji.barrow} No inappropriate user profiles, avatars, banners, statuses, about me, usernames, or nicknames.\\n{Emoji.barrow} No sharing of content that glorifies or promotes suicide or self-harm.\\n{Emoji.barrow} No trolling, raiding, epileptic, disturbing, suggestive, or offensive behavior.\\n{Emoji.barrow} No sexist, racist, homophobic, transphobic, xenophobic, islamophobic, pedophilic, creepy behavior, etc.\",\n    5: f\"No advertising or self-promotion (unless given explicit permission). && {Emoji.barrow} Self-advertising a website, group, or anything else through DMs, VC or in the server is not allowed.\\n{Emoji.barrow} Explicitly asking users to look at advertisements in status/About Me is not allowed.\",\n    6: f\"No toxic behavior or harassment. && {Emoji.barrow} No discriminatory jokes or language towards an individual or group due to race, ethnicity, nationality, sex, gender, sexual orientation, religious affiliation, or disabilities.\\n{Emoji.barrow} Disrespect of members is not allowed, especially if it is continuous, repetitive, or severe.\\n{Emoji.barrow} Encouraging toxicity, harassment, bullying, and anything of the sort is prohibited.\",\n    7: f\"No illegal or explicit material. && {Emoji.barrow} Discussing or sharing illegal content is prohibited. This includes, but is not limited to: copyrighted content, pirated content, illegal activities, crimes, IPGrabbers, phishing links.\\n{Emoji.barrow} Any form of NSFW, NSFL, or explicit content (pornographic, overtly sexual, overly gory) is prohibited.\",\n    8: f\"No DDoS, dox, death or any other sort of threats. && {Emoji.barrow} Indirect or direct threats to harm someone else are strictly prohibited and causes for immediate ban.\\n{Emoji.barrow} DDoS (Distrib"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dee379b2273a0d9a66c57aff6c531cf4e88d8d5e25a4d25cf7d149bc1b7b6753"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (365 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (365 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1172,
                  "startColumn": 60,
                  "charOffset": 42687,
                  "charLength": 187,
                  "snippet": {
                    "text": "Discussing or sharing illegal content is prohibited. This includes, but is not limited to: copyright..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1170,
                  "startColumn": 1,
                  "charOffset": 41880,
                  "charLength": 1754,
                  "snippet": {
                    "text": "    5: f\"No advertising or self-promotion (unless given explicit permission). && {Emoji.barrow} Self-advertising a website, group, or anything else through DMs, VC or in the server is not allowed.\\n{Emoji.barrow} Explicitly asking users to look at advertisements in status/About Me is not allowed.\",\n    6: f\"No toxic behavior or harassment. && {Emoji.barrow} No discriminatory jokes or language towards an individual or group due to race, ethnicity, nationality, sex, gender, sexual orientation, religious affiliation, or disabilities.\\n{Emoji.barrow} Disrespect of members is not allowed, especially if it is continuous, repetitive, or severe.\\n{Emoji.barrow} Encouraging toxicity, harassment, bullying, and anything of the sort is prohibited.\",\n    7: f\"No illegal or explicit material. && {Emoji.barrow} Discussing or sharing illegal content is prohibited. This includes, but is not limited to: copyrighted content, pirated content, illegal activities, crimes, IPGrabbers, phishing links.\\n{Emoji.barrow} Any form of NSFW, NSFL, or explicit content (pornographic, overtly sexual, overly gory) is prohibited.\",\n    8: f\"No DDoS, dox, death or any other sort of threats. && {Emoji.barrow} Indirect or direct threats to harm someone else are strictly prohibited and causes for immediate ban.\\n{Emoji.barrow} DDoS (Distributed Denial of Service): sending a large amount of requests in a short amount of time.\\n{Emoji.barrow} Dox: revealing any private information of another member, such as real name or address, without consent.\",\n    9: f\"No slurs and excessive or harmful profanity usage. && {Emoji.barrow} Using or attempting to use slurs and racist terms is prohibited.\\n{Emoji.barrow} Excessive profanity, verbal abuse and insults are prohibited.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d3181508c1abedd4e0bde113ad10ffd6ee10dcab68068b92495e59587e61f6b5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (417 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (417 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1173,
                  "startColumn": 77,
                  "charOffset": 43070,
                  "charLength": 104,
                  "snippet": {
                    "text": "Indirect or direct threats to harm someone else are strictly prohibited and causes for immediate ban..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1171,
                  "startColumn": 1,
                  "charOffset": 42180,
                  "charLength": 1601,
                  "snippet": {
                    "text": "    6: f\"No toxic behavior or harassment. && {Emoji.barrow} No discriminatory jokes or language towards an individual or group due to race, ethnicity, nationality, sex, gender, sexual orientation, religious affiliation, or disabilities.\\n{Emoji.barrow} Disrespect of members is not allowed, especially if it is continuous, repetitive, or severe.\\n{Emoji.barrow} Encouraging toxicity, harassment, bullying, and anything of the sort is prohibited.\",\n    7: f\"No illegal or explicit material. && {Emoji.barrow} Discussing or sharing illegal content is prohibited. This includes, but is not limited to: copyrighted content, pirated content, illegal activities, crimes, IPGrabbers, phishing links.\\n{Emoji.barrow} Any form of NSFW, NSFL, or explicit content (pornographic, overtly sexual, overly gory) is prohibited.\",\n    8: f\"No DDoS, dox, death or any other sort of threats. && {Emoji.barrow} Indirect or direct threats to harm someone else are strictly prohibited and causes for immediate ban.\\n{Emoji.barrow} DDoS (Distributed Denial of Service): sending a large amount of requests in a short amount of time.\\n{Emoji.barrow} Dox: revealing any private information of another member, such as real name or address, without consent.\",\n    9: f\"No slurs and excessive or harmful profanity usage. && {Emoji.barrow} Using or attempting to use slurs and racist terms is prohibited.\\n{Emoji.barrow} Excessive profanity, verbal abuse and insults are prohibited.\",\n    10: f\"No cheating in any form. && {Emoji.barrow} It is strictly prohibited to cheat or engage in academic dishonesty anywhere in the server.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "40756635fc184310bedc319691b8b76e8a51d61b4e25db4a85e6de46fa92a5b5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (222 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (222 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1174,
                  "startColumn": 78,
                  "charOffset": 43489,
                  "charLength": 67,
                  "snippet": {
                    "text": "Using or attempting to use slurs and racist terms is prohibited.\\n"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1172,
                  "startColumn": 1,
                  "charOffset": 42628,
                  "charLength": 1315,
                  "snippet": {
                    "text": "    7: f\"No illegal or explicit material. && {Emoji.barrow} Discussing or sharing illegal content is prohibited. This includes, but is not limited to: copyrighted content, pirated content, illegal activities, crimes, IPGrabbers, phishing links.\\n{Emoji.barrow} Any form of NSFW, NSFL, or explicit content (pornographic, overtly sexual, overly gory) is prohibited.\",\n    8: f\"No DDoS, dox, death or any other sort of threats. && {Emoji.barrow} Indirect or direct threats to harm someone else are strictly prohibited and causes for immediate ban.\\n{Emoji.barrow} DDoS (Distributed Denial of Service): sending a large amount of requests in a short amount of time.\\n{Emoji.barrow} Dox: revealing any private information of another member, such as real name or address, without consent.\",\n    9: f\"No slurs and excessive or harmful profanity usage. && {Emoji.barrow} Using or attempting to use slurs and racist terms is prohibited.\\n{Emoji.barrow} Excessive profanity, verbal abuse and insults are prohibited.\",\n    10: f\"No cheating in any form. && {Emoji.barrow} It is strictly prohibited to cheat or engage in academic dishonesty anywhere in the server.\",\n    11: f\"No spamming in any form. && {Emoji.barrow} Spamming links, images, messages, roles, emojis, emotes, emote reactions, or anything else is not allowed.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a2820a38b635b5b4d9d4c985f1f9d19aac4d5ebf6ac646cb56ce8540b3ae9a9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (146 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (146 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1175,
                  "startColumn": 53,
                  "charOffset": 43687,
                  "charLength": 92,
                  "snippet": {
                    "text": "It is strictly prohibited to cheat or engage in academic dishonesty anywhere in the server."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1173,
                  "startColumn": 1,
                  "charOffset": 42994,
                  "charLength": 1154,
                  "snippet": {
                    "text": "    8: f\"No DDoS, dox, death or any other sort of threats. && {Emoji.barrow} Indirect or direct threats to harm someone else are strictly prohibited and causes for immediate ban.\\n{Emoji.barrow} DDoS (Distributed Denial of Service): sending a large amount of requests in a short amount of time.\\n{Emoji.barrow} Dox: revealing any private information of another member, such as real name or address, without consent.\",\n    9: f\"No slurs and excessive or harmful profanity usage. && {Emoji.barrow} Using or attempting to use slurs and racist terms is prohibited.\\n{Emoji.barrow} Excessive profanity, verbal abuse and insults are prohibited.\",\n    10: f\"No cheating in any form. && {Emoji.barrow} It is strictly prohibited to cheat or engage in academic dishonesty anywhere in the server.\",\n    11: f\"No spamming in any form. && {Emoji.barrow} Spamming links, images, messages, roles, emojis, emotes, emote reactions, or anything else is not allowed.\",\n    12: f\"No impersonation in any form. && {Emoji.barrow} Changing your username or avatar to something similar as any staff or members with the intent to mimic them and create confusion is prohibited. \","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a4612c3277ce21ebdbba73d86ad9b66fc7d43e72b5bb5d4634e42f7a6871bdf9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (161 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (161 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1176,
                  "startColumn": 53,
                  "charOffset": 43834,
                  "charLength": 107,
                  "snippet": {
                    "text": "Spamming links, images, messages, roles, emojis, emotes, emote reactions, or anything else is not al..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1174,
                  "startColumn": 1,
                  "charOffset": 43412,
                  "charLength": 1026,
                  "snippet": {
                    "text": "    9: f\"No slurs and excessive or harmful profanity usage. && {Emoji.barrow} Using or attempting to use slurs and racist terms is prohibited.\\n{Emoji.barrow} Excessive profanity, verbal abuse and insults are prohibited.\",\n    10: f\"No cheating in any form. && {Emoji.barrow} It is strictly prohibited to cheat or engage in academic dishonesty anywhere in the server.\",\n    11: f\"No spamming in any form. && {Emoji.barrow} Spamming links, images, messages, roles, emojis, emotes, emote reactions, or anything else is not allowed.\",\n    12: f\"No impersonation in any form. && {Emoji.barrow} Changing your username or avatar to something similar as any staff or members with the intent to mimic them and create confusion is prohibited. \",\n    13: f\"No disruptive behavior in voice chat. && {Emoji.barrow} No continuous hopping between voice chats.\\n{Emoji.barrow} No starting and closing streams in short intervals.\\n{Emoji.barrow} No loud, annoying, or high-pitched noises.\\n{Emoji.barrow} No voice changers if asked to stop.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a898b7a3f93c6ecf919a23cb58de443f6aff4bbbbd6946043e3f8391dedc6f7d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (204 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (204 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1177,
                  "startColumn": 58,
                  "charOffset": 44001,
                  "charLength": 145,
                  "snippet": {
                    "text": "Changing your username or avatar to something similar as any staff or members with the intent to mim..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1175,
                  "startColumn": 1,
                  "charOffset": 43635,
                  "charLength": 1382,
                  "snippet": {
                    "text": "    10: f\"No cheating in any form. && {Emoji.barrow} It is strictly prohibited to cheat or engage in academic dishonesty anywhere in the server.\",\n    11: f\"No spamming in any form. && {Emoji.barrow} Spamming links, images, messages, roles, emojis, emotes, emote reactions, or anything else is not allowed.\",\n    12: f\"No impersonation in any form. && {Emoji.barrow} Changing your username or avatar to something similar as any staff or members with the intent to mimic them and create confusion is prohibited. \",\n    13: f\"No disruptive behavior in voice chat. && {Emoji.barrow} No continuous hopping between voice chats.\\n{Emoji.barrow} No starting and closing streams in short intervals.\\n{Emoji.barrow} No loud, annoying, or high-pitched noises.\\n{Emoji.barrow} No voice changers if asked to stop.\",\n    14: f\"No evading user blocks, punishments, or bans by using alternate accounts. && {Emoji.barrow} Sending unwanted, repeated friend requests or messages to contact someone who has blocked you is prohibited.\\n{Emoji.barrow} Creating alternate accounts to evade a punishment or ban, harass or impersonate someone, or participate in a raid are all strictly prohibited.\\n{Emoji.barrow} Suspicions of being an alternate account are cause for a ban with no prior warning.\\n{Emoji.barrow} To discuss punishments or warnings, create a support ticket or talk to a moderator in DMs.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3dda46af840d1588091a1073e95f0a6cab11c5066950aaf4df943536783fcfb7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (289 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (289 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1178,
                  "startColumn": 118,
                  "charOffset": 44266,
                  "charLength": 6,
                  "snippet": {
                    "text": "barrow"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1176,
                  "startColumn": 1,
                  "charOffset": 43782,
                  "charLength": 1237,
                  "snippet": {
                    "text": "    11: f\"No spamming in any form. && {Emoji.barrow} Spamming links, images, messages, roles, emojis, emotes, emote reactions, or anything else is not allowed.\",\n    12: f\"No impersonation in any form. && {Emoji.barrow} Changing your username or avatar to something similar as any staff or members with the intent to mimic them and create confusion is prohibited. \",\n    13: f\"No disruptive behavior in voice chat. && {Emoji.barrow} No continuous hopping between voice chats.\\n{Emoji.barrow} No starting and closing streams in short intervals.\\n{Emoji.barrow} No loud, annoying, or high-pitched noises.\\n{Emoji.barrow} No voice changers if asked to stop.\",\n    14: f\"No evading user blocks, punishments, or bans by using alternate accounts. && {Emoji.barrow} Sending unwanted, repeated friend requests or messages to contact someone who has blocked you is prohibited.\\n{Emoji.barrow} Creating alternate accounts to evade a punishment or ban, harass or impersonate someone, or participate in a raid are all strictly prohibited.\\n{Emoji.barrow} Suspicions of being an alternate account are cause for a ban with no prior warning.\\n{Emoji.barrow} To discuss punishments or warnings, create a support ticket or talk to a moderator in DMs.\",\n}"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2db5f8149235e0cdd99a66df1158d762e84363bf3a9fb8e72ea2514ae99d4b3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (578 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (578 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1179,
                  "startColumn": 102,
                  "charOffset": 44540,
                  "charLength": 111,
                  "snippet": {
                    "text": "Sending unwanted, repeated friend requests or messages to contact someone who has blocked you is pro..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1177,
                  "startColumn": 1,
                  "charOffset": 43944,
                  "charLength": 1076,
                  "snippet": {
                    "text": "    12: f\"No impersonation in any form. && {Emoji.barrow} Changing your username or avatar to something similar as any staff or members with the intent to mimic them and create confusion is prohibited. \",\n    13: f\"No disruptive behavior in voice chat. && {Emoji.barrow} No continuous hopping between voice chats.\\n{Emoji.barrow} No starting and closing streams in short intervals.\\n{Emoji.barrow} No loud, annoying, or high-pitched noises.\\n{Emoji.barrow} No voice changers if asked to stop.\",\n    14: f\"No evading user blocks, punishments, or bans by using alternate accounts. && {Emoji.barrow} Sending unwanted, repeated friend requests or messages to contact someone who has blocked you is prohibited.\\n{Emoji.barrow} Creating alternate accounts to evade a punishment or ban, harass or impersonate someone, or participate in a raid are all strictly prohibited.\\n{Emoji.barrow} Suspicions of being an alternate account are cause for a ban with no prior warning.\\n{Emoji.barrow} To discuss punishments or warnings, create a support ticket or talk to a moderator in DMs.\",\n}\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8b6db174a4aa0a0132464192ebe6fc3619edd9209e1c45c71afeeb078c3063b2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (167 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (167 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1358,
                  "startColumn": 121,
                  "charOffset": 52121,
                  "charLength": 47,
                  "snippet": {
                    "text": "after the button is pressed. Default to None."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1356,
                  "startColumn": 1,
                  "charOffset": 51779,
                  "charLength": 429,
                  "snippet": {
                    "text": "            interaction_message: The response message when pressing on a selection. Default to None.\n            ephemeral: Whenever the response message should only be visible for the select_user or not. Default to True.\n            coroutine: A coroutine that gets invoked after the button is pressed. If None is passed, the view is stopped after the button is pressed.  Default to None.\n        \"\"\"\n        self.style_ = style"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ea3203821fa57da564cbf32b3a48b88f6ffc8d89abd4e1ae7e7f768ae325ca62"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E201 whitespace after '('",
            "markdown": "PEP 8: E201 whitespace after '('"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1442,
                  "startColumn": 25,
                  "charOffset": 54781,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1440,
                  "startColumn": 1,
                  "charOffset": 54698,
                  "charLength": 147,
                  "snippet": {
                    "text": "        ch = self.bot.get_channel(interaction.channel_id)\n\n        await rawExport( ch, TranscriptLOG, interaction.user)\n        await ch.delete()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e87ff314ffe7e80f0a97b5c192b72087eb7cb95df7e027a95b826ef020a3930"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (245 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (245 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1529,
                  "startColumn": 17,
                  "charOffset": 57495,
                  "charLength": 228,
                  "snippet": {
                    "text": "\"https://images-ext-2.discordapp.net/external/YTk-6Mfxbbr8KwIc-3Pyy5Z_06tfpcO65MflxYgbjA8/%3Fcid%3D7..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1527,
                  "startColumn": 1,
                  "charOffset": 57413,
                  "charLength": 357,
                  "snippet": {
                    "text": "        try:\n            await interaction.response.send_message(\n                \"https://images-ext-2.discordapp.net/external/YTk-6Mfxbbr8KwIc-3Pyy5Z_06tfpcO65MflxYgbjA8/%3Fcid%3D73b8f7b119cc9225923f70c7e25a1f8e8932c7ae8ef48fe7%26rid%3Dgiphy.mp4%26ct%3Dg/https/media2.giphy.com/media/Ju7l5y9osyymQ/giphy.mp4\",\n                ephemeral=True,\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "28d344cd8af9609ea2e7c9723b616ab1d7138af5f2dd93422a8f1be52567f6fa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (245 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (245 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1534,
                  "startColumn": 17,
                  "charOffset": 57884,
                  "charLength": 228,
                  "snippet": {
                    "text": "\"https://images-ext-2.discordapp.net/external/YTk-6Mfxbbr8KwIc-3Pyy5Z_06tfpcO65MflxYgbjA8/%3Fcid%3D7..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1532,
                  "startColumn": 1,
                  "charOffset": 57771,
                  "charLength": 388,
                  "snippet": {
                    "text": "        except discord.errors.InteractionResponded:\n            await interaction.followup.send(\n                \"https://images-ext-2.discordapp.net/external/YTk-6Mfxbbr8KwIc-3Pyy5Z_06tfpcO65MflxYgbjA8/%3Fcid%3D73b8f7b119cc9225923f70c7e25a1f8e8932c7ae8ef48fe7%26rid%3Dgiphy.mp4%26ct%3Dg/https/media2.giphy.com/media/Ju7l5y9osyymQ/giphy.mp4\",\n                ephemeral=True,\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3cd4a154d902f96a9b97591ec2b6369e11c46eb80622e74f32c353940a476697"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (210 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (210 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1622,
                  "startColumn": 121,
                  "charOffset": 60812,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1620,
                  "startColumn": 1,
                  "charOffset": 60627,
                  "charLength": 436,
                  "snippet": {
                    "text": "\n    async def callback(self, interaction: discord.Interaction):\n        response = f\"User Action: {self.children[0]}\\nSteps to reproduce the issue: {self.children[1]}\\nWhat happened: {self.children[2]}\\nExpected Result: {self.children[3]}\\nAnything else: {self.children[4]}\"\n        url = f\"https://sentry.io/api/0/projects/schoolsimplified/timmy/user-feedback/\"\n        headers = {\"Authorization\": f'Bearer {os.getenv(\"FDB_SENTRY\")}'}"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c98c2332e60d8036cb1e14a6ce711f94364c25e6c780cadf8b488ce441a4aefb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (127 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (127 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1751,
                  "startColumn": 121,
                  "charOffset": 64616,
                  "charLength": 7,
                  "snippet": {
                    "text": "None``."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1749,
                  "startColumn": 1,
                  "charOffset": 64401,
                  "charLength": 231,
                  "snippet": {
                    "text": "        string: The string which should get converted to the time units. (e.g. '2d 4h 6m 7s')\n\n    Returns: A ``dict`` which the keys are 'days', 'hours', 'minutes', 'seconds' and the value is either a ``int`` or ``None``.\n    \"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2805d41909f551950b03403506b0e7f5d18963fcb29efc7ff467fa39d95848b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\d'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\d'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1756,
                  "startColumn": 22,
                  "charOffset": 64679,
                  "charLength": 6,
                  "snippet": {
                    "text": "\"\\d+d\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1754,
                  "startColumn": 1,
                  "charOffset": 64633,
                  "charLength": 139,
                  "snippet": {
                    "text": "    timeDict: dict = {}\n\n    days = re.search(\"\\d+d\", string)\n    hours = re.search(\"\\d+h\", string)\n    minutes = re.search(\"\\d+m\", string)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7172e57ec4176f7693ed24114979388d8368e96ecef75fc78dbd38db18df9426"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\d'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\d'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1757,
                  "startColumn": 23,
                  "charOffset": 64717,
                  "charLength": 6,
                  "snippet": {
                    "text": "\"\\d+h\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1755,
                  "startColumn": 1,
                  "charOffset": 64657,
                  "charLength": 155,
                  "snippet": {
                    "text": "\n    days = re.search(\"\\d+d\", string)\n    hours = re.search(\"\\d+h\", string)\n    minutes = re.search(\"\\d+m\", string)\n    seconds = re.search(\"\\d+s\", string)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fc36f3c37f419f24ea34557c8915fb1fb2899152ec225badda50df620867610b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\d'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\d'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1758,
                  "startColumn": 25,
                  "charOffset": 64757,
                  "charLength": 6,
                  "snippet": {
                    "text": "\"\\d+m\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1756,
                  "startColumn": 1,
                  "charOffset": 64658,
                  "charLength": 155,
                  "snippet": {
                    "text": "    days = re.search(\"\\d+d\", string)\n    hours = re.search(\"\\d+h\", string)\n    minutes = re.search(\"\\d+m\", string)\n    seconds = re.search(\"\\d+s\", string)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e5f02f3548ce93059ef7836509c987f60c8416814dab0c6b19fdd66c2823bf40"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\d'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\d'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1759,
                  "startColumn": 25,
                  "charOffset": 64797,
                  "charLength": 6,
                  "snippet": {
                    "text": "\"\\d+s\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1757,
                  "startColumn": 1,
                  "charOffset": 64695,
                  "charLength": 143,
                  "snippet": {
                    "text": "    hours = re.search(\"\\d+h\", string)\n    minutes = re.search(\"\\d+m\", string)\n    seconds = re.search(\"\\d+s\", string)\n\n    if days is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "298e31bd251c36c6206891ee8608929d0ac7427236e13e52af19f15d504cfaef"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\d'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\d'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1795,
                  "startColumn": 29,
                  "charOffset": 65745,
                  "charLength": 21,
                  "snippet": {
                    "text": "\"<[^:]*:[^:]*:(\\d)+>\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1793,
                  "startColumn": 1,
                  "charOffset": 65708,
                  "charLength": 100,
                  "snippet": {
                    "text": "    \"\"\"\n\n    customEmoji = re.search(\"<[^:]*:[^:]*:(\\d)+>\", string)\n\n    if customEmoji is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d1990766835d53de9b16df3541a024a49910274a5ef930185f450eb4bf98ddae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (241 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (241 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 5,
                  "charOffset": 1031,
                  "charLength": 237,
                  "snippet": {
                    "text": "# useDB = bool(input(f\"{bcolors.WARNING}Do you want to use MySQL? (y/n)\\n > This option should be..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 992,
                  "charLength": 303,
                  "snippet": {
                    "text": "\nelif os.getenv(\"IP\") is not None:\n    # useDB = bool(input(f\"{bcolors.WARNING}Do you want to use MySQL? (y/n)\\n    > This option should be avoided if you are testing new database structures, do not use MySQL Production if you are testing table modifications.{bcolors.ENDC}\"))\n    if useDB:\n        try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9e985c99a745623c2f47db3c1396981b3a9782092d0b62b028bef8dcce58a3c2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (155 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (155 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 121,
                  "charOffset": 2782,
                  "charLength": 35,
                  "snippet": {
                    "text": "the typehints for possible methods!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 2646,
                  "charLength": 176,
                  "snippet": {
                    "text": "DATABASE FILES\n\nThis file represents every database table and the model they follow. When fetching information from the tables, consult the typehints for possible methods!\n\n\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f257a52d90de87fefea4cc43b8d5baa13b4a31c7fa9754ed90172572bdf3b665"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (122 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (122 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 121,
                  "charOffset": 3636,
                  "charLength": 2,
                  "snippet": {
                    "text": ".*"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 116,
                  "startColumn": 1,
                  "charOffset": 3428,
                  "charLength": 248,
                  "snippet": {
                    "text": "    `used` BooleanField()\n    **DEPRECATED**: Signifies if the voice channel is active.\n    *When a voice session is archived, the database entry will also be deleted. Using this attribute will no longer work.*\n\n    `lockStatus` = bool(TextField())"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0bd35d2a614e9b56186761f3f8f5f990939e84170c9a7fe8b1b4c73168053fd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (127 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (127 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 121,
                  "charOffset": 7628,
                  "charLength": 7,
                  "snippet": {
                    "text": "False."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 308,
                  "startColumn": 1,
                  "charOffset": 7369,
                  "charLength": 299,
                  "snippet": {
                    "text": "    `MasterMaintenance`: BooleanField()\n    Ultimate Check; If this is enabled no one except Permit 4+ users are allowed to use the bot.\\n\n    '>>> **NOTE:** This attribute must always have a bypass to prevent lockouts, otherwise this check will ALWAYS return False.\n\n    `guildNone`: BooleanField()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d2573b2731a8d487b78031062b614d7e8acc5381825617964c133523e05782a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (126 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (126 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 622,
                  "startColumn": 121,
                  "charOffset": 14071,
                  "charLength": 6,
                  "snippet": {
                    "text": "value."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 620,
                  "startColumn": 1,
                  "charOffset": 13920,
                  "charLength": 166,
                  "snippet": {
                    "text": "\n    `components`: CharField()\n    A dict as a string which includes a component of the message (`msgID`) as a key and the count of the component as a value.\n    \"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "13903370a4b0574415ae174a287b5df73edd1f180827fff84f939b008b1eb869"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 643,
                  "startColumn": 1,
                  "charOffset": 14373,
                  "charLength": 34,
                  "snippet": {
                    "text": "class AuthorizedGuilds(BaseModel):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 641,
                  "startColumn": 1,
                  "charOffset": 14340,
                  "charLength": 97,
                  "snippet": {
                    "text": "    queueID = BigIntegerField()\n\nclass AuthorizedGuilds(BaseModel):\n    \"\"\"\n    #AuthorizedGuilds"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d92fddc65c6a6b10f6540ca07f9505d7d0638da02d9751e349a71546c6311eac"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 1,
                  "charOffset": 14714,
                  "charLength": 27,
                  "snippet": {
                    "text": "class StudyVCDB(BaseModel):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 659,
                  "startColumn": 1,
                  "charOffset": 14672,
                  "charLength": 92,
                  "snippet": {
                    "text": "    authorizedUserID = BigIntegerField()\n\nclass StudyVCDB(BaseModel):\n    \"\"\"\n    #StudyVCDB"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dafdd37d3c7281b89e339bd1795f832c88e1fdf854e312683e7bd166f6fe9da0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 691,
                  "startColumn": 1,
                  "charOffset": 15388,
                  "charLength": 36,
                  "snippet": {
                    "text": "class StudyVCLeaderboard(BaseModel):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 689,
                  "startColumn": 1,
                  "charOffset": 15346,
                  "charLength": 110,
                  "snippet": {
                    "text": "    Paused = BooleanField(default=False)\n\nclass StudyVCLeaderboard(BaseModel):\n    \"\"\"\n    #StudyVCLeaderboard"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1aeca1bf79406bd7e406e338f9e1c30981ec72035f93c0dc39392b4f225d6ed9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E305 expected 2 blank lines after class or function definition, found 1",
            "markdown": "PEP 8: E305 expected 2 blank lines after class or function definition, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 729,
                  "startColumn": 1,
                  "charOffset": 16383,
                  "charLength": 21,
                  "snippet": {
                    "text": "app = Flask(__name__)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 727,
                  "startColumn": 1,
                  "charOffset": 16341,
                  "charLength": 65,
                  "snippet": {
                    "text": "    totalXP = BigIntegerField(default=0)\n\napp = Flask(__name__)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "505d7ad4e0198dd20d085ef8eced12a5b208f53cc84d741d2c1c18c4340149f8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E131 continuation line unaligned for hanging indent",
            "markdown": "PEP 8: E131 continuation line unaligned for hanging indent"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 13,
                  "charOffset": 1838,
                  "charLength": 1,
                  "snippet": {
                    "text": "."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 1742,
                  "charLength": 162,
                  "snippet": {
                    "text": "    query: database.CheckInformation = (\n        database.CheckInformation.select()\n            .where(database.CheckInformation.id == 1)\n            .get()\n    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3aebee4a120e86e06c11c0df2752af5747959f8218829a1455858b9256325d52"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E741 ambiguous variable name 'l'",
            "markdown": "PEP 8: E741 ambiguous variable name 'l'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 45,
                  "charOffset": 10150,
                  "charLength": 1,
                  "snippet": {
                    "text": "l"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 275,
                  "startColumn": 1,
                  "charOffset": 10014,
                  "charLength": 195,
                  "snippet": {
                    "text": "        with error_file.open(\"r\") as f:\n            # config, _ = core.common.load_config()\n            data = \"\\n\".join([l.strip() for l in f])\n\n            GITHUB_API = \"https://api.github.com\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8b2c60c13690c3e46ce56db52b0073643c8909c4d61b4ceb87cc78c4e1ccc18a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 1,
                  "charOffset": 15143,
                  "charLength": 22,
                  "snippet": {
                    "text": "def initializeDB(bot):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 422,
                  "startColumn": 1,
                  "charOffset": 15102,
                  "charLength": 156,
                  "snippet": {
                    "text": "        return CheckDB_CC.elseSituation\n\ndef initializeDB(bot):\n    \"\"\"\n    Initializes the database, and creates the needed table data if they don't exist."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d0a6e87b4efaecf2d474411e0ea0f556b612f6c0a98196b10a29334b4cda731"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (123 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (123 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 114,
                  "charOffset": 6246,
                  "charLength": 8,
                  "snippet": {
                    "text": "**\\u0020"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 1,
                  "charOffset": 6060,
                  "charLength": 263,
                  "snippet": {
                    "text": "            if banreason is None:\n                embed = discord.Embed(\n                    description=f\"`ID: {user.id}` | {user.mention} found with the nickname: **{user.display_name}**\\u0020\",\n                    color=discord.Color.green(),\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bfd52a94ff3ff67c4effc330438a2e4f8f72b9da289f85f16956341598e8832f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E731 do not assign a lambda expression, use a def",
            "markdown": "PEP 8: E731 do not assign a lambda expression, use a def"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 13,
                  "charOffset": 18393,
                  "charLength": 3,
                  "snippet": {
                    "text": "key"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 449,
                  "startColumn": 1,
                  "charOffset": 18347,
                  "charLength": 117,
                  "snippet": {
                    "text": "\n        if sort and key is None:\n            key = lambda c: c.qualified_name\n        #\n        iterator = _commands"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4f238481ebb01b0d47c13a17de5e3c726e3fc01ec8a9e2968ffe233353acba45"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/Blacklist.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 13,
                  "charOffset": 2455,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 2329,
                  "charLength": 178,
                  "snippet": {
                    "text": "                user = self.bot.get_user(p.id)\n                empty_list.append(f\"`{user.name}` -> `{user.id}`\")\n            except:\n                empty_list.append(f\"`{p}`\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "53ca40da1c9226aa5146d817a1405fda4487bcc7d4b4242a301e4def213b914e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (124 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (124 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 117,
                  "charOffset": 14428,
                  "charLength": 6,
                  "snippet": {
                    "text": "%\\n```"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 386,
                  "startColumn": 1,
                  "charOffset": 14241,
                  "charLength": 231,
                  "snippet": {
                    "text": "        pingembed.add_field(\n            name=\"System Resource Usage\",\n            value=f\"```diff\\n- CPU Usage: {psutil.cpu_percent()}%\\n- Memory Usage: {psutil.virtual_memory().percent}%\\n```\",\n            inline=False,\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d5532be21cff4ff53e582bc3fbe9a83e077b35d3206441ae5c5042b62946418a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E131 continuation line unaligned for hanging indent",
            "markdown": "PEP 8: E131 continuation line unaligned for hanging indent"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 17,
                  "charOffset": 1322,
                  "charLength": 1,
                  "snippet": {
                    "text": "."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1212,
                  "charLength": 184,
                  "snippet": {
                    "text": "        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)\n                .get()\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7407bc926479b3f0661bd7a287acffbaaa214aae80e50afaf65eb28eaa937454"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E131 continuation line unaligned for hanging indent",
            "markdown": "PEP 8: E131 continuation line unaligned for hanging indent"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 17,
                  "charOffset": 2694,
                  "charLength": 1,
                  "snippet": {
                    "text": "."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 2584,
                  "charLength": 184,
                  "snippet": {
                    "text": "        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n                .where(database.CheckInformation.id == 1)\n                .get()\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f290def53aa70e9f8cb5c5255f0491fe8a1931cc11f1c86264b277b8a5bf7525"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E131 continuation line unaligned for hanging indent",
            "markdown": "PEP 8: E131 continuation line unaligned for hanging indent"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 17,
                  "charOffset": 3967,
                  "charLength": 1,
                  "snippet": {
                    "text": "."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 119,
                  "startColumn": 1,
                  "charOffset": 3845,
                  "charLength": 199,
                  "snippet": {
                    "text": "        WhitelistedPrefix: database.WhitelistedPrefix = (\n            database.WhitelistedPrefix.select()\n                .where(database.WhitelistedPrefix.id == num)\n                .get()\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2041c41d6c789bf92dcd5a726ad9194af55a75fe16b75c0cf474582371de3b06"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (215 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (215 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 52,
                  "charOffset": 3056,
                  "charLength": 162,
                  "snippet": {
                    "text": "||\\n\\n**Instructions:**\\nGive the Username and the Temporary Password to the user and let them know ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 2946,
                  "charLength": 312,
                  "snippet": {
                    "text": "        )\n        await interaction.response.send_message(\n            f\"**Temporary Password:**\\n||{temppass}||\\n\\n**Instructions:**\\nGive the Username and the Temporary Password to the user and let them know they have **1 week** to setup 2FA before they get locked out. \",\n            ephemeral=True,\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0146bf6906ef73bf1185eea988b398b66fb2a6f46596100bf087b211a128236"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 9,
                  "charOffset": 3886,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 3805,
                  "charLength": 234,
                  "snippet": {
                    "text": "        try:\n            service.users().delete(userKey=email).execute()\n        except:\n            return await interaction.response.send_message(\n                f\"{interaction.user.mention} The account **{email}** does not exist.\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f4dd9539f9542aded93ac8fbccaa5d8c69dd39e1d9fbecf9b1b53089ecc63887"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (238 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (238 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/RedirectService.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 118,
                  "charOffset": 988,
                  "charLength": 105,
                  "snippet": {
                    "text": ". In order to delete this redirect, you'll need this ID!\\n\\nAccess it at https://rs.schoolsimplified..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 777,
                  "charLength": 343,
                  "snippet": {
                    "text": "        val = self.raOBJ.add_redirect(redirect_code, destination_url)\n        await ctx.send(\n            f\"Redirect added for {destination_url} with redirect path /{redirect_code}\\nCreated with the ID: {val.id}. In order to delete this redirect, you'll need this ID!\\n\\nAccess it at https://rs.schoolsimplified.org/{redirect_code}\"\n        )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a9ca5815a261ff96caecfe408a4e956c80631d259f8ff31b8c437dbdac60e3ba"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 5,
                  "charOffset": 525,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "charOffset": 456,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "82cfea0c269043c0d041110b934ad04ee1fc607977e4ff916e99a943e81a1708"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (131 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (131 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 533,
                  "startColumn": 119,
                  "charOffset": 20331,
                  "charLength": 8,
                  "snippet": {
                    "text": "authorID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 531,
                  "startColumn": 1,
                  "charOffset": 20100,
                  "charLength": 343,
                  "snippet": {
                    "text": "                    embed = discord.Embed(\n                        title=f\"{Emoji.deny} Ownership Check Failed\",\n                        description=f\"You are not the owner of this voice channel, please ask the original owner <@{q.authorID}>, \"\n                        f\"to rename it!\",\n                        color=discord.Colour.dark_red(),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "959109a1e0f4b81860aabcc549eb715a17be27fcf68b71641f8d81eb8740280a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 763,
                  "startColumn": 17,
                  "charOffset": 30291,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 761,
                  "startColumn": 1,
                  "charOffset": 30222,
                  "charLength": 199,
                  "snippet": {
                    "text": "                        .get()\n                    )\n                except:\n                    embed = discord.Embed(\n                        title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37510b9a546337e09bc6a019466c6c347a881c8bd3968cf96fa2739e56f643d6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (125 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (125 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 958,
                  "startColumn": 25,
                  "charOffset": 38770,
                  "charLength": 100,
                  "snippet": {
                    "text": "\"\\n\\n**NOTE:** Moderators and other Administrators will always be allowed into your voice channels!\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 956,
                  "startColumn": 1,
                  "charOffset": 38562,
                  "charLength": 385,
                  "snippet": {
                    "text": "                        title=f\"{Emoji.lock} Locked Voice Channel\",\n                        description=\"Your voice channel has been locked and now only authorized users can join it!\"\n                        \"\\n\\n**NOTE:** Moderators and other Administrators will always be allowed into your voice channels!\",\n                        color=discord.Colour.green(),\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2dcb980fa307e90d12af2b4e864cd57fd5c3414ca48d7d472d625420f7cf88b3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 976,
                  "startColumn": 21,
                  "charOffset": 39563,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 974,
                  "startColumn": 1,
                  "charOffset": 39482,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c926b50270cfafd6b7df71730b157a7727cb790346bc8457ca13fef3d59d611"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1164,
                  "startColumn": 21,
                  "charOffset": 48182,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1162,
                  "startColumn": 1,
                  "charOffset": 48101,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "919770114921cd79fe6e2f2dc753e88a992b8588b0ae99eebae4a92f14e1e024"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1339,
                  "startColumn": 21,
                  "charOffset": 56914,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1337,
                  "startColumn": 1,
                  "charOffset": 56833,
                  "charLength": 219,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3fce2d2f31bf4a12123dc3a593b389fe21a4a00705dee6f822ad92c64bca4015"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1410,
                  "startColumn": 21,
                  "charOffset": 60207,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1408,
                  "startColumn": 1,
                  "charOffset": 60104,
                  "charLength": 219,
                  "snippet": {
                    "text": "                    try:\n                        voiceLIMIT = int(new_voice_limit)\n                    except:\n                        return await ctx.send(f\"{Emoji.deny} Not a valid number!\")\n                    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a66e52c68332198698a9afcf30bd5af32af75e33d3e442ceccceca95f6b3000"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (122 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (122 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1426,
                  "startColumn": 51,
                  "charOffset": 61054,
                  "charLength": 71,
                  "snippet": {
                    "text": "You can't increase the voice limit to something bigger then 4 members!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1424,
                  "startColumn": 1,
                  "charOffset": 60867,
                  "charLength": 294,
                  "snippet": {
                    "text": "                            if voiceLIMIT > 4 and ctx.guild.id == MAIN_ID.g_main:\n                                return await ctx.send(\n                                    f\"{Emoji.warn} You can't increase the voice limit to something bigger then 4 members!\"\n                                )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c301b9b0154905140d83454fd115a323adf90734df8aa6ec46dd624b02ba3eca"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (123 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (123 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1438,
                  "startColumn": 51,
                  "charOffset": 61679,
                  "charLength": 72,
                  "snippet": {
                    "text": "You can't increase the voice limit to something bigger then 10 members!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1436,
                  "startColumn": 1,
                  "charOffset": 61526,
                  "charLength": 261,
                  "snippet": {
                    "text": "                            if voiceLIMIT > 10:\n                                return await ctx.send(\n                                    f\"{Emoji.warn} You can't increase the voice limit to something bigger then 10 members!\"\n                                )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f1d009c7320709eed1ad3eb5c1be358c52e21e759df72fd7f25e0a9b09fc7d1a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1460,
                  "startColumn": 21,
                  "charOffset": 62655,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1458,
                  "startColumn": 1,
                  "charOffset": 62574,
                  "charLength": 219,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalidchannel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "761fa9a08da38fac8034af9c09a1686dea67c7cfa5f57e4467da6b595149a032"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (123 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (123 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1463,
                  "startColumn": 41,
                  "charOffset": 62834,
                  "charLength": 82,
                  "snippet": {
                    "text": "\"This isn't a voice channel! Please use the command on an actual private channel!\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1461,
                  "startColumn": 1,
                  "charOffset": 62663,
                  "charLength": 336,
                  "snippet": {
                    "text": "                        embed = discord.Embed(\n                            title=f\"{Emoji.invalidchannel} Ownership Check Failed\",\n                            description=\"This isn't a voice channel! Please use the command on an actual private channel!\",\n                            color=discord.Colour.red(),\n                        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d2ab120c3d113e7626bfe5b718b18518cff279fd87e36838919f457d9df7dcc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1539,
                  "startColumn": 21,
                  "charOffset": 66309,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1537,
                  "startColumn": 1,
                  "charOffset": 66228,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "44381a2629bc5426f659aacb7301c0f544821103a38ff3bdb3fb98ab8f61996d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (127 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (127 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1574,
                  "startColumn": 120,
                  "charOffset": 68097,
                  "charLength": 2,
                  "snippet": {
                    "text": "id"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1572,
                  "startColumn": 1,
                  "charOffset": 67906,
                  "charLength": 315,
                  "snippet": {
                    "text": "        embed.add_field(\n            name=\"Creating a Private Channel\",\n            value=f\"The **only** way to create a voice channel is through **you** joining <#{self.StartVCIDs[ctx.guild.id]}>. \"\n            f\"There is **no command**, so please don't spam `+start` or whatever comes up in your head.\",\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89cc8fb12cab2ac600c47d91c1cc4c591be32332952ee6ffae8fcfa8cb0ad210"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (139 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (139 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1579,
                  "startColumn": 19,
                  "charOffset": 68297,
                  "charLength": 121,
                  "snippet": {
                    "text": "\"The voice channel owner is the only person who can run any of the modifier commands. (Rename, Permi..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1577,
                  "startColumn": 1,
                  "charOffset": 68222,
                  "charLength": 414,
                  "snippet": {
                    "text": "        embed.add_field(\n            name=\"Permissions\",\n            value=\"The voice channel owner is the only person who can run any of the modifier commands. (Rename, Permit, Disconnect, etc) \"\n            \"\\n**No**, there is no way of adding extra users to manage the voice channel. \"\n            \"Anyone who tries will just get an error saying they'd have to redirect the command back to the original owner.\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "08dca6be8a06efb0a6bd370b5f945f86fccdb9936d03a83f29432d0179d77aaa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (125 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (125 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1581,
                  "startColumn": 13,
                  "charOffset": 68523,
                  "charLength": 112,
                  "snippet": {
                    "text": "\"Anyone who tries will just get an error saying they'd have to redirect the command back to the orig..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1579,
                  "startColumn": 1,
                  "charOffset": 68279,
                  "charLength": 393,
                  "snippet": {
                    "text": "            value=\"The voice channel owner is the only person who can run any of the modifier commands. (Rename, Permit, Disconnect, etc) \"\n            \"\\n**No**, there is no way of adding extra users to manage the voice channel. \"\n            \"Anyone who tries will just get an error saying they'd have to redirect the command back to the original owner.\",\n            inline=False,\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8ba4776abd26ad38eb78aebf178d2e83e25daa4cd239d8156000aba5f189a9a8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (130 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (130 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1587,
                  "startColumn": 13,
                  "charOffset": 68847,
                  "charLength": 117,
                  "snippet": {
                    "text": "\"Unfortunately, if you are not above level 10 you won't be able to join the Start Private VC channel..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1585,
                  "startColumn": 1,
                  "charOffset": 68698,
                  "charLength": 303,
                  "snippet": {
                    "text": "            name=\"Rank Requirements\",\n            value=\"In order to create a private voice channel, you need to be level 10 or above. \"\n            \"Unfortunately, if you are not above level 10 you won't be able to join the Start Private VC channel and create one.\",\n            inline=False,\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "453ab308a73499b64a04dfd97a9fc7e9075ba553100b747de990e44b6ad1fce1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "charOffset": 437,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "charOffset": 368,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e98bbffa6fcb3570ceedaeefb4fd770aca740e8d76d0c3ddb9e5cd9402255221"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 23,
                  "charOffset": 3402,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 3246,
                  "charLength": 232,
                  "snippet": {
                    "text": "        print(self.LobbyStartIDs[member.guild.id])\n        lobbyStart = member.guild.get_channel(self.LobbyStartIDs[member.guild.id])\n        if lobbyStart == None:\n            try:\n                lobbyStart = self.bot.get_channel("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c1525f1d8254c70305019c79ddca99df2ccfd997955002ae91e166f5e6802490"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 17,
                  "charOffset": 5741,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 5626,
                  "charLength": 163,
                  "snippet": {
                    "text": "                try:\n                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f23131581b7c0b5e863c15fe54f3732672ce3fc321443a88ae41a993a7a754d4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 25,
                  "charOffset": 6622,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 199,
                  "startColumn": 1,
                  "charOffset": 6483,
                  "charLength": 273,
                  "snippet": {
                    "text": "                                tutorChannel, reason=\"Hogging the VC Start Channel.\"\n                            )\n                        except:\n                            await member.move_to(\n                                None, reason=\"Hogging the VC Start Channel.\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "07701521942b3f9e698068f5cf1b95a0ecbff9969be337446d74e268548330d1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (123 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (123 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 41,
                  "charOffset": 13216,
                  "charLength": 82,
                  "snippet": {
                    "text": "\"\\n**NOTE:** You'll still need to fill in your hours on the hour log spreadsheet.\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 322,
                  "startColumn": 1,
                  "charOffset": 13009,
                  "charLength": 397,
                  "snippet": {
                    "text": "                                        \"I've already went ahead and sent your session legnth \"\n                                        f\"in <#{TUT_ID.ch_hourLogs}>.\"\n                                        \"\\n**NOTE:** You'll still need to fill in your hours on the hour log spreadsheet.\",\n                                        color=discord.Color.green(),\n                                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a083aebecf68e07976621d35bd664f3bfb5ba7266adf56343c6f7f3f8aadb026"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 17,
                  "charOffset": 17019,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 402,
                  "startColumn": 1,
                  "charOffset": 16904,
                  "charLength": 246,
                  "snippet": {
                    "text": "                        reason=\"Maximum Channel Ownership Allowance [TRUE]\",\n                    )\n                except:\n                    await member.move_to(\n                        None, reason=\"Maximum Channel Ownership Allowance [FAIL]\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "48fab6d8fad9e3318fa1f3776a07861d0a280ebdc87e489807d8cd56f445e5f6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (163 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (163 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 434,
                  "startColumn": 31,
                  "charOffset": 18225,
                  "charLength": 132,
                  "snippet": {
                    "text": "\"https://timmy.schoolsimplified.org/tutorvc#voice-channel-activities-games\\nStart by running: `+star..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 432,
                  "startColumn": 1,
                  "charOffset": 18100,
                  "charLength": 318,
                  "snippet": {
                    "text": "                    embed.add_field(\n                        name=\"BETA: Check out VC Games!\",\n                        value=\"https://timmy.schoolsimplified.org/tutorvc#voice-channel-activities-games\\nStart by running: `+startgame` once in a voice channel!\",\n                        inline=False,\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3b31e81b19d05e8ce45c85af32f940494db0424d47f0804f2926103836b3219"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (163 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (163 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 31,
                  "charOffset": 19222,
                  "charLength": 132,
                  "snippet": {
                    "text": "\"https://timmy.schoolsimplified.org/tutorvc#voice-channel-activities-games\\nStart by running: `+star..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 452,
                  "startColumn": 1,
                  "charOffset": 19097,
                  "charLength": 318,
                  "snippet": {
                    "text": "                    embed.add_field(\n                        name=\"BETA: Check out VC Games!\",\n                        value=\"https://timmy.schoolsimplified.org/tutorvc#voice-channel-activities-games\\nStart by running: `+startgame` once in a voice channel!\",\n                        inline=False,\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9713c3e3b63465aeb01a4ae146dd3a8b115a438e381472ae811bc9a6b685b388"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (126 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (126 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 98,
                  "charOffset": 401,
                  "charLength": 29,
                  "snippet": {
                    "text": "# 14.03.2022 as default value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "charOffset": 234,
                  "charLength": 279,
                  "snippet": {
                    "text": "        self.bot = bot\n        self.est = pytz.timezone(\"US/Eastern\")\n        self.lastReset = parser.parse(\"14.03.2022 00:00:00 EST\", tzinfos={\"EST\": -4 * 3600})     # 14.03.2022 as default value\n        self.midnight = datetime.datetime.strptime(\"00:00:00\", \"%H:%M:%S\").time()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b4e08a5c11da6d82e08d041c849d6e4c3f89fed26a85183f27ac48ea458fe51d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W292 no newline at end of file",
            "markdown": "PEP 8: W292 no newline at end of file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 37,
                  "charOffset": 1392,
                  "charLength": 1,
                  "snippet": {
                    "text": ")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1319,
                  "charLength": 74,
                  "snippet": {
                    "text": "\nasync def setup(bot: commands.Bot):\n    await bot.add_cog(StudyLoop(bot))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "65728f525fc6095d34d16b2432735ba727b6a6556c429dd88d81df0b684d99da"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 5,
                  "charOffset": 902,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 833,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3897f3cdc30aba07d4b7c6a2393865ab6fee1f39466c3973f8d3a422bd141545"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (130 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (130 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 121,
                  "charOffset": 3005,
                  "charLength": 10,
                  "snippet": {
                    "text": "if needed."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 127,
                  "startColumn": 1,
                  "charOffset": 2819,
                  "charLength": 266,
                  "snippet": {
                    "text": "async def addLeaderboardProgress(member: discord.Member):\n    \"\"\"\n    Updates the data in the database table `StudyVCLeaderboard` of a specific member and adds level roles to the member if needed.\n\n    :param member: The member on which the progress should apply on."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3a41ac0d8bdf5e484d7acae0b32d97d7c680d4faad7d0937510e094ed01e1fcf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 13,
                  "charOffset": 8190,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 294,
                  "startColumn": 1,
                  "charOffset": 8120,
                  "charLength": 99,
                  "snippet": {
                    "text": "            try:\n                await member.send(dmMSG)\n            except:\n                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "089e5aaa731a03efb26977e8b4b1ecd1073b0acebf6265ac8391ba05c7a87454"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (124 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (124 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 121,
                  "charOffset": 8590,
                  "charLength": 4,
                  "snippet": {
                    "text": "DB`."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 310,
                  "startColumn": 1,
                  "charOffset": 8416,
                  "charLength": 253,
                  "snippet": {
                    "text": "async def endSession(member: discord.Member):\n    \"\"\"\n    Ends the session by kicking the user out of the voice channel and removing the user from the database table `StudyVCDB`.\n\n    :param member: The member which should get removed from the database."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0126bcf9baa6f3dfdc7992055a8986ac67ad9a9d513df50e677a7d917bac09e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (122 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (122 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 120,
                  "charOffset": 10705,
                  "charLength": 2,
                  "snippet": {
                    "text": "id"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 369,
                  "startColumn": 1,
                  "charOffset": 10573,
                  "charLength": 194,
                  "snippet": {
                    "text": "        \"\"\"\n\n        query: database.StudyVCDB = database.StudyVCDB.select().where(database.StudyVCDB.discordID == interaction.user.id)\n        if query.exists():\n            query = query.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5c01f128b916201a9a0595c798e9e01b2f6d2dd4a1d70514d05a0705a953498d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (131 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (131 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 62,
                  "charOffset": 11260,
                  "charLength": 68,
                  "snippet": {
                    "text": "You don't have a study session yet! Make one by joining any StudyVC!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 382,
                  "startColumn": 1,
                  "charOffset": 11120,
                  "charLength": 226,
                  "snippet": {
                    "text": "            await interaction.response.send_message(embed=embed)\n        else:\n            return await interaction.response.send_message(f\"You don't have a study session yet! Make one by joining any StudyVC!\")\n\n    @command()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b048821d5c26d330a826263b32ae6e2cac2b5348b2d46cd6cea77c67b780b8aa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (145 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (145 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 81,
                  "charOffset": 11724,
                  "charLength": 63,
                  "snippet": {
                    "text": "Your study session ended. To make one again, join any StudyVC!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 393,
                  "startColumn": 1,
                  "charOffset": 11572,
                  "charLength": 232,
                  "snippet": {
                    "text": "        if isInDatabase:\n            await endSession(interaction.user)\n            await interaction.response.send_message(f\"{interaction.user.mention} Your study session ended. To make one again, join any StudyVC!\")\n\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0538b5303eafe4b740b683ac34647df4b7c12fa3aab267d4d3183d965c4f9117"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (124 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (124 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 55,
                  "charOffset": 11859,
                  "charLength": 68,
                  "snippet": {
                    "text": "You don't have a study session yet! Make one by joining any StudyVC!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 396,
                  "startColumn": 1,
                  "charOffset": 11790,
                  "charLength": 155,
                  "snippet": {
                    "text": "\n        else:\n            await interaction.response.send_message(f\"You don't have a study session yet! Make one by joining any StudyVC!\")\n\n    @command()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "54a4a946579eed7f8d0fda3aee1e087292b4f631f40df9be6deb05281d9bd1a5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (131 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (131 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 62,
                  "charOffset": 12652,
                  "charLength": 68,
                  "snippet": {
                    "text": "You don't have a study session yet! Make one by joining any StudyVC!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 416,
                  "startColumn": 1,
                  "charOffset": 12576,
                  "charLength": 162,
                  "snippet": {
                    "text": "\n        else:\n            return await interaction.response.send_message(f\"You don't have a study session yet! Make one by joining any StudyVC!\")\n\n    @command()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "14d38a0bbed18579198aed2bdb14178d1c291cb07e2b8b3d2aa8215df806a072"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 48,
                  "charOffset": 2556,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2cfe7af06d80e4cd7a180c51895a5608802051a870ac7210f4441c6decd63003"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 50,
                  "charOffset": 2558,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "97955274fb6c898f8052d12733f917832fb7182901e2ff323b5a2ffdadd091e7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 66,
                  "charOffset": 2574,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "214689725d869ac246cd2214ab54b63b4fc1e103ca8295a0a6c5713be790a3bf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 68,
                  "charOffset": 2576,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e72f11f315c8fdbfe2c3bcea838ea9526575e62952233136f6f23446f3c2161"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 84,
                  "charOffset": 2592,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d316750219129aa1c427e7e8cfe542736cf750b72270a53b77a2723a7ccf9838"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 86,
                  "charOffset": 2594,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "965b82d01fb4f328e48477db8dcab420d9b47d068118771895c5ec1fd66cda8e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 117,
                  "charOffset": 2625,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d5623f0a60566d2eb823db7662022263ebb264ceb06f76e762f4dc30e205c44"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 119,
                  "charOffset": 2627,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ed28f27f492a6b56f85908ef5ad7a32c666f360f1581331db33abe4a239e76b2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (127 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (127 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 120,
                  "charOffset": 2628,
                  "charLength": 7,
                  "snippet": {
                    "text": "renewal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 204,
                  "snippet": {
                    "text": "    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(discordID = member.id, goal = goal, StartTime = datetime.now(EST), RenewalTime = renewal)\n        q.save()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "474d2aa921d0f0d9fd81637d8bd937661a8f4a3496a527a30379814e4a768c70"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (3)",
            "markdown": "PEP 8: E303 too many blank lines (3)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3069,
                  "charLength": 28,
                  "snippet": {
                    "text": "def getConsoleCH(column_id):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 3067,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7e43e31e7c0b9dc84508cb33c4caa931e0f245ea5f002d5cf603734ae9b10062"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (3)",
            "markdown": "PEP 8: E303 too many blank lines (3)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 1,
                  "charOffset": 3339,
                  "charLength": 34,
                  "snippet": {
                    "text": "class StudyVCUpdate(commands.Cog):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 3337,
                  "charLength": 102,
                  "snippet": {
                    "text": "\n\nclass StudyVCUpdate(commands.Cog):\n    def __init__(self, bot: commands.Bot):\n        self.bot = bot"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "07a4dc7a54f52ffe067b42560b429528a3ba37f1ad867cf7f91ff0e31fd0db92"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 9,
                  "charOffset": 3680,
                  "charLength": 27,
                  "snippet": {
                    "text": "self.StudyVCChecker.start()"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 3670,
                  "charLength": 39,
                  "snippet": {
                    "text": "\n\n        self.StudyVCChecker.start()\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68403071d38c26712606ac5e43aa6575ff16605c594ef5a7e3e187797b75a6b7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 5,
                  "charOffset": 3714,
                  "charLength": 21,
                  "snippet": {
                    "text": "def cog_unload(self):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 127,
                  "startColumn": 1,
                  "charOffset": 3708,
                  "charLength": 63,
                  "snippet": {
                    "text": "\n\n    def cog_unload(self):\n        self.StudyVCChecker.stop()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23b9a6305ac87f218e3ecdcd053c557237dd64c8b5f4b5ffc5e1e7dbaffa22b3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (121 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (121 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 121,
                  "charOffset": 5916,
                  "charLength": 1,
                  "snippet": {
                    "text": "\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 5669,
                  "charLength": 411,
                  "snippet": {
                    "text": "                    goal, renewal = await setNewStudyGoal(self, console, member, True)\n                    await console.send(\n                                f\"{member.mention} Successfully started your study session! Your study goal is '{goal}'.\"\n                                f\"n\\n**That's it!** Make sure you come back at {renewal.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "25252596bad2de09c9f6fc78c845e785c642b39733775da21c5ed620949821c2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (140 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (140 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 111,
                  "charOffset": 6028,
                  "charLength": 29,
                  "snippet": {
                    "text": "to renew your study session!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 5756,
                  "charLength": 325,
                  "snippet": {
                    "text": "                    await console.send(\n                                f\"{member.mention} Successfully started your study session! Your study goal is '{goal}'.\"\n                                f\"n\\n**That's it!** Make sure you come back at {renewal.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "24e1df911c12a8db40228d34dd89fe0532824817429fbbd17a97d5c8a0430a99"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (188 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (188 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 118,
                  "charOffset": 6312,
                  "charLength": 11,
                  "snippet": {
                    "text": "RenewalTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 188,
                  "startColumn": 1,
                  "charOffset": 6082,
                  "charLength": 324,
                  "snippet": {
                    "text": "                elif dateObj - datetime.now(EST) < timedelta(minutes=5):\n                    await console.send(\n                        f\"{member.mention} Your study session is ending in **less than 5 minutes**. (Ends at: {query.RenewalTime.strftime(r'%I:%M %p')})\\n\\nMaybe renew your study session?\"\n                    )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e599ff1b4f32ef6f88c1ca208a645dd2caea6e427fed13c39ce845a675de9eb6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (184 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (184 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 121,
                  "charOffset": 6589,
                  "charLength": 11,
                  "snippet": {
                    "text": "RenewalTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 193,
                  "startColumn": 1,
                  "charOffset": 6407,
                  "charLength": 269,
                  "snippet": {
                    "text": "                else:\n                    await console.send(\n                        f\"{member.mention} You already have a study session going!\\n\\nMake sure you come back at {query.RenewalTime.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ce3f54b5803755aa9da420dbc3a8a20d979a4c96fcfc0e6c721f3e69f89a748"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 5,
                  "charOffset": 6682,
                  "charLength": 64,
                  "snippet": {
                    "text": "@tasks.loop(seconds=10) # TODO: change to 60s due of rate limits"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 197,
                  "startColumn": 1,
                  "charOffset": 6676,
                  "charLength": 198,
                  "snippet": {
                    "text": "\n\n    @tasks.loop(seconds=10) # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21f934a9378359b2fff6cd5cf8bc998df4d5df92a47486c9bca37d25010c8bcb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E261 at least two spaces before inline comment",
            "markdown": "PEP 8: E261 at least two spaces before inline comment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 28,
                  "charOffset": 6705,
                  "charLength": 1,
                  "snippet": {
                    "text": ""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 197,
                  "startColumn": 1,
                  "charOffset": 6676,
                  "charLength": 198,
                  "snippet": {
                    "text": "\n\n    @tasks.loop(seconds=10) # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "868ae6e0cf1a41f8f493bc4d11dcefd7c298a2c858af24a0e5a090f54a9d147c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (132 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (132 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 103,
                  "charOffset": 7884,
                  "charLength": 29,
                  "snippet": {
                    "text": "to renew your study session!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 218,
                  "startColumn": 1,
                  "charOffset": 7618,
                  "charLength": 319,
                  "snippet": {
                    "text": "                    await StudyVCConsoleObj.send(\n                        f\"{member.mention} Successfully started your study session! Your study goal is '{goal}'.\"\n                        f\"n\\n**That's it!** Make sure you come back at {renewal.strftime(r'%I:%M %p')} to renew your study session!\"\n                    )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f4e9a2e1d3bf16cd076ec513a372a2e681ade640108f9965b55e7f8409d97fc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (174 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (174 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 116,
                  "charOffset": 8168,
                  "charLength": 8,
                  "snippet": {
                    "text": "strftime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 223,
                  "startColumn": 1,
                  "charOffset": 7938,
                  "charLength": 308,
                  "snippet": {
                    "text": "            elif dateObj - datetime.now(EST) < timedelta(minutes=5):\n                await StudyVCConsoleObj.send(\n                    f\"{member.mention} Your study session is ending in **less than 5 minutes**. (Ends at: {dateObj.strftime(r'%I:%M %p')})\\n\\nMaybe renew your study session?\"\n                )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c54b221edab0f2291eef60e5acf46ce61130baa1b65f9f8e8ea299d5c62e4cd7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (5)",
            "markdown": "PEP 8: E303 too many blank lines (5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 1,
                  "charOffset": 8255,
                  "charLength": 21,
                  "snippet": {
                    "text": "async def setup(bot):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 230,
                  "startColumn": 1,
                  "charOffset": 8249,
                  "charLength": 70,
                  "snippet": {
                    "text": "\n    \nasync def setup(bot):\n    await bot.add_cog(StudyVCUpdate(bot))\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80a5976a71ae86d797301fa4ae9a2d2f261942db8169955497957390e2e87845"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 13,
                  "charOffset": 3069,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 2971,
                  "charLength": 179,
                  "snippet": {
                    "text": "            try:\n                await interaction.response.send_message(embed=embed)\n            except:\n                await interaction.channel.send(embed=embed)\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "195baf32d83cbca2ac1e1c8831f18d6c95957b341ed8783b9bb3a65e33b8b515"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 17,
                  "charOffset": 4464,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 4354,
                  "charLength": 199,
                  "snippet": {
                    "text": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n            else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eac058079c43d5dde51360223f7f848f54e35d3788095d6c00c838dbc3686aa4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 17,
                  "charOffset": 4914,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 1,
                  "charOffset": 4804,
                  "charLength": 182,
                  "snippet": {
                    "text": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8eafec846cbc0df4b916acfb9d189bb19b9b6b4ac6f7a14ca6c696404dab0fb9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 17,
                  "charOffset": 1983,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 1896,
                  "charLength": 213,
                  "snippet": {
                    "text": "                try:\n                    await tutor.send(embed=embed)\n                except:\n                    await botch.send(\n                        f\"Unable to send a reminder DM to you {tutor.mention}!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85b39a3614066cd1bb766bad7e982e23016b950fa812a305ac352845360b724d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 17,
                  "charOffset": 2258,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 2169,
                  "charLength": 173,
                  "snippet": {
                    "text": "                try:\n                    await student.send(embed=embed)\n                except:\n                    print(f\"Unable to Send a Reminder DM to: {student.id}\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "092a10a2c90842452e1c6702352a3f946b9c77a6a5e20927d3150e889ab24ba2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (3)",
            "markdown": "PEP 8: E303 too many blank lines (3)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 1,
                  "charOffset": 5369,
                  "charLength": 35,
                  "snippet": {
                    "text": "async def setup(bot: commands.Bot):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 150,
                  "startColumn": 1,
                  "charOffset": 5367,
                  "charLength": 79,
                  "snippet": {
                    "text": "\n\nasync def setup(bot: commands.Bot):\n    await bot.add_cog(TutorBotLoop(bot))\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "61474eb7df3d93d07edf45225245edd3c340b6b50fb7248403d0cb4563a87378"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (137 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (137 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 121,
                  "charOffset": 1077,
                  "charLength": 17,
                  "snippet": {
                    "text": ".cat_essayTicket:"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 952,
                  "charLength": 330,
                  "snippet": {
                    "text": "\n\"\"\"\nif not (RoleOBJ.id == MAIN_ID.r_chatHelper or RoleOBJ.id == MAIN_ID.r_leadHelper) and not channel.category.id == MAIN_ID.cat_essayTicket:\n                    if RoleOBJ.id == MAIN_ID.r_essayReviser:\n                        if channel.category.id == MAIN_ID.cat_essayTicket or channel.category.id == MAIN_ID.cat_englishTicket:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c1fd6754241b8e4426debb735dd00696a364f8ffb8982fc9dd07fbf8d7db00e6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (126 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (126 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 121,
                  "charOffset": 1276,
                  "charLength": 6,
                  "snippet": {
                    "text": "icket:"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 957,
                  "charLength": 354,
                  "snippet": {
                    "text": "if not (RoleOBJ.id == MAIN_ID.r_chatHelper or RoleOBJ.id == MAIN_ID.r_leadHelper) and not channel.category.id == MAIN_ID.cat_essayTicket:\n                    if RoleOBJ.id == MAIN_ID.r_essayReviser:\n                        if channel.category.id == MAIN_ID.cat_essayTicket or channel.category.id == MAIN_ID.cat_englishTicket:\n\"\"\"\nMasterSubjectOptions = ["
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "58cceec7b91219deb4327e78a88c0c65ae48efc021dc235684f1f548fbeb0b9e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is not None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is not None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 17,
                  "charOffset": 3973,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 1,
                  "charOffset": 3898,
                  "charLength": 162,
                  "snippet": {
                    "text": "    embed.add_field(name=\"Transcript Link\", value=S3_URL)\n\n    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23be35db1400a3bd4b3c5f8e612a6ba5bde1dc8304f25367b4020f0fa08e3689"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is not None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is not None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 24,
                  "charOffset": 4052,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 3957,
                  "charLength": 160,
                  "snippet": {
                    "text": "    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:\n        for UAuthor in responsesauthor:\n            try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "673431f643a16aca3beb531f6a35b59f7e4248672cf3e699f055167f14e8ec12"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 5,
                  "charOffset": 4440,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 4374,
                  "charLength": 87,
                  "snippet": {
                    "text": "    try:\n        os.remove(f\"transcript-{channel.name}.html\")\n    except:\n        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df9bd5c6944930736eff5a80e265428c13e92581850e22d1dcf97f594c514c4d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 17,
                  "charOffset": 4478,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 152,
                  "startColumn": 1,
                  "charOffset": 4448,
                  "charLength": 99,
                  "snippet": {
                    "text": "        pass\n\n    if response == None:\n        msg = S3_URL\n    return msg, transcript_file, S3_URL"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d02f1cab8447c029bca5bf96ac0611d69395725af01f27114acda297ada273b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (137 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (137 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 33,
                  "charOffset": 16034,
                  "charLength": 104,
                  "snippet": {
                    "text": "\"What is your question or topic?\\nDo not send a URL. You must send the question or topic in plain te..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 470,
                  "startColumn": 1,
                  "charOffset": 15917,
                  "charLength": 288,
                  "snippet": {
                    "text": "                embed = discord.Embed(\n                    title=\"2) Send Question\",\n                    description=\"What is your question or topic?\\nDo not send a URL. You must send the question or topic in plain text.\",\n                    color=discord.Color.blue(),\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6d39882c164f2184f1d5c904efd35c70ba97db8b8ac66da507827c4072092ec8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (171 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (171 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 33,
                  "charOffset": 16815,
                  "charLength": 138,
                  "snippet": {
                    "text": "\"**Acceptable Forms of Proof:**\\n1) Images/Attachments.\\n2) URL's such as Gyazo.\\n\\nSend them all in..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 486,
                  "startColumn": 1,
                  "charOffset": 16690,
                  "charLength": 330,
                  "snippet": {
                    "text": "                embed = discord.Embed(\n                    title=\"3) Send Assignment Title\",\n                    description=\"**Acceptable Forms of Proof:**\\n1) Images/Attachments.\\n2) URL's such as Gyazo.\\n\\nSend them all in one message for them to all be sent.\",\n                    color=discord.Color.blue(),\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "20b24d011b1384f585994130c1091aabb832dc7d2d0463424f8441bdc779438b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (141 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (141 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 26,
                  "charOffset": 17080,
                  "charLength": 116,
                  "snippet": {
                    "text": "\"We need images/urls as proof that you aren't cheating, School Simplified does not offer assistance ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 490,
                  "startColumn": 1,
                  "charOffset": 17003,
                  "charLength": 212,
                  "snippet": {
                    "text": "                )\n                embed.set_footer(\n                    text=\"We need images/urls as proof that you aren't cheating, School Simplified does not offer assistance on assessments.\"\n                )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9f3750d140516209afaee16ea3f7d369ea79acfa41ad47b0ac2d11c0295000a7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (134 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (134 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 726,
                  "startColumn": 121,
                  "charOffset": 26554,
                  "charLength": 15,
                  "snippet": {
                    "text": "ew:ticketdrop\")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 724,
                  "startColumn": 1,
                  "charOffset": 26423,
                  "charLength": 256,
                  "snippet": {
                    "text": "        )\n\n    \"\"\"@discord.ui.button(label=\"Create Ticket\", style=discord.ButtonStyle.blurple, emoji=\"📝\", custom_id=\"persistent_view:ticketdrop\")\n    async def confirm(self, button: discord.ui.Button, interaction: discord.Interaction):\n        print(\"hi\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f71c2cc0554ac56b469ad6a4671c73f7822fa6e66fcc29391f7cdb81a03b040a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 815,
                  "startColumn": 13,
                  "charOffset": 29609,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 813,
                  "startColumn": 1,
                  "charOffset": 29506,
                  "charLength": 192,
                  "snippet": {
                    "text": "                    f\"{author.mention}\\n\", embed=embed, view=ButtonViews\n                )\n            except:\n                try:\n                    await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "554a36aea993bcf6f3e43a4da34557c76487f5541f9dbdf3d33908a76c4899a2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 820,
                  "startColumn": 17,
                  "charOffset": 29814,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 818,
                  "startColumn": 1,
                  "charOffset": 29699,
                  "charLength": 239,
                  "snippet": {
                    "text": "                        f\"{author.mention}\\n\", embed=embed, view=ButtonViews\n                    )\n                except:\n                    await channel.send(\n                        f\"{author.mention}\\n\", embed=embed, view=ButtonViews"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d746cbeccc07e704b77a70f0fec5cb5b56bc46e49251b8fdda8c44a911b91cb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (122 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (122 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1020,
                  "startColumn": 93,
                  "charOffset": 37854,
                  "charLength": 29,
                  "snippet": {
                    "text": "\\n**THIS MAY TAKE SOME TIME**"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1018,
                  "startColumn": 1,
                  "charOffset": 37697,
                  "charLength": 261,
                  "snippet": {
                    "text": "            )\n            msgO = await interaction.channel.send(\n                f\"{author.mention}\\nPlease wait, generating a transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )\n            TicketOwner = self.bot.get_user(query.authorID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0afae177464206f4e46f85d47f3f247230ab70fc6e32fc4fd6cd0db19ac775b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (123 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (123 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1075,
                  "startColumn": 119,
                  "charOffset": 40301,
                  "charLength": 3,
                  "snippet": {
                    "text": "url"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1073,
                  "startColumn": 1,
                  "charOffset": 40125,
                  "charLength": 237,
                  "snippet": {
                    "text": "                try:\n                    await msgO.edit(\n                        f\"{author.mention}\\nTranscript Created!\\n>>> `Jump Link:` {msg.jump_url}\\n`Transcript Link:` {url}\"\n                    )\n                except Exception:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c3529bc77b0b733be8b34cf3cffdb300df9dcf6ffe3e3e6d92850d875d3266a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (123 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (123 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1079,
                  "startColumn": 119,
                  "charOffset": 40518,
                  "charLength": 3,
                  "snippet": {
                    "text": "url"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1077,
                  "startColumn": 1,
                  "charOffset": 40329,
                  "charLength": 251,
                  "snippet": {
                    "text": "                except Exception:\n                    await msgO.edit(\n                        f\"{author.mention}\\nTranscript Created!\\n>>> `Jump Link:` {msg.jump_url}\\n`Transcript Link:` {url}\"\n                    )\n            await asyncio.sleep(5)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c42c1a130613421c15c47daf124f4391424b7d1b18c8de581c454ee34dc9386"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (135 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (135 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1228,
                  "startColumn": 13,
                  "charOffset": 46328,
                  "charLength": 610,
                  "snippet": {
                    "text": "\"\"\"**Note:** *Make sure to allow direct messages from server members!*\\n <:SchoolSimplified:..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1226,
                  "startColumn": 1,
                  "charOffset": 46282,
                  "charLength": 278,
                  "snippet": {
                    "text": "        )\n        await ctx.send(\n            \"\"\"**Note:** *Make sure to allow direct messages from server members!*\\n\n        <:SchoolSimplified:820705120429277194> **__How to Get School Help:__**\n            > <:SS:865715703545069568> Click on the button to start the process."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3f1a42ede3be6e4bce64cbef058069ac1dabb0354f57078b56ec113940a18eca"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (131 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (131 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1231,
                  "startColumn": 121,
                  "charOffset": 46681,
                  "charLength": 11,
                  "snippet": {
                    "text": "help with."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1229,
                  "startColumn": 1,
                  "charOffset": 46401,
                  "charLength": 537,
                  "snippet": {
                    "text": "        <:SchoolSimplified:820705120429277194> **__How to Get School Help:__**\n            > <:SS:865715703545069568> Click on the button to start the process.\n            > <:SS:865715703545069568> In your direct messages with <@852251896130699325>, select the sub-topic you need help with.\n            > <:SS:865715703545069568> Send the question in your direct messages as per the bot instructions.\n            > <:SS:865715703545069568> Send a picture of your assignment title in your direct messages as per the bot instructions.\"\"\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "16533b490e768cb40516f09348bbd5f446ff8812f6c7d6266ff758c25bbbc536"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (173 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (173 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 25,
                  "charOffset": 2655,
                  "charLength": 148,
                  "snippet": {
                    "text": "\"<:sadturtl:879197443600834600> An error occurred while trying to verify your status, please contact..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2549,
                  "charLength": 317,
                  "snippet": {
                    "text": "                try:\n                    await interaction.response.send_message(\n                        \"<:sadturtl:879197443600834600> An error occurred while trying to verify your status, please contact a staff member! (Error Code: TM-NOMEMBERFOUND)\",\n                        ephemeral=True,\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f018a00eeb593816231702ce44ea5d7489a87da1c2859be406107b7018dc3f76"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 21,
                  "charOffset": 3301,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "charOffset": 3211,
                  "charLength": 267,
                  "snippet": {
                    "text": "                            ephemeral=True,\n                        )\n                    except:\n                        await interaction.channel.send(\n                            f\"{interaction.user.mention} <:sadturtl:879197443600834600> An error occurred while \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80e6e24ea0894c421c3d5b3a726fd6bdfabdef3976845bbea691d02a4d4f5860"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 21,
                  "charOffset": 7469,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 196,
                  "startColumn": 1,
                  "charOffset": 7353,
                  "charLength": 262,
                  "snippet": {
                    "text": "                            \"You have been verified!\", ephemeral=True\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} You have been verified!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ed7b958d6242b73353ca8d347ae2f9bc0a48aade73b5c078e75ecbf2fd9d47b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E722 do not use bare 'except'",
            "markdown": "PEP 8: E722 do not use bare 'except'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 21,
                  "charOffset": 9234,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 235,
                  "startColumn": 1,
                  "charOffset": 9144,
                  "charLength": 268,
                  "snippet": {
                    "text": "                            ephemeral=True,\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} I didn't seem to find any roles to give you, please try \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "690fda6af2a5d6b6fa51885493bac20c25c4e38c901efb3a09861b2039d5a925"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (125 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (125 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 87,
                  "charOffset": 9970,
                  "charLength": 37,
                  "snippet": {
                    "text": "> and say what teams you are part of!"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 251,
                  "startColumn": 1,
                  "charOffset": 9819,
                  "charLength": 244,
                  "snippet": {
                    "text": "        embed = discord.Embed(\n            title=\"Verification\",\n            description=f\"To get your staff roles, go to <#{DIGITAL_ID.ch_waitingRoom}> and say what teams you are part of!\",\n            color=discord.Colour.blurple(),\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d4a257ed059a7dbee3f28be73ec50ddd6abc5aa4cd745a7883d4ecccd4a9603d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 3463,
                  "charLength": 10,
                  "snippet": {
                    "text": "@bot.event"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 3444,
                  "charLength": 84,
                  "snippet": {
                    "text": "initializeDB(bot)\n\n@bot.event\nasync def on_guild_join(guild: discord.Guild):\n    \"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a776df7ea5635ad65ac3df8bce3ab6dd78b951bb441bd06eaa76427f52bd4a2b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (151 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (151 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 120,
                  "charOffset": 3876,
                  "charLength": 5,
                  "snippet": {
                    "text": "color"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "charOffset": 3630,
                  "charLength": 409,
                  "snippet": {
                    "text": "    query = database.AuthorizedGuilds.select().where(database.AuthorizedGuilds.guildID == guild.id)\n    if not query.exists():\n        embed = discord.Embed(title=\"Unable to join guild!\", description=\"This guild is not authorized to use Timmy!\", color=discord.Color.brand_red())\n        embed.set_thumbnail(url=Others.timmyDog_png)\n        embed.set_footer(text=\"Please contact an IT administrator for help.\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "67ba9390d02cec50789d74f48bbaee49451584a9a52d374e3543eef8b6966901"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W292 no newline at end of file",
            "markdown": "PEP 8: W292 no newline at end of file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 1,
                  "charOffset": 4642,
                  "charLength": 13,
                  "snippet": {
                    "text": "# ..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "charOffset": 4587,
                  "charLength": 68,
                  "snippet": {
                    "text": "#             error: AppCommandError,\n#     ) -> None:\n#         ..."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d75effcdfb5b8651b2b3338ab9c2b2445ac9a4dd8dc9dc6852e195ac90e1e18"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W292 no newline at end of file",
            "markdown": "PEP 8: W292 no newline at end of file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cog_tests.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 29,
                  "charOffset": 909,
                  "charLength": 1,
                  "snippet": {
                    "text": ")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "charOffset": 852,
                  "charLength": 58,
                  "snippet": {
                    "text": "\ndef pytest_sessionfinish():\n    print(\"Session finished\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cbfb3fd3b0eb44aa8862e0150cac172c99cbfd2d3aa34e35cb0df899d66a9008"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'Union[str, bytes]', got 'dict' instead",
            "markdown": "Expected type 'Union\\[str, bytes\\]', got 'dict' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 40,
                  "charOffset": 7346,
                  "charLength": 7,
                  "snippet": {
                    "text": "payload"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 216,
                  "startColumn": 1,
                  "charOffset": 7238,
                  "charLength": 215,
                  "snippet": {
                    "text": "            os.remove(\"cred_file.json\")\n        elif type_auth == 3:\n            payload: dict = json.loads(payload)\n            creds = ServiceAccountCredentials.from_json_keyfile_dict(payload, scopes)\n        try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c94926fe95c99415446311876a622020ecacd37ac53aa15b7bf5826da46824ff"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[WhitelistedPrefix]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[WhitelistedPrefix\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/CommandsOnly.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 22,
                  "charOffset": 677,
                  "charLength": 26,
                  "snippet": {
                    "text": "database.WhitelistedPrefix"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 548,
                  "charLength": 197,
                  "snippet": {
                    "text": "        if message.channel.id == MAIN_ID.ch_modCommands and not message.author.bot:\n            prefix = []\n            for p in database.WhitelistedPrefix:\n                prefix.append(p.prefix)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72ae0a2837a00abd7af94793d28f40b41306caa327be2fb045284925c0fa633b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type '_SpecialForm', got '(_command: {cog}) -> str' instead",
            "markdown": "Expected type '_SpecialForm', got '(_command: {cog}) -\\> str' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 13,
                  "charOffset": 20720,
                  "charLength": 7,
                  "snippet": {
                    "text": "key=key"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 508,
                  "startColumn": 1,
                  "charOffset": 20670,
                  "charLength": 68,
                  "snippet": {
                    "text": "            ],\n            sort=True,\n            key=key\n        )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ba84e76a06011b8d06faa4dd83af9572a13c9cb5055e4effc6988f13cf08b68a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[Blacklist]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[Blacklist\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/Blacklist.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 18,
                  "charOffset": 2292,
                  "charLength": 18,
                  "snippet": {
                    "text": "database.Blacklist"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 1,
                  "charOffset": 2195,
                  "charLength": 180,
                  "snippet": {
                    "text": "        await interaction.response.defer(thinking=True)\n        empty_list = []\n        for p in database.Blacklist:\n            try:\n                user = self.bot.get_user(p.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a8ad80bd88e483b4b37b6e7a44c9c68ed7b62590aec765b4897326c48f25173"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[WhitelistedPrefix]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[WhitelistedPrefix\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 22,
                  "charOffset": 4580,
                  "charLength": 8,
                  "snippet": {
                    "text": "PrefixDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "charOffset": 4536,
                  "charLength": 91,
                  "snippet": {
                    "text": "        response = []\n\n        for entry in PrefixDB:\n\n            if entry.status is True:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb1b724418d24965ab9adec011f5a3bfd5bf8856b3ab9f4f7c5220d1a91c2560"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[StudyVCDB]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[StudyVCDB\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/!StudyVCNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 18,
                  "charOffset": 7072,
                  "charLength": 18,
                  "snippet": {
                    "text": "database.StudyVCDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 205,
                  "startColumn": 1,
                  "charOffset": 6977,
                  "charLength": 195,
                  "snippet": {
                    "text": "        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d0fd5e13aee61c62b2d4ee29a7fd97339835b9d12ffa9e787f6512452b7c1978"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead",
            "markdown": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 30,
                  "charOffset": 1909,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 1828,
                  "charLength": 220,
                  "snippet": {
                    "text": "                list_ten = []\n                i = 0\n                for entry in query:\n                    if not isinstance(entry.Date, datetime):\n                        entry.Date = datetime.fromisoformat(entry.Date)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0377beeb2ab99c6c3c473856f4d6700b82ab986e58227cced6a7b39ca452d769"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead",
            "markdown": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 26,
                  "charOffset": 5858,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 150,
                  "startColumn": 1,
                  "charOffset": 5789,
                  "charLength": 133,
                  "snippet": {
                    "text": "            list_ten = []\n            i = 0\n            for entry in query:\n\n                if not isinstance(entry.Date, datetime):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b4a1a9ce586a66dddfdee27ec05fa5b253cc79083ebdd2be717cc8de0140bc61"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[TutorBot_Sessions]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[TutorBot_Sessions\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 22,
                  "charOffset": 619,
                  "charLength": 26,
                  "snippet": {
                    "text": "database.TutorBot_Sessions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 527,
                  "charLength": 261,
                  "snippet": {
                    "text": "    async def tutorsession(self):\n        now = datetime.now(self.est)\n        for entry in database.TutorBot_Sessions:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.Date)\n            val = int((TutorSession - now).total_seconds())"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "755647e1ad1a8c4604de15082fd4f1b3000c6c7f042942daca15e5b869a9a72e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[TutorSession_GracePeriod]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[TutorSession_GracePeriod\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 22,
                  "charOffset": 4404,
                  "charLength": 33,
                  "snippet": {
                    "text": "database.TutorSession_GracePeriod"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 4300,
                  "charLength": 283,
                  "snippet": {
                    "text": "    async def tutorsession_graceperiod(self):\n        now = datetime.now(self.est)\n        for entry in database.TutorSession_GracePeriod:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.GP_DATE)\n            val = int((TutorSession - now).total_seconds())"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78a1b9dd7bcd0f0bf4a68d3bf8dfcdbfca7b338f4d744e10f2e71944cd0e5fe9"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[ResponseSpamBlacklist]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[ResponseSpamBlacklist\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 20,
                  "charOffset": 482,
                  "charLength": 30,
                  "snippet": {
                    "text": "database.ResponseSpamBlacklist"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 417,
                  "charLength": 131,
                  "snippet": {
                    "text": "def reload_blacklist():\n    blacklist.clear()\n    for user_id in database.ResponseSpamBlacklist:\n        blacklist.append(user_id)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "327162919dae5518763069217f9f1bb9fbebd06622b774af9121f92896b6cd7c"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[ResponseSpamBlacklist]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[ResponseSpamBlacklist\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 24,
                  "charOffset": 15584,
                  "charLength": 30,
                  "snippet": {
                    "text": "database.ResponseSpamBlacklist"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 408,
                  "startColumn": 1,
                  "charOffset": 15522,
                  "charLength": 132,
                  "snippet": {
                    "text": "\n    async def cog_load(self) -> None:\n        for user_id in database.ResponseSpamBlacklist:\n            blacklist.append(user_id)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee8735889cada60e99b0985e4f40c32e43f719e6090c44bc5d370ad75cd2a0e4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'bytes' (matched generic type 'AnyStr'), got 'memoryview' instead",
            "markdown": "Expected type 'bytes' (matched generic type 'AnyStr'), got 'memoryview' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 17,
                  "charOffset": 3685,
                  "charLength": 16,
                  "snippet": {
                    "text": "myIO.getbuffer()"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 3588,
                  "charLength": 190,
                  "snippet": {
                    "text": "    myIO.write(var)\n    with open(f\"transcript-{channel.name}.html\", \"wb\") as f:\n        f.write(myIO.getbuffer())\n\n    S3_upload_file(f\"transcript-{channel.name}.html\", \"ch-transcriptlogs\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f82ef209950e7997f12f0ea0886d1d06616db25933dd8c91c8930e3339c9282"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'Union[str, int]', got 'tuple[Any, Any, Any]' instead",
            "markdown": "Expected type 'Union\\[str, int\\]', got 'tuple\\[Any, Any, Any\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 12,
                  "charOffset": 8572,
                  "charLength": 25,
                  "snippet": {
                    "text": "name, CategoryID, OptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 271,
                  "startColumn": 1,
                  "charOffset": 8521,
                  "charLength": 78,
                  "snippet": {
                    "text": "        OptList = decodeOptList[value]\n\n    return name, CategoryID, OptList\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5f249cb11c24e1ea29b254cac440528ea9dc2baf4fa4ab4a4d38f38f7fab75d7"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[TicketInfo]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[TicketInfo\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1124,
                  "startColumn": 22,
                  "charOffset": 42107,
                  "charLength": 12,
                  "snippet": {
                    "text": "TicketInfoTB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1122,
                  "startColumn": 1,
                  "charOffset": 42007,
                  "charLength": 199,
                  "snippet": {
                    "text": "    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        for entry in TicketInfoTB:\n            try:\n                channel: discord.TextChannel = self.bot.get_channel("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "94db1eedecd8ad2bdf77c611407eb6cfa5770f49a99c0baf382ba5a286df5de4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        }
      ],
      "automationDetails": {
        "id": "project/qodana/2022-03-26",
        "guid": "bce6eb01-3c57-48ff-8d26-4030b52efc8d"
      },
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "properties": {
        "qodana.sanity.results": [
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No module named 'discord'",
              "markdown": "No module named 'discord'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/checks.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 14,
                    "startColumn": 8,
                    "charOffset": 282,
                    "charLength": 7,
                    "snippet": {
                      "text": "discord"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 12,
                    "startColumn": 1,
                    "charOffset": 264,
                    "charLength": 84,
                    "snippet": {
                      "text": "import re\n\nimport discord\nfrom discord.ext import commands\nfrom core import database"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "d2671282787af7182fbcb4f618267137637e38b9833cebf82e83f6573d60c1f1"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'discord'",
              "markdown": "Unresolved reference 'discord'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/checks.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 15,
                    "startColumn": 6,
                    "charOffset": 295,
                    "charLength": 7,
                    "snippet": {
                      "text": "discord"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 13,
                    "startColumn": 1,
                    "charOffset": 274,
                    "charLength": 105,
                    "snippet": {
                      "text": "\nimport discord\nfrom discord.ext import commands\nfrom core import database\nfrom core.common import MKT_ID"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "2caaf486d14115671071059527a05cd2fbc4de47f01c897fe57c344c7845f265"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'commands'",
              "markdown": "Unresolved reference 'commands'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/checks.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 15,
                    "startColumn": 25,
                    "charOffset": 314,
                    "charLength": 8,
                    "snippet": {
                      "text": "commands"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 13,
                    "startColumn": 1,
                    "charOffset": 274,
                    "charLength": 105,
                    "snippet": {
                      "text": "\nimport discord\nfrom discord.ext import commands\nfrom core import database\nfrom core.common import MKT_ID"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "de3af3ffe3243aee675492fa5b6855bc1650f237d6d79fd97095aeb9cca39827"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No module named 'boto3'",
              "markdown": "No module named 'boto3'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/common.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 17,
                    "startColumn": 8,
                    "charOffset": 312,
                    "charLength": 5,
                    "snippet": {
                      "text": "boto3"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 15,
                    "startColumn": 1,
                    "charOffset": 275,
                    "charLength": 86,
                    "snippet": {
                      "text": "from threading import Thread\n\nimport boto3\nimport chat_exporter\nimport configcatclient"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "01fc533301e56392a76871dc3427b6e3e264dd96bd2ee75f8de7b2c46d772046"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No module named 'chat_exporter'",
              "markdown": "No module named 'chat_exporter'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/common.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 18,
                    "startColumn": 8,
                    "charOffset": 325,
                    "charLength": 13,
                    "snippet": {
                      "text": "chat_exporter"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 16,
                    "startColumn": 1,
                    "charOffset": 304,
                    "charLength": 72,
                    "snippet": {
                      "text": "\nimport boto3\nimport chat_exporter\nimport configcatclient\nimport discord"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "fcd1cfe5e46947eaf2e7806c52d1e06beefe0aecefd08106ac46ffc1e7e5e165"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No module named 'configcatclient'",
              "markdown": "No module named 'configcatclient'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/common.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 19,
                    "startColumn": 8,
                    "charOffset": 346,
                    "charLength": 15,
                    "snippet": {
                      "text": "configcatclient"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 17,
                    "startColumn": 1,
                    "charOffset": 305,
                    "charLength": 87,
                    "snippet": {
                      "text": "import boto3\nimport chat_exporter\nimport configcatclient\nimport discord\nimport requests"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "809dd628d7c95223e6637c5a557e9a9533dd36e31625d2cc87a068147b3c5fc2"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No module named 'discord'",
              "markdown": "No module named 'discord'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/common.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 20,
                    "startColumn": 8,
                    "charOffset": 369,
                    "charLength": 7,
                    "snippet": {
                      "text": "discord"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 18,
                    "startColumn": 1,
                    "charOffset": 318,
                    "charLength": 92,
                    "snippet": {
                      "text": "import chat_exporter\nimport configcatclient\nimport discord\nimport requests\nimport sentry_sdk"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "11d7d50c47bc0d048f60ada47f31a178a134b8601ebd0325f11da38c58b5c000"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          }
        ],
        "deviceId": "200820300000000-e0d5-f6bb-7322-854909536002",
        "tags": [
          "qodana.sanity.results",
          "deviceId"
        ]
      }
    }
  ]
}